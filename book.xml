<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="fr">
<info>
<title>Node.js • Apprendre par la pratique</title>
<date>2019-04-07</date>
<author>
<personname>
<firstname>Thomas</firstname>
<surname>Parisot</surname>
</personname>
<email>nodebook@thomas.parisot.me</email>
</author>
<authorinitials>TP</authorinitials>




</info>
<preface>
<title></title>

</preface>
<chapter xml:id="avant_propos">
<title>Avant-propos</title>
<simpara><emphasis role="strong">Node.js</emphasis>&#160;– appelons-le <emphasis role="strong">Node</emphasis> dès à présent&#160;– est né dans le cerveau de
Ryan Dahl, ancien étudiant sans le sou et au parcours informatique atypique.
Son talent a été de s&#8217;obstiner à <emphasis role="strong">résoudre un problème d&#8217;expérience utilisateur</emphasis>
fréquent sur le web&#160;: <emphasis role="strong">l&#8217;attente devant un navigateur web figé</emphasis>.
Son but&#160;? Rendre possible et facile la création de <emphasis role="strong">barres de progression</emphasis>
dans les navigateurs&#160;web.</simpara>
<simpara>J&#8217;ai utilisé Node pour la première fois en 2010, par curiosité.
Nous en étions alors à la version&#160;0.4.
Créer mon propre serveur HTTP était un concept qui semblait étrange,
habitué que j&#8217;étais à écrire des applications PHP et à les mettre derrière
un serveur Apache&#160;– nginx commençait à peine à décoller.</simpara>
<simpara>L&#8217;effet "wahou" était pourtant là&#160;: une installation en quelques secondes,
quelques lignes de JavaScript et j&#8217;avais une API REST câblée avec une base
de données <emphasis>CouchDB</emphasis> pour impressionner mes collègues.</simpara>
<simpara>Je bascule dans un <emphasis role="strong">contexte startup</emphasis> fin 2011&#160;: nous sommes quatre développeurs
avec des bagages différents.
Nous voulions <emphasis role="strong">un langage commun</emphasis> pour le back-end et le front-end.
Nous partons sur Node, installé sans encombre sur notre serveur dédié
géré par l&#8217;hébergeur <emphasis>AlwaysData</emphasis>.
Nous avions la <emphasis role="strong">sensation de progresser rapidement</emphasis>.
Nous allions réellement&#160;vite.</simpara>
<simpara>Depuis, de nombreuses entreprises ont communiqué sur leur adoption de Node&#160;:
Paypal, LinkedIn, eBay, Airbnb, British&#160;Gas, Allociné, The&#160;New&#160;York&#160;Times,
Yahoo!, Microsoft, Mozilla, Flickr ou encore Twitter.
Ces entreprises l&#8217;utilisent pour façonner leur outillage métier,
gérer les transactions bancaires, leurs serveurs LDAP, des services ou
des sites&#160;web.</simpara>
<section xml:id="pourquoi_ce_livre">
<title>Pourquoi ce livre ?</title>
<simpara>Je trouve que <emphasis role="strong">Node est un environnement élégant et agréable</emphasis>.
Je prends beaucoup de plaisir à l&#8217;utiliser au quotidien, mais je regrette
l&#8217;accent placé sur la nouveauté permanente et la sur-ingénierie des articles
et ouvrages en langue française.</simpara>
<simpara>Node est mon outil de travail principal depuis 2011 et je fais quasiment tout avec
– y compris l&#8217;outillage de publication de cet ouvrage.
J&#8217;avais envie de communiquer sur la simplicité, l&#8217;architecture modulaire et
la versatilité de Node pour que vous puissiez <emphasis role="strong">progresser dans l&#8217;usage de JavaScript</emphasis>,
<emphasis role="strong">façonner votre propre outillage</emphasis> et pour mieux
<emphasis role="strong">utiliser les ressources des systèmes d&#8217;exploitation</emphasis>.</simpara>
<simpara>Je vous propose donc un <emphasis role="strong">contenu moins technique que d&#8217;ordinaire</emphasis>, orienté sur
l&#8217;apprentissage par la pratique et des concepts qui durent dans le temps.
Cet ouvrage s&#8217;installe avec Node&#160;: tous les exemples sont réels et fonctionnent
dans votre terminal.</simpara>
<simpara>Indirectement, je souhaite <emphasis role="strong">déconstruire la posture d&#8217;expert et de lecteur</emphasis>
en me mettant à vos côtés pendant votre apprentissage.
Une partie des contenus a été conçue et relue en ateliers collectifs pour que
la progression se fasse de manière naturelle.</simpara>
</section>
<section xml:id="à_qui_sadresse_cet_ouvrage">
<title>À qui s&#8217;adresse cet ouvrage ?</title>
<simpara>J&#8217;ai écrit cet ouvrage avec trois profils de lecteurs en tête&#160;:
des personnes qui souhaitent <emphasis role="strong">se mettre à Node sans savoir par où commencer</emphasis>,
celles et ceux qui font du <emphasis role="strong"><emphasis>front-end</emphasis> et souhaitent mieux comprendre leur outillage</emphasis>
et celles qui veulent <emphasis role="strong">renforcer leurs connaissances</emphasis> en Node et
JavaScript afin de changer de travail/métier.</simpara>
<simpara>Cet ouvrage s&#8217;adresse aussi à des lecteurs qui ne programment pas pour gagner leur
vie mais qui veulent mieux comprendre de quoi parlent les développeurs et développeuses.
Je pense que les interactions de travail sont de meilleure qualité quand nous
comprenons les problématiques de celles et ceux avec qui nous travaillons.</simpara>
</section>
<section xml:id="structure_de_louvrage">
<title>Structure de l&#8217;ouvrage</title>
<simpara>Cet ouvrage se lit dans l&#8217;ordre de votre choix.</simpara>
<simpara>J&#8217;ai fait en sorte que la lecture soit progressive, du plus simple au plus complexe.
Le contenu des chapitres explore une problématique et se termine
souvent sur une section avancée, pour aller plus&#160;loin.</simpara>
<simpara>Cette édition est composée de neuf chapitres et d&#8217;une annexe&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">Histoire, écosystème et gouvernance</emphasis><?asciidoc-br?>
D&#8217;où vient Node et qui sont les acteurs participant à son histoire&#160;?</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Installer, mettre à jour et développer</emphasis><?asciidoc-br?>
Être autonome pour installer Node.js
sur notre ordinateur ou un serveur, se tenir au courant
des mises à jour et jongler entre différentes versions.
Découvrir des outils confortables pour écrire du&#160;code.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Jouer avec JavaScript</emphasis><?asciidoc-br?>
Comprendre les différences entre JavaScript, ECMAScript, le DOM et Node.js.
Revoir les bases du langage pour se sentir plus à l&#8217;aise.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Jouer avec Node.js</emphasis><?asciidoc-br?>
S&#8217;exercer avec des scripts et des modules Node.js&#160;:
les nôtres, ceux fournis par Node et ceux de la communauté.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Jouer avec npm</emphasis><?asciidoc-br?>
Apprendre à tirer parti de l&#8217;outil livré par défaut avec Node.js.
S&#8217;amuser à créer nos propres outils dignes d&#8217;artisans du logiciel.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Déployer notre code</emphasis><?asciidoc-br?>
Déployer notre code le plus tôt possible pour célébrer notre premier programme&#160;!</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Créer une application web</emphasis><?asciidoc-br?>
Créer une application web en partant de zéro, en utilisant un framework puis
en parlant à une base de données.
Bienvenue dans l&#8217;odyssée d&#8217;une requête&#160;HTTP&#160;!</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Créer un outil en ligne de commande</emphasis><?asciidoc-br?>
Rendre du code métier fonctionnel dans un terminal&#160;;
la ligne de commande ne paraîtra plus aussi austère.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Créer une application <emphasis>front-end</emphasis></emphasis><?asciidoc-br?>
Utiliser la richesse de l&#8217;écosystème&#160;npm et profiter des modules pour écrire des
applications <emphasis>front-end</emphasis> de qualité.</simpara>
</listitem>
</orderedlist>
<simpara>L&#8217;annexe complète l&#8217;ouvrage avec une <emphasis role="strong">sélection de modules</emphasis>&#160;npm,
pour démarrer plus vite et mieux cerner ce qu&#8217;on peut faire avec&#160;Node.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Ressources</phrase> Contenu en <phrase role="line-through">livre</phrase> libre accès</title>
<simpara>Le contenu de cet ouvrage est actualisé en permanence sur <phrase role="URL"><link xl:href="https://oncletom.io/node.js/">oncletom.io/node.js/</link></phrase>.</simpara>
<simpara>L&#8217;intégralité du code source du livre et des exemples sont hébergés sur
<phrase role="URL"><link xl:href="https://github.com/oncletom/nodebook">github.com/oncletom/nodebook</link></phrase>.
J&#8217;utilise la plate-forme collaborative GitHub pour recueillir vos avis,
corrections et suggestions.</simpara>
</tip>
</section>
<section xml:id="remerciements">
<title>Remerciements</title>
<simpara>Cet ouvrage a été rédigé sur près de quatre années&#160;– longue est la liste
des personnes à remercier.
Longue aussi est la liste de celles et ceux à qui je demande pardon pour mes
sautes d&#8217;humeur, mes absences ou mes passages à vide.
L&#8217;écriture sur une longue durée est une activité que je trouve éprouvante.
Elle nécessite un ajustement permanent vis-à-vis de moi-même pour ne pas
(trop) en souffrir.</simpara>
<simpara>Mes premiers remerciements vont à Noémie.
Ta joie, tes encouragements et ta présence sont essentiels à mon équilibre.
Ils m&#8217;emplissent de confiance, m&#8217;inspirent et atténuent les peurs qui me paralysent.</simpara>
<simpara>Je remercie Karine, Laurène, Elsa et Alexandre des Éditions Eyrolles pour cette opportunité.
Vous avez fait preuve d&#8217;une patience et d&#8217;une confiance infinies malgré le délai d&#8217;écriture.</simpara>
<simpara>Je tiens à remercier mes anciens collègues de BBC&#160;R&amp;D pour leur soutien,
leur confiance et leur tolérance aux jeux de mots.
Olivier, Sean, Katie, Chris&#160;N et Chris&#160;L&#160;: c&#8217;était un plaisir et un honneur
d&#8217;être à vos&#160;côtés.</simpara>
<simpara>Certain·e·s d&#8217;entre vous m&#8217;ont beaucoup aidé par leurs conseils,
leurs relectures et leurs encouragements.
Alors un grand merci pour cela à Béa, Claire, Clémentine, David, Efi, Fabien,
Frank, Philippe, Stéphane et Thierry.</simpara>
<simpara>Merci à l&#8217;équipe d&#8217;Asciidoctor pour leur travail précieux et leurs réponses à
mes innombrables questions.
Je pense notamment à Guillaume et à&#160;Dan.</simpara>
<simpara>Merci à Antoine pour notre travail en duo sur l&#8217;écriture numérique.
Je suis fier d&#8217;apporter ce mode d&#8217;écriture dans les communautés académiques,
du design et des archivistes.</simpara>
<simpara>Enfin, je remercie toutes les personnes qui m&#8217;ont accueilli chez elles,
dans leur maison, dans leur bureau ou dans leur communauté/<emphasis>meet-up</emphasis> pendant mon
écriture itinérante en&#160;2017 et&#160;2018.</simpara>
<simpara>Bonne lecture,</simpara>
<simpara>Thomas</simpara>
</section>
</chapter>
<chapter xml:id="histoire_écosystème_et_gouvernance">
<title>Histoire, écosystème et gouvernance</title>
<simpara>Faisons le point sur ce qu&#8217;est Node pour mieux comprendre les discussions qui
animent la communauté et d&#8217;où vient cette plate-forme qui fait tant parler d&#8217;elle.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Bref historique</simpara>
</listitem>
<listitem>
<simpara>Les raisons du succès</simpara>
</listitem>
<listitem>
<simpara>Pourquoi éviter Node</simpara>
</listitem>
<listitem>
<simpara>Pourquoi choisir Node</simpara>
</listitem>
<listitem>
<simpara>L&#8217;écosystème des acteurs</simpara>
</listitem>
<listitem>
<simpara>Gouvernance du projet</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Node.js est-il un langage de programmation&#160;?
Node.js est-il un framework JavaScript&#160;?
Qu&#8217;en restera-t-il une fois la frénésie retombée&#160;?</simpara>
<simpara>Ce chapitre permet de <emphasis role="strong">comprendre pourquoi Node a émergé</emphasis> et comment.
Surtout, il vous permettra de comprendre les choix techniques
à l&#8217;origine des fondations de Node et ce que l&#8217;utiliser
peut vous apporter, que ce soit dans un contexte personnel ou professionnel.</simpara>
</abstract>
<section xml:id="node_js_un_environnement_dexécution_javascript">
<title>Node.js : un environnement d&#8217;exécution JavaScript</title>
<simpara>Node.js n&#8217;est pas un langage de programmation.
Ce n&#8217;est pas non plus un framework JavaScript.
<emphasis role="strong">Node.js est un environnement d&#8217;exécution JavaScript</emphasis>.</simpara>
<simpara>La différence entre ces trois désignations peut sembler subtile, futile voire
inutile, mais le terme "environnement" est la véritable nature de Node.</simpara>
<simpara>Exécuter du JavaScript côté serveur n&#8217;est pas une révolution.
<indexterm><primary>Netscape Enterprise Server</primary></indexterm>Netscape Enterprise Server s&#8217;y est déjà essayé au milieu des années 1990,
juste après son introduction dans le navigateur web Netscape Navigator.</simpara>
<simpara>En 1997, la société Netscape s&#8217;est attelée à créer Rhino
(<phrase role="URL"><link xl:href="https://www.mozilla.org/rhino/">www.mozilla.org/rhino/</link></phrase>), un environnement d&#8217;exécution JavaScript
tournant sous Java disponible sous licence libre.
C&#8217;était un des projets liés à la réécriture de Netscape Navigator en Java.
Si la société a depuis fermé ses portes, <emphasis>Rhino</emphasis> a entraîné l&#8217;émergence de projets
utiles aux développeurs&#160;web.</simpara>
<simpara>Entre-temps, le langage JavaScript évolue, le Web&#160;2.0 émerge des cendres de la
première bulle Internet et d&#8217;autres initiatives voient le jour dans les années 2000
comme APE (<emphasis>Ajax Push Engine</emphasis>, <phrase role="URL"><link xl:href="http://ape-project.org/">ape-project.org/</link></phrase>).
Elles mettent également en œuvre JavaScript côté serveur.
JavaScript était surtout un choix logique de partage de code entre client et
serveur pour Comet, le précurseur des <link xl:href="../chapter-09/index.xml#websockets">WebSockets</link>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Glossaire</phrase> <indexterm><primary>Comet</primary></indexterm>Comet</title>
<simpara>Comet est un terme regroupant les différentes tentatives techniques permettant
à un serveur web d&#8217;envoyer des données à un client sans que celui-ci ne les ait
demandées initialement.</simpara>
<simpara>Parmi ces techniques, on retrouve le <emphasis>long polling</emphasis>, consistant à conserver une
connexion Ajax ouverte pendant la durée de vie d&#8217;une page web.</simpara>
</tip>
<tip>
<title><phrase role="RemarquePreTitre">Glossaire</phrase> <indexterm><primary>WebSockets</primary></indexterm>WebSockets</title>
<simpara>WebSockets est un protocole basé sur&#160;TCP.</simpara>
<simpara>Il maintient une connexion HTTP active entre un client et un serveur et y fait
transiter les données de manière bidirectionnelle.</simpara>
<simpara>Ce protocole sera probablement rendu obsolète par HTTP/2, le successeur de HTTP/1.1.
HTTP/2 a été lancé par Google sous le nom de protocole SPDY (prononcer <emphasis>speedy</emphasis>).</simpara>
</tip>
<tip>
<title>Cas d&#8217;utilisation modernes de Rhino</title>
<simpara>Rhino est toujours utile dès qu&#8217;un projet Java implique du JavaScript.</simpara>
<simpara>Google l&#8217;utilise comme environnement d&#8217;exécution de ses <link xl:href="https://gsuite-developers.googleblog.com/2012/11/using-open-source-libraries-in-apps.html">Apps Scripts</link>.
Ces scripts sont destinés à développer des extensions et des interactions
supplémentaires pour les documents Google&#160;Drive.</simpara>
<simpara>Rhino est également employé dans YUI Compressor (<phrase role="URL"><link xl:href="https://yui.github.io/yuicompressor/">yui.github.io/yuicompressor/</link></phrase>),
un optimiseur CSS et JavaScript créé par Yahoo,
désormais surpassé par Closure Compiler (<phrase role="URL"><link xl:href="https://developers.google.com/closure/compiler/">developers.google.com/closure/compiler/</link></phrase>)
et UglifyJS (<phrase role="URL"><link xl:href="https://npmjs.com/uglify-js">npmjs.com/uglify-js</link></phrase>).
Ce dernier est écrit en JavaScript et repose sur Node.
La boucle est bouclée.</simpara>
</tip>
<simpara>Node représente un <emphasis role="strong">environnement d&#8217;exécution</emphasis> (<emphasis>runtime</emphasis>), un
<emphasis role="strong">ensemble d&#8217;API JavaScript</emphasis> ainsi qu&#8217;une <emphasis role="strong">machine virtuelle&#160;(VM) JavaScript</emphasis>
performante (parseur, interpréteur et compilateur) capable d&#8217;accéder à des ressources
système telles que des fichiers (<emphasis>filesystem</emphasis>) ou des connexions réseau (<emphasis>sockets</emphasis>).
<indexterm>
<primary>Node.js</primary><secondary>runtime</secondary>
</indexterm>
<indexterm>
<primary>runtime</primary>
</indexterm></simpara>
<simpara>Typiquement, une personne développant en Node écrit du code se basant sur les
API à disposition.
Ce code est lu par le <emphasis>runtime</emphasis> Node, qui le transmet à la&#160;VM JavaScript.
Enfin, cette dernière traduit le programme en langage machine (<emphasis>bytecode</emphasis>)
avant que le programme soit effectivement exécuté par le processeur.</simpara>
<simpara>Pour comprendre comment Node a opté pour cette approche, retournons en 2009,
lorsque son créateur Ryan&#160;Dahl cherche à résoudre élégamment un problème de
performance de programmation.</simpara>
</section>
<section xml:id="bref_historique">
<title>Bref historique</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>historique</secondary>
</indexterm>
<indexterm>
<primary>historique</primary>
</indexterm>
<indexterm>
<primary>Ryan Dahl</primary>
</indexterm></simpara>
<simpara>En 2006, Ryan&#160;Dahl est un étudiant américain en troisième année de doctorat
de mathématiques.
Son but initial était de devenir professeur dans cette matière, mais il prend la
décision de ne pas terminer sa thèse et d&#8217;entreprendre un voyage au&#160;Chili.</simpara>
<simpara>Alors qu&#8217;il cherche à effectuer des petits boulots, il y rencontre une autre
personne développant des sites web.
Ruby&#160;on&#160;Rails connaît un succès grandissant et attire son attention.
Alors que Ryan envisage d&#8217;utiliser Rails, il découvre avec horreur la lenteur
du framework et cherche à en découvrir les causes.</simpara>
<simpara>Ryan débute alors sa quête des applications web performantes et découvre
Mongrel, un serveur HTTP écrit en Ruby.
Il est séduit par deux choses&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>la possibilité d&#8217;inclure un serveur HTTP comme bibliothèque applicative&#160;;</simpara>
</listitem>
<listitem>
<simpara>la simplicité de fonctionnement&#160;: recevoir une requête HTTP et
décider soi-même de la réponse à apporter.</simpara>
</listitem>
</itemizedlist>
<simpara>La quête initiale le dirige alors vers la possibilité de <emphasis role="strong">créer un serveur web non bloquant</emphasis>&#160;;
en d&#8217;autres termes, un serveur capable, dans un même processus, de traiter d&#8217;autres
requêtes en attendant de renvoyer la réponse initiale.</simpara>
<simpara>Nous sommes alors en 2008 et le site de partage de photos Flickr innove avec un
nouveau système de téléversement d&#8217;images&#160;: une <emphasis role="strong">barre de progression</emphasis> représentant
le statut du téléversement remplace alors la page figée&#160;– effet  inhérent à l&#8217;envoi
de fichiers depuis un formulaire&#160;HTML.</simpara>
<figure>
<title>Interface du service Flickr après et avant l&#8217;introduction du téléversement progressif</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/7112862941_3b8c8e9916_o_d.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>7112862941 3b8c8e9916 o d</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Annonce du nouveau Flickr Uploadr</title>
<simpara>L&#8217;équipe d&#8217;ingénierie de Flickr explique dans un article (<phrase role="URL"><link xl:href="https://wp.me/p2DMyG-ok">wp.me/p2DMyG-ok</link></phrase>)
comment elle a contourné le problème  de l&#8217;upload via un formulaire classique.
Ce problème gelait la fenêtre du navigateur pendant la durée du téléversement.</simpara>
</tip>
<simpara>C&#8217;est le déclic pour Ryan&#160;: bien que Mongrel ait déjà un plug-in pour cette fonctionnalité,
il souhaite simplifier davantage le travail pour les développeurs.
Il reproduit le mécanisme avec succès en&#160;C.
Les développeurs web jugeant la solution trop complexe, Ryan tente la même
approche avec d&#8217;autres langages, comme Python, Lua ou même Haskell.
Il se heurte au sempiternel problème des ressources bloquantes des différents interpréteurs.</simpara>
<simpara>Le deuxième déclic se produit en janvier 2009,
lorsque JavaScript émerge dans une discussion entre développeurs.
<emphasis>Eurêka</emphasis>&#160;!
La machine virtuelle JavaScript&#160;V8 de Google a été libérée en open source
depuis quelques mois et Apple, Microsoft, Mozilla et Google se livrent à une
course à la performance de leurs machines virtuelles respectives.
En ligne de mire, il faut rendre la navigation sur mobile et sur ordinateur plus
rapide et moins gourmande en ressources.</simpara>
<simpara>Ryan admet que JavaScript dispose des caractéristiques idéales, même s&#8217;il n&#8217;est
pas un adepte du langage&#160;: fonctions anonymes, <emphasis>closures</emphasis> et l'<emphasis>event loop</emphasis>
(dans le DOM en tout cas).
Il manque juste aux machines virtuelles JavaScript la capacité d&#8217;accéder à des
<emphasis>sockets</emphasis>, au système de fichiers et à d&#8217;autres fonctions système.</simpara>
<simpara>Ryan quitte alors son travail, s&#8217;inspire de ses travaux de modules non bloquants
pour Nginx et s&#8217;affaire pendant six mois à marier JavaScript, V8 et l&#8217;environnement
du système d&#8217;exploitation.
De ses efforts naît Node.js.</simpara>
<simpara>Il présente alors officiellement son travail (<phrase role="URL"><link xl:href="https://gist.github.com/ry/a3d0bbbff196af633995">gist.github.com/ry/a3d0bbbff196af633995</link></phrase>
et <phrase role="URL"><link xl:href="https://www.youtube.com/watch?v=ztspvPYybIY">www.youtube.com/watch?v=ztspvPYybIY</link></phrase>) qui suscite l&#8217;enthousiasme
et attire l&#8217;attention.</simpara>
<simpara>L&#8217;entreprise américaine <indexterm><primary>Joyent</primary></indexterm>Joyent l&#8217;embauche à plein temps pour continuer le développement de Node.
Ils pressentent que cet outil répondra à leurs projets de <emphasis>datacenter</emphasis> et d&#8217;hébergement.
<emphasis role="strong">Node et sa communauté se constituent</emphasis> et continuent leur chemin depuis lors&#160;;
pour une simple affaire de barre de progression et une obsession pour la
perception de rapidité.</simpara>
<simpara>En 2018, l&#8217;avenir de Node est au beau fixe avec plus de 2&#160;000
contributeurs et plus de 782&#160;000 modules publics hébergés sur
le registre&#160;<literal>npm</literal>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Vidéo</phrase> <emphasis>History of Node.js</emphasis></title>
<simpara>La vidéo <phrase role="URL"><link xl:href="https://youtube.com/watch?v=SAc0vQCC6UQ">youtube.com/watch?v=SAc0vQCC6UQ</link></phrase> est une présentation
donnée par Ryan&#160;Dahl, le créateur de Node, au cours de l&#8217;année 2011.
C&#8217;est la première fois qu&#8217;il intervient pour expliquer son parcours et la
genèse du projet.</simpara>
<simpara>Voilà peut-être un élément qui figurera dans les livres d&#8217;histoire&#160;!</simpara>
</tip>
</section>
<section xml:id="les_raisons_du_succès">
<title>Les raisons du succès</title>
<simpara>La tension et l&#8217;attention autour de JavaScript sont énormes en 2009.
La mode du tout Ajax et des <emphasis>mashups</emphasis> s&#8217;est estompée, mais une chose en est
ressortie&#160;: JavaScript n&#8217;a plus à rougir ni à être relégué au rang de sous-langage.
Les initiatives JSLint, CommonJS et les <emphasis>good&#160;parts</emphasis> de
Douglas&#160;Crockford sont pour beaucoup dans la création de code élégant.</simpara>
<simpara>D&#8217;un autre côté, les entreprises développant des navigateurs web se livrent à
une féroce compétition d&#8217;optimisation.
Google, Mozilla et Apple ont besoin de navigateurs rapides pour améliorer leurs
parts de marché sur les ordinateurs, mais aussi les téléphones et tablettes.
On peut considérer que JavaScript est à cette époque le langage de programmation
bénéficiant du plus grand investissement financier et humain en&#160;R&amp;D.</simpara>
<simpara>La communauté JavaScript accueille avec ferveur Node lors
de la conférence JSConf Europe en&#160;2009.
Elle contribue à son amélioration et à la création d&#8217;un écosystème
de modules réutilisables.</simpara>
<simpara>Il faudra attendre la création de <indexterm><primary><literal>npm</literal></primary></indexterm><literal>npm</literal> au tout début 2010,
qui a pour but d&#8217;héberger des modules Node et de faciliter
leur installation.
Dès lors, une simple commande suffit pour inclure dans nos projets du
code écrit par d&#8217;autres personnes.</simpara>
<simpara><literal>npm</literal> devient une pierre angulaire, à tel point qu&#8217;il est inclus dans
l&#8217;installation de Node à partir de la version&#160;0.6.3 en novembre&#160;2011.
La communauté Node fait le reste du travail
en constituant un <emphasis role="strong">écosystème de modules riches et variés</emphasis>&#160;:
frameworks web, pilotes de bases de données,
serveurs HTTP, serveurs WebSockets, préprocesseurs CSS,
CoffeeScript, parseurs, proxy, serveurs de log, modules de tests,
langages de <emphasis>templating</emphasis>,&#160;etc.</simpara>
<simpara>Malgré ses défauts de jeunesse, Node réussit le tour
de force de la performance.
La recette de l&#8217;accès non-bloquant a-t-elle fonctionné&#160;?
À en croire les personnes ayant migré vers Node pour ces raisons,
la réponse est "oui".</simpara>
</section>
<section xml:id="avoiding-node">
<title>Pourquoi éviter Node.js ?</title>
<simpara>Il est tentant de vouloir suivre un chemin populaire,
d&#8217;adopter le dernier outil ou framework à la&#160;mode.</simpara>
<simpara>J&#8217;ai pourtant envie d&#8217;écrire qu&#8217;il n&#8217;est pas forcément nécessaire
de passer à&#160;Node.</simpara>
<simpara>Si votre équipe dispose déjà de fortes compétences,
d&#8217;aisance et de productivité dans un autre langage,
il n&#8217;y a pas de raison de passer à Node.
Cette équipe a tout intérêt à capitaliser sur ses
connaissances pour être efficace et minimiser la dette technique
de ses applications.</simpara>
<simpara>L'<emphasis role="strong">offre logicielle est également à prendre en compte</emphasis>&#160;: CMS,
systèmes e-commerce ou autre application prête à l&#8217;emploi
que la communauté Node n&#8217;offrirait pas à ce&#160;jour.</simpara>
<simpara>Un facteur important et souvent oublié est
<emphasis role="strong">l&#8217;acceptation et la compréhension de l&#8217;utilisation de Node</emphasis> par une équipe.
Il est alors plus intéressant de comprendre les raisons
d&#8217;un blocage que de forcer ou d&#8217;imposer cet outil.
La solution peut être simple&#160;: balayer des idées reçues,
animer un atelier technique ou inviter un·e expert·e
pour répondre aux questions, interrogations et utilité d&#8217;un tel changement.</simpara>
<simpara>Node ne vous aidera probablement pas si vous cherchez
à <emphasis role="strong">réaliser des choses contre-productives pour JavaScript</emphasis>.
Je pense à des opérations mathématiques de très haute précision,
de l&#8217;apprentissage automatique avancé (<emphasis>machine learning</emphasis>) ou
du calcul scientifique poussé par exemple.
Il est difficile d&#8217;égaler la richesse fonctionnelle de Python
et de ses bibliothèques (SciPy, NumPy, scikit-learn)
ou la finesse de gestion de mémoire de&#160;C&#43;&#43; ou de&#160;Rust.</simpara>
<simpara><emphasis role="strong">Node ne résout pas les problèmes par magie</emphasis>.
Cela reste avant tout une affaire de compétences et d&#8217;expérience.</simpara>
</section>
<section xml:id="pourquoi_choisir_node_js">
<title>Pourquoi choisir Node.js ?</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>pourquoi l&#8217;utiliser&#160;?</secondary>
</indexterm>
<indexterm>
<primary>pourquoi l&#8217;utiliser&#160;?</primary>
</indexterm></simpara>
<simpara>Node est un choix de langage principal tout à fait viable.</simpara>
<simpara>Il est préférable que ce choix soit une <emphasis role="strong">volonté partagée</emphasis> entre membres d&#8217;une équipe,
qu&#8217;il soit motivé par ce que Node apporte et simplifie pour&#160;vous.</simpara>
<simpara>Node est tout désigné pour créer des <emphasis role="strong">applications à nombreuses actions concurrentes</emphasis>&#160;;
autrement dit, dès qu&#8217;une application ou programme fait appel à des accès réseau,
aux fichiers ou au système.</simpara>
<simpara>Node est également adapté pour <emphasis role="strong">transformer des flux importants de données</emphasis>
en économisant la mémoire.
Cela concerne aussi bien la lecture de fichiers CSV, JSON ou XML de plusieurs gigaoctets.</simpara>
<simpara>Le mécanisme de modules de Node encourage à respecter le <emphasis>principe de responsabilité unique</emphasis>.
Nos applications seront <emphasis role="strong">modulaires et autonomes</emphasis> au lieu d&#8217;être lourdes et monolithiques.</simpara>
<simpara>Les développeurs et développeuses verront dans Node leur
<emphasis role="strong">compagnon idéal pour compiler, générer, assembler et minifier</emphasis> leurs applications <emphasis>front-end</emphasis>.
Le bénéfice évident est le partage d&#8217;un outillage CSS, JavaScript et HTML
entre équipes, par projet.</simpara>
<simpara>Conséquence directe, Node offre l&#8217;opportunité d'<emphasis role="strong">unifier vos équipes de développement <emphasis>front-end</emphasis> et <emphasis>back-end</emphasis></emphasis>.
Il devient un environnement commun, un langage partagé entre les individus,
qui peuvent se focaliser sur des fonctionnalités quelle que soit la cible,
aussi bien pour le Web, un serveur ou une&#160;API.</simpara>
<simpara>Node est un environnement adapté à <emphasis role="strong">l&#8217;apprentissage et l&#8217;amélioration de nos connaissances en JavaScript</emphasis>.
On peut désormais penser sur du long terme, en se souciant moins de devoir supporter de vieilles versions de Node ou de navigateurs web tant il est facile de passer d&#8217;une version du langage à une autre.</simpara>
</section>
<section xml:id="lécosystème_des_acteurs">
<title>L&#8217;écosystème des acteurs</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>écosystème</secondary>
</indexterm>
<indexterm>
<primary>écosystème</primary>
</indexterm></simpara>
<simpara>Les développements initiaux de Node sont en majorité financés par Joyent,
à commencer par l&#8217;embauche de Ryan&#160;Dahl.</simpara>
<simpara>L&#8217;écosystème des acteurs se diversifie avec le temps.
Avec de nouveaux employés chez Joyent, puis avec des contributeurs externes
qui voient un avenir prometteur dans le projet.
S&#8217;ensuivent des entreprises privées comme IBM ou PayPal, qui sponsorisent le
projet ou le salaire de contributeurs.</simpara>
<section xml:id="joyentjoyent">
<title><indexterm><primary>Joyent</primary></indexterm>Joyent</title>
<simpara>Joyent est une entreprise américaine fondée en&#160;2004.
Elle propose à l&#8217;origine des services de collaborations
en ligne&#160;: documents, calendriers, courriels,&#160;etc.</simpara>
<simpara>Elle se lance sur le marché de l&#8217;hébergement fin&#160;2005
par le biais d&#8217;une acquisition-fusion.
Parmi ses clients, on dénombre le site de Ruby&#160;on&#160;Rails
(société Basecamp), WordPress.com (société Automattic) ou
encore le site historique A&#160;List&#160;Apart (<phrase role="URL"><link xl:href="https://alistapart.com">alistapart.com</link></phrase>).</simpara>
<simpara>En&#160;2009, Joyent se spécialise dans les infrastructures et
plates-formes à la demande et à haute performance.
L&#8217;entreprise se concentre sur des solutions dites temps réel
pour les réseaux sociaux, applications mobiles et compagnies
de jeux vidéo en ligne.</simpara>
<simpara>En avril&#160;2011, Joyent dépose la marque <emphasis>Node.js</emphasis> ainsi que son&#160;logo.</simpara>
<figure>
<title>Logo officiel de Node.js</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/nodejs-new-pantone-black.png" contentwidth="40%"/>
</imageobject>
<textobject><phrase>nodejs new pantone black</phrase></textobject>
</mediaobject>
</figure>
<simpara>En février&#160;2015, Joyent transfère la gestion de Node à la
<link linkend="node-foundation">Node.js&#160;Foundation</link>, mais reste propriétaire de
la marque et de son&#160;logo.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Annonce du dépôt de marque</title>
<simpara>Ryan&#160;Dahl, alors développeur actif de Node, annonce le dépôt de marque par
l&#8217;entreprise Joyent sur le blog officiel du projet
(<phrase role="URL"><link xl:href="https://nodejs.org/en/blog/uncategorized/trademark/">nodejs.org/en/blog/uncategorized/trademark/</link></phrase>).</simpara>
</tip>
</section>
<section xml:id="npmnpm">
<title><indexterm><primary>npm</primary></indexterm>npm</title>
<simpara><emphasis>npm</emphasis> est une dénomination qui abrite plusieurs concepts&#160;: un outil en ligne
de commandes, un registre de modules ainsi qu&#8217;une entreprise privée à but lucratif
(<xref linkend="npm-inc"/>).</simpara>
<simpara>À l&#8217;origine, c&#8217;est un module Node créé par Isaac&#160;Schlueter,
qui sert à installer des modules tiers et à les lier sous forme d&#8217;un
arbre de dépendances.
Il est l’équivalent de RubyGems (<phrase role="URL"><link xl:href="https://rubygems.org">rubygems.org</link></phrase>) pour Ruby, de
CPAN (<phrase role="URL"><link xl:href="http://www.cpan.org">www.cpan.org</link></phrase>) pour Perl ou encore de PyPI
(<phrase role="URL"><link xl:href="https://pypi.python.org/pypi">pypi.python.org/pypi</link></phrase>) pour Python.</simpara>
<simpara>Nous reviendrons plus en détail sur son utilisation dans le
<link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>.</simpara>
<simpara><literal>npm</literal> désigne également le registre principal qui héberge les modules des
communautés Node&#160;: <phrase role="URL"><link xl:href="https://npmjs.com">npmjs.com</link></phrase>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Annonce de l&#8217;inclusion de <emphasis>npm</emphasis> dans Node</title>
<simpara><literal>npm</literal> est installé par défaut avec Node depuis la version&#160;0.6.3,
sortie en novembre&#160;2011.
Vous retrouverez son annonce sur <phrase role="URL"><link xl:href="https://nodejs.org/en/blog/release/v0.6.3/">nodejs.org/en/blog/release/v0.6.3/</link></phrase>.</simpara>
<simpara>Auparavant, il fallait l&#8217;installer séparément.</simpara>
</tip>
</section>
<section xml:id="npm-inc">
<title>npm,&#160;Inc.</title>
<simpara><indexterm>
<primary>npm</primary><secondary>npm, Inc.</secondary>
</indexterm>
<indexterm>
<primary>npm, Inc.</primary>
</indexterm></simpara>
<simpara>Isaac&#160;Schlueter est embauché par Joyent en septembre&#160;2010.
Il succède à Ryan&#160;Dahl dans la gestion du projet Node de
janvier&#160;2012 jusqu&#8217;à janvier&#160;2014, date à laquelle il quitte Joyent
pour fonder npm,&#160;Inc.
Cette entreprise a pour but de fournir des solutions professionnelles basées
sur <literal>npm</literal> et soutient en parallèle l&#8217;effort open source
et les coûts d’infrastructure du registre.</simpara>
<simpara>Elle lève 2,6&#160;millions de dollars en février&#160;2014 pour élaborer
une nouvelle architecture du registre <literal>npm</literal>.
Ce financement a également pour vocation la mise en place d&#8217;une stratégie
commerciale basée sur les modules privés et les solutions professionnelles.</simpara>
<simpara>La société npm,&#160;Inc détient les marques npm, npm,&#160;Inc ainsi que
le logo npm.</simpara>
<figure>
<title>Logo officiel de npm,&#160;Inc</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/logo-npm.png" contentwidth="40%"/>
</imageobject>
<textobject><phrase>logo npm</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="iojs">
<title><indexterm><primary>io.js</primary></indexterm>io.js</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>le fork io.js</secondary>
</indexterm>
<indexterm>
<primary>le fork io.js</primary>
</indexterm></simpara>
<simpara><emphasis>io.js</emphasis> est un <emphasis>fork</emphasis> de Node initié par la communauté en décembre&#160;2014
en raison de la main-mise de Joyent sur les développements et de la communication
erratique sur le projet.</simpara>
<simpara>Les objectifs initiaux du projet io.js sont doubles&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>offrir à la communauté Node une gestion transparente, inclusive et ouverte&#160;;</simpara>
</listitem>
<listitem>
<simpara>fournir un environnement technique plus moderne, une version de&#160;V8
plus récente, ainsi qu&#8217;une intégration rapide des nouvelles fonctionnalités ECMAScript.</simpara>
</listitem>
</itemizedlist>
<simpara>Le projet io.js connaît une fin heureuse en&#160;2015&#160;:
les efforts du projet et de sa communauté auront abouti à
la création de la <link linkend="node-foundation">Node.js Foundation</link> et
du Node.js Advisory Board, respectivement l&#8217;organe
de gestion du projet et le groupe d&#8217;individus qui en a la charge.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Clap de&#160;fin</title>
<simpara>L&#8217;annonce de la sortie de Node&#160;v4 et de la création de la Node.js Foundation
est consultable à l&#8217;adresse suivante&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/en/blog/announcements/foundation-v4-announce/">nodejs.org/en/blog/announcements/foundation-v4-announce/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="node-foundation">
<title><indexterm><primary>Node.js Foundation</primary></indexterm>Node.js Foundation</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>la Fondation</secondary>
</indexterm>
<indexterm>
<primary>la Fondation</primary>
</indexterm></simpara>
<simpara>La Node.js Foundation (<phrase role="URL"><link xl:href="https://foundation.nodejs.org">foundation.nodejs.org</link></phrase>) est l&#8217;un des
organes officiels de gouvernance du projet Node depuis juin&#160;2015.
C&#8217;est est une organisation à but non lucratif.
Elle fait elle-même partie de la Linux Foundation (<phrase role="URL"><link xl:href="http://collabprojects.linuxfoundation.org">collabprojects.linuxfoundation.org</link></phrase>),
au même titre que des projets comme Open&#160;Container, Let&#8217;s&#160;Encrypt ou&#160;Xen.</simpara>
<simpara>La tâche première de la fondation est d&#8217;opérer la fusion entre les bases de
code de Node et d'<link linkend="iojs">io.js</link> en septembre&#160;2015.
Cela donne lieu à la sortie de Node&#160;v4.0.0.</simpara>
<simpara>La fondation fait partie intégrante de la <link linkend="governance">gouvernance du projet&#160;Node</link>.</simpara>
</section>
<section xml:id="nodejitsu">
<title>Nodejitsu</title>
<simpara>Nodejitsu est une entreprise privée américaine fondée en&#160;2010.
Elle vise à fournir des solutions professionnelles autour de Node en tant que
<emphasis>Platform&#160;as&#160;a&#160;Service</emphasis> (<emphasis>PaaS</emphasis>), ainsi qu&#8217;avec des dépôts <literal>npm</literal> privés.<?asciidoc-br?>
Son activité en fait un concurrent direct de <xref linkend="joyent"/> et de <xref linkend="npm-inc"/>.</simpara>
<simpara>Nodejitsu démontre un investissement fort dans la communauté Node en contribuant
à plusieurs centaines de modules.
La société prend en charge l&#8217;hébergement du registre <literal>npm</literal> de&#160;2010 jusqu&#8217;en décembre&#160;2013.</simpara>
<simpara>En&#160;2013, l&#8217;entreprise lance l&#8217;initiative controversée <link linkend="scalenpm">#scalenpm</link>
(voir l&#8217;encadré ci-après).
Elle vise à collecter des fonds pour améliorer la performance
et la stabilité du registre <literal>npm</literal> (<phrase role="URL"><link xl:href="https://www.npmjs.com/">www.npmjs.com/</link></phrase>).
Nodejitsu attise les tensions avec la compagnie npm,&#160;Inc.
en tentant de lui couper l&#8217;herbe sous le pied.
Ce ne sera pas un succès.</simpara>
<simpara>En février&#160;2015, la société américaine GoDaddy rachète Nodejitsu,
absorbe son équipe et met fin à ses activités commerciales.</simpara>
<tip xml:id="scalenpm">
<title><phrase role="RemarquePreTitre">Lien</phrase> La controverse #scalenpm</title>
<simpara>L&#8217;initiative #scalenpm réunit quelque 326&#160;000&#160;$ auprès
d&#8217;entreprises privées et de la communauté&#160;Node.</simpara>
<simpara>Son effort se poursuit dans le but de fournir une meilleure instrumentation et
une architecture résistant à la montée en puissance de l&#8217;utilisation des modules <literal>npm</literal>.</simpara>
<simpara>Cette initiative a suscité une controverse dans la mesure où l’opération s’est
déroulée lors de la naissance de npm,&#160;Inc et du dépôt de marque associé,
mais sans entente apparente entre les deux parties.</simpara>
<simpara>Le contenu est depuis archivé sur
<phrase role="URL"><link xl:href="http://web.archive.org/web/20160506191542/https://scalenpm.nodejitsu.com/">web.archive.org/web/20160506191542/https://scalenpm.nodejitsu.com/</link></phrase>.</simpara>
</tip>
</section>
<section xml:id="node_security_platformnode_security_platform">
<title><indexterm><primary>Node Security Platform</primary></indexterm>Node Security Platform</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>la plate-forme sécurité</secondary>
</indexterm>
<indexterm>
<primary>la plate-forme sécurité</primary>
</indexterm></simpara>
<simpara>La Node Security Platform (<phrase role="URL"><link xl:href="https://nodesecurity.io">nodesecurity.io</link></phrase>&#160;–
anciennement Node Security Project) est un projet à but lucratif soutenu par
la société américaine &amp;yet (<phrase role="URL"><link xl:href="https://andyet.com">andyet.com</link></phrase>).
Il a été initié au début de l&#8217;année&#160;2013.
La société, les employés et les logiciels ont été rachetés par <xref linkend="npm-inc"/> en&#160;2018.</simpara>
<simpara>Son but est triple&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>auditer la sécurité de tous les modules <literal>npm</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>communiquer les failles auprès des auteurs de modules&#160;;</simpara>
</listitem>
<listitem>
<simpara>communiquer à tous si un module donné dépend de modules vulnérables.</simpara>
</listitem>
</orderedlist>
<simpara>Le projet met à disposition des services et des modules,
tout en cherchant à impliquer la communauté Node dans le processus.
Cela concerne aussi bien la déclaration des vulnérabilités
que leur résolution ou l&#8217;éducation des développeurs à la sécurité.</simpara>
<simpara>Nous aborderons le sujet de la sécurité tout au long de cet ouvrage&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>au <link xl:href="../chapter-04/index.xml#security">chapitre&#160;4</link>&#160;: mettre à jour Node en cas de failles de sécurité&#160;;</simpara>
</listitem>
<listitem>
<simpara>au <link xl:href="../chapter-06/index.xml#security">chapitre&#160;6</link>&#160;: surveiller la santé d&#8217;une application en production&#160;;</simpara>
</listitem>
<listitem>
<simpara>au <link xl:href="../chapter-07/index.xml#security">chapitre&#160;7</link>&#160;: identifier les opérations à risques dans une application&#160;web.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="governance">
<title>Gouvernance du projet</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>gouvernance projet</secondary>
</indexterm>
<indexterm>
<primary>gouvernance projet</primary>
</indexterm></simpara>
<simpara>Node a connu une forte croissance depuis&#160;2012.
La gouvernance du projet open source a été effectuée
par la <link linkend="joyent">société Joyent</link>.
Ses agissements et la direction donnée au projet ont régulièrement
fait grincer des dents, notamment en entretenant un climat d&#8217;incertitude sur
la pérennité à long terme, si Node venait à ne plus
répondre aux intérêts commerciaux de Joyent.</simpara>
<simpara>Des voix se sont élevées pour critiquer l&#8217;absence d&#8217;une
organisation ouverte, commercialement neutre et
ouverte aux contributeurs externes.
Cela a mené à la création d&#8217;un <emphasis>fork</emphasis> de Node&#160;:&#160;<link linkend="iojs">io.js</link>.</simpara>
<simpara>La réconciliation entre les projets Node et io.js a sérieusement assaini
les rapports de gouvernance.
Cela a également apporté une direction et des opportunités plus claires
de contribuer à la direction du projet.</simpara>
<simpara>Depuis juin&#160;2015, la gérance du projet est garantie par plusieurs entités&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Technical Steering Committee (TSC)&#160;: planning, décisions techniques, direction du projet, documentation et qualité du projet&#160;;</simpara>
</listitem>
<listitem>
<simpara><link linkend="node-foundation">Node.js Foundation</link> Board&#160;: promotion du projet, relations commerciales&#160;;</simpara>
</listitem>
<listitem>
<simpara><link linkend="node-foundation">Node.js Foundation</link> Community Committee (CommComm)&#160;: relation avec la communauté, <emphasis>onboarding</emphasis>.</simpara>
</listitem>
</itemizedlist>
<simpara>Le <emphasis>Technical Steering Committee</emphasis> (<phrase role="URL"><link xl:href="https://github.com/nodejs/TSC">github.com/nodejs/TSC</link></phrase>) réfère
ses intentions d&#8217;actions au <emphasis>Board</emphasis>.
Son fonctionnement est régi par une charte co-signée avec ce dernier.
Ce comité est composé de contributeurs et de collaborateurs individuels.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Anecdote</phrase> Une fois n&#8217;est pas coutume</title>
<simpara>Le TSC était autrefois dissocié d&#8217;une autre entité,
le Core&#160;Technical&#160;Committee (<phrase role="URL"><link xl:href="https://github.com/nodejs/CTC">github.com/nodejs/CTC</link></phrase>).
Les conflits de gouvernance ayant résulté dans la création du <emphasis>fork</emphasis> ayo.js
ont mené à la fusion des deux comités.</simpara>
<simpara>L&#8217;objectif recherché était de rapprocher gouvernance et décisions techniques
tout en réduisant les opportunités d&#8217;abus de pouvoir par les membres
techniques éminents.</simpara>
</tip>
<simpara>À l&#8217;inverse, le <emphasis>Board</emphasis> géré par la <link linkend="node-foundation">Node.js Foundation</link>
est composé essentiellement d&#8217;acteurs de l&#8217;industrie&#160;– dont Google,
IBM, Joyent et PayPal.
Certains membres émérites ou choisis par le <emphasis>Board</emphasis> (<phrase role="URL"><link xl:href="https://github.com/nodejs/board">github.com/nodejs/board</link></phrase>)
sont des individus agissant en leur nom propre.</simpara>
<simpara>Les participant·e·s du TSC ont une obligation
de régularité, de présence et de vote aux différents rendez-vous
organisés par le comité.
Ce mécanisme a été choisi afin de préserver la vitalité du projet.</simpara>
<simpara>Un quota d&#8217;appartenance à une même entreprise a été mis en place
pour maintenir une diversité de représentation.
Dans une moindre mesure, ce mécanisme vise à réduire les possibles conflits
d&#8217;intérêts ou une prise en otage du projet comme a pu le faire
<link linkend="joyent">Joyent</link> avant l&#8217;apparition de ce modèle de gouvernance.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Liens</phrase> Documentation</title>
<simpara>Les documents clés régissant le fonctionnement du projet Node
sont répartis dans les dépôts GitHub des différents acteurs&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/node/blob/master/GOVERNANCE.md">github.com/nodejs/node/blob/master/GOVERNANCE.md</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/TSC/blob/master/TSC-Charter.md">github.com/nodejs/TSC/blob/master/TSC-Charter.md</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md">github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md">github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="conclusion">
<title>Conclusion</title>
<simpara>Nous venons d&#8217;en apprendre davantage sur les origines de Node,
les différentes parties prenantes dans son développement, mais aussi sa
philosophie&#160;– de conception, de distribution et d&#8217;évolution.</simpara>
<simpara>Nous allons voir dans le prochain chapitre comment installer un environnement
fonctionnel pour développer et exécuter des programmes&#160;Node.</simpara>
</section>
</chapter>
<chapter xml:id="installer_mettre_à_jour_et_développer">
<title>Installer, mettre à jour et développer</title>
<simpara>Installons Node et l&#8217;outillage de développement qui nous correspond le mieux,
peu importe notre niveau de familiarité avec le développement logiciel.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Installer Node.js sur notre ordinateur</simpara>
</listitem>
<listitem>
<simpara>Choisir un éditeur de code pour écrire nos programmes</simpara>
</listitem>
<listitem>
<simpara>Déterminer quand migrer vers une nouvelle version de Node.js</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Certains systèmes d&#8217;exploitation embarquent l&#8217;environnement d&#8217;exécution Node,
tandis que d&#8217;autres ne le font pas, ou alors dans une version trop ancienne.
Idéalement, nous voudrions pouvoir <emphasis role="strong">installer la version de Node de notre choix</emphasis>.</simpara>
<simpara>Les <emphasis role="strong">éditeurs de code</emphasis> nous facilitent la vie en rendant le code lisible
en ajoutant de la couleur et des repères visuels.
Ces logiciels nous invitent à piocher dans leur bibliothèque d&#8217;extensions
pour en faire un outil qui nous ressemble.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node&#160;v10</emphasis>
et <emphasis role="strong">npm&#160;v6</emphasis>.
Ce sont les versions stables recommandées en&#160;2019.</simpara>
</note>
<simpara>Il n&#8217;est pas nécessaire d&#8217;avoir suivi des études d&#8217;informatique
pour vouloir s&#8217;essayer à la programmation.
Cela n&#8217;implique pas non plus d&#8217;en faire son métier.</simpara>
<simpara>Que l&#8217;on se qualifie de débutant·e, confirmé·e ou expert·e,
il y a un petit rituel auquel on coupera difficilement&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>installer Node.js pour <emphasis role="strong">voir le résultat de nos programmes</emphasis> écrits en JavaScript&#160;;</simpara>
</listitem>
<listitem>
<simpara>installer un éditeur de code pour <emphasis role="strong">écrire nos programmes JavaScript plus confortablement</emphasis>.</simpara>
</listitem>
</orderedlist>
<simpara>Si l&#8217;idée est de jouer rapidement avec du code,
sans rien installer et avec le premier ordinateur qui vous passe sous la main,
je vous invite à aller directement à la section
<quote><link linkend="online">Sans installation, dans un navigateur web</link></quote> ci-après.</simpara>
<simpara>Les sections qui suivent vont vous aider à créer un environnement Node à jour
sur votre ordinateur.
Ce contenu s&#8217;applique également à un serveur destiné à héberger vos applications.</simpara>
<section xml:id="install">
<title>Installer Node.js</title>
<simpara><indexterm>
<primary>installation</primary>
</indexterm></simpara>
<simpara>Il y a plusieurs manières d&#8217;installer Node sur une machine.
Elles sont <emphasis>toutes</emphasis> correctes.
Certaines sont plus adaptées que d&#8217;autres,
selon votre aisance avec un <link linkend="shell"><indexterm><primary>terminal</primary></indexterm>terminal</link>
et selon le besoin de jongler rapidement entre différentes versions de Node.</simpara>
<itemizedlist>
<listitem>
<simpara>Si vous vous êtes déjà servi d&#8217;un terminal&#160;: je recommande d&#8217;utiliser <link linkend="nvm">nvm</link>.</simpara>
</listitem>
<listitem>
<simpara>Si vous ne vous êtes jamais servi d&#8217;un terminal&#160;: il est plus simple d&#8217;utiliser un <emphasis>installeur</emphasis> depuis le site officiel de Node.</simpara>
</listitem>
<listitem>
<simpara>Si vous souhaitez maîtriser les options d&#8217;installation&#160;: il serait logique de <link linkend="build">compiler depuis les <emphasis>sources</emphasis></link> et/ou <link linkend="docker">d&#8217;utiliser Docker</link>.</simpara>
</listitem>
<listitem>
<simpara>Si rien de tout ça ne vous parle&#160;: des services en ligne rendent <link linkend="online">Node accessible depuis un simple navigateur&#160;web</link>.</simpara>
</listitem>
</itemizedlist>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Pourquoi utiliser un installeur ?</title>
<simpara>Les installeurs facilitent l&#8217;installation de Node, en quelques clics et sans toucher à un terminal.</simpara>
<simpara>Si vous utilisez un installeur correspondant à une version plus récente de Node,
c&#8217;est celle-ci qui sera utilisée dans <emphasis>tous</emphasis> vos projets.</simpara>
<simpara>C&#8217;est la solution la plus simple pour installer Node.</simpara>
</note>
<section xml:id="online">
<title>Sans installation, dans un navigateur web</title>
<simpara><indexterm>
<primary>installation</primary><secondary>service en ligne</secondary>
</indexterm>
<indexterm>
<primary>service en ligne</primary>
</indexterm></simpara>
<simpara>Il est facile de s&#8217;essayer à Node avec un navigateur web moderne comme
Firefox, Edge ou Chrome.
Des services en ligne combinent un <link linkend="ide">éditeur de texte</link>
et un environnement d&#8217;exécution Node à distance.</simpara>
<simpara>Nous brosserons le portrait de trois services qui diffèrent par leurs
fonctionnalités et leur rapidité de prise en main&#160;:_RunKit, Codenvy et Cloud9.</simpara>
<simpara>RunKit (<phrase role="URL"><link xl:href="https://runkit.com">runkit.com</link></phrase>) est de loin le service le plus simple.
Il s&#8217;articule autour d&#8217;un concept de <emphasis>bac à sable</emphasis>&#160;;
notre code ne sera pas plus long qu&#8217;un fichier.
Pour créer un nouveau bac à sable,
il suffit de se rendre sur <phrase role="URL"><link xl:href="https://runkit.com/new">runkit.com/new</link></phrase>.</simpara>
<figure>
<title>Bac à sable sur RunKit</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/runkit-playground.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>runkit playground</phrase></textobject>
</mediaobject>
</figure>
<simpara>Codenvy (<phrase role="URL"><link xl:href="https://codenvy.io">codenvy.io</link></phrase>) est un service basé sur le
logiciel open source Eclipse et édité par la compagnie Red&#160;Hat.
L&#8217;interface est organisée exactement comme un des <link linkend="ide">éditeurs de texte</link>
abordé plus loin dans ce chapitre.</simpara>
<figure>
<title>Espace de travail sur Codenvy</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/codenvy-workspace.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>codenvy workspace</phrase></textobject>
</mediaobject>
</figure>
<simpara>Le processus de création de projet est relativement intuitif
et il est très facile d&#8217;importer du code hébergé en ligne, sur GitHub
notamment.
La configuration minimale d&#8217;un projet est gratuite tandis que
les fonctionnalités avancées et le travail en équipe sont payantes.</simpara>
<figure>
<title>Processus de création d&#8217;un espace de travail sur Codenvy</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/codenvy-dashboard.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>codenvy dashboard</phrase></textobject>
</mediaobject>
</figure>
<simpara>Enfin, Cloud9 (<phrase role="URL"><link xl:href="https://c9.io">c9.io</link></phrase>) est un service propriétaire
édité par la compagnie Amazon Web Services (AWS, <phrase role="URL"><link xl:href="https://aws.amazon.com">aws.amazon.com</link></phrase>).
Il intègre des fonctionnalités similaires à celles de Codenvy
(éditeur en ligne, configuration de machine)
et s&#8217;intègre de manière poussée avec les autres services d&#8217;AWS,
dont <emphasis>EC2</emphasis> et <link xl:href="../chapter-06/index.xml#hosting.lambda"><emphasis>Lambda</emphasis></link>
(<link xl:href="../chapter-06/index.xml">chapitre 6</link>).
Le service est entièrement gratuit&#160;; c&#8217;est la consommation de ressources qui
est payante, à l&#8217;heure, en fonction du dimensionnement des ressources demandées.</simpara>
<figure>
<title>Configuration d&#8217;un espace de travail Cloud9</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cloud9-configuration.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>cloud9 configuration</phrase></textobject>
</mediaobject>
</figure>
<simpara>Cloud9 a peu d&#8217;opinions sur la manière dont votre environnement
doit être configuré.
Tout devra être configuré, des accès à votre compte GitHub à la version de
Node à installer.</simpara>
<figure>
<title>Espace de travail sur Cloud9</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cloud9-workspace.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>cloud9 workspace</phrase></textobject>
</mediaobject>
</figure>
<simpara>Cela tombe bien, <link linkend="nvm"><literal>nvm</literal></link> est préinstallé sur chaque espace de travail.</simpara>
</section>
<section xml:id="nvm">
<title>Plusieurs versions sur la même machine&#160;(nvm)</title>
<simpara><indexterm>
<primary>installation</primary><secondary>nvm</secondary>
</indexterm>
<indexterm>
<primary>nvm</primary>
</indexterm>
<indexterm>
<primary>nvm</primary>
</indexterm></simpara>
<simpara><literal>nvm</literal> est l&#8217;acronyme de <emphasis>Node Version Manager</emphasis>.
Ce logiciel permet d'<emphasis role="strong">installer plusieurs versions de Node sur un même ordinateur</emphasis>.
Si vous êtes sous Windows, <link linkend="nvm-windows"><literal>nvm-windows</literal></link> offre exactement
les mêmes fonctionnalités (voir encadré).</simpara>
<simpara>Si vous venez d&#8217;un autre univers de programmation,
<literal>nvm</literal> est l&#8217;équivalent de <literal>rvm</literal> ou <literal>rbenv</literal> dans le monde Ruby, de <literal>phpenv</literal> dans
le monde PHP ou encore de <literal>virtualenv</literal> pour Python.</simpara>
<simpara>Le programme s&#8217;obtient à l&#8217;adresse suivante&#160;: <phrase role="URL"><link xl:href="https://github.com/creationix/nvm">github.com/creationix/nvm</link></phrase>.</simpara>
<tip xml:id="nvm-windows">
<title><phrase role="RemarquePreTitre">Alternatives</phrase> <literal>nvm</literal> pour&#160;Windows</title>
<simpara><literal>nvm</literal> ne fonctionne pas sur les ordinateurs équipés de Windows.
Il existe trois alternatives&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>nvm-windows</literal> (<phrase role="URL"><link xl:href="https://github.com/coreybutler/nvm-windows">github.com/coreybutler/nvm-windows</link></phrase>) offre
les mêmes fonctionnalités que son équivalent pour Linux et macOS.
Il est facile à installer et ne demande pas de privilège système particulier
pour fonctionner.</simpara>
</listitem>
<listitem>
<simpara>Deux autres solutions sont à essayer si <literal>nvm-windows</literal> pose problème&#160;:
<literal>nvmw</literal> (<phrase role="URL"><link xl:href="https://github.com/hakobera/nvmw">github.com/hakobera/nvmw</link></phrase>) et
<literal>nodist</literal> (<phrase role="URL"><link xl:href="https://github.com/marcelklehr/nodist">github.com/marcelklehr/nodist</link></phrase>).</simpara>
</listitem>
</itemizedlist>
</tip>
<formalpara>
<title>Commande d&#8217;installation du logiciel nvm&#160;v0.33.11</title>
<para>
<screen>$ curl -L https://github.com/creationix/nvm/raw/v0.33.11/install.sh | bash</screen>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> nvm sous macOS</title>
<simpara><literal>nvm</literal> et Node s&#8217;installent encore plus facilement sous macOS si vous
utilisez le logiciel <emphasis>Homebrew</emphasis>.</simpara>
<simpara>Rendez-vous dans la section «&#160;<link linkend="install-macos">macOS</link>{nbdp}» pour en
savoir&#160;plus.</simpara>
</tip>
<simpara>Nous sommes libres d&#8217;installer toutes les versions de Node qui nous intéressent
en appelant la commande <literal>nvm install</literal> dans un <link linkend="shell">terminal</link>.
<indexterm>
<primary>nvm</primary><secondary>install</secondary>
</indexterm>
<indexterm>
<primary>install</primary>
</indexterm></simpara>
<formalpara>
<title>Installation de deux versions différentes de&#160;Node</title>
<para>
<screen>$ nvm install v10
$ nvm install v9</screen>
</para>
</formalpara>
<simpara>Dans cet exemple, nous installons deux versions de Node sur le même
ordinateur.
La version active est la dernière installée.
On retrouve à tout moment les versions installées avec la commande <literal>nvm ls</literal>.
<indexterm>
<primary>nvm</primary><secondary>ls</secondary>
</indexterm>
<indexterm>
<primary>ls</primary>
</indexterm></simpara>
<formalpara>
<title>Liste des versions installées de Node avec la commande <literal>nvm&#160;ls</literal></title>
<para>
<screen>$ nvm ls
-&gt;       v10.9.0
         v9.0.0
         system
default -&gt; v10 (-&gt; v10.9.0) (default)</screen>
</para>
</formalpara>
<simpara>Cet exemple détaille la liste des versions de Node installées
et celle des <emphasis>alias</emphasis>&#160;– associations entre un libellé et une version.</simpara>
<simpara>La commande <literal>nvm use</literal> nous fait naviguer entre des versions différentes de Node.
L&#8217;utilisation répétée de <literal>nvm use v10</literal> et de
<literal>nvm use v9</literal> nous fera aller et venir entre ces deux versions,
sans rien perdre de ce que nous étions en train de faire.
<indexterm>
<primary>nvm</primary><secondary>use</secondary>
</indexterm>
<indexterm>
<primary>use</primary>
</indexterm></simpara>
<simpara>La commande <literal>nvm --help</literal> affiche de l&#8217;aide à propos des commandes disponibles.
J&#8217;utilise principalement les suivantes&#160;:
<indexterm>
<primary>nvm</primary><secondary>--help</secondary>
</indexterm>
<indexterm>
<primary>--help</primary>
</indexterm></simpara>
<itemizedlist>
<listitem>
<simpara><literal>nvm install</literal>&#160;: installe ou met à jour une version de Node.</simpara>
</listitem>
<listitem>
<simpara><literal>nvm ls</literal>&#160;: liste les versions installées.</simpara>
</listitem>
<listitem>
<simpara><literal>nvm use</literal>&#160;: bascule vers une version donnée.</simpara>
</listitem>
<listitem>
<simpara><literal>nvm alias &lt;nom&gt; &lt;version&gt;</literal>&#160;: crée un alias nommé vers une version.</simpara>
</listitem>
<listitem>
<simpara><literal>nvm run &lt;version&gt; &lt;script&gt;</literal>&#160;: exécute un script Node dans une version donnée.
<indexterm>
<primary>nvm</primary><secondary>run</secondary>
</indexterm>
<indexterm>
<primary>run</primary>
</indexterm></simpara>
</listitem>
</itemizedlist>
<simpara>Quand nous avons fixé une version de Node à utiliser au quotidien,
l&#8217;alias spécial <literal>default</literal> en fait la version qui est systématiquement activée&#160;:
<indexterm>
<primary>nvm</primary><secondary>alias</secondary>
</indexterm>
<indexterm>
<primary>alias</primary>
</indexterm></simpara>
<screen>$ nvm alias default 10</screen>
<simpara>La commande <literal>nvm use</literal> nous sert alors à activer une autre version pendant
la durée nécessaire à notre expérimentation.</simpara>
</section>
<section xml:id="install-ubuntu">
<title>Distributions Linux : Debian/Ubuntu et RedHat/CentOS</title>
<simpara><indexterm>
<primary>installation</primary><secondary>Linux</secondary>
</indexterm>
<indexterm>
<primary>Linux</primary>
</indexterm></simpara>
<simpara>Ces distributions Linux listent Node dans leurs paquets officiels.
Un simple <literal>apt-get install nodejs</literal> et ça fonctionne&#160;!
Ou presque, car bien souvent on écopera d&#8217;une vieille version de&#160;Node.</simpara>
<simpara>Des paquets officiels pour Debian (≥&#160;jessie), Ubuntu (≥&#160;12.04), Mint,
RedHat Enterprise Linux (RHEL) et CentOS sont maintenus sur
<phrase role="URL"><link xl:href="https://github.com/nodesource/distributions">github.com/nodesource/distributions</link></phrase>.</simpara>
<simpara>L&#8217;installation de Node&#160;10.x sous Ubuntu et Mint se résume
aux commandes suivantes&#160;:</simpara>
<screen>$ sudo su
$ curl -sL https://deb.nodesource.com/setup_10.x | bash -
$ sudo apt-get install -y nodejs</screen>
<simpara>Pour Debian, il faudra se mettre en <literal>root</literal> et ensuite saisir ces commandes&#160;:</simpara>
<screen>$ curl -sL https://deb.nodesource.com/setup_10.x | bash -
$ apt-get install -y nodejs</screen>
<simpara>Pour RHEL et CentOS, il faudra se mettre en <literal>root</literal> et saisir la commande suivante&#160;:</simpara>
<screen>$ curl -sL https://rpm.nodesource.com/setup_{v}.x | bash -</screen>
</section>
<section xml:id="distributions_linux_lesautres">
<title>Distributions Linux : les&#160;autres</title>
<simpara><indexterm>
<primary>installation</primary><secondary>Linux</secondary>
</indexterm>
<indexterm>
<primary>Linux</primary>
</indexterm></simpara>
<simpara>Des paquets officiels pour d&#8217;autres distributions que Debian, Ubuntu et Mint
sont maintenus et accessibles par le biais des gestionnaires de paquets habituels&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Gentoo&#160;: <literal>emerge nodejs</literal></simpara>
</listitem>
<listitem>
<simpara>Fedora (≥ 18)&#160;: <literal>sudo yum install nodejs npm</literal></simpara>
</listitem>
<listitem>
<simpara>Arch Linux&#160;: <literal>pacman -S nodejs</literal></simpara>
</listitem>
<listitem>
<simpara>FreeBSD, OpenBSD&#160;: <literal>pkg install node</literal></simpara>
</listitem>
</itemizedlist>
<simpara>La liste à jour est maintenue sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/fr/download/package-manager">nodejs.org/fr/download/package-manager</link></phrase>.</simpara>
<simpara>Notez que vous pouvez aussi utiliser <link linkend="nvm">nvm</link> pour gérer vos versions de
Node indépendamment du cycle de vie de votre système d&#8217;exploitation Linux.</simpara>
</section>
<section xml:id="install-macos">
<title>macOS</title>
<simpara><indexterm>
<primary>installation</primary><secondary>macOS</secondary>
</indexterm>
<indexterm>
<primary>macOS</primary>
</indexterm>
<indexterm>
<primary>installation</primary><secondary>homebrew</secondary>
</indexterm>
<indexterm>
<primary>homebrew</primary>
</indexterm></simpara>
<simpara>Un installeur officiel pour macOS est fourni sur le site de Node,
à l&#8217;adresse <phrase role="URL"><link xl:href="https://nodejs.org/fr/download/">nodejs.org/fr/download/</link></phrase>.</simpara>
<simpara><link linkend="nvm">nvm</link> est la voie alternative recommandée pour gérer plusieurs versions
de Node en parallèle.</simpara>
<simpara>Il est toutefois possible d&#8217;installer Node et <literal>nvm</literal> via le gestionnaire de
paquets Homebrew (<phrase role="URL"><link xl:href="https://brew.sh">brew.sh</link></phrase>).
Il aide à installer des logiciels qui ne sont pas distribués via le
<emphasis>Mac&#160;App&#160;Store</emphasis>.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Installer les <emphasis>Command Line Tools</emphasis> pour compiler des logiciels depuis leur code source.</simpara>
</listitem>
<listitem>
<simpara>Installation Homebrew.</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>Installation des Command Line Tools et de Homebrew sous macOS</title>
<para>
<screen>$ xcode-select --install
$ BREWRL=https://rawgit.com/Homebrew/install/master/install \
   /usr/bin/ruby -e "$(curl -fsSL $BREWRL)"</screen>
</para>
</formalpara>
<simpara>Pour installer <literal>nvm</literal>, il suffit alors de lancer la commande suivante&#160;:</simpara>
<screen>$ brew install nvm</screen>
<simpara>Ou, pour installer une seule version de Node, la plus récente&#160;:</simpara>
<screen>$ brew install node</screen>
<simpara>Vous obtiendrez des options d&#8217;installation et de configuration en tapant
<literal>brew info nvm</literal> et/ou <literal>brew info node</literal>.</simpara>
</section>
<section xml:id="windows">
<title>Windows</title>
<simpara><indexterm>
<primary>installation</primary><secondary>Windows</secondary>
</indexterm>
<indexterm>
<primary>Windows</primary>
</indexterm></simpara>
<simpara>Un installeur officiel pour Windows est fourni sur le site de Node à l&#8217;adresse
<phrase role="URL"><link xl:href="https://nodejs.org/fr/download/">nodejs.org/fr/download/</link></phrase>.</simpara>
<simpara><link linkend="nvm"><literal>nvm-windows</literal></link> est la voie alternative recommandée pour gérer plusieurs
versions de Node en parallèle.</simpara>
<figure>
<title>Un des écrans d&#8217;installation de Node sous&#160;Windows&#160;10</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/windows-node-installer.png" contentwidth="50%"/>
</imageobject>
<textobject><phrase>windows node installer</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;installeur officiel créera plusieurs raccourcis dans le
dossier du menu <menuchoice><guimenu>Démarrer</guimenu> <guimenuitem>Node.js</guimenuitem></menuchoice>&#160;:</simpara>
<figure>
<title>Node.js dans le menu Démarrer sous&#160;Windows&#160;10</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/windows-node-menu.png" contentwidth="50%"/>
</imageobject>
<textobject><phrase>windows node menu</phrase></textobject>
</mediaobject>
</figure>
<simpara>Le menu créé par l&#8217;installeur contient deux icônes que nous utiliserons tout
au long de la lecture de cet ouvrage&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><menuchoice><guimenu>Node.js</guimenu> <guimenuitem>Node.js</guimenuitem></menuchoice>&#160;: un terminal pour jouer avec JavaScript et voir les résultats que
Node va interpréter&#160;;</simpara>
</listitem>
<listitem>
<simpara><menuchoice><guimenu>Node.js</guimenu> <guimenuitem>Node.js command prompt</guimenuitem></menuchoice>&#160;: un terminal pour exécuter nos programmes écrits
en JavaScript.</simpara>
</listitem>
</itemizedlist>
<simpara>Si vous utilisez déjà un gestionnaire de paquets comme Scoop (<phrase role="URL"><link xl:href="http://scoop.sh">scoop.sh</link></phrase>)
ou Chocolatey (<phrase role="URL"><link xl:href="https://chocolatey.org">chocolatey.org</link></phrase>),
le chemin d&#8217;installation vers Node s&#8217;en trouvera réduit à une simple commande&#160;:</simpara>
<formalpara>
<title>Avec Scoop</title>
<para>
<screen>$ scoop install nodejs</screen>
</para>
</formalpara>
<formalpara>
<title>Avec Chocolatey</title>
<para>
<screen>$ choco install nodejs</screen>
</para>
</formalpara>
<warning>
<title><phrase role="RemarquePreTitre">Attention</phrase> Versions de Windows</title>
<simpara>Node n&#8217;est pas compatible avec les versions antérieures à Vista.
Cela inclut Windows&#160;XP.</simpara>
<simpara>Mieux vaudra utiliser un <link linkend="online">service en ligne</link> pour essayer Node sur
votre ordinateur ou passer à Linux pour lui redonner une seconde
vie en toute sécurité&#160;!</simpara>
</warning>
</section>
<section xml:id="install-rpi">
<title>Raspberry&#160;Pi</title>
<simpara><indexterm>
<primary>installation</primary><secondary>Raspberry Pi</secondary>
</indexterm>
<indexterm>
<primary>Raspberry Pi</primary>
</indexterm></simpara>
<simpara>Des binaires sont disponibles pour les microcontrôleurs fonctionnant avec des
processeurs ARM&#160;v6/7/8, au cœur de ce que l&#8217;on appelle
<emphasis>Internet des Objets</emphasis> (<emphasis>Internet of Things</emphasis>, <emphasis>IoT</emphasis>).
Ces petits ordinateurs consomment peu d&#8217;énergie, disposent d&#8217;une connectique
pour se relier à Internet et s&#8217;interfacent avec toutes sortes de capteurs.</simpara>
<simpara>Un paquet <literal>deb</literal> est également proposé pour les utilisateurs du
système d&#8217;exploitation Raspbian (<phrase role="URL"><link xl:href="https://www.raspbian.org">www.raspbian.org</link></phrase>).
Les instructions d&#8217;installation sont identiques à celles décrites
dans la section relative aux <link linkend="install-ubuntu">distributions Linux&#160;Debian</link>.</simpara>
<formalpara>
<title>Installation de Node&#160;v10 sur Raspberry&#160;Pi Model&#160;3 (CPU&#160;ARMv8)</title>
<para>
<screen>$ curl -SLO https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-arm64.tar.xz
$ tar -xJf "node-v10.9.0-linux-arm64.tar.xz" -C /usr/local --strip-components=1
$ ln -s /usr/local/bin/node /usr/local/bin/nodejs</screen>
</para>
</formalpara>
<simpara>Tous les binaires et les instructions d&#8217;installation sont disponibles
sur <phrase role="URL"><link xl:href="https://nodejs.org/fr/download/">nodejs.org/fr/download/</link></phrase>.</simpara>
</section>
<section xml:id="build">
<title>Compiler depuis les sources</title>
<simpara><indexterm>
<primary>installation</primary><secondary>compilation des sources</secondary>
</indexterm>
<indexterm>
<primary>compilation des sources</primary>
</indexterm></simpara>
<simpara>Certaines situations exigeront que vous compiliez Node.
C&#8217;est le cas si vous cherchez à travailler au plus près du système sur lequel
vous comptez déployer vos applications.
Je pense par exemple à des architectures à processeur ARM, PowerPC,
IBM&#160;System/390 ou bien à des systèmes Android, OpenBSD ou&#160;AIX.</simpara>
<simpara>La compilation manuelle est également intéressante pour régler plus finement
certains aspects de Node&#160;: rendre le binaire indépendant des
bibliothèques système (statique), le module <literal>http/2</literal>,
langues et fuseaux horaires fonctionnels avec l&#8217;API ECMA&#160;402&#160;Intl,
options de sécurité liées à OpenSSL, mais aussi l&#8217;intégration avec des
profileurs et débogueurs externes (type XCode, GNU&#160;Debugger, Intel&#160;VTune).</simpara>
<formalpara>
<title>Étapes de compilation de Node&#160;v10.9.0</title>
<para>
<screen>$ curl -sS https://nodejs.org/dist/v10.9.0/node-v10.9.0.tar.gz \
  | tar -zxf -
$ cd node-v10.9.0
$ ./configure &amp;&amp; make &amp;&amp; make install</screen>
</para>
</formalpara>
<simpara>La compilation manuelle requiert la présence de GCC (≥ 4.9), de Python (≥ 2.6)
et de GNU Make (≥ 3.81).</simpara>
<simpara>Les instructions de compilation varient d&#8217;un système d&#8217;exploitation à l&#8217;autre.
Consultez les dépendances et instructions complètes à
l&#8217;adresse suivante&#160;: <phrase role="URL"><link xl:href="https://github.com/nodejs/node/blob/master/BUILDING.md">github.com/nodejs/node/blob/master/BUILDING.md</link></phrase>.</simpara>
</section>
<section xml:id="install-docker">
<title>Images Docker</title>
<simpara><indexterm>
<primary>installation</primary><secondary>Docker</secondary>
</indexterm>
<indexterm>
<primary>Docker</primary>
</indexterm>
<indexterm>
<primary>Docker</primary>
</indexterm></simpara>
<simpara>Docker (<phrase role="URL"><link xl:href="https://docker.com">docker.com</link></phrase>) est un outil open source dit d'<emphasis>applications en conteneur</emphasis>.
Une de ses qualités principales est d'<emphasis role="strong">isoler l&#8217;exécution d&#8217;applications de leur environnement</emphasis>.
Une image Docker décrit la recette d&#8217;installation d&#8217;une application.
L&#8217;environnement d&#8217;exécution Docker fait office de "passe-plat" avec le système d&#8217;exploitation.
Une image Docker fonctionne ainsi de la même manière, qu&#8217;elle soit exécutée
sous Linux, macOS ou encore Windows.</simpara>
<simpara>Les installeurs et instructions d&#8217;installation de Docker se trouvent
à l&#8217;adresse <phrase role="URL"><link xl:href="https://docker.com/community-edition">docker.com/community-edition</link></phrase>.</simpara>
<simpara>Une fois Docker installé, on peut exécuter une image officielle pour
Node&#160;v10.</simpara>
<formalpara>
<title>Affiche la version de Node</title>
<para>
<screen>$ docker run -ti --rm node:10 node --version
v10.9.0</screen>
</para>
</formalpara>
<simpara>Ici, Docker télécharge l&#8217;image <literal>node:10</literal> et exécute la commande
<literal>node --version</literal> dans un contexte isolé du système d&#8217;exploitation.</simpara>
<simpara>Pour lancer un terminal Node dans Docker, il faudrait saisir la commande suivante&#160;:</simpara>
<screen>$ docker run -ti --rm node:10 node
&gt; 2+2
4</screen>
<simpara>Plusieurs variantes d&#8217;images Node se trouvent à notre disposition&#160;:</simpara>
<variablelist>
<varlistentry>
<term><phrase role="Menu">standard</phrase> (<literal>node:10</literal>)</term>
<listitem>
<simpara>Base Linux Debian pour tout type d&#8217;applications Node.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><phrase role="Menu">Debian</phrase> (<literal>node:10-wheezy</literal>)</term>
<listitem>
<simpara>Comme <phrase role="Menu">standard</phrase> mais sur des bases Debian différentes, comme Wheezy, Stretch, etc..</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><phrase role="Menu">Alpine</phrase> (<literal>node:10-alpine</literal>)</term>
<listitem>
<simpara>Distribution spécialement créée pour Docker (<phrase role="URL"><link xl:href="http://alpinelinux.org">alpinelinux.org</link></phrase>), qui pèse à peine quelques&#160;Mo.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><phrase role="Menu">Allégée</phrase> (<literal>node:10-slim</literal>)</term>
<listitem>
<simpara>Base Linux Debian sans outillage parfois nécessaire à des modules Node&#160;– utile si vous souhaitez économiser de l&#8217;espace disque.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>L&#8217;intégralité des versions et architectures prises en charge est disponible sur
le catalogue Docker&#160;Hub&#160;: <phrase role="URL"><link xl:href="https://hub.docker.com/_/node/">hub.docker.com/_/node/</link></phrase>.</simpara>
<simpara>Nous reviendrons sur ce sujet dans la section
<quote><link xl:href="../chapter-06/index.xml#deploy.docker">Déploiement d&#8217;une image Docker</link></quote> du
<link xl:href="../chapter-06/index.xml">chapitre&#160;6</link>.</simpara>
</section>
</section>
<section xml:id="shell">
<title>Vérifier l&#8217;installation de Node depuis un <indexterm><primary>terminal</primary></indexterm>terminal (shell)</title>
<simpara><indexterm>
<primary>installation</primary><secondary>vérification</secondary>
</indexterm>
<indexterm>
<primary>vérification</primary>
</indexterm></simpara>
<simpara>Nous avons installé un environnement d&#8217;exécution Node dans la section précédente.
Pour vérifier que tout s&#8217;est bien déroulé, ouvrez un terminal et saisissez
la commande suivante&#160;:</simpara>
<screen>$ node --version
v10.9.0</screen>
<simpara>Le numéro de version du Node fraichement installé devrait apparaître.
Si le mot <emphasis>terminal</emphasis> ne vous parle pas, la suite de cette section va vous
éclairer&#160;– vous pourrez ensuite revenir essayer cette commande.</simpara>
<section xml:id="quest_ce_quun_terminal">
<title>Qu&#8217;est-ce qu&#8217;un terminal ?</title>
<simpara><indexterm>
<primary>terminal</primary><secondary>définition</secondary>
</indexterm>
<indexterm>
<primary>définition</primary>
</indexterm></simpara>
<simpara>Le <link linkend="shell">terminal</link> est notre compagnon pour dialoguer avec le système d&#8217;exploitation.
L'<emphasis>invite de commandes</emphasis> est son nom véritable.
Ce nom nous donne un indice sur la fonction de ce type de logiciel&#160;:
inviter l&#8217;utilisateur à saisir des commandes pour obtenir des résultats calculés
par un ordinateur.</simpara>
<figure>
<title>Terminal iTerm2 sous macOS</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/macos-terminal.png" contentwidth="70%"/>
</imageobject>
<textobject><phrase>macos terminal</phrase></textobject>
</mediaobject>
</figure>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Terminal physique</title>
<simpara>L&#8217;histoire des invites de commande remonte au temps où les ordinateurs
étaient plus volumineux que nos logements.
Une époque lointaine où les ordinateurs étaient véritablement et physiquement
distants des claviers qui les interrogeaient.</simpara>
<simpara>Pour en savoir plus&#160;: <phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Terminal_informatique">fr.wikipedia.org/wiki/Terminal_informatique</link></phrase>.</simpara>
</note>
<simpara>Un terminal est notre <emphasis role="strong">moyen privilégié pour interagir avec Node</emphasis> lorsqu&#8217;il
est installé sur un ordinateur.
Les systèmes d&#8217;exploitation en ont pour la plupart un installé par défaut.
Cela vaut également pour la majorité des <link linkend="online">services en ligne</link>.
<indexterm>
<primary>Glitch</primary>
</indexterm></simpara>
<figure>
<title>Terminal du <link linkend="online">service en ligne</link> Glitch</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/glitch-terminal.png" contentwidth="70%"/>
</imageobject>
<textobject><phrase>glitch terminal</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="choisir_un_terminal">
<title>Choisir un terminal</title>
<simpara>Voici une liste non exhaustive d&#8217;applications de type terminal&#160;:
<indexterm>
<primary>terminal</primary><secondary>pour macOS</secondary>
</indexterm>
<indexterm>
<primary>pour macOS</primary>
</indexterm>
<indexterm>
<primary>terminal</primary><secondary>pour Linux</secondary>
</indexterm>
<indexterm>
<primary>pour Linux</primary>
</indexterm>
<indexterm>
<primary>terminal</primary><secondary>pour Windows</secondary>
</indexterm>
<indexterm>
<primary>pour Windows</primary>
</indexterm></simpara>
<variablelist>
<varlistentry>
<term>macOS</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Terminal.app&#160;: fourni par défaut (dans <menuchoice><guimenu>Applications</guimenu> <guimenuitem>Utilitaires</guimenuitem></menuchoice>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>iTerm2&#160;: une version améliorée disponible sur <phrase role="URL"><link xl:href="https://iterm2.com">iterm2.com</link></phrase> (ou <literal>brew cask install iterm2</literal>)&#160;;</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Linux</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>GNOME Terminal&#160;: fourni par défaut sous Debian, Ubuntu et les distributions utilisant le bureau GNOME (<phrase role="URL"><link xl:href="https://wiki.gnome.org/Apps/Terminal">wiki.gnome.org/Apps/Terminal</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>Terminator&#160;: un autre terminal populaire (<phrase role="URL"><link xl:href="https://gnometerminator.blogspot.com">gnometerminator.blogspot.com</link></phrase>)&#160;;</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Windows</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Node.js Command Prompt&#160;: fourni avec l'<link linkend="windows">installeur Windows</link>&#160;;</simpara>
</listitem>
<listitem>
<simpara>PowerShell&#160;: fourni par défaut depuis Windows&#160;7, sinon disponible sur <phrase role="URL"><link xl:href="https://github.com/PowerShell/PowerShell">github.com/PowerShell/PowerShell</link></phrase>&#160;– également disponible pour macOS et&#160;Linux.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<figure>
<title>Node.js Command Prompt sous Windows&#160;10</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/windows-terminal.png" contentwidth="70%"/>
</imageobject>
<textobject><phrase>windows terminal</phrase></textobject>
</mediaobject>
</figure>
<simpara>Maintenant que nous avons installé Node et compris comment
y accéder depuis notre système d&#8217;exploitation ou navigateur web,
attaquons-nous au dernier morceau du puzzle&#160;:
<emphasis role="strong">avec quel logiciel écrire du code JavaScript pour nos applications&#160;Node</emphasis>&#160;?</simpara>
</section>
</section>
<section xml:id="ide">
<title>Choisir un éditeur de texte</title>
<simpara><indexterm>
<primary>installation</primary><secondary>éditeur de texte</secondary>
</indexterm>
<indexterm>
<primary>éditeur de texte</primary>
</indexterm>
<indexterm>
<primary>éditeur de texte</primary><secondary>installation</secondary>
</indexterm>
<indexterm>
<primary>installation</primary>
</indexterm></simpara>
<simpara>Programmer pour Node revient dans la majorité des cas à écrire du JavaScript.
À cela s&#8217;ajoutent le HTML et le CSS dans le cas d&#8217;applications ou de sites&#160;web.</simpara>
<simpara>À la base, si un éditeur de texte suffit pour écrire du code,
prenons le temps de regarder ce qui pourrait nous apporter un peu de confort
dans le processus d&#8217;écriture.</simpara>
<simpara>Les logiciels présentés ci-après couvrent bon nombre de fonctionnalités
qui améliorent de près ou de loin notre capacité à écrire du code de qualité.
Parmi elles, on retrouve la coloration syntaxique,
l&#8217;inspection dynamique, le débogage, des astuces de productivité et
d&#8217;intégration à l&#8217;écosystème&#160;Node.</simpara>
<simpara>Cette sélection a pour but de vous aider à piocher au plus près
de vos goûts.
Le meilleur logiciel sera celui qui vous plaira.
Rien n&#8217;empêche d&#8217;en changer par la suite.</simpara>
<section xml:id="atom">
<title><indexterm><primary>Atom</primary></indexterm>Atom</title>
<simpara><indexterm>
<primary>éditeur de texte</primary><secondary>Atom</secondary>
</indexterm>
<indexterm>
<primary>Atom</primary>
</indexterm></simpara>
<figure>
<title>Atom</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/atom.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>atom</phrase></textobject>
</mediaobject>
</figure>
<simpara>Atom (<phrase role="URL"><link xl:href="https://atom.io">atom.io</link></phrase>) est un éditeur de code open-source,
multilingue et multi plate-forme, dont le développement a été lancé
par la société commerciale GitHub (<phrase role="URL"><link xl:href="http://github.com">github.com</link></phrase>).
Le logiciel est basé sur Electron, un environnement d&#8217;exécution
d&#8217;applications de bureau reposant sur les technologies web et sur&#160;Node&#160;!</simpara>
<simpara>Atom offre un écosystème d&#8217;extensions pour étendre les fonctionnalités de l&#8217;éditeur.
On retrouvera des extensions dédiées à l&#8217;auto-complétion,
un débogueur Node intégré (pour exécuter nos programmes sans changer de fenêtre),
mais aussi une vérification syntaxique sur mesure.</simpara>
<simpara>Toutes les extensions d&#8217;Atom sont disponibles sur <phrase role="URL"><link xl:href="https://atom.io/packages">atom.io/packages</link></phrase>&#160;;
voici une liste de celles que j&#8217;utilise au quotidien&#160;:</simpara>
<variablelist>
<varlistentry>
<term>minimap (<phrase role="URL"><link xl:href="https://atom.io/packages/minimap">atom.io/packages/minimap</link></phrase>)</term>
<listitem>
<simpara>Une prévisualisation de l&#8217;intégralité du code source d&#8217;un fichier.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>file-icons (<phrase role="URL"><link xl:href="https://atom.io/packages/file-icons">atom.io/packages/file-icons</link></phrase>)</term>
<listitem>
<simpara>Une manière plus agréable de visualiser les différents types de fichiers
en fonction de leur icône.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>pigments (<phrase role="URL"><link xl:href="https://atom.io/packages/pigments">atom.io/packages/pigments</link></phrase>)</term>
<listitem>
<simpara>Affiche les couleurs en marge et dans le code source.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>language-babel (<phrase role="URL"><link xl:href="https://atom.io/packages/language-babel">atom.io/packages/language-babel</link></phrase>)</term>
<listitem>
<simpara>Coloration syntaxique de tous les langages compris par l&#8217;outil
Babel (<phrase role="URL"><link xl:href="https://babeljs.io">babeljs.io</link></phrase>), dont les versions modernes
de JavaScript, JSX, GraphQL,&#160;etc.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>emmet (<phrase role="URL"><link xl:href="https://atom.io/packages/emmet">atom.io/packages/emmet</link></phrase>)</term>
<listitem>
<simpara>Génère du HTML à partir d&#8217;une écriture sous forme de sélecteur&#160;CSS.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>linter-eslint (<phrase role="URL"><link xl:href="https://atom.io/packages/linter-eslint">atom.io/packages/linter-eslint</link></phrase>)</term>
<listitem>
<simpara>Vérification syntaxique basée sur les règles projet du module
ESLint (<phrase role="URL"><link xl:href="https://eslint.org">eslint.org</link></phrase>, voir
l'<link xl:href="../appendix-a/index.xml#eslint">annexe</link>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>atom-ternjs (<phrase role="URL"><link xl:href="https://atom.io/packages/atom-ternjs">atom.io/packages/atom-ternjs</link></phrase>)</term>
<listitem>
<simpara>Autocomplétion pour JavaScript, Node et d&#8217;autres bibliothèques
populaires comme jQuery, chai et underscore.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>editorconfig (<phrase role="URL"><link xl:href="https://atom.io/packages/editorconfig">atom.io/packages/editorconfig</link></phrase>)</term>
<listitem>
<simpara>Adapte les réglages d&#8217;indentation et autres styles d&#8217;écriture de code
documentés dans chaque projet.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>language-sass (<phrase role="URL"><link xl:href="https://atom.io/packages/language-sass">atom.io/packages/language-sass</link></phrase>)</term>
<listitem>
<simpara>Prise en charge du langage&#160;Sass.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>markdown-writer (<phrase role="URL"><link xl:href="https://atom.io/packages/markdown-writer">atom.io/packages/markdown-writer</link></phrase>)</term>
<listitem>
<simpara>Raccourcis et aides pour formater du texte au format Markdown.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>autocomplete-modules (<phrase role="URL"><link xl:href="https://atom.io/packages/autocomplete-modules">atom.io/packages/autocomplete-modules</link></phrase>)</term>
<listitem>
<simpara>Étend l&#8217;autocomplétion lors des appels aux
<link xl:href="../chapter-05/index.xml">modules <literal>npm</literal></link> (chapitre&#160;5).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>linter-sass-lint (<phrase role="URL"><link xl:href="https://atom.io/packages/linter-sass-lint">atom.io/packages/linter-sass-lint</link></phrase>)</term>
<listitem>
<simpara>Vérification syntaxique des fichiers&#160;Sass.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>node-debugger (<phrase role="URL"><link xl:href="https://atom.io/packages/node-debugger">atom.io/packages/node-debugger</link></phrase>)</term>
<listitem>
<simpara>Intégration du débogueur&#160;Node.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>tablr (<phrase role="URL"><link xl:href="https://atom.io/packages/tablr">atom.io/packages/tablr</link></phrase>)</term>
<listitem>
<simpara>Éditeur de fichiers&#160;CSV.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>linter-markdown (<phrase role="URL"><link xl:href="https://atom.io/packages/linter-markdown">atom.io/packages/linter-markdown</link></phrase>)</term>
<listitem>
<simpara>Vérification syntaxique des fichiers Markdown.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>node-resolver (<phrase role="URL"><link xl:href="https://atom.io/packages/node-resolver">atom.io/packages/node-resolver</link></phrase>)</term>
<listitem>
<simpara>Navigation au sein des <link xl:href="../chapter-05/index.xml">modules <literal>npm</literal></link>
en cliquant sur leurs méthodes ou propriétés.</simpara>
</listitem>
</varlistentry>
</variablelist>
<tip>
<title><phrase role="RemarquePreTitre">Productivité</phrase> Installer vos extensions favorites</title>
<simpara>Chaque extension peut être ajoutée à nos favoris sur le site <phrase role="URL">atom.io</phrase>,
aussi bien pour signaler que nous l&#8217;apprécions que pour la retrouver plus tard.</simpara>
<figure>
<title>Une extension Atom ajoutée aux favoris</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/atom-favourite.png" contentwidth="65%"/>
</imageobject>
<textobject><phrase>atom favourite</phrase></textobject>
</mediaobject>
</figure>
<simpara>Le logiciel nous offre une commande à saisir dans un terminal pour
installer toutes les extensions de nos favoris&#160;:</simpara>
<screen>$ apm stars --install</screen>
</tip>
</section>
<section xml:id="vs-code">
<title><indexterm><primary>Visual Studio Code</primary></indexterm>Visual Studio Code</title>
<simpara><indexterm>
<primary>éditeur de texte</primary><secondary>Visual Studio Code</secondary>
</indexterm>
<indexterm>
<primary>Visual Studio Code</primary>
</indexterm></simpara>
<figure>
<title>Visual Studio Code</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/visual-studio-code.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>visual studio code</phrase></textobject>
</mediaobject>
</figure>
<simpara>Visual Studio Code (<phrase role="URL"><link xl:href="https://code.visualstudio.com">code.visualstudio.com</link></phrase>)
est un éditeur de code open source, multilingue et multi plate-forme
dont le développement a été lancé par la société Microsoft.
Le logiciel est basé sur Electron, un environnement d&#8217;exécution
d&#8217;applications de bureau reposant sur les technologies web et sur Node.</simpara>
<simpara>Le système IntelliSense est un de ses atouts principaux.
Il se sert du contexte disponible pour offrir une auto-complétion
et des bulles d&#8217;aide pertinentes.
C&#8217;est un éditeur parfaitement adapté au développement d&#8217;applications Node
grâce à des fonctionnalités natives comme l&#8217;exécution, le débogage,
la gestion de tâches et le versionnement&#160;– du code et des modules <literal>npm</literal>.</simpara>
<simpara>Visual Studio Code se complète d&#8217;un mode Node (<phrase role="URL"><link xl:href="https://code.visualstudio.com/Docs/runtimes/nodejs">code.visualstudio.com/Docs/runtimes/nodejs</link></phrase>)
et d&#8217;une place de marché (<phrase role="URL"><link xl:href="https://marketplace.visualstudio.com/VSCode">marketplace.visualstudio.com/VSCode</link></phrase>) pour
étendre ses fonctionnalités.</simpara>
</section>
<section xml:id="webstorm">
<title><indexterm><primary>WebStorm</primary></indexterm>WebStorm</title>
<simpara><indexterm>
<primary>éditeur de texte</primary><secondary>WebStorm</secondary>
</indexterm>
<indexterm>
<primary>WebStorm</primary>
</indexterm></simpara>
<figure>
<title>WebStorm</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/webstorm.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>webstorm</phrase></textobject>
</mediaobject>
</figure>
<simpara>WebStorm (<phrase role="URL"><link xl:href="https://www.jetbrains.com/webstorm/">www.jetbrains.com/webstorm/</link></phrase>) est un environnement
de développement (IDE) payant dédié au développement web
HTML5, JavaScript et&#160;Node.</simpara>
<simpara>Le logiciel est commercialisé par la société JetBrains, renommée pour ses
IDE Pycharm (pour Python),
PhpStorm (pour PHP) et IntelliJ&#160;IDEA (pour Java).</simpara>
<simpara>WebStorm est compatible Windows, Linux et macOS.
Ses forces résident dans sa relative légèreté,
une auto-complétion intelligente prenant en compte la résolution
des modules CommonJS et AMD, une intégration des outils populaires
dans l&#8217;écosystème Node (<literal>npm</literal>, ESLint, Mocha, Karma, Bower, etc.)
ainsi qu&#8217;un débogage avancé.</simpara>
<simpara>Le téléchargement de WebStorm inclut une période d&#8217;essai de 30&#160;jours.
La tarification du produit varie selon que vous soyez un individu ou
une entreprise et que le paiement soit mensuel ou annuel.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Astuce</phrase> Licence open source</title>
<simpara>Vous pouvez demander à bénéficier d&#8217;une licence gratuite sous réserve
d&#8217;une preuve de contribution à un ou plusieurs projet(s) <emphasis>open&#160;source</emphasis>.</simpara>
<simpara>Rendez-vous sur <phrase role="URL"><link xl:href="https://www.jetbrains.com/buy/opensource/">www.jetbrains.com/buy/opensource/</link></phrase>.</simpara>
</tip>
</section>
<section xml:id="vs-ide">
<title><indexterm><primary>Visual Studio IDE</primary></indexterm>Visual Studio IDE</title>
<simpara><indexterm>
<primary>éditeur de texte</primary><secondary>Visual Studio IDE</secondary>
</indexterm>
<indexterm>
<primary>Visual Studio IDE</primary>
</indexterm></simpara>
<figure>
<title>Visual Studio IDE</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/visual-studio.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>visual studio</phrase></textobject>
</mediaobject>
</figure>
<simpara>Visual Studio (<phrase role="URL"><link xl:href="https://www.visualstudio.com/vs/">www.visualstudio.com/vs/</link></phrase>)
est un environnement de développement édité par Microsoft.
Historiquement dédié au développement applicatif
Windows (Visual Basic, Visual&#160;C++), ce logiciel gère aujourd&#8217;hui bien plus
de langages, dont&#160;C#, HTML, CSS, JavaScript, ASP.Net.
Il est surtout extensible, ce qui permet de lui ajouter Python ou encore Node, entre autres.</simpara>
<simpara>Visual Studio est compatible Windows uniquement.
Il existe en plusieurs versions, parmi lesquelles la <emphasis>Community</emphasis> qui est gratuite.</simpara>
<simpara>Afin de bénéficier de l&#8217;intégration complète de l&#8217;écosystème Node,
il est nécessaire d&#8217;installer l&#8217;extension Node.js Tools for Visual Studio
(aussi nommée NTVS).
Elle est gratuite, open source et disponible à l&#8217;adresse suivante&#160;:
<phrase role="URL"><link xl:href="https://www.visualstudio.com/vs/node-js/">www.visualstudio.com/vs/node-js/</link></phrase>.</simpara>
</section>
</section>
<section xml:id="quand_mettre_à_jour_node_js">
<title>Quand mettre à jour Node.js ?</title>
<simpara><indexterm>
<primary>installation</primary><secondary>mises à jour</secondary>
</indexterm>
<indexterm>
<primary>mises à jour</primary>
</indexterm>
<indexterm>
<primary>mise à jour de Node.js</primary>
</indexterm></simpara>
<simpara>Le développement de Node continue pendant que vous lisez ces lignes.
Les sections suivantes présentent les différentes raisons
pour lesquelles de nouvelles versions de Node sont distribuées.</simpara>
<simpara>Quelle que soit la raison, la mise à jour est identique à
l'<link linkend="install">installation initiale de Node</link>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Si vous aviez utilisé un <emphasis role="strong">installeur</emphasis>&#160;: téléchargez et installez
la nouvelle version.</simpara>
</listitem>
<listitem>
<simpara>Si vous aviez utilisé un <emphasis role="strong">gestionnaire de versions</emphasis>&#160;: téléchargez la
nouvelle version et indiquez qu&#8217;elle devient celle par défaut.</simpara>
</listitem>
<listitem>
<simpara>Si vous aviez <emphasis role="strong">compilé depuis les sources</emphasis>&#160;: téléchargez les sources
de la nouvelle version et compilez à nouveau.</simpara>
</listitem>
<listitem>
<simpara>Si vous aviez utilisé une <emphasis role="strong">image Docker</emphasis>&#160;: téléchargez la nouvelle
version en ayant recours à la commande <literal>docker pull node:&lt;version&gt;</literal>.</simpara>
</listitem>
</itemizedlist>
<section xml:id="mises_à_jour_de_sécurité">
<title>Mises à jour de sécurité</title>
<simpara><indexterm>
<primary>mise à jour de Node.js</primary><secondary>sécurité</secondary>
</indexterm>
<indexterm>
<primary>sécurité</primary>
</indexterm>
<indexterm>
<primary>version sémantique</primary><secondary>patch</secondary>
</indexterm>
<indexterm>
<primary>patch</primary>
</indexterm></simpara>
<simpara>Node n&#8217;est pas exempt de bogues. Une catégorie en particulier nécessite d&#8217;être
réactif&#160;: les failles de sécurité.
Ces failles offrent une surface d&#8217;attaque à des personnes
mal intentionnées, qui seraient tentées d&#8217;accéder sans permission à des serveurs,
et donc aux données qu&#8217;ils contiennent.</simpara>
<simpara>L&#8217;impact peut être faible pour un site personnel, à condition de ne pas laisser
traîner de mots de passe ici et&#160;là.
Cela risque de se révéler beaucoup plus fâcheux pour un site e-commerce
ou une entreprise dont la santé serait mise en&#160;jeu.</simpara>
<simpara>L&#8217;équipe de Node livre des <emphasis role="strong">versions corrigeant les failles de sécurité aussitôt qu&#8217;elle le peut</emphasis>.
Une faille n&#8217;est d&#8217;ailleurs pas révélée avant que le correctif
soit disponible, par mesure de précaution.</simpara>
<simpara>Que faire si la faille de sécurité affecte la version de Node installée sur&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>notre ordinateur de développement&#160;: c&#8217;est peu risqué, sauf si un module tiers l&#8217;exploite&#160;;</simpara>
</listitem>
<listitem>
<simpara>notre site web&#160;: redéployez aussitôt le site en question avec une version corrigeant la faille.</simpara>
</listitem>
</itemizedlist>
<simpara>Les versions de Node qui corrigent des failles de sécurité ou des bogues connus
n&#8217;ont quasiment aucun risque de casser une application existante.
On les appelle les versions <emphasis>patch</emphasis>.
Elles sont indiquées par le troisième numéro de version&#160;: <literal>v10.0.<emphasis role="strong">0</emphasis></literal>, <literal>v10.0.<emphasis role="strong">1</emphasis></literal>, …</simpara>
<simpara>Plusieurs ressources sont à notre disposition pour se tenir informé·e&#160;:</simpara>
<variablelist>
<varlistentry>
<term>Liste de diffusion (<phrase role="URL"><link xl:href="https://groups.google.com/group/nodejs-sec">groups.google.com/group/nodejs-sec</link></phrase>)</term>
<listitem>
<simpara>Pour recevoir l&#8217;alerte par courriel (moins d&#8217;une par&#160;mois).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Blog Node.js (<phrase role="URL"><link xl:href="https://nodejs.org/en/blog/vulnerability/">nodejs.org/en/blog/vulnerability/</link></phrase>)</term>
<listitem>
<simpara>Une page web à consulter avec un navigateur.
Les mêmes messages sont relayés sur la liste de diffusion.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Fil RSS du blog Node.js (<phrase role="URL"><link xl:href="https://nodejs.org/en/feed/vulnerability.xml">nodejs.org/en/feed/vulnerability.xml</link></phrase>)</term>
<listitem>
<simpara>Comme le point précédent mais auquel on peut souscrire
avec un lecteur RSS comme Feedly ou Mozilla Thunderbird.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Compte Twitter @nodesecurity (<phrase role="URL"><link xl:href="https://twitter.com/nodesecurity">twitter.com/nodesecurity</link></phrase>)</term>
<listitem>
<simpara>Annonce des informations liées à la sécurité générale de Node
et de son écosystème.</simpara>
</listitem>
</varlistentry>
</variablelist>
<note>
<title><phrase role="RemarquePreTitre">Lien</phrase> Groupe de travail Node.js Security</title>
<simpara>Un groupe de travail (<phrase role="URL"><link xl:href="https://github.com/nodejs/security-wg">github.com/nodejs/security-wg</link></phrase>) veille à
maintenir et améliorer la sécurité de Node.
Ces personnes se chargent d&#8217;être proactives dans la détection
de failles dans l&#8217;architecture de Node, mais aussi dans
l&#8217;intégration de code tiers, comme la brique OpenSSL
ou le module <literal>npm</literal>.</simpara>
</note>
<simpara>Le <link xl:href="../chapter-06/index.xml">chapitre&#160;6</link> décrit
comment se maintenir à jour sur les
<link xl:href="../chapter-06/index.xml#security">alertes de sécurité</link> de nos
applications Node.
Celles-ci risquent notamment d&#8217;être vulnérables à cause des modules <literal>npm</literal>
dont elles dépendent&#160;– en plus des vulnérabilités de&#160;Node.</simpara>
</section>
<section xml:id="versions_mineures">
<title>Versions mineures</title>
<simpara><indexterm>
<primary>mise à jour de Node.js</primary><secondary>version mineure</secondary>
</indexterm>
<indexterm>
<primary>version mineure</primary>
</indexterm>
<indexterm>
<primary>version sémantique</primary><secondary>version mineure</secondary>
</indexterm>
<indexterm>
<primary>version mineure</primary>
</indexterm></simpara>
<simpara>Les versions mineures de Node sont celles qui lui ajoutent de
nouvelles fonctionnalités quasiment sans risque de casser une application existante.
Elles sont indiquées par le deuxième chiffre du numéro de version&#160;:
<literal>v10.<emphasis role="strong">0</emphasis>.3</literal>, <literal>v10.<emphasis role="strong">1</emphasis>.0</literal>, …</simpara>
<simpara>Les versions mineures sortent une petite dizaine de fois par&#160;an.
Une migration ne demande pas nécessairement d&#8217;investir beaucoup de temps pour
adapter et tester nos applications&#160;Node.</simpara>
<simpara>En cas de sortie d&#8217;une version mineure&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Sur notre ordinateur de développement&#160;: on peut migrer si l&#8217;on veut tester
ou bénéficier des nouvelles fonctionnalités de cette version.</simpara>
</listitem>
<listitem>
<simpara>Sur notre site web&#160;: pas d&#8217;action immédiate requise.
On peut migrer si l&#8217;on veut bénéficier des nouvelles fonctionnalités
de cette version.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="versions_majeures">
<title>Versions majeures</title>
<simpara><indexterm>
<primary>mise à jour de Node.js</primary><secondary>version majeure</secondary>
</indexterm>
<indexterm>
<primary>version majeure</primary>
</indexterm>
<indexterm>
<primary>version sémantique</primary><secondary>version majeure</secondary>
</indexterm>
<indexterm>
<primary>version majeure</primary>
</indexterm></simpara>
<simpara>Les versions majeures ajoutent également de nouvelles fonctionnalités à Node,
mais elles peuvent être amenées à changer des comportements qui casseraient
une application existante.</simpara>
<simpara>Elles sont indiquées par le premier chiffre du numéro de version&#160;:
<literal>v<emphasis role="strong">10</emphasis>.0.0</literal>, <literal>v<emphasis role="strong">11</emphasis>.0.0</literal>, …</simpara>
<simpara>Les versions majeures sortent deux fois par&#160;an.
Une migration peut demander de consacrer un certain temps à adapter
et à tester nos applications Node.</simpara>
<simpara>En cas de sortie d&#8217;une version majeure&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Sur notre ordinateur de développement&#160;: nous prenins du temps
pour tester nos applications et nous assurer de leur bon fonctionnement.</simpara>
</listitem>
<listitem>
<simpara>Sur la machine de production&#160;: il n&#8217;y a pas d&#8217;action immédiate requise.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="lifecycle">
<title>Comprendre le cycle de vie produit</title>
<simpara><indexterm>
<primary>mise à jour de Node.js</primary><secondary>cycle de vie</secondary>
</indexterm>
<indexterm>
<primary>cycle de vie</primary>
</indexterm>
<indexterm>
<primary>mise à jour de Node.js</primary><secondary>version maintenue à long terme (LTS)</secondary>
</indexterm>
<indexterm>
<primary>version maintenue à long terme (LTS)</primary>
</indexterm></simpara>
<simpara>Le développement de la plate-forme Node prend soin de ne pas
aller trop vite ni d&#8217;altérer la stabilité des applications et des
outils en fonctionnement.
Il sort <emphasis role="strong">au maximum deux versions majeures par&#160;an</emphasis>,
dont une est maintenue à long terme (<emphasis>Long Term Support</emphasis>, <emphasis>LTS</emphasis>).</simpara>
<simpara>La notion de version&#160;LTS a été introduite pour donner un repère de stabilité.
On sait qu&#8217;on peut compter dessus sans se poser de question.
Les autres versions sont à voir comme des coups d&#8217;essai, dans l&#8217;anticipation d&#8217;une migration
vers une version suivante, maintenue à long terme.</simpara>
<figure>
<title>Calendrier de publication des versions de Node</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/schedule.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>schedule</phrase></textobject>
</mediaobject>
</figure>
<note>
<title><phrase role="RemarquePreTitre">Lien</phrase> Calendrier de sorties</title>
<simpara><indexterm>
<primary>mise à jour de Node.js</primary><secondary>calendrier de sortie</secondary>
</indexterm>
<indexterm>
<primary>calendrier de sortie</primary>
</indexterm>
Le calendrier des sorties de Node est tenu à jour sur <phrase role="URL"><link xl:href="https://github.com/nodejs/Release">github.com/nodejs/Release</link></phrase>.
Référez-vous à ce calendrier pour des informations à jour sur
les prochaines versions et l&#8217;arrêt de maintenance des plus anciennes.</simpara>
</note>
<simpara>Si on récapitule&#160;:
<indexterm>
<primary>version sémantique</primary>
</indexterm>
- Les versions <emphasis role="strong">impaires</emphasis> (v5,&#160;v7,&#160;etc.)
  - sont développées pendant <emphasis>neuf mois</emphasis>&#160;;
  - ne sont pas maintenues au-delà.
- Les versions <emphasis role="strong">paires</emphasis> (<emphasis>LTS</emphasis>,&#160;v10,&#160;etc.)
  - sont basées sur la version <emphasis>impaire</emphasis> précédente&#160;;
  - sont développées pendant <emphasis>six&#160;mois</emphasis>&#160;;
  - sont maintenues LTS pendant <emphasis>dix-huit&#160;mois</emphasis>&#160;;
  - basculent en maintenance pendant <emphasis>douze&#160;mois</emphasis> supplémentaires&#160;;
  - ne sont pas maintenues au-delà.</simpara>
<simpara>Les patchs de sécurité ne concernent que les versions en <emphasis>développement</emphasis>,
<emphasis>LTS</emphasis> ou en <emphasis>maintenance</emphasis>.</simpara>
<simpara>Cette planification garantit une plate-forme et un ensemble de
fonctionnalités stables de manière prédictible,
à la fois pour les projets reposant sur Node, mais aussi
pour l&#8217;écosystème de contributeurs de modules <literal>npm</literal>.</simpara>
</section>
</section>
<section xml:id="conclusion_2">
<title>Conclusion</title>
<simpara>Nous sommes désormais en mesure d&#8217;installer et mettre à jour Node
sur notre ordinateur.
Nous savons aussi avec quel(s) logiciel(s) développer nos applications et
où nous informer pour savoir quand faire nos mises à jour,
pour corriger des problèmes de sécurité et bénéficier des nouvelles
fonctionnalités du langage.</simpara>
<simpara>Le prochain chapitre nous amènera à reprendre les bases du
langage JavaScript en jouant avec le <link linkend="shell">terminal Node</link>.
On découvrira également les différences entre JavaScript, ECMAScript et&#160;Node.</simpara>
</section>
</chapter>
<chapter xml:id="jouer_avec_javascript">
<title>Jouer avec JavaScript</title>
<simpara>Passons en revue les variables et structures ECMAScript pour mieux comprendre
ce qui en fait un langage élégant et moderne.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Qu&#8217;est-ce que JavaScript&#160;?</simpara>
</listitem>
<listitem>
<simpara>Comprendre l&#8217;évolution de la spécification ECMAScript</simpara>
</listitem>
<listitem>
<simpara>Jongler avec les différentes structures du langage</simpara>
</listitem>
<listitem>
<simpara>En savoir plus sur des éléments avancés du langage</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>JavaScript est souvent raillé.
Parce que ce n&#8217;est pas un vrai langage.
Parce qu&#8217;il a été créé en 6 jours.
Parce qu&#8217;il n&#8217;est pas orienté objet.</simpara>
<simpara>JavaScript est un langage expressif qui a énormément gagné en maturité
depuis les années 2010.
Il se révèle parfaitement opérationnel dès lors que l&#8217;on s&#8217;intéresse
à ses fonctionnalités, sans faire de hors-piste.</simpara>
<simpara>Les types de données et les méthodes de manipulations qu&#8217;elles nous offrent
permettent d&#8217;écrire un code plus simple, à lire et à produire.
Certaines structures de données nous aident à mieux organiser nos données
ainsi qu&#8217;à mieux les traiter.</simpara>
</abstract>
<section xml:id="definition">
<title>Qu&#8217;est-ce que JavaScript ?</title>
<simpara><indexterm>
<primary>JavaScript</primary><secondary>voir ECMAScript</secondary>
</indexterm>
<indexterm>
<primary>voir ECMAScript</primary>
</indexterm>
<indexterm>
<primary>ECMAScript</primary>
</indexterm></simpara>
<simpara>Je vais vous présenter plusieurs exemples de code.
Ils ont en commun d&#8217;être tous écrits en JavaScript.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>intro/ecmascript.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const baseUrl = 'https://oncletom.io/node.js';
const filePath = `${baseUrl}/package.json`;</programlisting>
</para>
</formalpara>
<simpara>Cet exemple illustrait la création de variables, de chaînes de caractères.
Ce sont des fonctionnalités de base de la spécification ECMAScript.</simpara>
<formalpara>
<title>intro/web.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

fetch('https://oncletom.io/node.js/package.json')
  .then(response =&gt; response.json())
  .then(pkg =&gt; console.log(`${pkg.name}@${pkg.version}`));</programlisting>
</para>
</formalpara>
<simpara><literal>fetch()</literal> ne fait pas partie de la spécification ECMAScript.
C&#8217;est un ajout des navigateurs web.
On parle alors d'<emphasis role="strong">API JavaScript pour le Web</emphasis>.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Glossaire</phrase> <indexterm><primary>API (Interface de programmation</primary></indexterm>API (Interface de programmation)</title>
<simpara>Les API sont des interfaces pour dialoguer avec un programme ou une
ressource informatique.
Elles définissent des vocabulaires pour exécuter des actions spécifiques.</simpara>
</note>
<formalpara>
<title>intro/dom.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const docBody = document.querySelector('body');
docBody.addEventListener('click', () =&gt; alert('Hello World!'));</programlisting>
</para>
</formalpara>
<simpara>La variable <literal>document</literal> et les méthodes <literal>querySelector</literal> et <literal>addEventListener</literal>
font aussi partie des API JavaScript pour le Web.
En l&#8217;occurrence, elles font partie de l&#8217;API DOM (<emphasis>Document Object Model</emphasis>),
un mécanisme pour interagir avec une page web grâce à ECMAScript.
<indexterm>
<primary>DOM (Document Object Model)</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>document</secondary>
</indexterm>
<indexterm>
<primary>document</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>intro/node.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {homedir} = require('os');
const fs = require('fs');
fs.readdir(homedir(), (err, files) =&gt; {
  err ? console.error(err) : console.log(files);
});</programlisting>
</para>
</formalpara>
<simpara>Ce dernier exemple est spécifique à Node.
Ce dernier propose la fonction <literal>require()</literal> pour charger des modules et interagir
avec le système d&#8217;exploitation.
<indexterm>
<primary>variable globale</primary><secondary>require()</secondary>
</indexterm>
<indexterm>
<primary>require()</primary>
</indexterm></simpara>
<simpara>Autrement dit,
<emphasis role="strong">ECMAScript est un langage, une grammaire avec des fonctionnalités de base</emphasis>.
Chaque environnement&#160;– les navigateurs web, Node&#160;– le comprend et lui ajoute
de nouvelles expressions, contextuelles à cet environnement d&#8217;exécution.
<emphasis role="strong">JavaScript est le grand ensemble des technologies qui reposent sur ECMAScript</emphasis>
pour fonctionner.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> À propos de JavaScript</title>
<simpara><indexterm>
<primary>ECMAScript</primary><secondary>historique</secondary>
</indexterm>
<indexterm>
<primary>historique</primary>
</indexterm></simpara>
<simpara>JavaScript est inventé en 1995 par Brendan&#160;Eich alors qu&#8217;il est employé de
la société Netscape Communications.
Microsoft lui emboîte le pas en incluant JavaScript dans son logiciel
Internet&#160;Explorer, alors en version&#160;3.
Pour des raisons de droits de marque, il y est dénommé JScript.</simpara>
<simpara>La spécification est ensuite validée par l&#8217;organisme <emphasis>Ecma International</emphasis>
en juin 1997 sous le nom d&#8217;ECMAScript, standard ECMA-262.</simpara>
<simpara>Le terme JavaScript est resté dans le vocabulaire courant, mais, en fait,
il s&#8217;agit bien d&#8217;ECMAScript.</simpara>
<simpara>Adobe Flash utilise un dérivé d&#8217;ECMAScript&#160;: ActionScript.
Bien des machines virtuelles sont capables d&#8217;interpréter partiellement ou
intégralement ECMAScript&#160;: Rhino, Konq, BESEN en Object Pascal ou encore
Esprima, qui est elle-même écrite dans ce langage.</simpara>
</note>
<simpara>Si d&#8217;autres langages de programmation se cantonnent
soit au côté client (VBScript, ActionScript, Elm),
soit au côté serveur (Ruby, Python, Haskell),
JavaScript a débuté côté client pour s&#8217;étendre aussi côté serveur.
Un développeur ou une développeuse dite <emphasis>full&#160;stack</emphasis> programme des applications
sur les deux fronts.
Node a cet avantage d&#8217;unifier le langage de programmation entre les environnements
client et serveur.</simpara>
<simpara>Le langage ECMAScript&#160;– appelons-le ainsi à partir de maintenant&#160;–
a évolué au fil du temps.
Il s&#8217;est enrichi de nouvelles fonctionnalités au fil des versions, mais aussi
de sucres syntaxiques (raccourcis d&#8217;écriture)
et de rigueur aussi, pour corriger des défauts de <emphasis>design</emphasis>.</simpara>
<simpara>Le comité de travail TC39 (<emphasis>Technical Committee</emphasis>,
<phrase role="URL"><link xl:href="https://github.com/tc39">github.com/tc39</link></phrase>) est en charge de l&#8217;évolution
du langage, standardisé sous le doux sobriquet de <emphasis>standard ECMA-262</emphasis>,
à charge ensuite aux différents implémenteurs de suivre les changements
et de les incorporer dans leurs machines virtuelles.
<indexterm>
<primary>TC39 (comité de travail)</primary>
</indexterm>
<indexterm>
<primary>ECMASCript</primary><secondary>comité de travail TC39</secondary>
</indexterm>
<indexterm>
<primary>comité de travail TC39</primary>
</indexterm></simpara>
<simpara>Node se base sur la machine virtuelle&#160;<link xl:href="../chapter-01/index.xml#v8">V8 de Google</link>
pour interpréter les expressions ECMAScript.
De fait, Node comprend les mêmes expressions ECMAScript que&#160;V8.
<indexterm>
<primary>V8 (machine virtuelle)</primary>
</indexterm></simpara>
<simpara>Nous verrons un peu plus tard dans ce chapitre comment suivre la
compatibilité de Node avec ECMAScript.
Intéressons-nous à l&#8217;évolution du langage et à ce que ça nous apporte.</simpara>
<section xml:id="ecmascript5_aka_es5">
<title>ECMAScript&#160;5 (aka ES5)</title>
<simpara><indexterm>
<primary>ECMAScript</primary><secondary>ES5</secondary>
</indexterm>
<indexterm>
<primary>ES5</primary>
</indexterm></simpara>
<simpara>ECMAScript a été standardisé dans sa version&#160;5 en décembre&#160;2009.
La révision&#160;5.1 de juin&#160;2011 est une correction mineure de la spécification.</simpara>
<simpara>Il s&#8217;agit d&#8217;une évolution majeure dans l&#8217;histoire du langage.
La précédente version&#160;– ECMAScript&#160;3&#160;– était âgée de dix&#160;ans.</simpara>
<simpara>ECMAScript&#160;5 limite drastiquement certains effets indésirables du langage
grâce au <emphasis>mode strict</emphasis>.
De nouvelles méthodes de manipulation de tableaux et d&#8217;objets voient le jour,
ainsi qu&#8217;une prise en charge native du format de données&#160;<link linkend="json">JSON</link>.</simpara>
<simpara>La standardisation de cette version d&#8217;ECMAScript a contribué à redorer
l&#8217;image du langage, mais aussi à faire émerger de nouvelles pratiques
de programmation.</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>Table de compatibilité</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://kangax.github.io/compat-table/es5/">kangax.github.io/compat-table/es5/</link></phrase></simpara>
</entry>
</row>
<row>
<entry>
<simpara>Spécification</simpara>
</entry>
<entry>
<simpara>  <phrase role="URL"><link xl:href="https://www.ecma-international.org/ecma-262/5.1/">www.ecma-international.org/ecma-262/5.1/</link></phrase>
<indexterm>
<primary>ECMAScript</primary><secondary>table de compatibilité</secondary>
</indexterm>
<indexterm>
<primary>table de compatibilité</primary>
</indexterm>
<indexterm>
<primary>Table de compatibilité</primary><secondary>ECMAScript</secondary>
</indexterm>
<indexterm>
<primary>ECMAScript</primary>
</indexterm></simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<figure>
<title>Table de compatibilité</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/compat-table.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>compat table</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="ecmascript_2015_akaes6_puises2015">
<title>ECMAScript 2015 (aka&#160;ES6 puis&#160;ES2015)</title>
<simpara><indexterm>
<primary>ECMAScript</primary><secondary>ES2015</secondary>
</indexterm>
<indexterm>
<primary>ES2015</primary>
</indexterm>
<indexterm>
<primary>ECMAScript</primary><secondary>ES6</secondary>
</indexterm>
<indexterm>
<primary>ES6</primary>
</indexterm></simpara>
<simpara>La spécification ECMAScript&#160;2015 (ES2015) a été publiée en juin&#160;2015.
Elle succède à ECMAScript&#160;5 après six années de gestation.
Cette version a successivement été appelée ECMAScript Harmony, ECMAScript&#160;6,
puis ECMAScript&#160;2015.</simpara>
<simpara>De nombreuses idées ont été piochées dans le langage
CoffeeScript (<phrase role="URL"><link xl:href="http://coffeescript.org">coffeescript.org</link></phrase>).
Et surtout, un nouveau type d&#8217;outillage s&#8217;est formé pour commencer
à utiliser ce JavaScript du futur avec le compilateur
<emphasis>traceur</emphasis> de Google dès&#160;2011 (<phrase role="URL"><link xl:href="https://github.com/google/traceur-compiler">github.com/google/traceur-compiler</link></phrase>),
puis avec le projet indépendant <emphasis>6to5</emphasis> dès&#160;2014.
Ce dernier a été renommé en <indexterm><primary>Babel</primary></indexterm>Babel (<phrase role="URL"><link xl:href="https://babeljs.io">babeljs.io</link></phrase>)
et son instigateur a par la suite été embauché par Facebook.</simpara>
<simpara>La pratique de compiler du JavaScript en JavaScript était en rupture
avec ce qui se faisait précédemment&#160;:
attendre qu&#8217;une fonctionnalité soit adoptée par un dénominateur commun
de navigateurs web pour s&#8217;en servir.
Cette fois-ci, on pouvait se servir du futur, dès aujourd&#8217;hui.</simpara>
<simpara>De fait, il n&#8217;y a pas eu à attendre six ans et les différentes implémentations
pour profiter de ce qu&#8217;il y avait de meilleur.</simpara>
<simpara>Le prix à payer&#160;? Un ticket d&#8217;entrée plus élevé lié à la maîtrise
de l&#8217;outillage associé.</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>Table de compatibilité (navigateurs&#160;web)</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://kangax.github.io/compat-table/es6/">kangax.github.io/compat-table/es6/</link></phrase></simpara>
</entry>
</row>
<row>
<entry>
<simpara>Table de compatibilité (Node.js)</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://node.green/">node.green/</link></phrase></simpara>
</entry>
</row>
<row>
<entry>
<simpara>Spécification</simpara>
</entry>
<entry>
<simpara>  <phrase role="URL"><link xl:href="https://www.ecma-international.org/ecma-262/6.0/">www.ecma-international.org/ecma-262/6.0/</link></phrase>
<indexterm>
<primary>Table de compatibilité</primary><secondary>Node.js</secondary>
</indexterm>
<indexterm>
<primary>Node.js</primary>
</indexterm></simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<figure>
<title>Illustration de l&#8217;évolution de la compatibilité ECMAScript au fil des versions de&#160;Node</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/node-green.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>node green</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="ecmascript_2016_etc_akaes2016">
<title>ECMAScript 2016, etc. (aka&#160;ES2016)</title>
<simpara><indexterm>
<primary>ECMAScript</primary><secondary>ES2016</secondary>
</indexterm>
<indexterm>
<primary>ES2016</primary>
</indexterm></simpara>
<simpara>Depuis la sortie d&#8217;ECMAScript&#160;2015, l&#8217;intention est de publier une
nouvelle spécification par an, de travailler les fonctionnalités une par une
pour ne pas attendre trop longtemps avant de les ratifier.
En conséquence, les nouvelles versions annuelles sont beaucoup plus
incrémentales.
Elles se font moins attendre et contiennent moins de grands bouleversements.</simpara>
<simpara>Les fonctionnalités en cours de préparation sont listées
dans le dépôt GitHub suivant&#160;: <phrase role="URL"><link xl:href="https://github.com/tc39/proposals">github.com/tc39/proposals</link></phrase>.
Le dernier stade avant la validation est le <emphasis>stage&#160;3</emphasis>.
Dès qu&#8217;une fonctionnalité passe en <emphasis>stage&#160;4</emphasis>, elle est incluse
dans la prochaine version d&#8217;ECMAScript
– ECMAScript&#160;2019 une fois l&#8217;année 2019 terminée.</simpara>
<simpara>Les fonctionnalités approuvées sont consignées dans un document&#160;:
<phrase role="URL"><link xl:href="https://github.com/tc39/proposals/blob/master/finished-proposals.md">github.com/tc39/proposals/blob/master/finished-proposals.md</link></phrase>.</simpara>
</section>
</section>
<section xml:id="primitives">
<title>Éléments de base du langage</title>
<simpara><indexterm>
<primary>ECMAScript</primary><secondary>éléments de langage</secondary>
</indexterm>
<indexterm>
<primary>éléments de langage</primary>
</indexterm></simpara>
<simpara>Cette section décrit les notions nécessaires
pour s&#8217;approprier le reste des exemples de l&#8217;ouvrage.
On apprendra notamment à créer des variables, à naviguer dans
des listes d&#8217;éléments et à faire la différence
entre un objet et une fonction.</simpara>
<section xml:id="les_types_de_données">
<title>Les types de données</title>
<simpara><indexterm>
<primary>ECMAScript</primary><secondary>type de données</secondary>
</indexterm>
<indexterm>
<primary>type de données</primary>
</indexterm></simpara>
<simpara>Qu&#8217;entend-on par <emphasis>type de données</emphasis>&#160;?
Faisons-nous notre propre idée avec une suite d&#8217;exemples.
Ces notions seront développées dans le reste du chapitre,
pour mieux comprendre ce que l&#8217;on peut en faire.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/string.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'Node.js'</programlisting>
</para>
</formalpara>
<simpara>Une valeur entourée de guillemets est considérée
par l&#8217;interpréteur ECMAScript comme une chaîne de caractères, du texte.
<indexterm>
<primary>chaîne de caractère</primary>
</indexterm>
<indexterm>
<primary>type de données</primary><secondary>chaîne de caractère</secondary>
</indexterm>
<indexterm>
<primary>chaîne de caractère</primary>
</indexterm></simpara>
<simpara>Ces guillemets sont selon les cas des guillemets simples&#160;('),
doubles (") ou obliques (`).</simpara>
<simpara>On peut effectuer des opérations d&#8217;identification ou d&#8217;assemblage avec une
valeur de type <emphasis role="strong">chaîne de caractères</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/number.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">3

12.3</programlisting>
</para>
</formalpara>
<simpara>ECMAScript considère les entiers (<literal>3</literal>&#160;dans cet exemple)
et les réels (<literal>12.3</literal>&#160;dans cet exemple) comme des nombres.
Il ne fait <emphasis>pas</emphasis> de distinction entre les&#160;deux.
<indexterm>
<primary>nombre</primary>
</indexterm>
<indexterm>
<primary>type de données</primary><secondary>nombre</secondary>
</indexterm>
<indexterm>
<primary>nombre</primary>
</indexterm></simpara>
<simpara>On peut effectuer des opérations mathématiques entre plusieurs
valeurs de type <emphasis role="strong">nombre</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/boolean.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">true

false</programlisting>
</para>
</formalpara>
<simpara>ECMAScript considère deux valeurs pour signifier <emphasis>vrai</emphasis> ou <emphasis>faux</emphasis>&#160;:
respectivement <literal>true</literal> et <literal>false</literal>.
<indexterm>
<primary>booléen</primary>
</indexterm>
<indexterm>
<primary>type de données</primary><secondary>booléen</secondary>
</indexterm>
<indexterm>
<primary>booléen</primary>
</indexterm></simpara>
<simpara>On peut effectuer des opérations logiques avec une
valeur de type <emphasis role="strong">booléen</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/null.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">null</programlisting>
</para>
</formalpara>
<simpara>On utilise <literal>null</literal> pour signifier l'<emphasis role="strong">absence de valeur</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/undefined.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">undefined</programlisting>
</para>
</formalpara>
<simpara>La valeur <literal>undefined</literal> est utilisée pour signifier
qu&#8217;une <emphasis role="strong">valeur</emphasis> est <emphasis role="strong">inconnue</emphasis>.
Rares sont les cas où on choisira ce type de données par nous-même.
<indexterm>
<primary>undefined</primary>
</indexterm>
<indexterm>
<primary>type de données</primary><secondary>undefined</secondary>
</indexterm>
<indexterm>
<primary>undefined</primary>
</indexterm></simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Primitives</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur primitives.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Data_structures">developer.mozilla.org/docs/fr/Web/JavaScript/Data_structures</link>
</simpara>
</note>
<simpara>Il existe trois autres types de données qui se basent sur ces types
dits <emphasis>primitifs</emphasis>.
Ils sont destinés à ranger, à classer et à exprimer de nouvelles valeurs
en fonction d&#8217;autres.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/array.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">[2, 'C', 2, 'G']</programlisting>
</para>
</formalpara>
<simpara>Un tableau se déclare en encadrant une suite de valeurs entre crochets.
Il est capable de contenir n&#8217;importe quel type de valeurs et autant que nécessaire.
L&#8217;ordre des valeurs a généralement une importance.
<indexterm>
<primary>tableau</primary>
</indexterm>
<indexterm>
<primary>type de données</primary><secondary>tableau</secondary>
</indexterm>
<indexterm>
<primary>tableau</primary>
</indexterm></simpara>
<simpara>On peut effectuer des opérations de tri et de sélection avec un
<emphasis role="strong">tableau de valeurs</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/object.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">{
  title: 'Node.js',
  isbn: '978-2212139938',
  published: true
}</programlisting>
</para>
</formalpara>
<simpara>Un objet se déclare en encadrant une suite de <emphasis>paires clé/valeur</emphasis>
entre accolades.
Il fonctionne comme un <emphasis>dictionnaire</emphasis>&#160;: on associe une valeur (type au choix)
à une clé (un intitulé, un label).
L&#8217;ordre des paires n&#8217;a généralement pas d&#8217;importance.
<indexterm>
<primary>objet</primary>
</indexterm>
<indexterm>
<primary>type de données</primary><secondary>objet</secondary>
</indexterm>
<indexterm>
<primary>objet</primary>
</indexterm></simpara>
<simpara>On peut effectuer des opérations de sélection avec un
<emphasis role="strong">objet de valeurs</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/function.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">function double(value) {
  return value * 2;
}

double(3);</programlisting>
</para>
</formalpara>
<simpara>Une fonction accepte des <emphasis>arguments</emphasis>, de n&#8217;importe quel type et
autant que nécessaire.
Elle doit être <emphasis>déclarée</emphasis> pour être <emphasis>exécutée</emphasis>
(dernière ligne de l&#8217;exemple précédent).
<indexterm>
<primary>fonction</primary>
</indexterm>
<indexterm>
<primary>type de données</primary><secondary>fonction</secondary>
</indexterm>
<indexterm>
<primary>fonction</primary>
</indexterm></simpara>
<simpara>Une fonction <emphasis>retourne</emphasis> un résultat explicite avec le
mot-clé <literal>return</literal>.
Dans le cas contraire, ECMAScript considère
que la valeur retournée équivaut implicitement à <literal>undefined</literal>.</simpara>
<simpara>On peut effectuer des opérations de transformation avec une fonction.</simpara>
<simpara>Les fonctions sont destinées à être <emphasis>appelées</emphasis>, pour effectuer
des traitements répétitifs.
Dès que l&#8217;on doit écrire deux fois la même chose,
on l&#8217;écrit dans une fonction qu&#8217;on appelle deux&#160;fois.</simpara>
</section>
<section xml:id="les_variables">
<title>Les variables</title>
<simpara><indexterm>
<primary>variable</primary>
</indexterm></simpara>
<simpara>Les variables servent à ranger des valeurs.
On peut ainsi les réutiliser plus tard, les transmettre et prendre
des décisions en fonction de ce qu&#8217;elles contiennent.</simpara>
<simpara>Les variables nous aident à <emphasis>donner du sens</emphasis> à notre code,
à le rendre intelligible par d&#8217;autres personnes
ainsi qu&#8217;à nommer des choses comme on le ferait dans notre quotidien.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/variables.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const book = {
  title: 'Node.js',
  isbn: '978-2212139938',
  published: true
};

const base_price = 13;

function double(value) {
  return value * 2;
}

book.price = double(base_price);</programlisting>
</para>
</formalpara>
<simpara>À votre avis, quel est le prix du livre calculé dans
l&#8217;exemple précédent&#160;?
Il suffit de suivre le chemin que prend la nouvelle valeur
rangée dans la clé <literal>price</literal> de l&#8217;objet <literal>book</literal>, calculée par la fonction
<literal>double</literal> à laquelle on passe la valeur contenue dans la variable <literal>base_price</literal>.</simpara>
<simpara>Le mot-clé <literal>const</literal> nous a servi à <emphasis>déclarer</emphasis> une variable.
On ne peut étiqueter ainsi une variable avec le même nom qu&#8217;une seule fois.
L&#8217;exemple suivant générera une erreur lors de la deuxième affectation&#160;:
<indexterm>
<primary>variable</primary><secondary>const</secondary>
</indexterm>
<indexterm>
<primary>const</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>variables/const.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const base_price = 13;
const base_price = 14;</programlisting>
</para>
</formalpara>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Une variable <indexterm><primary>constante</primary></indexterm>constante ?</title>
<simpara><literal>const</literal> est un type de variable qui ne peut être ni redéclaré ni être réaffecté&#160;:
c&#8217;est en ça qu&#8217;il est <emphasis>constant</emphasis>.</simpara>
<simpara>Une variable <literal>const</literal> n&#8217;empêche pas la modification de son contenu, dans le cas
d&#8217;un tableau ou d&#8217;un objet.
La fonction <literal>Object.freeze()</literal> est une réponse adaptée pour garantir son immuabilité.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>variables/const-freeze.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const table = ['a', 'b'];

table.push('c');
console.log(table);       <co xml:id="CO1-1"/>

Object.freeze(table);     <co xml:id="CO1-2"/>
table.push('d');          <co xml:id="CO1-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO1-1">
<para>Affiche <literal>[ 'a', 'b', 'c' ]</literal>.</para>
</callout>
<callout arearefs="CO1-2">
<para>L&#8217;objet <literal>table</literal> est gelé grâce à la fonction <literal>Object.freeze()</literal>.</para>
</callout>
<callout arearefs="CO1-3">
<para>Cette ligne lance une erreur car nous tentons de modifier un objet gelé.</para>
</callout>
</calloutlist>
</note>
<simpara><indexterm>
<primary>objet</primary><secondary>Object.freeze()</secondary>
</indexterm>
<indexterm>
<primary>Object.freeze()</primary>
</indexterm></simpara>
</section>
<section xml:id="les_instructions">
<title>Les instructions</title>
<simpara><indexterm>
<primary>instruction</primary>
</indexterm></simpara>
<simpara>Des <emphasis>instructions</emphasis> nous servent à suivre, éviter ou répéter
des chemins dans notre code.</simpara>
<simpara>L&#8217;instruction&#160;<literal>if</literal> exécute du code s&#8217;il remplit une condition.
Cette dernière peut être une <emphasis>valeur</emphasis> ou une <emphasis>expression</emphasis> interprétée
pour savoir à quel <emphasis>booléen</emphasis> elle correspond.
<indexterm>
<primary>instruction</primary><secondary>if (condition)</secondary>
</indexterm>
<indexterm>
<primary>if (condition)</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>instructions/if.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const book = {
  title: 'Node.js',
  published: true
};

if (book.published &amp;&amp; book.title) {
  console.log('Le livre est publié (et a un titre)');
}</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exemple précédent vérifie que les deux conditions sont remplies
(opérateur <literal>&amp;&amp;</literal>) pour afficher un message en conséquence.
<indexterm>
<primary>opérateur</primary><secondary>&amp;&amp; (et)</secondary>
</indexterm>
<indexterm>
<primary>&amp;&amp; (et)</primary>
</indexterm></simpara>
<simpara>On notera au passage que <literal>book.title</literal> n&#8217;est pas un booléen.
ECMAScript regarde dans ce cas que la chaîne de caractères
contient <emphasis>au moins un caractère</emphasis>.
On expliquera ce comportement plus en détail dans la section
<quote><link linkend="boolean">Jongler avec des valeurs vraies ou fausses</link></quote>.</simpara>
<simpara>L&#8217;instruction&#160;<literal>if</literal> peut être complétée avec l&#8217;instruction <literal>else</literal>
pour exécuter du code qui répondrait au cas contraire.
Il est possible d&#8217;imbriquer plusieurs <literal>else if</literal> à la suite.
<indexterm>
<primary>instruction</primary><secondary>if &#8230;&#8203; else</secondary>
</indexterm>
<indexterm>
<primary>if &#8230;&#8203; else</primary>
</indexterm>
<indexterm>
<primary>instruction</primary><secondary>else if</secondary>
</indexterm>
<indexterm>
<primary>else if</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>instructions/else-if.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const book = {
  title: 'Node.js',
  published: true
};

if (book.published &amp;&amp; book.title) {
  console.log('Le livre est publié avec un titre.');
}
else if (book.published) {
  console.log('Le livre est publié (sans titre).');
}
else {
  console.log('Le livre n\'est pas publié.');
}</programlisting>
</para>
</formalpara>
<simpara>Notre exemple n&#8217;empruntera qu&#8217;un seul des chemins, mais on constate
qu&#8217;on pourrait en emprunter un autre
en modifiant la valeur des clés <literal>title</literal> et <literal>published</literal>.</simpara>
</section>
<section xml:id="scope">
<title>La <indexterm><primary>portée</primary></indexterm>portée (scope)</title>
<simpara><indexterm>
<primary>variable</primary><secondary>portée</secondary>
</indexterm>
<indexterm>
<primary>portée</primary>
</indexterm></simpara>
<simpara>La <emphasis>portée</emphasis> est un concept très présent dans ECMAScript.
On y fait souvent référence en parlant de <emphasis>variable globale</emphasis>&#160;et
de <emphasis>variable locale</emphasis>.
C&#8217;est une sorte de frontière d&#8217;accès à la valeur
d&#8217;une variable.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>scopes/local.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">function secret(){
  const mot = 'devinette';

  return 'None shall pass';
}

console.log(secret());
console.log(mot);</programlisting>
</para>
</formalpara>
<simpara>Dans cet exemple, la variable <literal>secret</literal> de type fonction a une portée globale au script.
En revanche, la variable <literal>mot</literal> est définie dans la fonction <literal>secret</literal>
et n&#8217;est donc pas accessible en dehors de la portée de la fonction.
À l&#8217;inverse, ce qui est défini <emphasis>en dehors</emphasis> d&#8217;une fonction
est accessible <emphasis>à l&#8217;intérieur</emphasis> d&#8217;une fonction.</simpara>
<simpara>La portée de la variable <literal>mot</literal> est locale à la fonction <literal>secret</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>scopes/global.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const year = 2018;

function next(value) {
  return value + 1;
}

function nextYear() {
  return next(year);
}

console.log(year);
console.log(nextYear());
console.log(value);</programlisting>
</para>
</formalpara>
<simpara>Ici, nous illustrons la portée globale de la variable
<literal>year</literal>.
Elle est définie un cran au-dessus des fonctions <literal>next</literal> et <literal>nextYear</literal>.
On peut y accéder, comme en atteste le code de la fonction <literal>nextYear</literal>.</simpara>
<simpara>À l&#8217;inverse, la variable <literal>value</literal> a une portée locale
– elle est passée en paramètre de la fonction <literal>next</literal>.
ECMAScript génèrera une erreur si on tente
d&#8217;y accéder en dehors de sa portée.</simpara>
<simpara><emphasis role="strong">La portée est délimitée par les fonctions</emphasis>.
En l&#8217;absence de fonction, la portée maximale est celle du module (script)
dans lequel la variable est déclarée.</simpara>
<simpara>Il existe un deuxième type de portée&#160;: la <emphasis>portée lexicale</emphasis>.
L&#8217;exemple suivant servira à illustrer la nature de sa délimitation.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>scopes/lexical.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const book = {
  title: 'Node.js',
  published: true
};

if (book.published) {
  const price = 32;

  console.log(`Le livre ${book.title} coûte ${price}€.`);
}

console.log(`Le livre ${book.title} coûte ${price}€.`);</programlisting>
</para>
</formalpara>
<simpara>Le mot-clé <literal>const</literal> crée une variable certes,
mais une variable dont la portée est <emphasis>lexicale</emphasis>.
<emphasis role="strong">La portée lexicale est délimitée par le bloc d&#8217;instructions</emphasis>
dans lequel la variable est déclarée.
<indexterm>
<primary>variable</primary><secondary>const</secondary>
</indexterm>
<indexterm>
<primary>const</primary>
</indexterm></simpara>
<simpara>Ainsi, la variable <literal>price</literal> n&#8217;existe que dans le cadre du bloc <literal>if</literal>.</simpara>
<simpara>La portée lexicale sert à déclarer des variables sans "polluer" le reste du script,
pour que son existence soit oubliée aussitôt le bloc exécuté.</simpara>
</section>
</section>
<section xml:id="string">
<title>Jongler avec du texte (chaînes de caractères)</title>
<simpara><indexterm>
<primary>chaîne de caractères</primary>
</indexterm></simpara>
<simpara>Il est commun d&#8217;avoir à travailler avec des chaînes de caractères.
Elles servent à stocker des URL, des titres, des identifiants,
des tweets, des messages et des textes longs, entre autres.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">// Utilisation de guillemets simples
console.log('L\'après-midi\nLe soir');  <co xml:id="CO2-1"/>

// Utilisation de guillemets doubles
console.log("L'après-midi\nLe soir");   <co xml:id="CO2-2"/>

// Utilisation de guillemets obliques
console.log(`L'après-midi
Le soir`);                              <co xml:id="CO2-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO2-1">
<para>Utilisation de guillemets simples (<literal>\n</literal> sert à revenir à la ligne).</para>
</callout>
<callout arearefs="CO2-2">
<para>Utilisation de guillemets doubles&#160;: évite d&#8217;échapper le guillemet simple.</para>
</callout>
<callout arearefs="CO2-3">
<para>Utilisation de guillemets obliques&#160;: autorise l&#8217;écriture sur plusieurs lignes.</para>
</callout>
</calloutlist>
<simpara>Tous les caractères sont utilisables&#160;: lettres, chiffres,
caractères accentués, émojis et même des sinogrammes ou des kanjis.
Autrement dit, il n&#8217;y a pas de limite.
Les environnements d&#8217;exécution se représentent les caractères au format
UTF-16 (tables de stockage Unicode sur 16&#160;bits de données).</simpara>
<simpara>Il est fréquent d&#8217;avoir à <emphasis>concaténer</emphasis> des chaînes de caractères,
ou à les composer à partir d&#8217;une autre variable.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/concat.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mot = 'pot';

console.log(`${mot} de colle`);
console.log(`${mot} de fleur`);</programlisting>
</para>
</formalpara>
<simpara><indexterm>
<primary>chaîne de caractère</primary><secondary>concaténation</secondary>
</indexterm>
<indexterm>
<primary>concaténation</primary>
</indexterm></simpara>
<simpara>Toute chaîne de caractères offre un ensemble
d'<emphasis>attributs</emphasis> (<literal>.quelque-chose</literal>)
et de <emphasis>méthodes</emphasis> (<literal>.autre-chose()</literal>) pour en savoir plus
sur la chaîne mais aussi pour la transformer.</simpara>
<simpara>Par exemple, on connaît la longueur d&#8217;une chaîne via son attribut <literal>length</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/length.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log('I ♥ JavaScript'.length); <co xml:id="CO3-1"/>
console.log(''.length);               <co xml:id="CO3-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO3-1">
<para>Affiche&#160;<literal>14</literal>.</para>
</callout>
<callout arearefs="CO3-2">
<para>Affiche&#160;<literal>0</literal>.
<indexterm>
<primary>chaîne de caractère</primary><secondary>length</secondary>
</indexterm>
<indexterm>
<primary>length</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>On accède à un caractère spécifique en utilisant
la chaîne comme un tableau, ou à l&#8217;aide d&#8217;une méthode dédiée&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/char-at.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mot = 'Node.js';

console.log(mot[0]);        <co xml:id="CO4-1"/>
console.log(mot.charAt(1)); <co xml:id="CO4-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO4-1">
<para>Affiche&#160;<literal>N</literal>.</para>
</callout>
<callout arearefs="CO4-2">
<para>Affiche&#160;<literal>o</literal>.
<indexterm>
<primary>chaîne de caractère</primary><secondary>charAt()</secondary>
</indexterm>
<indexterm>
<primary>charAt()</primary>
</indexterm></para>
</callout>
</calloutlist>
<warning>
<title><phrase role="RemarquePreTitre">Attention</phrase></title>
<simpara>Le premier caractère d&#8217;une chaîne est à l&#8217;index&#160;0 et non pas à&#160;1.</simpara>
</warning>
<simpara>Deux autres fonctions transforment
un texte en lettres minuscules ou majuscules&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/lower-upper-case.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mot = 'Node.js';

console.log(mot.toLocaleLowerCase()); <co xml:id="CO5-1"/>
console.log(mot.toLocaleUpperCase()); <co xml:id="CO5-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO5-1">
<para>Affiche <literal>node.js</literal>.</para>
</callout>
<callout arearefs="CO5-2">
<para>Affiche <literal>NODE.JS</literal>.
<indexterm>
<primary>chaîne de caractère</primary><secondary>toLocaleUpperCase()</secondary>
</indexterm>
<indexterm>
<primary>toLocaleUpperCase()</primary>
</indexterm>
<indexterm>
<primary>chaîne de caractère</primary><secondary>toLocaleLowerCase()</secondary>
</indexterm>
<indexterm>
<primary>toLocaleLowerCase()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>D&#8217;autres fonctions nettoient ou complètent les espaces autour,
au début ou à la fin d&#8217;une chaîne de caractères&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/trim-pad.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mot = '  Node.js  ';

console.log(mot.trim());      <co xml:id="CO6-1"/>
console.log(mot.trimLeft());  <co xml:id="CO6-2"/>
console.log(mot.trimRight()); <co xml:id="CO6-3"/>

const swiftCode = 'BARCGB22';

console.log(swiftCode.padEnd(11, 'X')); <co xml:id="CO6-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO6-1">
<para>Affiche <literal>Node.js</literal>.</para>
</callout>
<callout arearefs="CO6-2">
<para>Affiche <literal>Node.js&#160;&#160;</literal>.</para>
</callout>
<callout arearefs="CO6-3">
<para>Affiche <literal>&#160;&#160;Node.js</literal>.</para>
</callout>
<callout arearefs="CO6-4">
<para>Affiche <literal>BARCGB22XXX</literal>.
<indexterm>
<primary>chaîne de caractère</primary><secondary>trim()</secondary>
</indexterm>
<indexterm>
<primary>trim()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Dans cet exemple, la méthode <literal>padEnd</literal> complète jusqu&#8217;à <literal>11</literal>&#160;caractères,
avec la lettre <literal>X</literal>.
La méthode <literal>padStart</literal> fait la même chose mais avec le début de la chaîne.
<indexterm>
<primary>chaîne de caractère</primary><secondary>padEnd()</secondary>
</indexterm>
<indexterm>
<primary>padEnd()</primary>
</indexterm>
<indexterm>
<primary>chaîne de caractère</primary><secondary>padStart()</secondary>
</indexterm>
<indexterm>
<primary>padStart()</primary>
</indexterm></simpara>
<simpara><literal>indexOf</literal> retourne la position de la <emphasis>première occurrence</emphasis> dans une chaîne
d&#8217;une sous-chaîne passée en paramètre.
Si la valeur n&#8217;est pas trouvée, la méthode renvoie la valeur&#160;<literal>-1</literal>.
À l&#8217;inverse, <literal>lastIndexOf</literal> retournera la dernière occurrence trouvée&#160;:
<indexterm>
<primary>chaîne de caractère</primary><secondary>indexOf()</secondary>
</indexterm>
<indexterm>
<primary>indexOf()</primary>
</indexterm>
<indexterm>
<primary>chaîne de caractère</primary><secondary>lastIndexOf()</secondary>
</indexterm>
<indexterm>
<primary>lastIndexOf()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/index-of.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log('I ♥ JavaScript'.indexOf('JavaScript')); <co xml:id="CO7-1"/>
console.log('I ♥ JavaScript'.indexOf('?'));          <co xml:id="CO7-2"/>
console.log('I ♥ JavaScript'.indexOf('a'));          <co xml:id="CO7-3"/>
console.log('I ♥ JavaScript'.lastIndexOf('a'));      <co xml:id="CO7-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO7-1">
<para>Retourne&#160;<literal>4</literal>.</para>
</callout>
<callout arearefs="CO7-2">
<para>Retourne&#160;<literal>-1</literal>&#160;– aucune occurrence n&#8217;a été trouvée.</para>
</callout>
<callout arearefs="CO7-3">
<para>Retourne&#160;<literal>5</literal>&#160;– première occurrence de la lettre&#160;<literal>a</literal>.</para>
</callout>
<callout arearefs="CO7-4">
<para>Retourne&#160;<literal>7</literal>&#160;– dernière occurrence de la lettre&#160;<literal>a</literal>.</para>
</callout>
</calloutlist>
<section xml:id="regexp">
<title>Expressions régulières (RegExp)</title>
<simpara><indexterm>
<primary>chaîne de caractère</primary><secondary>expression régulière</secondary>
</indexterm>
<indexterm>
<primary>expression régulière</primary>
</indexterm>
<indexterm>
<primary>chaîne de caractère</primary><secondary>RegExp</secondary>
</indexterm>
<indexterm>
<primary>RegExp</primary>
</indexterm></simpara>
<simpara>Si <literal>indexOf</literal> et <literal>lastIndexOf</literal> identifient des caractères exacts,
comment faire lorsque l&#8217;on souhaite chercher de manière approximative,
plusieurs fois et selon certaines conditions&#160;?</simpara>
<simpara>Les <emphasis>expressions régulières</emphasis> (<emphasis>RegExp</emphasis>, pour <emphasis>Regular Expressions</emphasis>)
entrent en jeu dans ces cas plus avancés.
Leur mécanisme décrit des <emphasis>motifs</emphasis> à identifier.
Plusieurs <emphasis>méthodes</emphasis> servent ensuite à tester, identifier et remplacer
ces motifs au sein d&#8217;une chaîne de caractères.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Anecdote</phrase> RegExp et Perl</title>
<simpara>La syntaxe d&#8217;expressions régulières est inspirée de celle du langage
de programmation Perl (<phrase role="URL"><link xl:href="https://www.perl.org">www.perl.org</link></phrase>) dans sa version&#160;5.</simpara>
</tip>
<simpara>Une expression régulière est décrite le plus souvent en tant que motif
encadré par des barres obliques, suffixé d'<emphasis>options</emphasis> exprimées sous forme de lettres&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">/[a-z]+.js/i</programlisting>
</para>
</formalpara>
<simpara>Cet exemple utilise l&#8217;option&#160;<literal>i</literal> mais il en existe plusieurs&#160;:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>Insensible à la casse&#160;(<literal>i</literal>)</simpara>
</entry>
<entry>
<simpara>On souhaite identifier du contenu, peu importe s&#8217;il est en majuscules ou non.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Multiligne&#160;(<literal>m</literal>)</simpara>
</entry>
<entry>
<simpara>La recherche s&#8217;effectue sur <emphasis>toutes</emphasis> les lignes.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Global&#160;(<literal>g</literal>)</simpara>
</entry>
<entry>
<simpara>La recherche identifie <emphasis>tous</emphasis> les résultats&#160;– au lieu du seul premier.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Unicode&#160;(<literal>u</literal>)</simpara>
</entry>
<entry>
<simpara>S&#8217;utilise si le motif de recherche exprime des séquences de caractères
Unicode sous la forme&#160;<literal>\u{&#8230;&#8203;}</literal> (voir les <emphasis>classes de caractères</emphasis> ci-après).</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Illustrons leur utilisation en <emphasis>identifiant du texte</emphasis> répondant (<literal>match</literal>)
à une <emphasis>expression régulière</emphasis>&#160;(<literal>/&#8230;&#8203;/</literal>)&#160;:
<indexterm>
<primary>chaîne de caractère</primary><secondary>match()</secondary>
</indexterm>
<indexterm>
<primary>match()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/flags.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const text = 'I ♥ Node.js &amp; Anode';

console.log(text.match(/node/i));   <co xml:id="CO8-1"/>
console.log(text.match(/ode/g));    <co xml:id="CO8-2"/>
console.log(text.match(/node/ig));  <co xml:id="CO8-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO8-1">
<para>Identifie et affiche <literal>Node</literal>, l&#8217;occurrence contenue dans le mot <literal>Node.js</literal>.</para>
</callout>
<callout arearefs="CO8-2">
<para>Affiche deux fois <literal>ode</literal>&#160;– les occurrences contenues dans les mots <literal>Node.js</literal> et <literal>Anode</literal>.</para>
</callout>
<callout arearefs="CO8-3">
<para>Affiche <literal>Node</literal> et <literal>node</literal> en combinant les deux options&#160;<literal>i</literal> et&#160;<literal>g</literal>&#160;– les occurrences contenues dans les mots <literal>Node.js</literal> et <literal>Anode</literal>.</para>
</callout>
</calloutlist>
<simpara>Des éléments de syntaxe complètent les options pour
identifier des motifs au sein de chaînes de caractères&#160;:
<indexterm>
<primary>chaîne de caractère</primary><secondary>syntaxe</secondary>
</indexterm>
<indexterm>
<primary>syntaxe</primary>
</indexterm></simpara>
<variablelist>
<varlistentry>
<term>Ensemble de caractères (entre&#160;<literal>[</literal>&#160;et&#160;<literal>]</literal>)</term>
<listitem>
<simpara>Liste l&#8217;ensemble des caractères recherchés.
Le caractère&#160;<literal>-</literal> indique une plage de caractères.
(ex. <literal>[a-d]</literal> correspond à <literal>[abcd]</literal>, donc <emphasis>a</emphasis> ou&#160;_b_ ou&#160;_c_&#160;ou&#160;_d_).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Nombre de caractères (entre&#160;<literal>{</literal>&#160;et&#160;<literal>}</literal>)</term>
<listitem>
<simpara>Répète un caractère ou une sous-chaîne&#160;;
<emphasis>exactement</emphasis> (<literal>{2}</literal>&#160;– exactement deux fois),
<emphasis>au moins</emphasis> (<literal>{2,}</literal>&#160;– au moins deux fois)
ou <emphasis>entre</emphasis> (<literal>{1,2}</literal>&#160;– entre une et deux fois).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Nombre de caractères (<literal>?</literal>,&#160;<literal>+</literal>&#160;et&#160;<literal>*</literal>)</term>
<listitem>
<simpara>Version raccourcie du nombre de caractères pour des besoins usuels&#160;:
0&#160;ou&#160;1 caractère avec&#160;<literal>?</literal>,
1 caractère et plus avec&#160;<literal>+</literal> et
0 caractère et plus avec&#160;<literal>*</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/syntax.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const paris15 = '75015 Paris';
const avray = '92410 Ville-d\'Avray';

// test du code postal uniquement
console.log(paris15.match(/[0-9]{2}/));          <co xml:id="CO9-1"/>
console.log(paris15.match(/[0-9]{2,5}/));        <co xml:id="CO9-2"/>

// test du code postal et de la ville
console.log(paris15.match(/[0-9]{5} [a-zA-Z]+/)); <co xml:id="CO9-3"/>
console.log(paris15.match(/[0-9]{5} [a-z]+/i));   <co xml:id="CO9-4"/>

// test sur un nom de ville composé
console.log(avray.match(/[0-9]{5} [a-z]+/i));     <co xml:id="CO9-5"/>
console.log(avray.match(/[0-9]{5} [a-z'-]+/i));   <co xml:id="CO9-6"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO9-1">
<para>Affiche <literal>["75"]</literal>&#160;– les 2&#160;premiers caractères numériques de la chaîne.</para>
</callout>
<callout arearefs="CO9-2">
<para>Affiche <literal>["75015"]</literal>&#160;– les 5&#160;premiers caractères numériques (satisfait la condition&#160;<literal>5</literal> de&#160;<literal>{2,5}</literal>).</para>
</callout>
<callout arearefs="CO9-3">
<para>Affiche <literal>["75015 Paris"]</literal>.</para>
</callout>
<callout arearefs="CO9-4">
<para>Affiche <literal>["75015 Paris"]</literal>&#160;– l&#8217;option&#160;<literal>i</literal> évite de préciser l&#8217;ensemble&#160;<literal>A-Z</literal>.</para>
</callout>
<callout arearefs="CO9-5">
<para>Affiche <literal>["92410 Ville"]</literal>&#160;– capture les caractères jusqu&#8217;à ce que la condition ne soit plus remplie en rencontrant le trait d&#8217;union&#160;(<literal>-</literal>).</para>
</callout>
<callout arearefs="CO9-6">
<para>Affiche <literal>["92410 Ville-d&#8217;Avray"]</literal>.</para>
</callout>
</calloutlist>
<simpara>D&#8217;autres opérateurs délimitent notre recherche&#160;:</simpara>
<variablelist>
<varlistentry>
<term>Début et fin de chaîne (<literal>^</literal>&#160;et&#160;<literal>$</literal>)</term>
<listitem>
<simpara>Quand l&#8217;option multiligne (<literal>m</literal>) est utilisée, les notions de début
et de fin s&#8217;appliquent au niveau de la ligne.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Limite de mot&#160;(<literal>\b</literal>)</term>
<listitem>
<simpara>Symbolise tout caractère ne faisant pas partie d&#8217;un mot, y compris le début
ou la fin d&#8217;une chaîne.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Ou&#160;(<literal>|</literal>)</term>
<listitem>
<simpara>Sépare deux choix (ex. <literal>/noir|blanc/</literal>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Groupe de capture (entre&#160;<literal>(</literal>&#160;et&#160;<literal>)</literal>)</term>
<listitem>
<simpara>  Délimite un groupe de caractères.
  Les groupes peuvent par la suite être <emphasis>identifiés</emphasis> et <emphasis>remplacés</emphasis>.<?asciidoc-br?>
  On notera également que l&#8217;emploi des <emphasis>groupes</emphasis> change
  la structure des résultats en un tableau de plusieurs éléments,
  de la forme <literal>["chaîne identifiée", "groupe 1", "groupe 2" &#8230;&#8203;]</literal>.
<indexterm>
<primary>expression régulière</primary><secondary>syntaxe</secondary>
</indexterm>
<indexterm>
<primary>syntaxe</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
</variablelist>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/limits.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const postcode = '75015 Paris';
const cedex = `CODEPOSTAL VILLE CEDEX
33900 Bordeaux Cedex 9
33074 BORDEAUX CEDEX
33700 MERIGNAC Cidex 40`;

const nogroup = /^[0-9]{5} [a-z0-9' -]+/i;
const group = /^([0-9]{5}) [a-z0-9' -]+/i;

// avec ou sans groupe de capture
console.log(postcode.match(nogroup));         <co xml:id="CO10-1"/>
console.log(postcode.match(group));           <co xml:id="CO10-2"/>

// mode multiligne avec ou sans option globale
console.log(cedex.match(/^([0-9]{5})/im));    <co xml:id="CO10-3"/>
console.log(cedex.match(/^([0-9]{5})/gim));   <co xml:id="CO10-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO10-1">
<para>Affiche <literal>["75015 Paris"]</literal>.</para>
</callout>
<callout arearefs="CO10-2">
<para>Affiche <literal>["75015 Paris", "75015"]</literal>&#160;– le premier élément correspond à la chaîne identifiée tandis que le second correspond au <emphasis>premier</emphasis> groupe de capture.</para>
</callout>
<callout arearefs="CO10-3">
<para>Affiche <literal>["33900", "33900"]</literal>&#160;– l&#8217;option multiligne itère de ligne en ligne jusqu&#8217;à trouver un motif.</para>
</callout>
<callout arearefs="CO10-4">
<para>Affiche <literal>["33900", "33074", "33700"]</literal>&#160;– l&#8217;option multiligne globale retourne tous les groupes de capture.</para>
</callout>
</calloutlist>
<simpara>On notera qu&#8217;il faut faire attention à ce que l&#8217;on regarde&#160;:
le format de résultat varie selon qu&#8217;on utilise ou non des groupes de capture et
selon qu&#8217;on utilise l&#8217;option globale ou multiligne.</simpara>
<simpara>Des symboles servent de raccourcis pour désigner
plusieurs caractères simultanément&#160;:</simpara>
<variablelist>
<varlistentry>
<term>Tout caractère&#160;(<literal>.</literal>)</term>
<listitem>
<simpara>tout caractère sauf le saut de ligne.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Caractère de mot&#160;(<literal>\w</literal>)</term>
<listitem>
<simpara>Tout caractère pouvant composer un mot anglais&#160;:
les caractères accentués ne sont pas englobés
(identique à <literal>[A-Za-z0-9_]</literal>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Caractère numérique&#160;(<literal>\d</literal>)</term>
<listitem>
<simpara>Identique à&#160;<literal>[0-9]</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Caractère d&#8217;espacement&#160;(<literal>\s</literal>)</term>
<listitem>
<simpara>Tout caractère d&#8217;espacement&#160;: espace, tabulation, retour chariot, etc.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Caractère Unicode&#160;(<literal>\u{&#8230;&#8203;}</literal>)</term>
<listitem>
<simpara>  Doit être combiné avec l&#8217;option&#160;<literal>u</literal> (<literal>/&#8230;&#8203;/u</literal>).
  Exemple&#160;: ♥︎&#160;&#8594;&#160;<literal>\u{2665}</literal>.
<indexterm>
<primary>expression régulière</primary><secondary>syntaxe</secondary>
</indexterm>
<indexterm>
<primary>syntaxe</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Les alternatives de classes en majuscules sont des <emphasis>négations</emphasis>.
<literal>\W</literal>&#160;pour "tout sauf un caractère de mot", <literal>\S</literal>&#160;pour "tout sauf un caractère
d&#8217;espacement", etc.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/classes.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const text = 'I ♥ RegExp in 2018';
console.log(text.match(/\u{2665} (\w+)/u));   <co xml:id="CO11-1"/>

const [,iLove,year] = text.match(/^(I \u{2665}).+(\d{4})$/u);
console.log(`${iLove} ${year}`);              <co xml:id="CO11-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO11-1">
<para>Affiche <literal>["♥ RegExp", "RegExp"]</literal>&#160;– et s&#8217;arrête là car l&#8217;espace suivant n&#8217;est pas un caractère de&#160;mot.</para>
</callout>
<callout arearefs="CO11-2">
<para>Affiche <literal>"I ♥ 2019"</literal>&#160;– on a extrait le début de la phrase et l&#8217;année placée en fin de chaîne.
<indexterm>
<primary>expression régulière</primary><secondary>classe</secondary>
</indexterm>
<indexterm>
<primary>classe</primary>
</indexterm></para>
</callout>
</calloutlist>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Expressions régulières</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur les expressions régulières.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/RegExp">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/RegExp</link>
</simpara>
</note>
<simpara>La méthode <literal>test</literal> est pratique si la seule chose qui vous intéresse
est de tester si une chaîne correspond à un motif&#160;:
<indexterm>
<primary>expression régulière</primary><secondary>test()</secondary>
</indexterm>
<indexterm>
<primary>test()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/test.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const cedex = `CODEPOSTAL VILLE CEDEX
33900 Bordeaux Cedex 9
33074 BORDEAUX CEDEX
33700 MERIGNAC Cidex 40`;

const postcode_tester = /^\d{5}\s/m;

if (postcode_tester.test(cedex)) {
  console.log(cedex.match(/^(\d{5})\b/gm));
}</programlisting>
</para>
</formalpara>
<simpara>Enfin, la méthode <literal>replace</literal> est très utile pour transformer des chaînes de
caractères, surtout en combinaison avec les groupes de capture&#160;:
<indexterm>
<primary>chaîne de caractère</primary><secondary>replace()</secondary>
</indexterm>
<indexterm>
<primary>replace()</primary>
</indexterm>
<indexterm>
<primary>expression régulière</primary><secondary>replace()</secondary>
</indexterm>
<indexterm>
<primary>replace()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/replace.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const t = 'I ♥ JavaScript';

console.log(t.replace('♥', 'love'));    <co xml:id="CO12-1"/>
console.log(t.replace(/\b\w+$/, 'PHP'));<co xml:id="CO12-2"/>

const text = t.replace(/^.+(\u{2665}) (\w+)$/u, '$2 $1 me');
console.log(text);                      <co xml:id="CO12-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO12-1">
<para>Affiche <literal>"I love JavaScript"</literal>&#160;– si le premier argument de <literal>replace</literal> est une chaîne, elle est convertie automatiquement en expression régulière.</para>
</callout>
<callout arearefs="CO12-2">
<para>Affiche <literal>"I ♥ PHP"</literal>.</para>
</callout>
<callout arearefs="CO12-3">
<para>Affiche <literal>"JavaScript ♥ me"</literal>&#160;– les symboles <literal>$&lt;numéro&gt;</literal> représentent les groupes de capture, qu&#8217;on place dans l&#8217;ordre de notre choix.</para>
</callout>
</calloutlist>
<simpara>Le second argument accepte une <link linkend="functions">fonction</link>
pour procéder à des remplacements dynamiques&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/replace-function.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const text = 'I ♥ JavaScript';

const shout = text.replace(/\b(\w+)$/u, (pattern, lang) =&gt; {
  return lang.toLocaleUpperCase();
});

console.log(shout);   <co xml:id="CO13-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO13-1">
<para>Affiche <literal>"I ♥ JAVASCRIPT"</literal>&#160;– le dernier mot est transformé en majuscules.</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="boolean">
<title>Jongler avec des valeurs vraies ou fausses (booléens)</title>
<simpara><indexterm>
<primary>booléen</primary>
</indexterm></simpara>
<simpara>Un booléen est un élément logique dont la valeur est soit <literal>true</literal> soit <literal>false</literal>,
c&#8217;est-à-dire respectivement <emphasis>vrai</emphasis> ou <emphasis>faux</emphasis>.
Ce type de valeur sert à exprimer des résultats de condition
("si&#160;ça alors&#160;… sinon") ainsi qu&#8217;à affirmer ou infirmer quelque chose.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>boolean/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const counter = 3;

console.log(counter);               <co xml:id="CO14-1"/>
console.log(counter === 3);         <co xml:id="CO14-2"/>

const check = (counter === 3);

console.log(check);                 <co xml:id="CO14-3"/>
console.log(check === true);        <co xml:id="CO14-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO14-1">
<para>Affiche&#160;<literal>3</literal>.</para>
</callout>
<callout arearefs="CO14-2">
<para>Affiche <literal>true</literal>&#160;– la condition est vérifiée.</para>
</callout>
<callout arearefs="CO14-3">
<para>Affiche <literal>true</literal>&#160;– c&#8217;est la valeur de la variable <literal>check</literal> suite à son affectation à la ligne précédente.</para>
</callout>
<callout arearefs="CO14-4">
<para>Affiche <literal>true</literal>.</para>
</callout>
</calloutlist>
<simpara>Une donnée d&#8217;un autre type peut être convertie en booléen.
La logique qui déterminera si la conversion retournera <literal>true</literal> ou <literal>false</literal>
est la suivante&#160;:
<indexterm>
<primary>booléen</primary><secondary>conversion</secondary>
</indexterm>
<indexterm>
<primary>conversion</primary>
</indexterm>
<indexterm>
<primary>booléen</primary><secondary>Boolean()</secondary>
</indexterm>
<indexterm>
<primary>Boolean()</primary>
</indexterm></simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>true</literal></simpara>
</entry>
<entry>
<simpara>Toute valeur non&#160;nulle.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>false</literal></simpara>
</entry>
<entry>
<simpara>Toute valeur nulle (<literal>null</literal>, <literal>0</literal>,&#160;<literal>NaN</literal>), vide (<literal>''</literal>)
ou indéfinie (<literal>undefined</literal>).</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>boolean/convert.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const counter = 3;

console.log(Boolean(''));       <co xml:id="CO15-1"/>
console.log(Boolean(counter));  <co xml:id="CO15-2"/>
console.log(Boolean([]));       <co xml:id="CO15-3"/>

if (counter) {
  console.log('if (counter) équivaut à if (Boolean(counter))');
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO15-1">
<para>Affiche <literal>false</literal>&#160;– il s&#8217;agit d&#8217;une chaîne&#160;vide.</para>
</callout>
<callout arearefs="CO15-2">
<para>Affiche <literal>true</literal>&#160;– il s&#8217;agit d&#8217;une valeur non&#160;nulle.</para>
</callout>
<callout arearefs="CO15-3">
<para>Affiche <literal>true</literal>&#160;– le tableau est vide mais l&#8217;objet en lui-même <emphasis>vaut</emphasis> quelque chose&#160;: un tableau.</para>
</callout>
</calloutlist>
</section>
<section xml:id="number">
<title>Jongler avec des valeurs numériques (Number, Math)</title>
<simpara><indexterm>
<primary>nombre</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>Number()</secondary>
</indexterm>
<indexterm>
<primary>Number()</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>Math</secondary>
</indexterm>
<indexterm>
<primary>Math</primary>
</indexterm></simpara>
<simpara>ECMAScript ne fait pas de distinction entre des entiers et des
nombres contenant des décimales&#160;: ce sont des <emphasis>nombres</emphasis> un point c&#8217;est tout.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(40);
console.log(40.0);

console.log(40 === 40.0);   <co xml:id="CO16-1"/>
console.log(40 === '40.0'); <co xml:id="CO16-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO16-1">
<para>Affiche <literal>true</literal>&#160;– les deux valeurs sont strictement équivalentes.</para>
</callout>
<callout arearefs="CO16-2">
<para>Affiche <literal>false</literal>&#160;– un élément entre guillemets est une chaîne de caractères, pas un nombre.</para>
</callout>
</calloutlist>
<simpara>Les nombres sont représentés par défaut en <emphasis>base&#160;10</emphasis>.
La plage de nombres utilisable dans un programme est définie par des
constantes ECMAScript&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/constants.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(Number.POSITIVE_INFINITY);  <co xml:id="CO17-1"/>
console.log(Number.NEGATIVE_INFINITY);  <co xml:id="CO17-2"/>

console.log(Number.MAX_VALUE);          <co xml:id="CO17-3"/>
console.log(Number.MIN_VALUE);          <co xml:id="CO17-4"/>

console.log(Number.MAX_SAFE_INTEGER);   <co xml:id="CO17-5"/>
console.log(Number.MIN_SAFE_INTEGER);   <co xml:id="CO17-6"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO17-1">
<para>Affiche&#160;<literal>Infinity</literal>.</para>
</callout>
<callout arearefs="CO17-2">
<para>Affiche&#160;<literal>-Infinity</literal>.</para>
</callout>
<callout arearefs="CO17-3">
<para>Affiche&#160;<literal>1.7976931348623157e+308</literal>&#160;– le plus grand réel utilisable.</para>
</callout>
<callout arearefs="CO17-4">
<para>Affiche&#160;<literal>5e-324</literal>&#160;– le plus petit réel utilisable.</para>
</callout>
<callout arearefs="CO17-5">
<para>Affiche&#160;<literal>9007199254740991</literal>&#160;– le plus grand entier utilisable.</para>
</callout>
<callout arearefs="CO17-6">
<para>Affiche&#160;<literal>-9007199254740991</literal>&#160;– le plus petit entier utilisable.
<indexterm>
<primary>nombre</primary><secondary>Number.POSITIVE_INFINITY</secondary>
</indexterm>
<indexterm>
<primary>Number.POSITIVE_INFINITY</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>Number.NEGATIVE_INFINITY</secondary>
</indexterm>
<indexterm>
<primary>Number.NEGATIVE_INFINITY</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>Number.MAX_VALUE</secondary>
</indexterm>
<indexterm>
<primary>Number.MAX_VALUE</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>Number.MIN_VALUE</secondary>
</indexterm>
<indexterm>
<primary>Number.MIN_VALUE</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>Number.MAX_SAFE_INTEGER</secondary>
</indexterm>
<indexterm>
<primary>Number.MAX_SAFE_INTEGER</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>Number.MIN_SAFE_INTEGER</secondary>
</indexterm>
<indexterm>
<primary>Number.MIN_SAFE_INTEGER</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Il est aussi possible de compter dans d&#8217;autres bases, notamment en hexadécimal
(<emphasis>base&#160;16</emphasis>).
Cette dernière est exprimée en préfixant la valeur par&#160;<literal>0x</literal> et avec les
caractères de&#160;0 à&#160;F&#160;– 0&#160;à&#160;9 puis A (vaut&#160;10),
B (vaut&#160;11), etc.
<indexterm>
<primary>nombre</primary><secondary>base 10</secondary>
</indexterm>
<indexterm>
<primary>base 10</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>base 16 (hexadécimal)</secondary>
</indexterm>
<indexterm>
<primary>base 16 (hexadécimal)</primary>
</indexterm>
<indexterm>
<primary>hexadécimal</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/hexa.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(0x0000);  <co xml:id="CO18-1"/>
console.log(0x000A);  <co xml:id="CO18-2"/>
console.log(0x00A0);  <co xml:id="CO18-3"/>
console.log(0x0A00);  <co xml:id="CO18-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO18-1">
<para>Affiche&#160;<literal>0</literal>.</para>
</callout>
<callout arearefs="CO18-2">
<para>Affiche&#160;<literal>10</literal>&#160;– car <literal>A</literal>&#160;en hexadécimal vaut&#160;10 en décimal.</para>
</callout>
<callout arearefs="CO18-3">
<para>Affiche&#160;<literal>160</literal>&#160;– pour <literal>10×16</literal> (une <quote>dizaine</quote> vaut&#160;16).</para>
</callout>
<callout arearefs="CO18-4">
<para>Affiche&#160;<literal>2560</literal>&#160;– pour <literal>10×16×16</literal> (une <quote>centaine</quote> vaut&#160;16×16).</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Rumeur</phrase> JavaScript est nul en virgule flottante !</title>
<simpara><indexterm>
<primary>nombre</primary><secondary>virgule flottante</secondary>
</indexterm>
<indexterm>
<primary>virgule flottante</primary>
</indexterm>
ECMAScript est souvent décrié pour son incapacité à gérer les opérations
mathématiques avec précision.</simpara>
<programlisting role="interactive interactive--javascript interactive--runtime--node-v10" language="javascript" linenumbering="unnumbered">0.2 + 0.6</programlisting>
<simpara>ECMAScript respecte le standard <emphasis>IEEE&#160;754</emphasis> de gestion de nombres à virgule
flottante sur 64&#160;bits de données.
Qui d&#8217;autre l&#8217;utilise&#160;?
D&#8217;autres langages "inconnus" comme Python, PHP et Ruby, entre autres.</simpara>
<simpara>Pour en savoir plus&#160;: <phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/IEEE_754">fr.wikipedia.org/wiki/IEEE_754</link></phrase>.</simpara>
</note>
<section xml:id="opérations_mathématiques">
<title>Opérations mathématiques</title>
<simpara>Les nombres s&#8217;utilisent pour effectuer des opérations mathématiques.
Chaque opération est dotée d&#8217;un symbole&#160;:
<indexterm>
<primary>nombre</primary><secondary>opérateur</secondary>
</indexterm>
<indexterm>
<primary>opérateur</primary>
</indexterm></simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Opération</entry>
<entry align="left" valign="top">Symbole</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>addition</simpara></entry>
<entry align="left" valign="top"><simpara><literal>+</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>soustraction</simpara></entry>
<entry align="left" valign="top"><simpara><literal>-</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>multiplication</simpara></entry>
<entry align="left" valign="top"><simpara><literal>*</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>division</simpara></entry>
<entry align="left" valign="top"><simpara><literal>/</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>modulo (reste de division)</simpara></entry>
<entry align="left" valign="top"><simpara><literal>%</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>exposant (puissance)</simpara></entry>
<entry align="left" valign="top"><simpara><literal>**</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/operations.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(2 + 4);     <co xml:id="CO19-1"/>
console.log(2 - 4);     <co xml:id="CO19-2"/>
console.log(2 * 4);     <co xml:id="CO19-3"/>
console.log(2 / 4);     <co xml:id="CO19-4"/>
console.log(2 % 4);     <co xml:id="CO19-5"/>
console.log(2 ** 4);    <co xml:id="CO19-6"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO19-1">
<para>Affiche&#160;<literal>6</literal>.</para>
</callout>
<callout arearefs="CO19-2">
<para>Affiche&#160;<literal>-2</literal>.</para>
</callout>
<callout arearefs="CO19-3">
<para>Affiche&#160;<literal>8</literal>.</para>
</callout>
<callout arearefs="CO19-4">
<para>Affiche&#160;<literal>0.5</literal>.</para>
</callout>
<callout arearefs="CO19-5">
<para>Affiche&#160;<literal>2</literal>.</para>
</callout>
<callout arearefs="CO19-6">
<para>Affiche&#160;<literal>16</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="nan">
<title>Les nombres qui n&#8217;en sont pas (<emphasis>NaN</emphasis>)</title>
<simpara><indexterm>
<primary>nombre</primary><secondary>NaN (Not a Number)</secondary>
</indexterm>
<indexterm>
<primary>NaN (Not a Number)</primary>
</indexterm></simpara>
<caution>
<title><phrase role="RemarquePreTitre">Attention</phrase> Opérations exotiques</title>
<simpara>Est-ce que vous avez déjà tenté d&#8217;additionner un nombre avec un tableau&#160;?
Pas forcément, mais ECMAScript ne vous en empêchera pas.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/operations-types.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(10 / '1');    <co xml:id="CO20-1"/>
console.log(10 / 0);      <co xml:id="CO20-2"/>
console.log(10 / []);     <co xml:id="CO20-3"/>
console.log(10 / {});     <co xml:id="CO20-4"/>
console.log(10 + null);   <co xml:id="CO20-5"/>
console.log(10 + true);   <co xml:id="CO20-6"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO20-1">
<para>La chaîne&#160;<literal>'1'</literal> sera convertie en nombre (voir plus loin).</para>
</callout>
<callout arearefs="CO20-2">
<para>On nous a toujours interdit la division par zéro&#160;; ici, on affiche&#160;<literal>Infinity</literal>.</para>
</callout>
<callout arearefs="CO20-3">
<para>Affiche aussi&#160;<literal>Infinity</literal>.</para>
</callout>
<callout arearefs="CO20-4">
<para>Seule cette opération retourne&#160;<literal>NaN</literal>.</para>
</callout>
<callout arearefs="CO20-5">
<para>Affiche&#160;<literal>10</literal>.</para>
</callout>
<callout arearefs="CO20-6">
<para>Affiche&#160;<literal>11</literal>&#160;— la valeur <literal>true</literal> est implicitement convertie en un entier.</para>
</callout>
</calloutlist>
</caution>
<simpara>Certaines opérations n&#8217;aboutiront pas mais n&#8217;afficheront pas d&#8217;erreur pour autant.
Dans ce cas, leur résultat vaudra <literal>NaN</literal> pour <emphasis>not&#160;a&#160;number</emphasis>
(littéralement&#160;: "n&#8217;est pas un nombre").</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/nan.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(10 / 'fromage');</programlisting>
</para>
</formalpara>
<simpara>La fonction <literal>Number.isNaN()</literal> nous aidera à vérifier si la valeur d&#8217;une variable
ou le résultat d&#8217;une opération est un&#160;<literal>NaN</literal> ou non.
Cette fonction retourne un <link linkend="boolean">booléen</link>.
<indexterm>
<primary>nombre</primary><secondary>Number.isNaN()</secondary>
</indexterm>
<indexterm>
<primary>Number.isNaN()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/is-nan.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(Number.isNaN(NaN));             <co xml:id="CO21-1"/>
console.log(Number.isNaN(10 / 'fromage'));  <co xml:id="CO21-2"/>

console.log(Number.isNaN(10));              <co xml:id="CO21-3"/>
console.log(Number.isNaN('fromage'));       <co xml:id="CO21-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO21-1">
<para>Affiche <literal>true</literal>.</para>
</callout>
<callout arearefs="CO21-2">
<para>Affiche <literal>true</literal>.</para>
</callout>
<callout arearefs="CO21-3">
<para>Affiche <literal>false</literal>.</para>
</callout>
<callout arearefs="CO21-4">
<para>Affiche <literal>false</literal>.</para>
</callout>
</calloutlist>
<warning>
<title><phrase role="RemarquePreTitre">Assertion</phrase> <literal>NaN</literal> n&#8217;est pas un nombre ?</title>
<simpara>Il faut se méfier de <literal>NaN</literal> comme de la peste, car il est considéré
comme un nombre du point de vue d&#8217;ECMAScript.
Toute opération mathématique impliquant&#160;<literal>NaN</literal> renverra un&#160;<literal>NaN</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/nan-number.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(typeof NaN);  <co xml:id="CO22-1"/>
console.log(typeof 10);   <co xml:id="CO22-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO22-1">
<para>Affiche <literal>'number'</literal>.</para>
</callout>
<callout arearefs="CO22-2">
<para>Affiche <literal>'number'</literal>.</para>
</callout>
</calloutlist>
<simpara>Il vaut mieux s&#8217;assurer qu&#8217;une variable est à la fois un nombre et
qu&#8217;elle ne vaut pas&#160;<literal>NaN</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/is-not-a-nan.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const result = 10 / 'fromage';

if (typeof result === 'number' &amp;&amp; !Number.isNaN(result)) {
  console.log('Ceci est un nombre.');
}
else {
  console.log('result n\'est pas un nombre.');
}</programlisting>
</para>
</formalpara>
</warning>
</section>
<section xml:id="convertir_en_nombre">
<title>Convertir en nombre</title>
<simpara>indexterm[nombre, conversion]</simpara>
<simpara>Les lignes qui précédent l&#8217;évoquent un peu&#160;: on peut passer d&#8217;autres types
de données à des nombres.
Idéalement, on voudra transformer explicitement quelque chose en un nombre.</simpara>
<simpara>Pour cela nous disposons de deux fonctions&#160;:
<indexterm>
<primary>nombre</primary><secondary>parseInt()</secondary>
</indexterm>
<indexterm>
<primary>parseInt()</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>parseFloat()</secondary>
</indexterm>
<indexterm>
<primary>parseFloat()</primary>
</indexterm></simpara>
<itemizedlist>
<listitem>
<simpara><literal>parseInt</literal> essaie d&#8217;interpréter un nombre entier.</simpara>
</listitem>
<listitem>
<simpara><literal>parseFloat</literal> essaie d&#8217;interpréter un nombre à virgule. La fonction s&#8217;arrête
dès qu&#8217;elle n&#8217;a plus affaire à un chiffre.</simpara>
</listitem>
</itemizedlist>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/parse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(parseInt('3.141592653589793'));   <co xml:id="CO23-1"/>
console.log(parseFloat('3.141592653589793')); <co xml:id="CO23-2"/>

console.log(parseInt('14.10-patch.2'));   <co xml:id="CO23-3"/>
console.log(parseFloat('14.10-patch.2')); <co xml:id="CO23-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO23-1">
<para>Affiche&#160;<literal>3</literal>.</para>
</callout>
<callout arearefs="CO23-2">
<para>Affiche&#160;<literal>3.141592653589793</literal>.</para>
</callout>
<callout arearefs="CO23-3">
<para>Affiche&#160;<literal>14</literal>&#160;– ça ne change rien pour <literal>parseInt</literal>.</para>
</callout>
<callout arearefs="CO23-4">
<para>Affiche&#160;<literal>14.1</literal>&#160;– la fonction s&#8217;arrête à la décimale précédant une lettre.</para>
</callout>
</calloutlist>
<simpara><literal>parseInt</literal> a cette particularité que l&#8217;on peut choisir la base
de la conversion avec le second argument de la fonction.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/parse-int.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(parseInt(10, 16));    <co xml:id="CO24-1"/>
console.log(parseInt('A', 16));   <co xml:id="CO24-2"/>
console.log(parseInt('A00', 16)); <co xml:id="CO24-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO24-1">
<para>Affiche&#160;<literal>16</literal>.</para>
</callout>
<callout arearefs="CO24-2">
<para>Affiche&#160;<literal>10</literal>&#160;– <literal>A</literal>&#160;vaut&#160;<literal>10</literal> en hexadécimal.</para>
</callout>
<callout arearefs="CO24-3">
<para>Affiche&#160;<literal>2560</literal>&#160;– aurait pu s&#8217;écrire <literal>0xA00</literal>.
<indexterm>
<primary>nombre</primary><secondary>base 16 (hexadécimal)</secondary>
</indexterm>
<indexterm>
<primary>base 16 (hexadécimal)</primary>
</indexterm>
<indexterm>
<primary>hexadécimal</primary>
</indexterm></para>
</callout>
</calloutlist>
</section>
<section xml:id="formater_et_arrondir_des_nombres">
<title>Formater et arrondir des nombres</title>
<simpara><indexterm>
<primary>nombre</primary><secondary>arrondir</secondary>
</indexterm>
<indexterm>
<primary>arrondir</primary>
</indexterm></simpara>
<simpara>Si l&#8217;envie vous prenait de vouloir arrondir des nombres, il existe
quelques fonctions pour vous aider&#160;:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>Math.round()</literal></simpara>
</entry>
<entry>
<simpara>Arrondit à l&#8217;entier le plus proche.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>Math.ceil()</literal></simpara>
</entry>
<entry>
<simpara>Arrondit à l&#8217;entier supérieur du nombre donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>Math.floor()</literal></simpara>
</entry>
<entry>
<simpara>  Arrondit à l&#8217;entier inférieur du nombre donné.
<indexterm>
<primary>nombre</primary><secondary>Math.round()</secondary>
</indexterm>
<indexterm>
<primary>Math.round()</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>Math.ceil()</secondary>
</indexterm>
<indexterm>
<primary>Math.ceil()</primary>
</indexterm>
<indexterm>
<primary>nombre</primary><secondary>Math.floor()</secondary>
</indexterm>
<indexterm>
<primary>Math.floor()</primary>
</indexterm></simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/round.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(Math.round(3.1));    <co xml:id="CO25-1"/>
console.log(Math.round(3.8));    <co xml:id="CO25-2"/>
console.log(Math.round(3.5));    <co xml:id="CO25-3"/>

console.log(Math.ceil(3.14));    <co xml:id="CO25-4"/>
console.log(Math.floor(3.99));   <co xml:id="CO25-5"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO25-1">
<para>Affiche&#160;<literal>3</literal>.</para>
</callout>
<callout arearefs="CO25-2">
<para>Affiche&#160;<literal>4</literal>.</para>
</callout>
<callout arearefs="CO25-3">
<para>Affiche&#160;<literal>4</literal>.</para>
</callout>
<callout arearefs="CO25-4">
<para>Affiche&#160;<literal>4</literal>.</para>
</callout>
<callout arearefs="CO25-5">
<para>Affiche&#160;<literal>3</literal>.</para>
</callout>
</calloutlist>
<simpara>Enfin, on peut préserver le formatage du nombre de décimales
après la virgule en transformant le nombre <emphasis>en chaîne de caractères</emphasis>
grâce à la méthode <literal>toFixed()</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/to-fixed.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(10.0101.toFixed(2));     <co xml:id="CO26-1"/>
console.log(10.0101.toFixed(0));     <co xml:id="CO26-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO26-1">
<para>Affiche&#160;<literal>'10.01'</literal>.</para>
</callout>
<callout arearefs="CO26-2">
<para>Affiche&#160;<literal>'10'</literal>.
<indexterm>
<primary>nombre</primary><secondary>toFixed()</secondary>
</indexterm>
<indexterm>
<primary>toFixed()</primary>
</indexterm></para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="functions">
<title>Créer et réutiliser des blocs de code (fonctions)</title>
<simpara><indexterm>
<primary>fonction</primary>
</indexterm></simpara>
<simpara>Une fonction est un <emphasis role="strong">bloc de code réutilisable et paramétrable</emphasis>.
Elle <emphasis>retourne</emphasis> un résultat dont la valeur se calcule en fonction des
paramètres que nous lui passons.</simpara>
<simpara>Cela se passe en deux temps&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>la <emphasis>création</emphasis> de la fonction&#160;;</simpara>
</listitem>
<listitem>
<simpara>l'<emphasis>exécution</emphasis>.</simpara>
</listitem>
</orderedlist>
<simpara>ECMAScript fournit un ensemble de fonctions de base&#160;: <literal>console.log()</literal>,
<literal>setTimeout()</literal>, etc.
Node ajoute les siennes (comme <literal>require()</literal>).
Nous avons la liberté d&#8217;en créer nous-mêmes, spécifiques à nos besoins.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>functions/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const hello = (mot) =&gt; `Hello ${mot}`;  <co xml:id="CO27-1"/>

console.log(hello);                     <co xml:id="CO27-2"/>
console.log(hello('World'));            <co xml:id="CO27-3"/>
console.log(hello('toi'));

const random = () =&gt; {
  const limit = 100;

  return Math.floor(Math.random() * limit);
};

console.log(random());                  <co xml:id="CO27-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO27-1">
<para>On <emphasis>crée</emphasis> la fonction <literal>hello</literal>.</para>
</callout>
<callout arearefs="CO27-2">
<para>Affiche <literal>[Function: hello]</literal>&#160;– il s&#8217;agit de la définition de la fonction.</para>
</callout>
<callout arearefs="CO27-3">
<para>Affiche <literal>"Hello World"</literal>&#160;– il s&#8217;agit de l'<emphasis>exécution</emphasis> de la fonction, qui <emphasis>retourne</emphasis> un résultat.</para>
</callout>
<callout arearefs="CO27-4">
<para>Affiche un nombre aléatoire entre&#160;0 et&#160;100&#160;– cette fonction est invoquée sans paramètre.</para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent nous indique qu&#8217;une fonction se découpe en trois parties&#160;:</simpara>
<variablelist>
<varlistentry>
<term>Les <emphasis role="strong">arguments</emphasis></term>
<listitem>
<simpara>C&#8217;est la partie à gauche de la flèche&#160;(<literal>&#8658;</literal>).
Les arguments sont séparés par des virgules.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Le <emphasis role="strong">corps</emphasis></term>
<listitem>
<simpara>C&#8217;est la partie entre accolades.
Quand la fonction est sur une ligne,
le résultat de l&#8217;opération est <emphasis>implicitement retourné</emphasis>.
On peut dans ce cas se passer du mot-clé <literal>return</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>La <emphasis role="strong">valeur de retour</emphasis></term>
<listitem>
<simpara>  C&#8217;est la valeur renvoyée en dehors de la fonction.
  Elle est définie à l&#8217;aide du mot-clé <literal>return</literal>.
  La valeur <literal>undefined</literal> est retournée de manière implicite
  lorsque ce dernier est absent.
<indexterm>
<primary>fonction</primary><secondary>return</secondary>
</indexterm>
<indexterm>
<primary>return</primary>
</indexterm>
<indexterm>
<primary>instruction</primary><secondary>return</secondary>
</indexterm>
<indexterm>
<primary>return</primary>
</indexterm>
<indexterm>
<primary>type de données</primary><secondary>undefined</secondary>
</indexterm>
<indexterm>
<primary>undefined</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
</variablelist>
<tip>
<title><phrase role="RemarquePreTitre">Rappel</phrase> Variables et portée</title>
<simpara>Le corps d&#8217;une fonction constitue une <emphasis>portée</emphasis>&#160;: toute variable définie
dans le corps d&#8217;une fonction est invisible en dehors.</simpara>
</tip>
<section xml:id="anonymous-function">
<title>Les fonctions anonymes</title>
<simpara><indexterm>
<primary>fonction</primary><secondary>anonyme</secondary>
</indexterm>
<indexterm>
<primary>anonyme</primary>
</indexterm>
<indexterm>
<primary>fonction</primary><secondary>de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>de rappel (callback)</primary>
</indexterm></simpara>
<simpara>Les fonctions anonymes sont employées en arguments d&#8217;autres fonctions.
On les dit <emphasis>anonymes</emphasis>, car elles ne sont pas consignées dans des <emphasis>variables</emphasis>.
Il est fréquent de les utiliser pour <emphasis>itérer</emphasis> sur des tableaux,
lors d&#8217;événements ou dans des <link linkend="promise">promesses</link>.</simpara>
<simpara>C&#8217;est une manière élégante d&#8217;encapsuler du code à exécuter plus tard.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>functions/anonymous.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">setTimeout(() =&gt; console.log('Une seconde plus tard'), 1000);

setTimeout(() =&gt; {
  console.log('Deux secondes plus tard');     <co xml:id="CO28-1"/>
}, 2000);

process.on('exit', () =&gt; {
  console.log('Le processus se termine');     <co xml:id="CO28-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO28-1">
<para>Affiche <literal>"Deux secondes plus tard"</literal> deux secondes après le début du script.</para>
</callout>
<callout arearefs="CO28-2">
<para>Affiche <literal>"Le processus se termine"</literal> quand le processus se termine, une fois que toutes les actions en attente ont été exécutées.</para>
</callout>
</calloutlist>
</section>
<section xml:id="callback">
<title>Les fonctions de rappel (callback)</title>
<simpara><indexterm>
<primary>fonction</primary><secondary>de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>de rappel (callback)</primary>
</indexterm></simpara>
<simpara>Quand une fonction est passée en argument d&#8217;une autre fonction,
on appelle cela un <emphasis>callback</emphasis>.
On l&#8217;appelle plus tard (<emphasis>to&#160;call back</emphasis>) que le moment où elle est définie.
Elle reçoit des paramètres qui aident à reconstruire un contexte
<emphasis>au moment</emphasis> de son exécution.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>functions/callback.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const printYear = (date) =&gt; {             <co xml:id="CO29-1"/>
  console.log(date.getUTCFullYear());     <co xml:id="CO29-2"/>
}

setTimeout(printYear, 1000, new Date());  <co xml:id="CO29-3"/>
// équivalent à
// setTimeout(date =&gt; printYear(date), 1000, new Date());</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO29-3">
<para>Le troisième argument (et les suivants) de <literal>setTimeout()</literal> sont transmis en paramètres de la fonction de rappel (<emphasis>callback</emphasis>).</para>
</callout>
<callout arearefs="CO29-1">
<para>Cette fonction est invoquée une seconde après le début du script, et reçoit en paramètre la date du moment.</para>
</callout>
<callout arearefs="CO29-2">
<para>Affiche l&#8217;année de la date passée en argument&#160;– dans cet exemple, l&#8217;année en courss.</para>
</callout>
</calloutlist>
</section>
<section xml:id="rest-parameters">
<title>Paramètres du reste (rest parameters)</title>
<simpara><indexterm>
<primary>fonction</primary><secondary>paramètre du reste</secondary>
</indexterm>
<indexterm>
<primary>paramètre du reste</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>spread</secondary>
</indexterm>
<indexterm>
<primary>spread</primary>
</indexterm></simpara>
<simpara>Les <emphasis>paramètres du reste</emphasis> sont un nombre indéfini de paramètres
regroupés dans un même <link linkend="array">tableau</link>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>functions/rest.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const combien_de = (nom, ...params) =&gt; {
  console.log(`On a compté ${params.length} ${nom}.`);
};

combien_de('patates', 'un', 'deux', 'trois'); <co xml:id="CO30-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO30-1">
<para>Affiche <literal>"On a compté 3 patates."</literal>.</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="array">
<title>Lister, filtrer et trier des éléments (Array)</title>
<simpara><indexterm>
<primary>tableau</primary>
</indexterm>
<indexterm>
<primary>liste indexée (voir tableau)</primary>
</indexterm></simpara>
<simpara>Les tableaux (ou listes indexées) servent à lister des éléments,
de tout type et dans l&#8217;ordre de notre choix.
Chaque élément de tableau se voit attribuer un numéro (<emphasis>index</emphasis>)
qui sert à le retrouver, en itérant à l&#8217;aide de boucles
ou en ayant recours à d&#8217;autres méthodes d&#8217;identification.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekdays = [
  'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'
];

console.log(weekdays);          <co xml:id="CO31-1"/>
console.log(weekdays.length);   <co xml:id="CO31-2"/>
console.log(weekdays[1]);       <co xml:id="CO31-3"/>
console.log(weekdays[0]);
console.log(weekdays[5]);       <co xml:id="CO31-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO31-1">
<para>Affiche <literal>["lundi", "mardi", "mercredi", "jeudi", "vendredi"]</literal>.</para>
</callout>
<callout arearefs="CO31-2">
<para>Affiche&#160;<literal>5</literal>&#160;– soit la longueur du tableau.</para>
</callout>
<callout arearefs="CO31-3">
<para>Affiche <literal>"mardi"</literal>&#160;– un tableau commence à l&#8217;index&#160;<literal>0</literal>.</para>
</callout>
<callout arearefs="CO31-4">
<para>Affiche <literal>undefined</literal>&#160;– il n&#8217;y a aucun élément défini à l&#8217;index&#160;<literal>5</literal>.
<indexterm>
<primary>tableau</primary><secondary>index</secondary>
</indexterm>
<indexterm>
<primary>index</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent illustre plusieurs caractéristiques des collections&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>La numérotation débute à l&#8217;index <literal>0</literal>.</simpara>
</listitem>
<listitem>
<simpara>La propriété <literal>length</literal> contient la longueur du tableau.</simpara>
</listitem>
<listitem>
<simpara>La valeur <literal>undefined</literal> est retournée quand on tente d&#8217;accéder à un index
qui n&#8217;existe pas.
<indexterm>
<primary>tableau</primary><secondary>length</secondary>
</indexterm>
<indexterm>
<primary>length</primary>
</indexterm></simpara>
</listitem>
</itemizedlist>
<section xml:id="créer_des_tableaux_à_partir_dautres_valeurs">
<title>Créer des tableaux à partir d&#8217;autres valeurs</title>
<simpara>indexterm[tableau, Array.from()]</simpara>
<simpara>La fonction <literal>Array.from()</literal> est une manière de créer
un tableau à partir de quelque chose qui <emphasis>ressemble à un tableau</emphasis>.</simpara>
<formalpara xml:id="array.from" role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/from.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(Array.from('fromage'));            <co xml:id="CO32-1"/>

// utilisation du second argument
const uppercase = (letter) =&gt; letter.toUpperCase();
console.log(Array.from('fromage', uppercase)); <co xml:id="CO32-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO32-1">
<para>Affiche <literal>["f", "r", "o", "m", "a", "g", "e"]</literal>&#160;– chaque lettre de la chaîne.</para>
</callout>
<callout arearefs="CO32-2">
<para>Affiche <literal>["F", "R", "O", "M", "A", "G", "E"]</literal>&#160;– chaque lettre de la chaîne a été passée en majuscule.</para>
</callout>
</calloutlist>
<simpara>Le deuxième argument de <literal>Array.from()</literal> est facultatif.
C&#8217;est une <link linkend="anonymous-function">fonction anonyme</link> qui s&#8217;utilise comme les <link linkend="array.forEach">méthodes d&#8217;itération</link> <literal>Array.forEach()</literal> et <literal>Array.map()</literal>.</simpara>
<simpara>Cette méthode est des plus utiles pour itérer sur des listes d&#8217;éléments DOM
obtenues avec les fonctions <literal>document.querySelectorAll()</literal>
et <literal>document.getElementsByTagName()</literal>, entre autres.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">const links = document.querySelectorAll('a');

console.log(Array.from(links).map(a =&gt; a.textContent));
// parce qu'on ne peut pas faire
// links.map(a =&gt; a.textContent);</programlisting>
<simpara><indexterm>
<primary>DOM (Document Object Model)</primary><secondary>NodeList</secondary>
</indexterm>
<indexterm>
<primary>NodeList</primary>
</indexterm></simpara>
</section>
<section xml:id="array.concat">
<title>Combiner des tableaux</title>
<simpara><indexterm>
<primary>tableau</primary><secondary>Array.concat()</secondary>
</indexterm>
<indexterm>
<primary>Array.concat()</primary>
</indexterm></simpara>
<simpara>Il est relativement aisé de composer des tableaux en fonction d&#8217;autres tableaux.
Une première manière d&#8217;y parvenir est d&#8217;utiliser la méthode <literal>concat()</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/concat.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mousquetaires = ['Athos', 'Porthos', 'Aramis'];
const extras = ['d\'Artagnan', 'Albert'];

console.log(mousquetaires.concat(extras));      <co xml:id="CO33-1"/>

// autre manière d'obtenir la liste des 5 mousquetaires
console.log([].concat(mousquetaires, extras));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO33-1">
<para>Affiche <literal>["Athos", "Porthos", "Aramis", "d&#8217;Artagnan", "Albert"]</literal>.</para>
</callout>
</calloutlist>
<simpara>Cette méthode <emphasis>crée un nouveau tableau</emphasis> à partir de deux passés en paramètres.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Alternative</phrase> Opérateur&#160;<literal>&#8230;&#8203;</literal>&#160;(<emphasis>spread</emphasis>)</title>
<simpara><indexterm>
<primary>opérateur</primary><secondary>spread</secondary>
</indexterm>
<indexterm>
<primary>spread</primary>
</indexterm>
Une autre manière de faire est d&#8217;utiliser l&#8217;opérateur <literal>&#8230;&#8203;</literal>
(aussi appelé <link linkend="spread">spread</link>) pour éclater plusieurs tableaux et
les rassembler dans un autre&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/spread.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mousquetaires = ['Athos', 'Porthos', 'Aramis'];
const extras = ['d\'Artagnan', 'Albert'];

console.log([...mousquetaires, ...extras]);   <co xml:id="CO34-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO34-1">
<para>Affiche <literal>["Athos", "Porthos", "Aramis", "d&#8217;Artagnan", "Albert"]</literal>.</para>
</callout>
</calloutlist>
</note>
<simpara>À l&#8217;inverse, la méthode <literal>join()</literal> concatène tous les éléments dans une
<link linkend="string">chaîne de caractères</link> avec le séparateur de notre choix (optionnel).
<indexterm>
<primary>tableau</primary><secondary>join()</secondary>
</indexterm>
<indexterm>
<primary>join()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/join.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const headers = ['ID', 'NOM', 'PRENOM'];

console.log(headers.join());    <co xml:id="CO35-1"/>
console.log(headers.join(';')); <co xml:id="CO35-2"/>
console.log(headers.join(''));  <co xml:id="CO35-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO35-1">
<para>Affiche <literal>"ID,NOM,PRENOM"</literal>&#160;– le séparateur par défaut est une virgule.</para>
</callout>
<callout arearefs="CO35-2">
<para>Affiche <literal>"ID;NOM;PRENOM"</literal>&#160;– on a choisi le point-virgule comme séparateur.</para>
</callout>
<callout arearefs="CO35-3">
<para>Affiche <literal>"IDNOMPRENOM"</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="array.forEach">
<title>Itérer sur les valeurs avec des boucles</title>
<simpara><indexterm>
<primary>tableau</primary><secondary>forEach()</secondary>
</indexterm>
<indexterm>
<primary>forEach()</primary>
</indexterm></simpara>
<simpara>Les boucles sont une manière de parcourir plusieurs valeurs.
Elles aident à mettre en place des automatismes pour éviter de répéter du code.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/loop.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekdays = [
  'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'
];

for (const day of weekdays) {
  console.log(day);                           <co xml:id="CO36-1"/>
}

// on obtient le même résultat avec la méthode `forEach`
weekdays.forEach((day) =&gt; console.log(day));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO36-1">
<para>Affiche successivement chaque valeur du tableau&#160;– <literal>"lundi"</literal>, <literal>"mardi"</literal>, <literal>"mercredi"</literal>, <literal>"jeudi"</literal>, <literal>"vendredi"</literal>.</para>
</callout>
</calloutlist>
<simpara>Prenons le temps de revenir sur cet exemple.
On y découvre plusieurs manières d&#8217;écrire des boucles sur un tableau&#160;:</simpara>
<variablelist>
<varlistentry>
<term><literal>for&#8230;&#8203;of</literal></term>
<listitem>
<simpara>On affecte une variable avec chaque élément (opérateur <literal>of</literal>) du tableau.
Les expressions situées entre accolade sont exécutées pour
chaque élément du tableau.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>forEach(element &#8658; expression)</literal></term>
<listitem>
<simpara>  La méthode <literal>forEach</literal> applique une <link linkend="anonymous-function">fonction anonyme</link>
  pour chaque élément du tableau.
<indexterm>
<primary>fonction</primary><secondary>anonyme</secondary>
</indexterm>
<indexterm>
<primary>anonyme</primary>
</indexterm>
<indexterm>
<primary>fonction</primary><secondary>de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>de rappel (callback)</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Il y a en réalité deux manières d&#8217;itérer avec la boucle&#160;<literal>for</literal>&#160;:
sur les <emphasis>index</emphasis> (avec l&#8217;opérateur&#160;<literal>in</literal>)
et sur les <emphasis>valeurs</emphasis> (avec l&#8217;opérateur&#160;<literal>of</literal>).
<indexterm>
<primary>instruction</primary><secondary>for &#8230;&#8203; in</secondary>
</indexterm>
<indexterm>
<primary>for &#8230;&#8203; in</primary>
</indexterm>
<indexterm>
<primary>instruction</primary><secondary>for &#8230;&#8203; of</secondary>
</indexterm>
<indexterm>
<primary>for &#8230;&#8203; of</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>in</secondary>
</indexterm>
<indexterm>
<primary>in</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>of</secondary>
</indexterm>
<indexterm>
<primary>of</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/for-of-in.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekend = ['samedi', 'dimanche'];

for (const index in weekend) {
  console.log(index);             <co xml:id="CO37-1"/>
  console.log(weekend[index]);    <co xml:id="CO37-2"/>
}

for (const day of weekend) {
  console.log(day);               <co xml:id="CO37-3"/>
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO37-1">
<para>Affiche successivement&#160;<literal>0</literal> puis&#160;<literal>1</literal>.</para>
</callout>
<callout arearefs="CO37-2">
<para>Affiche successivement <literal>"samedi"</literal> puis <literal>"dimanche"</literal>&#160;– l&#8217;index sert à retrouver la valeur dans le tableau.</para>
</callout>
<callout arearefs="CO37-3">
<para>Affiche successivement <literal>"samedi"</literal> puis <literal>"dimanche"</literal>.</para>
</callout>
</calloutlist>
<simpara>La méthode <literal>forEach()</literal> propage en réalité trois arguments à notre fonction anonyme&#160;:
l&#8217;élément en cours de l&#8217;itération, l&#8217;index de l&#8217;élément et le tableau d&#8217;origine.</simpara>
<simpara>Pourquoi passer le tableau d&#8217;origine alors qu&#8217;on itère dessus&#160;?
Pour donner du contexte au cas où on opère
avec une <link linkend="function">fonction nommée</link>.
Nous verrons un usage concret de ce troisième argument
dans la section <quote><link linkend="array.map">Transformer les valeurs</link></quote>.
<indexterm>
<primary>fonction</primary><secondary>nommée</secondary>
</indexterm>
<indexterm>
<primary>nommée</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/foreach-function.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const undeux = ['un', 'deux'];

const printIndex = (element, index, array) =&gt; {
  console.log(`${element} : index ${index}`);  <co xml:id="CO38-1"/>
}

undeux.forEach(printIndex);                    <co xml:id="CO38-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO38-2">
<para>Applique la fonction <literal>printIndex()</literal> pour chaque élément du tableau <literal>undeux</literal>.</para>
</callout>
<callout arearefs="CO38-1">
<para>Affiche successivement <literal>"un&#160;: index 0"</literal> puis <literal>"deux&#160;: index 1"</literal>.</para>
</callout>
</calloutlist>
<simpara>Outre l&#8217;inspection et l&#8217;affichage des valeurs, les boucles offrent la liberté
de <link linkend="array.sort">trier</link>, de <link linkend="array.map">transformer les valeurs</link>,
de <link linkend="array.filter">filtrer selon des conditions</link>,
mais aussi de <link linkend="array.reduce">créer de nouvelles structures de données</link>.</simpara>
<simpara>Ces méthodes sont décrites dans les sections suivantes.</simpara>
</section>
<section xml:id="array.sort">
<title>Trier les valeurs</title>
<simpara><indexterm>
<primary>tableau</primary><secondary>sort()</secondary>
</indexterm>
<indexterm>
<primary>sort()</primary>
</indexterm></simpara>
<simpara>La méthode <literal>sort()</literal> change l&#8217;ordre des éléments d&#8217;un tableau.
Elle utilise une <link linkend="anonymous-function">fonction anonyme</link> qui compare deux éléments
entre eux&#160;; elle retourne un nombre positif, négatif ou égal à zéro selon la
logique que l&#8217;on souhaite donner au tri&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Quand la comparaison est <emphasis>négative</emphasis>,
<literal>sort()</literal> place le premier élément <emphasis>avant</emphasis> le second.</simpara>
</listitem>
<listitem>
<simpara>Quand la comparaison est <emphasis>positive</emphasis>,
<literal>sort()</literal> place le premier élément <emphasis>après</emphasis> le second.</simpara>
</listitem>
<listitem>
<simpara>Quand la comparaison est égale à zéro, nulle ou non spécifiée,
l&#8217;ordre des éléments reste inchangé.</simpara>
</listitem>
</itemizedlist>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/sort.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const sortAsc = (a, b) =&gt; a - b;
const sortDesc = (a, b) =&gt; b - a;

console.log([1, 3, 2].sort(sortAsc));                 <co xml:id="CO39-1"/>

const undeux = [
  {label: 'deux', order: 2},
  {label: 'un', order: 1}
];

console.log(undeux.sort((a, b) =&gt; a.order - b.order));<co xml:id="CO39-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO39-1">
<para>Affiche <literal>[1, 2, 3]</literal>.</para>
</callout>
<callout arearefs="CO39-2">
<para>Affiche <literal>[ { label: "un", order: 1 }, { label: "deux", order: 2 } ]</literal>&#160;– le tableau a été trié sur la valeur de <literal>order</literal>.</para>
</callout>
</calloutlist>
<simpara>Les <link linkend="string">chaînes de caractères</link> peuvent être comparées avec <literal>localeCompare()</literal>.
Cette méthode retourne un nombre après une comparaison caractère par caractère
entre deux chaînes.
<indexterm>
<primary>chaîne de caractère</primary><secondary>localeCompare()</secondary>
</indexterm>
<indexterm>
<primary>localeCompare()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/sort-strings.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const sortAlpha = (a, b) =&gt; a.localeCompare(b);
console.log(['A', 'b', 'c', 'a'].sort(sortAlpha));<co xml:id="CO40-1"/>

const undeux = [
  {label: 'un', order: 1},
  {label: 'deux', order: 2}
];

const sortLabel = (a, b) =&gt; a.label.localeCompare(b.label);
console.log(undeux.sort(sortLabel));              <co xml:id="CO40-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO40-1">
<para>Affiche <literal>["a", "A", "b", "c"]</literal>&#160;– les majuscules influencent le&#160;tri.</para>
</callout>
<callout arearefs="CO40-2">
<para>Affiche <literal>[ { label: "deux", order: 2 }, { label: "un", order: 1 } ]</literal>&#160;– le tableau a été trié sur la valeur de <literal>label</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> <literal>Array.reverse()</literal></title>
<simpara><indexterm>
<primary>tableau</primary><secondary>reverse()</secondary>
</indexterm>
<indexterm>
<primary>reverse()</primary>
</indexterm>
La méthode <literal>reverse()</literal> transforme le tableau d&#8217;origine
en inversant l&#8217;ordre de ses éléments.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/reverse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekend = ['samedi', 'dimanche'];

weekend.reverse();

console.log(weekend);     <co xml:id="CO41-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO41-1">
<para>Affiche <literal>["dimanche", "samedi"]</literal>.</para>
</callout>
</calloutlist>
</tip>
</section>
<section xml:id="array.map">
<title>Transformer les valeurs</title>
<simpara><indexterm>
<primary>tableay</primary><secondary>map()</secondary>
</indexterm>
<indexterm>
<primary>map()</primary>
</indexterm></simpara>
<simpara>La méthode <literal>map()</literal> fonctionne quasiment comme <literal>forEach()</literal>, à ceci près qu&#8217;elle
retourne un nouveau tableau, constitué des valeurs retournées par la fonction
appliquée sur chaque élément.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/map.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const newArray = ['a', ' b', 'c '].map(value =&gt; {
  return value.trim().toUpperCase();
});

console.log(newArray); <co xml:id="CO42-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO42-1">
<para>Retourne <literal>['A', 'B', 'C']</literal>&#160;– on a passé tous les éléments en lettres majuscules.</para>
</callout>
</calloutlist>
<simpara>Le troisième argument de la méthode <literal>map()</literal> prend ici tout son sens.
Par exemple, si l&#8217;on souhaite dédoublonner un tableau&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/map-dedupe.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const soundcheck = ['un', 'deux', 'un', 'deux'];

const dedupe = (element, index, array) =&gt; {
  if (array.slice(index+1).includes(element)) {
    return null;
  }

  return element;
}

console.log(soundcheck.map(dedupe));          <co xml:id="CO43-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO43-1">
<para>Affiche <literal>[null, null, "un", "deux"]</literal>.</para>
</callout>
</calloutlist>
<simpara>Cet exemple vérifie, à chaque itération, si la valeur de l&#8217;élément
est contenue dans la <emphasis>suite du tableau</emphasis>.
<literal>array.slice(index+1)</literal> crée un nouveau tableau contenant tous les éléments
situés <emphasis>après</emphasis> l&#8217;élément courant (<literal>index+1</literal>).
<indexterm>
<primary>tableau</primary><secondary>slice()</secondary>
</indexterm>
<indexterm>
<primary>slice()</primary>
</indexterm></simpara>
<simpara>La méthode de transformation <literal>reduce()</literal> est différente, car elle passe le résultat
de la précédente itération à la suivante.
C&#8217;est comme si elle <emphasis>accumulait</emphasis> les résultats.
Elle retourne une valeur finale qui peut être autre chose qu&#8217;un tableau.
<indexterm>
<primary>tableau</primary><secondary>reduce()</secondary>
</indexterm>
<indexterm>
<primary>reduce()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/reduce.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const stats = [2, 4, 6, 10];

const sum = (previous, element) =&gt; previous + element;  <co xml:id="CO44-1"/>

console.log(stats.reduce(sum, 0));    <co xml:id="CO44-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO44-2">
<para>Effectue une <emphasis>réduction</emphasis> à l&#8217;aide de la fonction <literal>sum()</literal> et d&#8217;une valeur par défaut de&#160;<literal>0</literal>&#160;– affiche&#160;<literal>22</literal> à l&#8217;issue des itérations .</para>
</callout>
<callout arearefs="CO44-1">
<para>La valeur de l&#8217;élément est le <emphasis>second paramètre</emphasis>&#160;; le premier paramètre correspond au résultat de l&#8217;itération précédente ou à la valeur initiale, passée en argument à <literal>reduce()</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="array.filter">
<title>Filtrer les valeurs</title>
<simpara>La méthode <literal>filter()</literal> retourne un nouveau tableau filtré à l&#8217;aide
d&#8217;une <link linkend="anonymous-function">fonction anonyme</link>.
Seuls les éléments qui satisfont à la condition établie par la fonction
se retrouvent dans le nouveau tableau.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/filter.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const values = [null, 'un', 'deux', 3];

const is_finite = (value) =&gt; Number.isFinite(value);
const direct = (value) =&gt; value;

console.log(values.filter(is_finite));  <co xml:id="CO45-1"/>
console.log(values.filter(direct));     <co xml:id="CO45-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO45-1">
<para>Retourne&#160;<literal>[3]</literal>&#160;– c&#8217;est la seule valeur qui soit un nombre.</para>
</callout>
<callout arearefs="CO45-2">
<para>Retourne <literal>["un", "deux", 3]</literal>&#160;– ce sont les valeurs non&#160;nulles.</para>
</callout>
</calloutlist>
</section>
<section xml:id="array.find">
<title>Identifier des valeurs</title>
<simpara>Les méthodes <literal>indexOf()</literal>, <literal>lastIndexOf()</literal> et <literal>includes()</literal> identifient une
<emphasis>valeur exacte</emphasis> au sein d&#8217;un tableau.
<indexterm>
<primary>tableau</primary><secondary>indexOf()</secondary>
</indexterm>
<indexterm>
<primary>indexOf()</primary>
</indexterm>
<indexterm>
<primary>tableau</primary><secondary>lastIndexOf()</secondary>
</indexterm>
<indexterm>
<primary>lastIndexOf()</primary>
</indexterm>
<indexterm>
<primary>tableau</primary><secondary>includes()</secondary>
</indexterm>
<indexterm>
<primary>includes()</primary>
</indexterm>
<indexterm>
<primary>tableau</primary><secondary>index</secondary>
</indexterm>
<indexterm>
<primary>index</primary>
</indexterm></simpara>
<simpara><literal>indexOf()</literal> et <literal>lastIndexOf()</literal> retournent l&#8217;index de la valeur recherchée.
Si aucun élément n&#8217;a été retrouvé, elles retourneront la valeur&#160;<literal>-1</literal>.<?asciidoc-br?>
<literal>includes()</literal> retourne un <link linkend="boolean">booléen</link> indiquant si la recherche
est fructueuse (<literal>true</literal>) ou non (<literal>false</literal>).</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/index-of-includes.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const soundcheck = ['un', 'deux', 'un', 'deux'];

console.log(soundcheck.indexOf('un'));        <co xml:id="CO46-1"/>
console.log(soundcheck.indexOf('deux'));      <co xml:id="CO46-2"/>
console.log(soundcheck.indexOf('trois'));     <co xml:id="CO46-3"/>

console.log(soundcheck.lastIndexOf('deux'));  <co xml:id="CO46-4"/>

console.log(soundcheck.includes('deux'));     <co xml:id="CO46-5"/>
console.log(soundcheck.includes('trois'));    <co xml:id="CO46-6"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO46-1">
<para>Affiche&#160;<literal>0</literal>&#160;– le premier <literal>"un"</literal> est l&#8217;élément&#160;``0` du tableau.</para>
</callout>
<callout arearefs="CO46-2">
<para>Affiche&#160;<literal>1</literal>&#160;– le premier <literal>"deux"</literal> est l&#8217;élément&#160;``1` du tableau.</para>
</callout>
<callout arearefs="CO46-3">
<para>Affiche&#160;<literal>-1</literal>&#160;– cet élément est absent du tableau.</para>
</callout>
<callout arearefs="CO46-4">
<para>Affiche&#160;<literal>3</literal>&#160;– le dernier <literal>"deux"</literal> est l&#8217;élément&#160;``3` du tableau.</para>
</callout>
<callout arearefs="CO46-5">
<para>Affiche&#160;<literal>true</literal>&#160;– l&#8217;élément <literal>"un"</literal> existe dans le tableau.</para>
</callout>
<callout arearefs="CO46-6">
<para>Affiche&#160;<literal>false</literal>&#160;– l&#8217;élément <literal>"trois"</literal> n&#8217;existe pas dans le tableau.</para>
</callout>
</calloutlist>
<simpara>Il existe ensuite d&#8217;autres méthodes comme <literal>find()</literal>, <literal>some()</literal> et <literal>every()</literal>.
Elles <emphasis role="strong">identifient des éléments à partir d&#8217;une fonction</emphasis>.
Les conditions de recherche sont plus complètes, car on n&#8217;est pas obligé
de connaître la valeur exacte recherchée.
<indexterm>
<primary>tableau</primary><secondary>find()</secondary>
</indexterm>
<indexterm>
<primary>find()</primary>
</indexterm>
<indexterm>
<primary>tableau</primary><secondary>findIndex()</secondary>
</indexterm>
<indexterm>
<primary>findIndex()</primary>
</indexterm>
<indexterm>
<primary>tableau</primary><secondary>some()</secondary>
</indexterm>
<indexterm>
<primary>some()</primary>
</indexterm>
<indexterm>
<primary>tableau</primary><secondary>every()</secondary>
</indexterm>
<indexterm>
<primary>every()</primary>
</indexterm></simpara>
<simpara>La méthode <literal>find()</literal> retourne le premier <emphasis>élément</emphasis> qui remplisse la condition&#160;;
 <literal>findIndex()</literal> en retourne l'<emphasis>index</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/find.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const values = [null, 2, 10, 100];

const biggerThan50 = (value) =&gt; value &gt; 50;   <co xml:id="CO47-1"/>

console.log(values.find(biggerThan50));       <co xml:id="CO47-2"/>
console.log(values.findIndex(biggerThan50));  <co xml:id="CO47-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO47-1">
<para>La fonction retourne <literal>true</literal> si la valeur passée en argument est un nombre supérieur&#160;à&#160;<literal>50</literal>.</para>
</callout>
<callout arearefs="CO47-2">
<para>Affiche&#160;<literal>100</literal>.</para>
</callout>
<callout arearefs="CO47-3">
<para>Affiche&#160;<literal>3</literal>&#160;– c&#8217;est l&#8217;index de la valeur&#160;<literal>100</literal>.</para>
</callout>
</calloutlist>
<simpara>Les méthodes <literal>some()</literal> et <literal>every()</literal> retournent <literal>true</literal> respectivement
si <emphasis>au moins une itération</emphasis> est satisfaisante et
si <emphasis>toutes les itérations</emphasis> sont satisfaisantes.
<indexterm>
<primary>booléen</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/some.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const values = [1, 'a', 120, undefined, 4];
const isUndefined = (value) =&gt; value === undefined;

console.log(values.every(isUndefined));                <co xml:id="CO48-1"/>
console.log(values.some(isUndefined));                 <co xml:id="CO48-2"/>
console.log(values.filter(d =&gt; d).some(isUndefined));  <co xml:id="CO48-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO48-1">
<para>Affiche <literal>false</literal>&#160;– toutes les valeurs ne sont pas égales à <literal>undefined</literal>.</para>
</callout>
<callout arearefs="CO48-2">
<para>Affiche <literal>true</literal>&#160;– au moins une valeur est égale à <literal>undefined</literal>.</para>
</callout>
<callout arearefs="CO48-3">
<para>Affiche <literal>false</literal>&#160;– il n&#8217;y a plus de valeur <literal>undefined</literal> dans le tableau, car on a utilisé la méthode <link linkend="array.filter">filter</link> pour supprimer les valeurs vides.</para>
</callout>
</calloutlist>
</section>
<section xml:id="array-destructuring">
<title>Décomposition de tableau (destructuring)</title>
<simpara><indexterm>
<primary>tableau</primary><secondary>décomposition (destructuring)</secondary>
</indexterm>
<indexterm>
<primary>décomposition (destructuring)</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>spread</secondary>
</indexterm>
<indexterm>
<primary>spread</primary>
</indexterm></simpara>
<simpara>L&#8217;affectation par décomposition (<emphasis>destructuring</emphasis>) est une manière élégante
de piocher des valeurs dans un <link linkend="array">tableau</link>.
Ce mécanisme n&#8217;altère pas le contenu des variables décomposées et existe aussi
pour les <link linkend="object-destructuring">objets</link>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/destructuring.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekdays = [
  'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'
];

const [first, second] = weekdays;
console.log(first);               <co xml:id="CO49-1"/>
console.log(second);              <co xml:id="CO49-2"/>

const [,, third] = weekdays;
console.log(third);               <co xml:id="CO49-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO49-1">
<para>Affiche <literal>"lundi"</literal>.</para>
</callout>
<callout arearefs="CO49-2">
<para>Affiche <literal>"mardi"</literal>.</para>
</callout>
<callout arearefs="CO49-3">
<para>Affiche <literal>"mercredi"</literal>&#160;– l&#8217;utilisation des virgules sans variable a permis de <emphasis>sauter</emphasis> des positions dans la décomposition.</para>
</callout>
</calloutlist>
<simpara>La décomposition se combine agréablement avec l&#8217;opérateur <literal>&#8230;&#8203;</literal> (<emphasis>spread</emphasis>).
Il accumule le reste des éléments dans une variable, sous forme de tableau.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/destructuring-rest.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekdays = [
  'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'
];

const [first, second, ...rest] = weekdays;
console.log(rest);                  <co xml:id="CO50-1"/>

// revient au même que
// const [,, ...rest] = weekdays;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO50-1">
<para>Affiche <literal>["mercredi", "jeudi", "vendredi"]</literal>.</para>
</callout>
</calloutlist>
<simpara>La méthode <literal>slice()</literal> offre davantage de souplesse pour gérer les <emphasis>limites</emphasis>.
On choisit <emphasis>l&#8217;index de début</emphasis> (inclus) et celui <emphasis>de fin</emphasis> (non inclus) de la décomposition.
<indexterm>
<primary>tableau</primary><secondary>slice()</secondary>
</indexterm>
<indexterm>
<primary>slice()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/slice.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const values = ['un', 'deux', 'trois', 'quatre'];

console.log(values.slice(1));     <co xml:id="CO51-1"/>
console.log(values.slice(1, 2));  <co xml:id="CO51-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO51-1">
<para>Affiche <literal>["deux", "trois", "quatre"]</literal>&#160;– à partir de l&#8217;index&#160;<literal>1</literal>.</para>
</callout>
<callout arearefs="CO51-2">
<para>Affiche <literal>["deux"]</literal>&#160;– à partir de l&#8217;index&#160;<literal>1</literal> et jusqu&#8217;à l&#8217;index&#160;<literal>2</literal> (non&#160;inclus).</para>
</callout>
</calloutlist>
<simpara>Si les valeurs de début et/ou de fin sont <emphasis>négatives</emphasis>,
les index sont calculés <emphasis>à partir de la fin</emphasis> du tableau.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/slice-negative.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const values = ['un', 'deux', 'trois', 'quatre'];

console.log(values.slice(-1));     <co xml:id="CO52-1"/>
console.log(values.slice(-3));     <co xml:id="CO52-2"/>

console.log(values.slice(0, -1));  <co xml:id="CO52-3"/>
console.log(values.slice(0, -3));  <co xml:id="CO52-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO52-1">
<para>Affiche <literal>["quatre"]</literal>&#160;– premier élément à partir de la&#160;fin.</para>
</callout>
<callout arearefs="CO52-2">
<para>Affiche <literal>["deux", "trois", "quatre"]</literal>&#160;– les trois premiers éléments à partir de la&#160;fin.</para>
</callout>
<callout arearefs="CO52-3">
<para>Affiche <literal>["un", "deux", "trois"]</literal>&#160;– jusqu&#8217;au dernier élément à partir de la fin (non&#160;inclus).</para>
</callout>
<callout arearefs="CO52-4">
<para>Affiche <literal>["un"]</literal>&#160;– jusqu&#8217;au troisième élément à partir de la fin (non&#160;inclus).</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="object">
<title>Représenter des structures d&#8217;objet et y accéder</title>
<simpara><indexterm>
<primary>objet</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>syntaxe</secondary>
</indexterm>
<indexterm>
<primary>syntaxe</primary>
</indexterm></simpara>
<simpara>Les structures d&#8217;objet servent à lister des éléments de tout type
au sein d&#8217;une même variable.
L&#8217;indexation se fait <emphasis>comme dans un dictionnaire</emphasis>,
avec un identifiant unique pour chaque valeur.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log(francine.first_name); <co xml:id="CO53-1"/>

francine.age = 25;                <co xml:id="CO53-2"/>
console.log(francine.age);        <co xml:id="CO53-3"/>
console.log(francine.twitter);    <co xml:id="CO53-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO53-1">
<para>Affiche <literal>"Francine"</literal>.</para>
</callout>
<callout arearefs="CO53-2">
<para>On affecte une valeur numérique à l&#8217;index <literal>age</literal> une fois l&#8217;objet&#160;créé.</para>
</callout>
<callout arearefs="CO53-3">
<para>Affiche&#160;``25`&#160;– la valeur numérique précédemment affectée.</para>
</callout>
<callout arearefs="CO53-4">
<para>Affiche&#160;``undefined`&#160;– aucune valeur n&#8217;est affectée pour cette&#160;clé.</para>
</callout>
</calloutlist>
<simpara>Une autre syntaxe existe pour créer des valeurs et y accéder en utilisant
des variables en guise d&#8217;identifiant d&#8217;index.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/dynamic.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const SOCIAL_NETWORK = 'twitter';

const francine = {
  first_name: 'Francine',
  location: 'Drôme',
  [SOCIAL_NETWORK]: '@FrancineDu26',    <co xml:id="CO54-1"/>
};

console.log(francine[SOCIAL_NETWORK]);  <co xml:id="CO54-2"/>

// manières équivalentes, sans utilisation de variable
console.log(francine.twitter);
console.log(francine['twitter']);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO54-1">
<para>Affecte la chaîne <literal>@FrancineDu26</literal> dans l&#8217;index correspondant à la valeur de la variable <literal>SOCIAL_NETWORK</literal>.</para>
</callout>
<callout arearefs="CO54-2">
<para>Affiche <literal>"@FrancineDu26"</literal>.</para>
</callout>
</calloutlist>
<section xml:id="object-destructuring">
<title>Décomposition d&#8217;objet (<emphasis>destructuring</emphasis>)</title>
<simpara><indexterm>
<primary>objet</primary><secondary>décomposition</secondary>
</indexterm>
<indexterm>
<primary>décomposition</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>spread</secondary>
</indexterm>
<indexterm>
<primary>spread</primary>
</indexterm></simpara>
<simpara>L&#8217;affectation par décomposition (<emphasis>destructuring</emphasis>) est une manière
élégante de piocher des valeurs dans un <link linkend="object">objet</link>.
Ce mécanisme existe aussi pour les <link linkend="array-destructuring">tableaux</link>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/destructuring.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
  twitter: '@FrancineDu26',
};

const {location,twitter} = francine;
console.log(location);            <co xml:id="CO55-1"/>

const {first_name:prenom} = francine;
console.log(prenom);              <co xml:id="CO55-2"/>

const {is_admin=false} = francine;
console.log(is_admin);            <co xml:id="CO55-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO55-1">
<para>Affiche <literal>"Drôme"</literal>&#160;– on a décomposé la clé <literal>location</literal>.</para>
</callout>
<callout arearefs="CO55-2">
<para>Affiche <literal>"Francine"</literal>&#160;– on a décomposé puis renommé la clé <literal>first_name</literal> en une nouvelle variable&#160;: <literal>prenom</literal>.</para>
</callout>
<callout arearefs="CO55-3">
<para>Affiche <literal>false</literal>&#160;– on a décomposé la clé <literal>is_admin</literal> et, comme elle n&#8217;existe pas, on a spécifié la valeur par défaut <literal>false</literal>, au lieu de <literal>undefined</literal>.</para>
</callout>
</calloutlist>
<simpara>La décomposition se combine agréablement avec l&#8217;opérateur <literal>&#8230;&#8203;</literal> (<emphasis>spread</emphasis>).
Il accumule <emphasis>le reste</emphasis> des éléments dans une variable, sous forme d&#8217;objet.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/destructuring-rest.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
  twitter: '@FrancineDu26',
};

const {first_name, ...metadata} = francine;

console.log(first_name);          <co xml:id="CO56-1"/>
console.log(metadata);            <co xml:id="CO56-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO56-1">
<para>Affiche <literal>"Francine"</literal>.</para>
</callout>
<callout arearefs="CO56-2">
<para>Affiche <literal>{ location: "Drôme", twitter: "@FrancineDu26" }</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="object.assign">
<title>Combiner des objets</title>
<simpara><indexterm>
<primary>objet</primary><secondary>Object.assign()</secondary>
</indexterm>
<indexterm>
<primary>Object.assign()</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>concaténation</secondary>
</indexterm>
<indexterm>
<primary>concaténation</primary>
</indexterm></simpara>
<simpara><literal>Object.assign()</literal> est une méthode qui sert à étendre et combiner plusieurs objets.
On a le choix d&#8217;intégrer les nouveaux éléments à un objet existant
ou bien d&#8217;en créer un nouveau.
Les objets sont combinés dans le premier paramètre de la fonction.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/assign.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const o = {
  first_name: 'Francine',
};

const o2 = Object.assign({}, o, {location: 'Drôme'});
console.log(o2);        <co xml:id="CO57-1"/>
console.log(o);         <co xml:id="CO57-2"/>

Object.assign(o2, {location: 'Paris'}, {location: 'Ardèche'});
console.log(o2);        <co xml:id="CO57-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO57-1">
<para>Affiche <literal>{ first_name: "Francine", location: "Drôme" }</literal>&#160;– la nouvelle variable contient nos deux objets combinés.</para>
</callout>
<callout arearefs="CO57-2">
<para>Affiche <literal>{ first_name: "Francine" }</literal>&#160;– ce sont les valeurs originelles de notre objet.</para>
</callout>
<callout arearefs="CO57-3">
<para>Affiche <literal>{ first_name: "Francine", location: 'Ardèche' }</literal>&#160;– l&#8217;objet&#160;<literal>o2</literal> a reçu la nouvelle propriété <literal>location</literal>.</para>
</callout>
</calloutlist>
<simpara>Notez que les affectations se font de <emphasis>gauche à droite</emphasis>.
Toute clé existante est remplacée.</simpara>
<simpara>La <link linkend="object-destructuring">décomposition d&#8217;objet</link> sert également à combiner
des objets entre&#160;eux.
<indexterm>
<primary>objet</primary><secondary>décomposition</secondary>
</indexterm>
<indexterm>
<primary>décomposition</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>spread</secondary>
</indexterm>
<indexterm>
<primary>spread</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/destructuring-spread.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
};

const francine26 = {...francine, location: 'Drôme'};
console.log(francine26);      <co xml:id="CO58-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO58-1">
<para>Affiche <literal>{ first_name: "Francine", location: "Drôme" }</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="itérer_sur_des_objets">
<title>Itérer sur des objets</title>
<simpara><indexterm>
<primary>objet</primary><secondary>itération</secondary>
</indexterm>
<indexterm>
<primary>itération</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>Object.entries()</secondary>
</indexterm>
<indexterm>
<primary>Object.entries()</primary>
</indexterm></simpara>
<simpara>La méthode <literal>Object.entries()</literal> est probablement la plus adaptée pour itérer à la
fois sur les <emphasis>clés</emphasis> et sur les <emphasis>valeurs</emphasis> d&#8217;un objet.
Elle retourne un tableau qui contient autant de paires de <literal>[clé, valeur]</literal> qu&#8217;il y a
d&#8217;éléments dans l&#8217;objet.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/entries.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log(Object.entries(francine)); <co xml:id="CO59-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO59-1">
<para>Affiche <literal>[[ "first_name", "Francine" ], [ "location", "Drôme" ]]</literal>.</para>
</callout>
</calloutlist>
<simpara>Nous sommes libres d'<link linkend="array.forEach">itérer sur les valeurs</link>
et d&#8217;utiliser la <link linkend="array-destructuring">décomposition de tableaux</link>
pour rendre notre code explicite&#160;:
<indexterm>
<primary>instruction</primary><secondary>for &#8230;&#8203; of</secondary>
</indexterm>
<indexterm>
<primary>for &#8230;&#8203; of</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/entries-loop.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

Object.entries(francine).forEach(([key, value]) =&gt; {
  console.log(`francine.${key} vaut ${value}`);   <co xml:id="CO60-1"/>
})

// même résultat, autre méthode
for (const [key, value] of Object.entries(francine)) {
  console.log(`francine.${key} vaut ${value}`);
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO60-1">
<para>Affiche successivement <literal>"francine.first_name vaut Francine"</literal> puis <literal>"francine.location vaut Drôme"</literal>.</para>
</callout>
</calloutlist>
<simpara>Deux autres méthodes récupèrent soit <emphasis>la liste des clés</emphasis> d&#8217;un objet (<literal>Object.keys()</literal>)
soit <emphasis>la liste de ses valeurs</emphasis> (<literal>Object.values()</literal>).
Dans les deux cas, les résultats sont retournés sous forme d&#8217;un <link linkend="array">tableau</link>.
<indexterm>
<primary>objet</primary><secondary>Object.keys()</secondary>
</indexterm>
<indexterm>
<primary>Object.keys()</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>Object.values()</secondary>
</indexterm>
<indexterm>
<primary>Object.values()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/keys.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log(Object.keys(francine));     <co xml:id="CO61-1"/>
console.log(Object.values(francine));   <co xml:id="CO61-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO61-1">
<para>Affiche <literal>["first_name", "location"]</literal>.</para>
</callout>
<callout arearefs="CO61-2">
<para>Affiche <literal>["Francine", "Drôme"]</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="identifier_des_valeurs">
<title>Identifier des valeurs</title>
<simpara><indexterm>
<primary>objet</primary><secondary>hasOwnProperty()</secondary>
</indexterm>
<indexterm>
<primary>hasOwnProperty()</primary>
</indexterm></simpara>
<simpara>Il y a trois manières d&#8217;identifier si un objet contient une valeur
associée à une&#160;clé.</simpara>
<simpara>Le plus simple est d&#8217;utiliser la méthode <literal>hasOwnProperty()</literal>.
Elle prend en argument le nom de la clé à tester et
retourne un <link linkend="boolean">booléen</link>.
<indexterm>
<primary>booléen</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/has-own-property.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log(francine.hasOwnProperty('location'));   <co xml:id="CO62-1"/>
console.log(francine.hasOwnProperty('twitter'));    <co xml:id="CO62-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO62-1">
<para>Affiche <literal>true</literal>.</para>
</callout>
<callout arearefs="CO62-2">
<para>Affiche <literal>false</literal>&#160;– cette clé n&#8217;existe pas dans cet objet.</para>
</callout>
</calloutlist>
<simpara>La seconde manière est d&#8217;utiliser l&#8217;opérateur&#160;<literal>in</literal>.
On l&#8217;aura déjà rencontré lors des <link linkend="array.forEach">boucles</link>&#160;;
ici, on l&#8217;utilise une seule&#160;fois.
<indexterm>
<primary>opérateur</primary><secondary>in</secondary>
</indexterm>
<indexterm>
<primary>in</primary>
</indexterm>
<indexterm>
<primary>instruction</primary><secondary>for &#8230;&#8203; in</secondary>
</indexterm>
<indexterm>
<primary>for &#8230;&#8203; in</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/key-in.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log('location' in francine);   <co xml:id="CO63-1"/>
console.log('twitter' in francine);    <co xml:id="CO63-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO63-1">
<para>Affiche <literal>true</literal>.</para>
</callout>
<callout arearefs="CO63-2">
<para>Affiche <literal>false</literal>&#160;– cette clé n&#8217;existe pas dans cet objet.</para>
</callout>
</calloutlist>
<simpara>Enfin, on peut tester la valeur associée avec la syntaxe standard <literal>objet.clé</literal>.
<indexterm>
<primary>objet</primary><secondary>syntaxe</secondary>
</indexterm>
<indexterm>
<primary>syntaxe</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/key.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log(Boolean(francine.location));   <co xml:id="CO64-1"/>
console.log(Boolean(francine.twitter));    <co xml:id="CO64-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO64-1">
<para>Affiche <literal>true</literal>.</para>
</callout>
<callout arearefs="CO64-2">
<para>Affiche <literal>false</literal>.</para>
</callout>
</calloutlist>
<simpara>Attention toutefois&#160;: cette méthode <emphasis>teste uniquement la valeur</emphasis>.
Si la clé existe et contient <literal>undefined</literal>, vous ne verrez pas la différence.
<indexterm>
<primary>undefined</primary>
</indexterm>
<indexterm>
<primary>type de données</primary><secondary>undefined</secondary>
</indexterm>
<indexterm>
<primary>undefined</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/key-undefined.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
  twitter: undefined
};

console.log(Boolean(francine.twitter));          <co xml:id="CO65-1"/>
console.log(francine.twitter !== undefined);     <co xml:id="CO65-2"/>

console.log(francine.hasOwnProperty('twitter')); <co xml:id="CO65-3"/>
console.log('twitter' in francine);              <co xml:id="CO65-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO65-1">
<para>Affiche <literal>false</literal>&#160;– la valeur <literal>undefined</literal> est convertie en <literal>false</literal>.</para>
</callout>
<callout arearefs="CO65-2">
<para>Affiche <literal>false</literal>&#160;– la clé existe bien, mais elle contient la valeur <literal>undefined</literal>.</para>
</callout>
<callout arearefs="CO65-3">
<para>Affiche <literal>true</literal>&#160;– le test se fait sur l&#8217;existence de la&#160;clé.</para>
</callout>
<callout arearefs="CO65-4">
<para>Affiche <literal>true</literal>&#160;– idem.</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="json">
<title>Lire et écrire des données au format JSON</title>
<simpara><indexterm>
<primary>JSON</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>JSON</secondary>
</indexterm>
<indexterm>
<primary>JSON</primary>
</indexterm></simpara>
<simpara>JSON (<phrase role="URL"><link xl:href="http://json.org">json.org</link></phrase>) est un format de données textuel standardisé.
Son but est de représenter des données informatiques de manière
interopérable entre différents langages.</simpara>
<formalpara>
<title>json/base.json</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">{
  "title": "Node.js",
  "price_tag": 32,
  "keywords": [
    "JavaScript",
    "Node.js",
    "Apprendre par l'exemple"
  ]
}</programlisting>
</para>
</formalpara>
<simpara>Le format JSON ressemble beaucoup à une structure d'<link linkend="object">objet</link> ECMAScript.
La représentation est plus stricte car <emphasis>toute donnée</emphasis> doit être représentée
de manière textuelle.
Ainsi, toutes les clés sont entourées de <emphasis>guillemets doubles</emphasis>.</simpara>
<simpara>Les types de données autorisés sont les nombres, les chaînes de caractères,
les booléens, les tableaux, les objets et la valeur <literal>null</literal>.
On ne peut donc pas représenter de <link linkend="function">fonction</link>,
d'<link linkend="class">instance d&#8217;objet</link> ni même la valeur <literal>undefined</literal>.</simpara>
<simpara>ECMAScript embarque le nécessaire pour <emphasis>parser</emphasis> depuis et <emphasis>convertir</emphasis> en JSON.
Cela se fait respectivement avec les fonctions <literal>JSON.parse()</literal> et <literal>JSON.stringify()</literal>.</simpara>
<simpara>La fonction <literal>JSON.parse()</literal> consomme du texte.
Elle retourne une représentation ECMAScript ou lance une <link linkend="error">erreur</link>
en cas de problème.
<indexterm>
<primary>JSON</primary><secondary>JSON.parse()</secondary>
</indexterm>
<indexterm>
<primary>JSON.parse()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>json/parse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const json_object = '{ "title": "Node.js", "price_tag": 32 }';
const json_string = '"Hello World!"';
const json_number = '32';

console.log(JSON.parse(json_string)); <co xml:id="CO66-1"/>
console.log(JSON.parse(json_number)); <co xml:id="CO66-2"/>
console.log(JSON.parse(json_object)); <co xml:id="CO66-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO66-1">
<para>Affiche <literal>"Hello World!"</literal>.</para>
</callout>
<callout arearefs="CO66-2">
<para>Affiche&#160;<literal>32</literal>.</para>
</callout>
<callout arearefs="CO66-3">
<para>Affiche <literal>{price_tag: 32, title: "Node.js"}</literal>.</para>
</callout>
</calloutlist>
<simpara>À l&#8217;inverse, la fonction <literal>JSON.stringify()</literal> convertit une structure ECMAScript
en chaîne de caractères au format&#160;JSON&#160;:
<indexterm>
<primary>JSON</primary><secondary>JSON.stringify()</secondary>
</indexterm>
<indexterm>
<primary>JSON.stringify()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>json/stringify.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const location = {
  lat: 48.8503439,
  lon: 2.34658949
}

console.log(JSON.stringify(location));  <co xml:id="CO67-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO67-1">
<para>Affiche <literal>"{\"lat\":48.8503439,\"lon\":2.34658949}"</literal>.</para>
</callout>
</calloutlist>
<simpara>La fonction <literal>JSON.stringify()</literal> parcourt tous les éléments
pour les sérialiser en forme textuelle.
Quand elle rencontre la la clé spéciale <literal>toJSON()</literal>,
elle l&#8217;utilise pour effectuer la conversion&#160;:
<indexterm>
<primary>JSON</primary><secondary>toJSON()</secondary>
</indexterm>
<indexterm>
<primary>toJSON()</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>toJSON()</secondary>
</indexterm>
<indexterm>
<primary>toJSON()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>json/to-json.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const location = {
  lat: 48.8503439,
  lon: 2.34658949,
  toJSON() {
    return `geo=${this.lat},${this.lon}`;
  }
}

console.log(JSON.stringify(location));    <co xml:id="CO68-1"/>

delete location.toJSON;
console.log(JSON.stringify(location));    <co xml:id="CO68-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO68-1">
<para>Affiche <literal>"\"geo=48.8503439,2.34658949\""</literal>&#160;– c&#8217;est la sérialisation définie par notre fonction <literal>toJSON</literal>.</para>
</callout>
<callout arearefs="CO68-2">
<para>Affiche <literal>"{\"lat\":48.8503439,\"lon\":2.34658949}"</literal>&#160;– sans la clé <literal>toJSON</literal>, notre objet initial est sérialisé tel&#160;quel.</para>
</callout>
</calloutlist>
<simpara>Notre implémentation contenue dans la fonction <literal>toJSON()</literal> est
responsable de renvoyer du texte seulement et de choisir les clés
à sérialiser.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>json/to-json-extra.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const location = {
  lat: 48.8503439,
  lon: 2.34658949,
  city: 'Paris',
  toJSON() {
    return `geo=${this.lat},${this.lon}`;
  }
}

console.log(JSON.stringify(location));    <co xml:id="CO69-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO69-1">
<para>Affiche <literal>"\"geo=48.8503439,2.34658949\""</literal>.</para>
</callout>
</calloutlist>
<simpara>Dans cette variante d&#8217;exemple, la clé <literal>city</literal> n&#8217;a pas été sérialisée
car notre fonction <literal>toJSON()</literal> se préoccupait seulement des clés <literal>lat</literal> et&#160;`lon`.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> JSON</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur JSON.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/JSON">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/JSON</link>
</simpara>
</note>
</section>
<section xml:id="date">
<title>Interagir avec des dates</title>
<simpara><indexterm>
<primary>date</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>Date</secondary>
</indexterm>
<indexterm>
<primary>Date</primary>
</indexterm></simpara>
<simpara>Les calculs de date s&#8217;effectuent à l&#8217;aide des objets <literal>Date</literal>.
Chaque instance représente un moment dans le temps, à un jour
et à une heure donnée.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>date/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const now = new Date();
const past = new Date('2013-12-04 10:00:00'); <co xml:id="CO70-1"/>

console.log(past.getUTCFullYear());           <co xml:id="CO70-2"/>
console.log(now.getUTCFullYear());            <co xml:id="CO70-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO70-1">
<para>On initialise l&#8217;objet date <literal>past</literal> au 04&#160;décembre&#160;2013.</para>
</callout>
<callout arearefs="CO70-2">
<para>Affiche <literal>2013</literal>&#160;– l&#8217;année liée à l&#8217;objet&#160;<literal>past</literal>.</para>
</callout>
<callout arearefs="CO70-3">
<para>Affiche <literal>2019</literal>&#160;– l&#8217;année liée à l&#8217;objet&#160;<literal>now</literal> (date du jour).
<indexterm>
<primary>date</primary><secondary>getUTCFullYear()</secondary>
</indexterm>
<indexterm>
<primary>getUTCFullYear()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Un certain nombre de méthodes retournent différents éléments de la date
contenue dans l&#8217;objet&#160;: année, secondes, jour de la semaine, etc.
Il en existe tout autant pour modifier ces éléments de date.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>date/set.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const past = new Date('2013-12-04 10:00:00');

past.setUTCFullYear('2015');           <co xml:id="CO71-1"/>
console.log(past.toISOString());       <co xml:id="CO71-2"/>

past.setUTCMonth(1);                   <co xml:id="CO71-3"/>
console.log(past.toISOString());       <co xml:id="CO71-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO71-1">
<para>Change la date vers l&#8217;année&#160;<literal>2015</literal>.</para>
</callout>
<callout arearefs="CO71-2">
<para>Affiche <literal>"2015-12-04T10:00:00.000Z"</literal>.</para>
</callout>
<callout arearefs="CO71-3">
<para>Change la date vers le mois&#160;<literal>1</literal>.</para>
</callout>
<callout arearefs="CO71-4">
<para>Affiche <literal>"2015-02-04T10:00:00.000Z"</literal>&#160;– pourquoi le mois de février&#160;??
<indexterm>
<primary>date</primary><secondary>setUTCFullYear()</secondary>
</indexterm>
<indexterm>
<primary>setUTCFullYear()</primary>
</indexterm>
<indexterm>
<primary>date</primary><secondary>setUTCMonth()</secondary>
</indexterm>
<indexterm>
<primary>setUTCMonth()</primary>
</indexterm>
<indexterm>
<primary>date</primary><secondary>toISOString()</secondary>
</indexterm>
<indexterm>
<primary>toISOString()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent illustre l&#8217;ambiguïté de la notion de mois.
Il s&#8217;agit en réalité de l'<emphasis>index du mois</emphasis>&#160;:
0&#160;correspond à janvier, 1 à février, etc.</simpara>
<simpara>Les méthodes natives font pour la plupart référence à l&#8217;anglais.
Elles offrent peu de confort de manipulation&#160;– on aimerait pouvoir
compter facilement le nombre de jours entre deux dates, ou retirer 30&#160;jours.</simpara>
<simpara>Quand nous utiliserons <link linkend="../chapter-04/index.adoc">Node</link> et
<link linkend="../chapter-05/index.adoc">npm</link>, nous verrons que nous aurons
à disposition des bibliothèques facilitant les manipulations de dates.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Date</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur Date.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date</link>
</simpara>
</note>
<section xml:id="intl.datetimeformat">
<title>Formatage internationalisé (Intl.DateTimeFormat)</title>
<simpara><indexterm>
<primary>date</primary><secondary>formattage</secondary>
</indexterm>
<indexterm>
<primary>formattage</primary>
</indexterm>
<indexterm>
<primary>date</primary><secondary>internationalisation</secondary>
</indexterm>
<indexterm>
<primary>internationalisation</primary>
</indexterm>
<indexterm>
<primary>Intl</primary><secondary>DateTimeFormat</secondary>
</indexterm>
<indexterm>
<primary>DateTimeFormat</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>Intl</secondary>
</indexterm>
<indexterm>
<primary>Intl</primary>
</indexterm></simpara>
<simpara>La spécification <emphasis>ECMA&#160;Intl</emphasis> a été conçue pour ajouter des
fonctionnalités relatives aux langues.
Cette spécification est complémentaire.
Son comportement varie en fonction du système d&#8217;exploitation
– mode d&#8217;installation de Node et/ou version du navigateur&#160;web.</simpara>
<simpara>Les méthodes <literal>toLocaleString()</literal>, <literal>toLocaleDateString()</literal> et
<literal>toLocaleTimeString()</literal> renvoient respectivement une version localisée
d&#8217;une date complète, d&#8217;une date et d&#8217;une heure.
<indexterm>
<primary>date</primary><secondary>toLocaleString()</secondary>
</indexterm>
<indexterm>
<primary>toLocaleString()</primary>
</indexterm>
<indexterm>
<primary>date</primary><secondary>toLocaleDateString()</secondary>
</indexterm>
<indexterm>
<primary>toLocaleDateString()</primary>
</indexterm>
<indexterm>
<primary>date</primary><secondary>toLocaleTimeString()</secondary>
</indexterm>
<indexterm>
<primary>toLocaleTimeString()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>date/to-locale-date.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const past = new Date('2013-12-04 10:00:00');

console.log(past.toLocaleDateString());                 <co xml:id="CO72-1"/>

const options = { month: 'long' };
console.log(past.toLocaleDateString('fr-FR', options)); <co xml:id="CO72-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO72-1">
<para>Affiche <literal>04/12/2013</literal>.</para>
</callout>
<callout arearefs="CO72-2">
<para>Affiche <literal>décembre</literal>.</para>
</callout>
</calloutlist>
<caution>
<title><phrase role="RemarquePreTitre">Attention</phrase> M01,&#160;M02,&#160;etc. ?</title>
<simpara>Si, en formatant une date, les caractères <literal>M01</literal>, <literal>M02</literal> ou autre s&#8217;affichent,
c&#8217;est que le système n&#8217;est pas configuré avec les libellés de la langue
demandée.</simpara>
<simpara>La langue par défaut est l&#8217;anglais.</simpara>
</caution>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Date/toLocaleDateString</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur Date/toLocaleDateString.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString</link>
</simpara>
</note>
<simpara>Une version plus verbeuse consiste à créer un formateur avec
<literal>Intl.DateTimeFormat</literal>.
Ce formateur se réutilise pour transformer plusieurs fois
des dates différentes avec les mêmes réglages
ou une même date avec des formatages différents.
<indexterm>
<primary>Intl</primary><secondary>DateTimeFormat</secondary>
</indexterm>
<indexterm>
<primary>DateTimeFormat</primary>
</indexterm>
<indexterm>
<primary>Intl</primary><secondary>DateTimeFormat</secondary><tertiary>format()</tertiary>
</indexterm>
<indexterm>
<primary>DateTimeFormat</primary><secondary>format()</secondary>
</indexterm>
<indexterm>
<primary>format()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>date/intl.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const past = new Date('2013-12-04 10:00:00');
const options = {
  year: 'numeric', month: 'short', day: 'numeric'
};
const longOptions = {
  year: 'numeric', month: 'long', day: 'numeric',
  weekday: 'long'
};

const fr = new Intl.DateTimeFormat('fr-FR', options);
const frLong = new Intl.DateTimeFormat('fr-FR', longOptions);

console.log(fr.format(past));         <co xml:id="CO73-1"/>
console.log(frLong.format(past));     <co xml:id="CO73-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO73-1">
<para>Affiche <literal>4 déc. 2013</literal>.</para>
</callout>
<callout arearefs="CO73-2">
<para>Affiche <literal>mercredi 4 décembre 2013</literal>.</para>
</callout>
</calloutlist>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> DateTimeFormat</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur DateTimeFormat.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/DateTimeFormat">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/DateTimeFormat</link>
</simpara>
</note>
</section>
</section>
<section xml:id="class">
<title>Partager une logique avec des objets de même nature (Class)</title>
<simpara><indexterm>
<primary>objet</primary><secondary>classe</secondary>
</indexterm>
<indexterm>
<primary>classe</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>new</secondary>
</indexterm>
<indexterm>
<primary>new</primary>
</indexterm>
<indexterm>
<primary>variable</primary><secondary>classe d&#8217;objet</secondary>
</indexterm>
<indexterm>
<primary>classe d&#8217;objet</primary>
</indexterm></simpara>
<simpara>Une classe est une structure qui partage des propriétés
et des méthodes entre les objets qui y font appel.
Une instance de classe est créée en préfixant un appel de fonction
par l&#8217;opérateur&#160;`new`.</simpara>
<programlisting role="interactive interactive--javascript interactive--runtime--node-v10" language="javascript" linenumbering="unnumbered">const date1 = new Date();
const date2 = new Date('2013-12-04');</programlisting>
<simpara>Nos deux variables sont des objets issus de la classe <link linkend="date">Date</link>.
Chacune des variables bénéficie des méthodes définies par cette classe.</simpara>
<simpara>Autrement dit, si les <link linkend="object">structures d&#8217;objet</link> définissent des données,
les classes définissent des comportements partagés.
<indexterm>
<primary>instruction</primary><secondary>class</secondary>
</indexterm>
<indexterm>
<primary>class</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>new</secondary>
</indexterm>
<indexterm>
<primary>new</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>this</secondary>
</indexterm>
<indexterm>
<primary>this</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>class/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">class Book {
  constructor({ title, ean13 }) {     <co xml:id="CO74-1"/>
    this.title = title;               <co xml:id="CO74-2"/>
    this.ean13 = ean13;
  }

  toJSON() {                          <co xml:id="CO74-3"/>
    const {title, ean13} = this;
    return {title, ean13};
  }

  get isbn() {                        <co xml:id="CO74-4"/>
    return this.ean13.split(3)[1];
  }

  static clean(value) {               <co xml:id="CO74-5"/>
    return value.replace(/\D/g, '');
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO74-1">
<para>Le constructeur reçoit un ou plusieurs argument(s) lors de l&#8217;instanciation de la classe.</para>
</callout>
<callout arearefs="CO74-2">
<para><literal>this</literal> fait référence à <emphasis>ce contexte</emphasis>, c&#8217;est-à-dire à <emphasis>cette instance de classe</emphasis>&#160;; deux instances peuvent être initialisées avec des données différentes.</para>
</callout>
<callout arearefs="CO74-3">
<para><literal>toJSON()</literal> est une méthode de la classe.</para>
</callout>
<callout arearefs="CO74-4">
<para><literal>isbn()</literal> est un accesseur (préfixe <literal>get</literal>)&#160;– une propriété dont la valeur est calculée à chaque fois qu&#8217;elle est appelée.</para>
</callout>
<callout arearefs="CO74-5">
<para><literal>clean()</literal> est une méthode dite <emphasis>statique</emphasis>&#160;– elle est appelée en dehors d&#8217;une instance.</para>
</callout>
</calloutlist>
<simpara>Nous développerons cet exemple dans les sections qui suivent.
On peut d&#8217;ores et déjà noter que la structure d&#8217;une classe
se décompose en plusieurs parties&#160;:
<indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>syntaxe</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>syntaxe</secondary>
</indexterm>
<indexterm>
<primary>syntaxe</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>constructeur</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>constructeur</secondary>
</indexterm>
<indexterm>
<primary>constructeur</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>méthode</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>méthode</secondary>
</indexterm>
<indexterm>
<primary>méthode</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>méthode statique</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>méthode statique</secondary>
</indexterm>
<indexterm>
<primary>méthode statique</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>accesseur get()</secondary>
</indexterm>
<indexterm>
<primary>accesseur get()</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>mutateur set()</secondary>
</indexterm>
<indexterm>
<primary>mutateur set()</primary>
</indexterm></simpara>
<variablelist>
<varlistentry>
<term>La définition</term>
<listitem>
<simpara>Définit le nom de la classe que l&#8217;on pourra instancier.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Le constructeur</term>
<listitem>
<simpara>Partie exécutée lorsque la classe est instanciée.
On y met le moins de choses possibles.
En général, on copie les données passées en argument.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Les méthodes</term>
<listitem>
<simpara>Fonctions partagées entre toutes les instances de la classe.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Les méthodes statiques</term>
<listitem>
<simpara>Fonctions partagées sans avoir à instancier la classe.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Les accesseurs et mutateurs</term>
<listitem>
<simpara>Fonctions qui définissent le comportement de propriétés dynamiques.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Le contexte (<literal>this</literal>)</term>
<listitem>
<simpara>On peut s&#8217;y référer dans les méthodes de la classe pour dire
<emphasis>je fais référence à cet objet</emphasis> et, donc,
appeler les données et méthodes attenantes.</simpara>
</listitem>
</varlistentry>
</variablelist>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Classes</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur les classes.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes</link>
</simpara>
</note>
<section xml:id="class.method">
<title>Méthodes d&#8217;instance</title>
<simpara><indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>méthode</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>méthode</secondary>
</indexterm>
<indexterm>
<primary>méthode</primary>
</indexterm></simpara>
<simpara>Les méthodes définissent des comportements partagés entre chaque instance
de la classe.
Elles servent à retourner ou transformer des valeurs rattachées à l&#8217;objet.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>class/methods.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">class Book {
  constructor({ title }) {
    this.title = title;
  }

  isPublished() {
    return this.is_published === true;
  }

  publish() {
    this.is_published = true;
  }
}

const book1 = new Book({ title: 'Node.js' });
console.log(book1.isPublished());   <co xml:id="CO75-1"/>
book1.publish();
console.log(book1.isPublished());   <co xml:id="CO75-2"/>

const book2 = new Book({ title: 'CSS maintenables' });
console.log(book2.isPublished());   <co xml:id="CO75-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO75-1">
<para>Affiche <literal>false</literal>&#160;– la propriété n&#8217;existe pas.</para>
</callout>
<callout arearefs="CO75-2">
<para>Affiche <literal>true</literal>&#160;– la propriété <literal>is_published</literal> a été changée à la ligne précédente.</para>
</callout>
<callout arearefs="CO75-3">
<para>Affiche <literal>false</literal>&#160;– les données sont étanches entre chaque instance.</para>
</callout>
</calloutlist>
</section>
<section xml:id="class.static">
<title>Méthodes statiques</title>
<simpara><indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>méthode statique</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>méthode statique</secondary>
</indexterm>
<indexterm>
<primary>méthode statique</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>static</secondary>
</indexterm>
<indexterm>
<primary>static</primary>
</indexterm></simpara>
<simpara>Les méthodes statiques sont pratiques pour mettre à disposition du code
métier de manière organisée.
Elles se caractérisent par le mot-clé <literal>static</literal> devant un nom de fonction.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>class/static.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">class Book {
  constructor({ title, ean13 }) {
    this.title = title;
    this.ean13 = ean13;
  }

  static clean(value) {
    return value.replace(/\D/g, '');
  }
}

const nodebook = new Book({
  title: 'Node.js',
  ean13: Book.clean('978-2212139938'),  <co xml:id="CO76-1"/>
});

console.log(nodebook.ean13);            <co xml:id="CO76-2"/>
console.log(nodebook.clean);            <co xml:id="CO76-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO76-1">
<para>On appelle la méthode statique <literal>Book.clean()</literal> pour nettoyer le code EAN13.</para>
</callout>
<callout arearefs="CO76-2">
<para>Affiche <literal>"9782212139938"</literal>&#160;– la valeur a bien été nettoyée.</para>
</callout>
<callout arearefs="CO76-3">
<para>Affiche <literal>undefined</literal>&#160;– les méthodes statiques ne sont pas accessibles depuis l&#8217;instance de classe.</para>
</callout>
</calloutlist>
<simpara>On verra dans le <link linkend="../chapter-04/index.adoc">chapitre sur Node</link>
qu&#8217;on peut se baser sur les modules pour partager du code
sans avoir à l&#8217;affecter à une classe.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Méthodes statiques</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur les méthodes statiques.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes/static">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes/static</link>
</simpara>
</note>
</section>
<section xml:id="object-getset">
<title>Accesseurs et mutateurs</title>
<simpara><indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>attribut</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>attribut</secondary>
</indexterm>
<indexterm>
<primary>attribut</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>accesseur</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>accesseur</secondary>
</indexterm>
<indexterm>
<primary>accesseur</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>mutateur</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>mutateur</secondary>
</indexterm>
<indexterm>
<primary>mutateur</primary>
</indexterm></simpara>
<simpara>Ce type de méthode définit des attributs dont la lecture ou l&#8217;écriture
sont dynamiques.</simpara>
<simpara>L&#8217;accesseur est une fonction préfixée par le mot-clé <literal>get</literal>&#160;; elle retourne
la valeur d&#8217;un attribut.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>getters.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const book = {
  title: 'Node.js',
  ean13: '9782212139938',
  get isbn() {            <co xml:id="CO77-1"/>
    return this.ean13.slice(3);
  }
}

console.log(book.ean13);  <co xml:id="CO77-2"/>
console.log(book.isbn);   <co xml:id="CO77-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO77-1">
<para>Définition de l&#8217;accesseur&#160;<literal>isbn()</literal>.</para>
</callout>
<callout arearefs="CO77-2">
<para>Affiche <literal>"9782212139938"</literal>&#160;– c&#8217;est une propriété de l&#8217;objet <literal>nodebook</literal>.</para>
</callout>
<callout arearefs="CO77-3">
<para>Affiche <literal>"2212139938"</literal>&#160;– <literal>isbn()</literal> s&#8217;utilise comme un attribut mais sa valeur est calculée à chaque fois qu&#8217;elle est appelée.</para>
</callout>
</calloutlist>
<simpara>Le mutateur est une fonction préfixée par le mot-clé <literal>set</literal>&#160;; elle définit
la valeur d&#8217;un ou plusieurs attribut(s).</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>setters.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const book = {
  title: 'Node.js',
  set ean13 (value) {     <co xml:id="CO78-1"/>
    this.issn = value.slice(0, 3);
    this.isbn = value.slice(3);
  }
}

book.ean13 = '9782212139938';

console.log(book.issn);   <co xml:id="CO78-2"/>
console.log(book.isbn);   <co xml:id="CO78-3"/>
console.log(book.ean13);  <co xml:id="CO78-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO78-1">
<para>Définition du mutateur <literal>ean13()</literal>&#160;– il accepte un seul argument.</para>
</callout>
<callout arearefs="CO78-2">
<para>Affiche <literal>978</literal>&#160;– l&#8217;attribut a été créé lors de l&#8217;appel du mutateur.</para>
</callout>
<callout arearefs="CO78-3">
<para>Affiche <literal>2212139938</literal>&#160;– idem.</para>
</callout>
<callout arearefs="CO78-4">
<para>Affiche <literal>undefined</literal>&#160;– il faudrait créer un accesseur <literal>get ean13()</literal> pour recomposer dynamiquement sa valeur.</para>
</callout>
</calloutlist>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Accesseurs</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur les accesseurs.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/get">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/get</link>
</simpara>
</note>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Mutateurs</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur les mutateurs.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/set">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/set</link>
</simpara>
</note>
</section>
<section xml:id="class.extends">
<title>Héritage</title>
<simpara><indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>héritage</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>héritage</secondary>
</indexterm>
<indexterm>
<primary>héritage</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>constructeur</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>constructeur</secondary>
</indexterm>
<indexterm>
<primary>constructeur</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>extends</secondary>
</indexterm>
<indexterm>
<primary>extends</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>super()</secondary>
</indexterm>
<indexterm>
<primary>super()</primary>
</indexterm></simpara>
<simpara>L&#8217;héritage est un mécanisme d&#8217;extension de classe.
C&#8217;est une pratique peu employée en JavaScript,
principalement en raison de sa nature modulaire et fonctionnelle.</simpara>
<simpara>L&#8217;héritage se caractérise par l&#8217;usage du mot-clé <literal>extends</literal> lors de la
définition de la classe et aussi par l&#8217;utilisation de l&#8217;opérateur <literal>super()</literal>
dans le constructeur.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>class/extends.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">class Product {               <co xml:id="CO79-1"/>
  constructor() {
    this.title = 'Sans titre';
  }
}

class Book extends Product {  <co xml:id="CO79-2"/>
  constructor(options) {
    super(options);

    if (options.title) {
      this.title = options.title;
    }
  }
}

const book = new Book({ title: 'Node.js' });
console.log(book.title);    <co xml:id="CO79-3"/>

const product = new Product({ title: 'Node.js' });
console.log(product.title); <co xml:id="CO79-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO79-1">
<para>La classe <literal>Product</literal> affecte un titre par défaut lorsqu&#8217;un nouvel objet est initialisé.</para>
</callout>
<callout arearefs="CO79-2">
<para>La classe <literal>Book</literal> affecte un titre donné en argument et, sinon, se base sur la valeur par défaut de la classe <literal>Product</literal>.</para>
</callout>
<callout arearefs="CO79-3">
<para>Affiche <literal>'Node.js'</literal>.</para>
</callout>
<callout arearefs="CO79-4">
<para>Affiche <literal>'Sans titre'</literal>&#160;– la propriété <literal>title</literal> ne se définit pas dans le constructeur (cf.&#160;<literal>class Product</literal>).</para>
</callout>
</calloutlist>
<simpara>En pratique, c&#8217;est comme si on empilait les classes les unes sur les autres.
On lègue des méthodes aux classes qui héritent.
Si une méthode porte le même nom, la méthode <quote>en haut de la pile</quote> a la priorité.</simpara>
<simpara>L&#8217;appel à la fonction <literal>super()</literal> <emphasis>appelle le constructeur de la classe étendue</emphasis>.
Si on ne l&#8217;appelle pas, le constructeur de la classe parente ne sera pas invoqué.</simpara>
<simpara>On reparlera de l&#8217;héritage dans le <link linkend="../chapter-09/index.adoc">chapitre 9</link>
avec un exemple populaire d&#8217;héritage appliqué aux composants visuels avec
la bibliothèque React.</simpara>
</section>
</section>
<section xml:id="promise">
<title>Coordonner des actions asynchrones (Promise)</title>
<simpara><indexterm>
<primary>objet</primary><secondary>Promise</secondary>
</indexterm>
<indexterm>
<primary>Promise</primary>
</indexterm>
<indexterm>
<primary>promesse</primary>
</indexterm>
<indexterm>
<primary>fonction</primary><secondary>anonyme</secondary>
</indexterm>
<indexterm>
<primary>anonyme</primary>
</indexterm>
<indexterm>
<primary>fonction</primary><secondary>de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>de rappel (callback)</primary>
</indexterm></simpara>
<simpara>Une promesse est <emphasis role="strong">un objet retourné immédiatement</emphasis> mais dont le
<emphasis role="strong">résultat est obtenu plus tard</emphasis>, de manière asynchrone.
Cette résolution est soit <emphasis>positive</emphasis> soit <emphasis>négative</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>promise/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const p = new Promise((resolve) =&gt; resolve('promesse tenue'));

console.log(p);                           <co xml:id="CO80-1"/>
console.log('un');                        <co xml:id="CO80-2"/>
p.then(message =&gt; console.log(message));  <co xml:id="CO80-3"/>
console.log('deux');                      <co xml:id="CO80-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO80-1">
<para>Affiche <literal>Promise</literal>&#160;– ce n&#8217;est pas le résultat que l&#8217;on voit, mais l&#8217;objet avec lequel interagir pour être prévenu de la mise à disposition du résultat.</para>
</callout>
<callout arearefs="CO80-2">
<para>Affiche <literal>"un"</literal>.</para>
</callout>
<callout arearefs="CO80-4">
<para>Affiche <literal>"deux"</literal>&#160;– c&#8217;est parce que la ligne d&#8217;avant a mis en attente la <link linkend="anonymous-function">fonction anonyme</link>.</para>
</callout>
<callout arearefs="CO80-3">
<para>Affiche <literal>"promesse tenue"</literal> en dernier.</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Design Pattern</phrase> Executor</title>
<simpara>Le fait qu&#8217;une fonction nous passe d&#8217;autres fonctions pour commander
un résultat s&#8217;appelle le <emphasis>pattern Executor</emphasis>.</simpara>
</note>
<simpara>Une <literal>Promise</literal> s&#8217;orchestre en deux temps&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>L&#8217;initialisation<?asciidoc-br?>
On décide de la manière dont le traitement asynchrone sera effectué.</simpara>
</listitem>
<listitem>
<simpara>La résolution<?asciidoc-br?>
<emphasis>Positive</emphasis> en appelant <literal>resolve()</literal> ou <emphasis>négative</emphasis>, en appelant <literal>reject()</literal>.
Le résultat passé à <literal>resolve()</literal> sera transmis au premier argument de <literal>then()</literal>.
Le résultat passé à <literal>reject()</literal> sera transmis au deuxième argument de <literal>then()</literal>,
mais aussi au premier argument de <literal>catch()</literal>.
<indexterm>
<primary>promesse</primary><secondary>resolve()</secondary>
</indexterm>
<indexterm>
<primary>resolve()</primary>
</indexterm>
<indexterm>
<primary>promesse</primary><secondary>reject()</secondary>
</indexterm>
<indexterm>
<primary>reject()</primary>
</indexterm>
<indexterm>
<primary>promesse</primary><secondary>catch()</secondary>
</indexterm>
<indexterm>
<primary>catch()</primary>
</indexterm>
<indexterm>
<primary>promesse</primary><secondary>then()</secondary>
</indexterm>
<indexterm>
<primary>then()</primary>
</indexterm></simpara>
</listitem>
</itemizedlist>
<simpara>Une instance de <literal>Promise</literal> expose plusieurs méthodes pour propager
le statut de son exécution&#160;:</simpara>
<variablelist>
<varlistentry>
<term><literal>then(onSuccess[, onError])</literal></term>
<listitem>
<simpara>Fonction acceptant un <emphasis>callback</emphasis> de résolution et
un autre de rejet (facultatif).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>catch(onError)</literal></term>
<listitem>
<simpara>Fonction acceptant un <emphasis>callback</emphasis> de rejet.</simpara>
</listitem>
</varlistentry>
</variablelist>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>promise/then-catch.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const oddTime = (date) =&gt; {
  return new Promise((resolve, reject) =&gt; {
    parseInt(date.getTime() / 1000) % 2                 <co xml:id="CO81-1"/>
      ? resolve('le nombre de secondes est impair :-)')
      : reject('le nombre de secondes n\'est pas impair :-(');
  });
}

const now = new Date();

oddTime(now)                                            <co xml:id="CO81-2"/>
  .then(msg =&gt; console.log(msg), msg =&gt; console.error(msg));

oddTime(new Date(now.getTime() + 1000))                 <co xml:id="CO81-3"/>
  .then(msg =&gt; console.log(msg))                        <co xml:id="CO81-4"/>
  .catch(msg =&gt; console.error(msg))                     <co xml:id="CO81-5"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO81-1">
<para>La fonction <literal>oddTime()</literal> accepte un argument de type &lt;&lt;date,Date&gt;. Elle résout la promesse <emphasis>positivement</emphasis> (<literal>resolve()</literal>) si le nombre de secondes est impair et <emphasis>négativement</emphasis> (<literal>reject</literal>) sinon.</para>
</callout>
<callout arearefs="CO81-2">
<para>Utilisation de la forme compacte de <literal>then()</literal> avec deux <emphasis>callbacks</emphasis>&#160;: un de succès (associé à <literal>resolve()</literal>) et un d&#8217;échec (associé à <literal>reject()</literal>).</para>
</callout>
<callout arearefs="CO81-3">
<para>On crée une nouvelle promesse, avec une date calée une seconde plus tard.</para>
</callout>
<callout arearefs="CO81-4">
<para>Affiche <literal>"le nombre de secondes est impair&#160;:-)"</literal> puisque la résolution est positive.</para>
</callout>
<callout arearefs="CO81-5">
<para>Affiche <literal>"le nombre de secondes n&#8217;est pas impair&#160;:-("</literal> puisque la résolution est négative.</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Standard <literal>Promise/A+</literal></title>
<simpara><indexterm>
<primary>promesse</primary><secondary>spécification Promise/A+</secondary>
</indexterm>
<indexterm>
<primary>spécification Promise/A+</primary>
</indexterm>
<indexterm>
<primary>ECMAScript</primary><secondary>ES2015</secondary>
</indexterm>
<indexterm>
<primary>ES2015</primary>
</indexterm>
<indexterm>
<primary>ECMAScript</primary><secondary>ES6</secondary>
</indexterm>
<indexterm>
<primary>ES6</primary>
</indexterm>
Historiquement, de nombreuses bibliothèques ont proposé leur propre implémentation de promesses.
Elles avaient le défaut de ne pas être interopérables.
La spécification <emphasis>Promise/A+</emphasis> (<phrase role="URL"><link xl:href="https://github.com/promises-aplus/promises-spec">github.com/promises-aplus/promises-spec</link></phrase>)
a émergé pour établir un standard de compatibilité.</simpara>
<simpara>ECMAScript&#160;2015 introduit nativement cette API.
Il n&#8217;y a donc plus besoin de <emphasis>polyfill</emphasis> ou de bibliothèque pour en bénéficier.</simpara>
</note>
<simpara>En général, on utilise les promesses <emphasis role="strong">pour aller plus vite</emphasis>,
parce qu&#8217;on peut continuer à traiter d&#8217;autres actions en attendant
l&#8217;arrivée du résultat.</simpara>
<simpara>C&#8217;est comme quand on se rend au restaurant&#160;:
les personnes en cuisine traitent des commandes
(actions longues) tandis que les personnes au service gèrent
des interactions plus courtes mais plus fréquentes.
Au final, le ticket de commande contient la liste des promesses dont
on attend la résolution.</simpara>
<simpara>Nous verrons d&#8217;autres utilisations des promesses
dans le reste de l&#8217;ouvrage, plus particulièrement
avec <link xl:href="../chapter-09/index.xml#io-fetch">fetch()</link> au chapitre&#160;9
ainsi qu&#8217;avec <link xl:href="../chapter-04/index.xml#util.promisify">promisify</link> au chapitre&#160;4.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Promise</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur les promesses.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Promise">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Promise</link>
</simpara>
</note>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Guide des promesses</title>
<simpara>Le guide <phrase role="URL"><link xl:href="https://www.w3.org/2001/tag/doc/promises-guide">www.w3.org/2001/tag/doc/promises-guide</link></phrase> est <emphasis>très</emphasis> complet.
Il est en anglais ainsi qu&#8217;en libre consultation sur le site du&#160;W3C.</simpara>
<simpara>Son dépôt GitHub <phrase role="URL"><link xl:href="https://github.com/w3ctag/promises-guide">github.com/w3ctag/promises-guide</link></phrase> permet
d&#8217;y contribuer.</simpara>
</tip>
<section xml:id="promise.all">
<title>Collection de promesses</title>
<simpara><indexterm>
<primary>promesse</primary><secondary>Promise.all()</secondary>
</indexterm>
<indexterm>
<primary>Promise.all()</primary>
</indexterm>
<indexterm>
<primary>tableau</primary>
</indexterm></simpara>
<simpara><literal>Promise.all()</literal> est une <link linkend="class.static">méthode statique</link> de la class <emphasis>Promise</emphasis>.
Elle accepte un <link linkend="array">tableau</link> de promesses et en retourne elle-même une promesse.
Cette dernière est résolue positivement si toutes les promesses réussissent
et négativement dès que l'<emphasis>une d&#8217;entre elles</emphasis> échoue.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>promise/all.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const asyncRandom = () =&gt; new Promise((resolve) =&gt; {  <co xml:id="CO82-1"/>
  const timing = Math.floor(Math.random() * 2000);
  setTimeout(() =&gt; resolve(`résolu en ${timing}ms`), timing);
});

const all = Promise.all([                             <co xml:id="CO82-2"/>
  asyncRandom(),
  asyncRandom(),
  asyncRandom()
]);

all.then(messages =&gt; console.log(messages));          <co xml:id="CO82-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO82-1">
<para>Cette fonction résout la promesse après un délai aléatoire compris entre&#160;0 et 2000&#160;millisecondes.</para>
</callout>
<callout arearefs="CO82-2">
<para>On passe trois promesses à <literal>Promise.all()</literal>.</para>
</callout>
<callout arearefs="CO82-3">
<para>La résolution est déclenchée dès que les trois promesses sont résolues&#160;– l&#8217;argument contient un tableau listant les résultats <emphasis>dans l&#8217;ordre initial</emphasis> des promesses.</para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent illustre la <emphasis role="strong">parallélisation des actions</emphasis>.
Si la promesse la plus longue est résolue en une seconde,
alors le temps d&#8217;attente pour la résolution de <emphasis>toutes les promesses</emphasis>
est de une seconde.<?asciidoc-br?>
Si on avait été dans un enchaînement séquentiel, le temps d&#8217;attente
final aurait été l&#8217;accumulation des temps d&#8217;attente de la résolution
de chacune des promesses.</simpara>
<simpara>Les promesses sont un des meilleurs moyens à notre disposition pour
<emphasis role="strong">modulariser</emphasis>, <emphasis role="strong">linéariser</emphasis> et <emphasis role="strong">clarifier le sens</emphasis> du flot de notre code.</simpara>
</section>
<section xml:id="async-await">
<title>async/await</title>
<simpara><indexterm>
<primary>promesse</primary><secondary>async et await</secondary>
</indexterm>
<indexterm>
<primary>async et await</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>await</secondary>
</indexterm>
<indexterm>
<primary>await</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>await</secondary>
</indexterm>
<indexterm>
<primary>await</primary>
</indexterm></simpara>
<simpara>Les opérateurs <literal>async</literal> et <literal>await</literal> aident à mettre en pause
l&#8217;interpréteur ECMAScript, en attendant le résultat d&#8217;une
fonction asynchrone (préfixée par <literal>async</literal>).
Les <link linkend="promise">promesses</link> sont implicitement compatibles.
On peut donc les mettre à plat pour obtenir un résultat
sans avoir à utiliser <literal>then()</literal> ni&#160;`catch()`.</simpara>
<simpara>Transformons l&#8217;exemple de la <link linkend="promise.all">section précédente</link>
pour comprendre l&#8217;impact de <literal>async</literal> et de&#160;`await`.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>promise/async-await.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">function asyncRandom() {
  return new Promise((resolve) =&gt; {
    const timing = Math.floor(Math.random() * 2000);
    setTimeout(() =&gt; resolve(`résolu en ${timing}ms`), timing);
  });
}

(async () =&gt; {                  <co xml:id="CO83-1"/>
  const all = [                 <co xml:id="CO83-2"/>
    await asyncRandom(),
    await asyncRandom(),
    await asyncRandom()
  ];

  console.log(all);             <co xml:id="CO83-3"/>
})();</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO83-1">
<para>On crée une <emphasis>fonction asynchrone auto-invoquée</emphasis>&#160;– parce qu&#8217;on ne peut pas encore utiliser de fonction asynchrone directement au niveau principal d&#8217;un script.</para>
</callout>
<callout arearefs="CO83-2">
<para>Chaque utilisation de <literal>await</literal> met l&#8217;interpréteur en pause.</para>
</callout>
<callout arearefs="CO83-3">
<para>L&#8217;affichage du temps d&#8217;exécution de chaque promesse se fait lorsque les trois promesses sont résolues.</para>
</callout>
</calloutlist>
<simpara>On gagne en lisibilité, mais on perd en vitesse.
Les promesses sont exécutées séquentiellement et non en parallèle.
Il est important d&#8217;arbitrer les choix de conception et d&#8217;éviter de bloquer
l&#8217;exécution de vos scripts sans raison explicite.</simpara>
</section>
</section>
<section xml:id="conclusion_3">
<title>Conclusion</title>
<simpara>ECMAScript est un langage bien plus riche, complet et élégant qu&#8217;il n&#8217;y paraît.</simpara>
<simpara>Ce chapitre nous a <emphasis role="strong">appris les différentes structures de langage</emphasis>
communes à tous les environnements comprenant ECMAScript.
Cela s&#8217;applique aussi bien à Node qu&#8217;aux navigateurs web.<?asciidoc-br?>
Je vous invite à revenir à ce chapitre pour vous rafraîchir la mémoire,
mais aussi pour jouer avec les exemples afin de confirmer votre compréhension
du langage.</simpara>
<simpara>Dans le <link linkend="../chapter-04/index.adoc">chapitre suivant</link>, nous allons
<emphasis role="strong">relier ces apprentissages avec Node</emphasis>&#160;– notre interpréteur et environnement
d&#8217;exécution JavaScript.</simpara>
</section>
</chapter>
<chapter xml:id="jouer_avec_node_js">
<title>Jouer avec Node.js</title>
<simpara>Nous allons faire un tour d&#8217;horizon des capacités de Node et de son système
de modules pour nous interfacer avec les systèmes d&#8217;exploitation Linux, macOS
et Windows.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Interagir avec l&#8217;interpréteur&#160;Node</simpara>
</listitem>
<listitem>
<simpara>Les modules de base</simpara>
</listitem>
<listitem>
<simpara>Créer ses propres modules</simpara>
</listitem>
<listitem>
<simpara>S&#8217;en sortir quand ça ne se passe pas comme prévu</simpara>
</listitem>
<listitem>
<simpara>Les différences de JavaScript entre Node et les navigateurs&#160;web</simpara>
</listitem>
<listitem>
<simpara>Options utiles pour démarrer&#160;Node</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Après avoir exécuté notre premier script Node, nous allons découvrir
l&#8217;étendue des modules Node et ce qu&#8217;ils nous offrent en termes de capacité
d&#8217;interaction avec le système d&#8217;exploitation&#160;– disque, réseau, calculs, etc.</simpara>
<simpara>Nous apprendrons ensuite à créer et organiser nos propres modules&#160;– nous
découvrirons comment les partager et les distribuer dans le chapitre 5.</simpara>
<simpara>Enfin, nous passerons en revue des erreurs typiques pour apprendre à les lire
et à mieux réagir avant de terminer sur des manières alternatives d&#8217;exécuter
des scripts Node, par exemple pour débogueur ou charger d&#8217;autres modules.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node&#160;v10</emphasis>
et <emphasis role="strong">npm&#160;v6</emphasis>.
Ce sont les versions stables recommandées en&#160;2019.</simpara>
</note>
<section xml:id="interagir_avec_linterpréteur_node">
<title>Interagir avec l&#8217;interpréteur Node</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>interpréteur</secondary>
</indexterm>
<indexterm>
<primary>interpréteur</primary>
</indexterm>
<indexterm>
<primary>ECMAScript</primary>
</indexterm></simpara>
<simpara>L&#8217;interpréteur Node est le programme qui nous fournit des résultats
en échange d&#8217;instructions ECMAScript.
Le terminal est un autre programme permettant de faire dialoguer
un ordinateur avec les programmes installés.</simpara>
<note>
<simpara>Le <link xl:href="../chapter-02/index.xml">chapitre 2</link> détaille comment installer
Node et un terminal.
Il contient également des conseils pour utiliser Node depuis un
navigateur web.
Cela peut rendre l&#8217;accès au terminal plus facile.</simpara>
</note>
<simpara>Ce chapitre se base sur le principe que vous avez un terminal installé,
sur lequel vous allez saisir des instructions ECMAScript.</simpara>
<figure>
<title>Exemple de terminal sous macOS</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/terminal.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>terminal</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal></title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-04
$ cd $(nodebook dir chapter-04)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les instructions d&#8217;installation pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<section xml:id="node-version">
<title>Afficher la version</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>version</secondary>
</indexterm>
<indexterm>
<primary>version</primary>
</indexterm>
<indexterm>
<primary>ECMAScript</primary><secondary>compatibilité</secondary>
</indexterm>
<indexterm>
<primary>compatibilité</primary>
</indexterm></simpara>
<simpara>Commençons par afficher la version de l&#8217;interpréteur Node.
Nous nous assurons ainsi que nous pouvons interagir avec
lui avec succès et qu&#8217;il est celui que nous attendons, dans la bonne version.
La version de Node conditionne la liste des fonctionnalités du langage
ECMAScript à disposition.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Compatibilité</phrase> Syntaxe ECMAScript</title>
<simpara>Le site web <phrase role="URL"><link xl:href="https://node.green">node.green</link></phrase> liste le niveau de compatibilité
des fonctionnalités ECMAScript.</simpara>
<simpara>Cette page vous aidera à comprendre quelles fonctionnalités utiliser en toute
sécurité, version par version de&#160;Node.</simpara>
</tip>
<simpara>Une fois votre terminal ouvert, saisissez la commande suivante&#160;:</simpara>
<screen>$ node --version</screen>
<simpara>Le numéro de version de l&#8217;interpréteur Node s&#8217;affiche alors,
par exemple <literal>v10.9.0</literal>.</simpara>
<simpara>Si c&#8217;est ce à quoi vous vous attendiez, passez à la suite.
À l&#8217;inverse, si une erreur se produit ou si la version
n&#8217;est pas la bonne, retournez à la section
<quote><link xl:href="../chapter-02/index.xml#install">Installer Node.js</link></quote> du chapitre&#160;2.</simpara>
</section>
<section xml:id="script">
<title>Avec un script</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>script</secondary>
</indexterm>
<indexterm>
<primary>script</primary>
</indexterm></simpara>
<simpara>L&#8217;exécution d&#8217;un script Node est très certainement la pratique la plus courante.</simpara>
<simpara>L&#8217;interpréteur Node lit le contenu d&#8217;un fichier et exécute les instructions.
L&#8217;interpréteur reste actif jusqu&#8217;à ce que toutes les instructions
soient traitées.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>script.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(2 + 2);
console.log('abc'.toLocaleUpperCase());</programlisting>
</para>
</formalpara>
<simpara>Le fichier exemple <literal>script.js</literal> contient deux instructions.
Node les interprète lorsqu&#8217;on lui passe le chemin du fichier en paramètre
dans une invite de commandes&#160;:</simpara>
<screen>$ node script.js
4
ABC</screen>
<simpara>Node nous rend ensuite la main pour exécuter d&#8217;autres commandes.</simpara>
<simpara>On apprendra à passer des <link linkend="process.argv">arguments d&#8217;exécution</link>
dans la section sur le <link linkend="process">module <literal>process</literal></link>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Performances</phrase> Ressources machine</title>
<simpara>Démarrer un processus Node a un coût incompressible en ressources machine&#160;:
environ <emphasis role="strong">30&#160;Mo de&#160;RAM</emphasis> et <emphasis role="strong">40&#160;ms de CPU</emphasis> avant d&#8217;exécuter nos
instructions.</simpara>
</tip>
</section>
<section xml:id="repl">
<title>Avec l&#8217;invite de commandes interactive (REPL)</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary>
</indexterm></simpara>
<simpara>L&#8217;invite de commandes interactive est un moyen de parler
à l&#8217;interpréteur Node sans écrire de fichier.
Je l&#8217;utilise pour tester des idées et des éléments de syntaxe
quand je ne m&#8217;en rappelle&#160;plus.</simpara>
<simpara>Le mode interactif s&#8217;active en exécutant Node sans aucun argument&#160;:</simpara>
<screen>$ node
&gt; </screen>
<simpara>On notera au passage que l&#8217;invite est préfixée par le caractère&#160;`&gt;`
afin de marquer notre présence dans un environnement différent.
On retrouve un comportement similaire dans les invites de commande
des langages Ruby&#160;(<literal>irb</literal>), Python&#160;(<literal>python</literal>) et PHP&#160;(<literal>php -a</literal>)</simpara>
<simpara>Lorsque nous sommes dans l&#8217;interpréteur interactif,
toutes les expressions sont interprétées par Node&#160;:</simpara>
<screen>$ node
&gt; 2 + 2
4
&gt; "abc".toLocaleUpperCase()
'ABC'
&gt; </screen>
<simpara>Des expressions sont réservées pour obtenir de l&#8217;aide, sortir de l&#8217;interpréteur
ou simplement nettoyer ce que l&#8217;on voit à l&#8217;écran.
Pour cela on fait appel à l&#8217;instruction <literal>.help</literal>&#160;:</simpara>
<screen>$ node
&gt; .help
.break    Sometimes you get stuck, this gets you out
.clear    Alias for .break
.editor   Enter editor mode
.exit     Exit the repl
.help     Print this help message
.load     Load JS from a file into the REPL session
.save     Save all evaluated commands in this REPL session to a file</screen>
<simpara><indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary><tertiary>.clear</tertiary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary><secondary>.clear</secondary>
</indexterm>
<indexterm>
<primary>.clear</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary><tertiary>.exit</tertiary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary><secondary>.exit</secondary>
</indexterm>
<indexterm>
<primary>.exit</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary><tertiary>.help</tertiary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary><secondary>.help</secondary>
</indexterm>
<indexterm>
<primary>.help</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary><tertiary>.load</tertiary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary><secondary>.load</secondary>
</indexterm>
<indexterm>
<primary>.load</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary><tertiary>.save</tertiary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary><secondary>.save</secondary>
</indexterm>
<indexterm>
<primary>.save</primary>
</indexterm></simpara>
<simpara>Les touches ou combinaisons de touches suivantes sont utiles pour naviguer dans
l&#8217;invite de commandes&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> annule
la saisie de la ligne en cours&#160;– c&#8217;est <keycombo><keycap>⌃</keycap><keycap>C</keycap></keycombo> sous macOS.</simpara>
</listitem>
<listitem>
<simpara><keycap>&#11014;</keycap> et <keycap>&#11015;</keycap> aident à naviguer dans l&#8217;historique des commandes.</simpara>
</listitem>
<listitem>
<simpara><keycap>TAB</keycap> tente de compléter la saisie avec une expression ou variable connue.
<indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary><tertiary>Ctrl+C</tertiary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary><secondary>Ctrl+C</secondary>
</indexterm>
<indexterm>
<primary>Ctrl+C</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary><tertiary>TAB</tertiary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary><secondary>TAB</secondary>
</indexterm>
<indexterm>
<primary>TAB</primary>
</indexterm></simpara>
</listitem>
</itemizedlist>
<screen>$ node
&gt; conso<keycap>TAB</keycap>
&gt; console
&gt; console.<keycap>TAB</keycap>
...
console.assert                console.clear                 console.count
...</screen>
<simpara>On notera que l&#8217;utilisation de <keycap>TAB</keycap> après un caractère <emphasis>point</emphasis>&#160;(<literal>.</literal>)
liste l&#8217;intégralité des propriétés de cet objet.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Afficher toutes les variables connues</title>
<simpara>La touche <keycap>TAB</keycap> affiche toutes les variables connues
de la session interactive en cours.
Il suffit d&#8217;appuyer une ou deux fois dessus dans une invite vide&#160;:</simpara>
<screen>$ node
&gt; <keycap>TAB</keycap><keycap>TAB</keycap>
Array                         Boolean                       Date
Error                         EvalError                     Function
Infinity                      JSON                          Math
NaN                           Number                        Object
...</screen>
<simpara>C&#8217;est un excellent moyen de découvrir des éléments du langage qui nous
étaient inconnus jusque-là.</simpara>
</tip>
<simpara>La sortie de l&#8217;invite de commandes se fait à l&#8217;aide de
l&#8217;utilisation répétée de la combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>
(ou <keycombo><keycap>⌃</keycap><keycap>C</keycap></keycombo> sous macOS).
On revient ainsi à l&#8217;état initial où l&#8217;on était avant de
saisir la commande&#160;`node`&#160;:</simpara>
<screen>$ node
&gt; 
(To exit, press ^C again or type .exit)
&gt; 
$ </screen>
<simpara>Ce même résultat s&#8217;obtient en saisissant <literal>.exit</literal>
ou en utilisant la combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo> (ou <keycombo><keycap>⌃</keycap><keycap>D</keycap></keycombo> sous macOS).
<indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary><tertiary>.exit</tertiary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary><secondary>.exit</secondary>
</indexterm>
<indexterm>
<primary>.exit</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary><tertiary>Ctrl+D</tertiary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary><secondary>Ctrl+D</secondary>
</indexterm>
<indexterm>
<primary>Ctrl+D</primary>
</indexterm></simpara>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Variable magique&#160;<literal>_</literal></title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary><tertiary>_</tertiary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary><secondary>_</secondary>
</indexterm>
<indexterm>
<primary>_</primary>
</indexterm></simpara>
<simpara>La variable&#160;<literal>_</literal> est spécifique à l&#8217;invite de commandes Node.
Elle contient systématiquement le résultat retourné par
la dernière évaluation de code&#160;:</simpara>
<screen>$ node
&gt; 2 + 2
4
&gt; _ + 2
6</screen>
<simpara>Elle est équivalente à la variable&#160;<literal>$_</literal> dans la console
des outils de développement des navigateurs web.</simpara>
</tip>
</section>
</section>
<section xml:id="modules-builtin">
<title>Les modules de base</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>module de base (voir module)</secondary>
</indexterm>
<indexterm>
<primary>module de base (voir module)</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>de base</secondary>
</indexterm>
<indexterm>
<primary>de base</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>require()</secondary>
</indexterm>
<indexterm>
<primary>require()</primary>
</indexterm></simpara>
<simpara>Les modules de base <emphasis role="strong">étendent le champ d&#8217;action de Node</emphasis>.
Ils servent d&#8217;interfaces pour communiquer avec le système d&#8217;exploitation,
le système de fichiers, des ressources HTTP et des connexions réseau, entre autres.
Ils sont inclus avec chaque installation de Node.
On peut donc en bénéficier sans effort supplémentaire.</simpara>
<simpara>Un module de base se charge en passant son identifiant
à la fonction <literal>require()</literal>, qui retourne alors un objet avec un certain nombre
de propriétés et de fonctions.</simpara>
<simpara>Ainsi, on charge le <link linkend="fs">module <literal>fs</literal></link> (pour <emphasis>file system</emphasis>&#160;– <emphasis>système de fichiers</emphasis>)
afin d&#8217;interagir avec les fichiers et les répertoires présents sur l&#8217;ordinateur&#160;:
<indexterm>
<primary>module</primary><secondary>fs</secondary>
</indexterm>
<indexterm>
<primary>fs</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>fs/read-dir.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const fs = require('fs');             <co xml:id="CO84-1"/>

fs.readdir('.', (error, files) =&gt; {   <co xml:id="CO84-2"/>
  console.log(files);                 <co xml:id="CO84-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO84-1">
<para>On charge les fonctions et attributs du module <literal>fs</literal> dans la variable du même nom (on pourrait l&#8217;appeler autrement).</para>
</callout>
<callout arearefs="CO84-2">
<para>L&#8217;appel à la fonction <literal>fs.readdir()</literal> passe un objet d&#8217;erreur ainsi que la liste des fichiers et répertoires contenus dans le chemin indiqué.</para>
</callout>
<callout arearefs="CO84-3">
<para>Affiche un tableau contenant les noms de fichiers et de répertoires présents dans le dossier courant.
<indexterm>
<primary>module</primary><secondary>fs</secondary><tertiary>readdir()</tertiary>
</indexterm>
<indexterm>
<primary>fs</primary><secondary>readdir()</secondary>
</indexterm>
<indexterm>
<primary>readdir()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Ces modules de base représentent la pierre angulaire de nos applications Node.
Ils fournissent le nécessaire pour tout faire&#160;!
On apprendra à étendre encore plus le champ des possibles dans
le <link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>,
grâce aux <link xl:href="../chapter-05/index.xml#modules">modules&#160;<literal>npm</literal></link>.
<indexterm>
<primary>module</primary><secondary>npm</secondary>
</indexterm>
<indexterm>
<primary>npm</primary>
</indexterm></simpara>
<simpara>Les modules de base changent au fil du temps&#160;:
les nouvelles versions de Node ajoutent, corrigent et complètent les modules et
fonctions existants.
La documentation officielle de Node reflète ces changements et
affiche un indice de stabilité pour savoir à quoi s&#8217;en&#160;tenir.
<indexterm>
<primary>module</primary><secondary>indice de stabilité</secondary>
</indexterm>
<indexterm>
<primary>indice de stabilité</primary>
</indexterm></simpara>
<figure>
<title>Documentation du module <literal>fs</literal> et son indice de stabilité</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/api-fs.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>api fs</phrase></textobject>
</mediaobject>
</figure>
<simpara>Exceptionnellement, un module de base (ou une de ses fonctions) peut être supprimé.
L&#8217;équipe de Node annonce ces changements en dépréciant le module en question&#160;:
le code reste en place et sera supprimé dans une version ultérieure.
En général, c&#8217;est une question de mois voire d&#8217;années.
On verra plus loin comment <link linkend="deprecation">afficher les alertes de dépréciation</link>.
<indexterm>
<primary>module</primary><secondary>dépréciation</secondary>
</indexterm>
<indexterm>
<primary>dépréciation</primary>
</indexterm></simpara>
<figure>
<title>Documentation de la fonction <literal>fs.exists()</literal>, affichée comme dépréciée depuis Node&#160;v1</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/api-deprecation-fs-exists.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>api deprecation fs exists</phrase></textobject>
</mediaobject>
</figure>
<simpara><indexterm>
<primary>module</primary><secondary>fs</secondary><tertiary>exists()</tertiary>
</indexterm>
<indexterm>
<primary>fs</primary><secondary>exists()</secondary>
</indexterm>
<indexterm>
<primary>exists()</primary>
</indexterm></simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Lecture des indices de stabilité</title>
<simpara>Node communique un indice de stabilité pour les modules de base.
Cette échelle se décompose en trois niveaux&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Déprécié</emphasis>&#160;: le module sera supprimé dans une prochaine version majeure.
À l&#8217;avenir, il vaut mieux ne pas se compter dessus.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Expérimental</emphasis>&#160;: le module est en cours de développement.
Une fonctionnalité expérimentale peut changer radicalement entre deux
versions de Node.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Stable</emphasis>&#160;: on peut faire confiance à ce module.
Des choses peuvent changer exceptionnellement mais l&#8217;intention est d&#8217;offrir
une stabilité.</simpara>
</listitem>
</itemizedlist>
<simpara>L&#8217;indice est parfois appliqué à des fonctions dont les attentes
changeraient d&#8217;une version à l&#8217;autre de&#160;Node.</simpara>
</note>
<simpara>Les sections suivantes illustrent des usages courants des modules de base
pour mieux comprendre ce qu&#8217;on peut en attendre et comment les utiliser.</simpara>
<section xml:id="console">
<title>console : déboguer rapidement des variables</title>
<simpara><indexterm>
<primary>module</primary><secondary>console</secondary>
</indexterm>
<indexterm>
<primary>console</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>console</secondary>
</indexterm>
<indexterm>
<primary>console</primary>
</indexterm></simpara>
<simpara>L&#8217;objet <literal>console</literal> est une boîte à outils pour afficher
ce qui se passe à un moment donné dans un de nos scripts.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>console/log.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let count = 0;

count++; count++; count++;

console.log('Valeur de count :', count);</programlisting>
</para>
</formalpara>
<simpara>La fonction écrit les messages et la valeur des variables dans la
<link linkend="process.std">sortie standard</link> du terminal&#160;:
<indexterm>
<primary>module</primary><secondary>process</secondary>
</indexterm>
<indexterm>
<primary>process</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stdout</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stdout</secondary>
</indexterm>
<indexterm>
<primary>stdout</primary>
</indexterm></simpara>
<screen>$ node console/log.js
Valeur de count : 3</screen>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Variable globale console</title>
<simpara>Node charge automatiquement le module pour nous et
le rend utilisable à tout moment à travers la variable globale <literal>console</literal>.</simpara>
<simpara>Il est donc inutile de charger le module manuellement avec <literal>require('console')</literal>.</simpara>
</tip>
<simpara><literal>console.log()</literal> sait interpoler les valeurs passées en argument avec le marqueur&#160;<literal>%s</literal>.
C&#8217;est utile pour structurer un message complexe en gardant les variables à part&#160;:
<indexterm>
<primary>fonction</primary><secondary>console.log()</secondary>
</indexterm>
<indexterm>
<primary>console.log()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>console</secondary><tertiary>console.log()</tertiary>
</indexterm>
<indexterm>
<primary>console</primary><secondary>console.log()</secondary>
</indexterm>
<indexterm>
<primary>console.log()</primary>
</indexterm></simpara>
<formalpara>
<title>console/interpolate.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log('Soupe %s et carottes', 'lentilles');  <co xml:id="CO85-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO85-1">
<para>Affiche <literal>Soupe lentilles et carottes</literal>.</para>
</callout>
</calloutlist>
<simpara><literal>%s</literal>&#160;ne sait afficher que des chaînes de caractères.
D&#8217;autres marqueurs savent afficher d&#8217;autres types de données&#160;:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>%d</literal></simpara>
</entry>
<entry>
<simpara>Affiche la valeur en tant que <link xl:href="../chapter-03/index.xml#number">nombre</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>%j</literal></simpara>
</entry>
<entry>
<simpara>Affiche la valeur en tant que <link xl:href="../chapter-03/index.xml#json">structure&#160;JSON</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>%O</literal></simpara>
</entry>
<entry>
<simpara>Affiche l&#8217;objet avec une profondeur maximum de 4&#160;éléments.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>%o</literal></simpara>
</entry>
<entry>
<simpara>Idem que&#160;<literal>%O</literal> mais sur une profondeur maximum de 2&#160;éléments.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>console.log()</literal></simpara>
</entry>
<entry>
<simpara>Affichage de messages et de variables dans le terminal.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>console.error()</literal></simpara>
</entry>
<entry>
<simpara>Comportement identique à <literal>console.log()</literal> mais à réserver aux erreurs.
La fonction écrit dans la <link linkend="process.std">sortie erreur</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>console.dir()</literal></simpara>
</entry>
<entry>
<simpara>Affichage dédié aux objets et tableaux.
On peut paramétrer la profondeur d&#8217;affichage
(par défaut, jusqu&#8217;à deux niveaux).</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>console.group()</literal></simpara>
</entry>
<entry>
<simpara>Regroupe visuellement les appels à <literal>console.log</literal> et <literal>console.error</literal>.
Un groupe se clôt avec <literal>console.groupEnd()</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>console.time()</literal></simpara>
</entry>
<entry>
<simpara>Démarre un chronomètre en lui attribuant un nom.
Le chronomètre s&#8217;arrête et sa durée s&#8217;affiche avec <literal>console.timeEnd()</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>classe <literal>Console</literal></simpara>
</entry>
<entry>
<simpara>  Crée un objet similaire à <literal>console</literal> mais en dirigeant l&#8217;affichage ailleurs
  que vers les <link linkend="process.std">flux standards</link>.
<indexterm>
<primary>module</primary><secondary>console</secondary><tertiary>console.error()</tertiary>
</indexterm>
<indexterm>
<primary>console</primary><secondary>console.error()</secondary>
</indexterm>
<indexterm>
<primary>console.error()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>console</secondary><tertiary>console.dir()</tertiary>
</indexterm>
<indexterm>
<primary>console</primary><secondary>console.dir()</secondary>
</indexterm>
<indexterm>
<primary>console.dir()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>console</secondary><tertiary>console.group()</tertiary>
</indexterm>
<indexterm>
<primary>console</primary><secondary>console.group()</secondary>
</indexterm>
<indexterm>
<primary>console.group()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>console</secondary><tertiary>console.time()</tertiary>
</indexterm>
<indexterm>
<primary>console</primary><secondary>console.time()</secondary>
</indexterm>
<indexterm>
<primary>console.time()</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>Console</secondary>
</indexterm>
<indexterm>
<primary>Console</primary>
</indexterm></simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Web</phrase> Console et navigateurs&#160;web</title>
<simpara>L&#8217;objet <literal>console</literal> est originaire du monde des navigateurs web.
C&#8217;est un onglet de la boîte à outils de développement.
On peut y lire des messages placés dans le code JavaScript de la page web.
On l&#8217;utilise aussi pour inspecter la page et interagir avec du&#160;code.</simpara>
<figure>
<title>Console web dans le navigateur web Firefox</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/web-console.png"/>
</imageobject>
<textobject><phrase>web console</phrase></textobject>
</mediaobject>
</figure>
</tip>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module console</title>
<simpara>La documentation du module <literal>console</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/console.html">nodejs.org/docs/latest-v10.x/api/console.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>documentation</primary><secondary>module console</secondary>
</indexterm>
<indexterm>
<primary>module console</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>console</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>console</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm></simpara>
</section>
<section xml:id="path">
<title>path : manipuler des chemins de&#160;fichiers</title>
<simpara><indexterm>
<primary>module</primary><secondary>path</secondary>
</indexterm>
<indexterm>
<primary>path</primary>
</indexterm></simpara>
<simpara>Le module <literal>path</literal> offre un ensemble de fonctions et de propriétés pour
manipuler et construire des chemins vers des fichiers et répertoires.</simpara>
<simpara>Ces opérations permettent à notre code de fonctionner de manière identique
sur des systèmes d&#8217;exploitation qui expriment différemment les chemins&#160;–
Linux et Windows par exemple.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>path/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const path = require('path');

console.log(path.dirname('/tmp/package.json'));   <co xml:id="CO86-1"/>
console.log(path.basename('/tmp/package.json'));  <co xml:id="CO86-2"/>
console.log(path.extname('/tmp/package.json'));   <co xml:id="CO86-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO86-1">
<para>Affiche <literal>/tmp</literal>.</para>
</callout>
<callout arearefs="CO86-2">
<para>Affiche <literal>package.json</literal>.</para>
</callout>
<callout arearefs="CO86-3">
<para>Affiche <literal>.json</literal>.</para>
</callout>
</calloutlist>
<simpara>Certaines fonctions comme <literal>path.join()</literal> tiennent compte de la nature du système
d&#8217;exploitation.
Le résultat d&#8217;un même appel de fonction sera différent, mais correspondra
à la même intention&#160;:
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.join()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.join()</secondary>
</indexterm>
<indexterm>
<primary>path.join()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>path/platform.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const path = require('path');

console.log(path.sep);                          <co xml:id="CO87-1"/>
console.log(path.join('tmp', 'package.json'));  <co xml:id="CO87-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO87-1">
<para>Affiche&#160;<literal>/</literal> (<literal>\</literal>&#160;sous Windows).</para>
</callout>
<callout arearefs="CO87-2">
<para>Affiche <literal>tmp/package.json</literal>&#160;– <literal>tmp\package.json</literal> sous Windows.
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.sep</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.sep</secondary>
</indexterm>
<indexterm>
<primary>path.sep</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>On constate que <literal>path.join()</literal> assemble les chemins en utilisant la valeur de
<literal>path.sep</literal>.
Ce qui est bien pour nous, c&#8217;est qu&#8217;on n&#8217;a pas besoin d&#8217;y penser&#160;:
<emphasis role="strong">Node se charge de la compatibilité avec le système d&#8217;exploitation</emphasis>.</simpara>
<simpara>La différence de résultats se précise un peu plus lorsque l&#8217;on tente de calculer
des chemins complets, <emphasis>relatifs à notre emplacement</emphasis> actuel&#160;:
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.relative()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.relative()</secondary>
</indexterm>
<indexterm>
<primary>path.relative()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>path/relative.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const path = require('path');

const relative_diff = path.relative(
  '/tmp/package.json', '/tmp/source'
);
const resolve_diff = path.resolve(
  '/tmp/package.json', '..', './source'
);

console.log(relative_diff);     <co xml:id="CO88-1"/>
console.log(resolve_diff);      <co xml:id="CO88-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO88-1">
<para>Affiche <literal>../source</literal> (<literal>..\source</literal> sous Windows)&#160;– c&#8217;est ce qu&#8217;il faut parcourir pour aller du premier chemin au second.</para>
</callout>
<callout arearefs="CO88-2">
<para>Affiche <literal>/tmp/source</literal> (<literal>C:\tmp\source</literal> sous Windows)&#160;– on constate que le chemin <emphasis>résolu</emphasis> est absolu, et intègre la lettre du lecteur sous Windows.</para>
</callout>
</calloutlist>
<simpara>Les résultats produits par les fonctions du module <literal>path</literal>
se combinent particulièrement bien avec celles <link linkend="fs">du module&#160;<literal>fs</literal></link>, pour
accéder aux fichiers.
<indexterm>
<primary>module</primary><secondary>fs</secondary>
</indexterm>
<indexterm>
<primary>fs</primary>
</indexterm></simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>path.basename()</literal></simpara>
</entry>
<entry>
<simpara>Retourne le nom de fichier.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.dirname()</literal></simpara>
</entry>
<entry>
<simpara>Retourne le nom de répertoire.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.extname()</literal></simpara>
</entry>
<entry>
<simpara>Retourne l&#8217;extension d&#8217;un fichier.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.isAbsolute()</literal></simpara>
</entry>
<entry>
<simpara>Indique si le chemin est <emphasis>absolu</emphasis> ou&#160;non.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.join()</literal></simpara>
</entry>
<entry>
<simpara>Assemble des bouts de chemin.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.parse()</literal></simpara>
</entry>
<entry>
<simpara>Retourne des informations liées à la compréhension d&#8217;un chemin
(extension, nom de fichier, nom de répertoire).</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.relative()</literal></simpara>
</entry>
<entry>
<simpara>Calcule le chemin relatif entre un chemin source et un de destination.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.resolve()</literal></simpara>
</entry>
<entry>
<simpara>Calcule un chemin absolu à partir de plusieurs bouts de chemin.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Attribut <literal>path.sep</literal></simpara>
</entry>
<entry>
<simpara>  Retourne le caractère servant de séparateur de répertoires
  pour le système d&#8217;exploitation sur lequel est exécuté le script&#160;:
  <literal>/</literal>&#160;pour Linux et macOS, <literal>\</literal>&#160;pour Windows.
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.basename()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.basename()</secondary>
</indexterm>
<indexterm>
<primary>path.basename()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.dirname()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.dirname()</secondary>
</indexterm>
<indexterm>
<primary>path.dirname()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.extname()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.extname()</secondary>
</indexterm>
<indexterm>
<primary>path.extname()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.isAbsolute()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.isAbsolute()</secondary>
</indexterm>
<indexterm>
<primary>path.isAbsolute()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.join()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.join()</secondary>
</indexterm>
<indexterm>
<primary>path.join()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.parse()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.parse()</secondary>
</indexterm>
<indexterm>
<primary>path.parse()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.relative()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.relative()</secondary>
</indexterm>
<indexterm>
<primary>path.relative()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.resolve()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.resolve()</secondary>
</indexterm>
<indexterm>
<primary>path.resolve()</primary>
</indexterm></simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Compatibilité</phrase> Manipuler des chemins Windows sous Linux et vice-versa</title>
<simpara>On peut avoir besoin de manipuler des chemins Windows avec du code
exécuté sur un autre système d&#8217;exploitation comme Linux ou macOS.
C&#8217;est exactement ce que proposent les fonctions de <literal>path.win32</literal>.
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.posix</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.posix</secondary>
</indexterm>
<indexterm>
<primary>path.posix</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.win32</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.win32</secondary>
</indexterm>
<indexterm>
<primary>path.win32</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>path/win32.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {join,resolve} = require('path').win32; <co xml:id="CO89-1"/>

console.log(join('tmp', 'package.json'));     <co xml:id="CO89-2"/>
console.log(resolve('C:\\tmp', '../etc'));       <co xml:id="CO89-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO89-1">
<para>On déstructure les fonctions depuis la variante <literal>win32</literal> du module <literal>path</literal>.</para>
</callout>
<callout arearefs="CO89-2">
<para>Affiche <literal>tmp\package.json</literal>.</para>
</callout>
<callout arearefs="CO89-3">
<para>Affiche <literal>C:\etc</literal>.</para>
</callout>
</calloutlist>
<simpara>L&#8217;objet <literal>path.posix</literal> fonctionne de la même manière pour des chemins Linux.</simpara>
</tip>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module path</title>
<simpara>La documentation du module <literal>path</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/path.html">nodejs.org/docs/latest-v10.x/api/path.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>documentation</primary><secondary>module path</secondary>
</indexterm>
<indexterm>
<primary>module path</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm></simpara>
</section>
<section xml:id="url">
<title>url : manipuler des URL</title>
<simpara><indexterm>
<primary>module</primary><secondary>url</secondary>
</indexterm>
<indexterm>
<primary>url</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>url</secondary><tertiary>URL</tertiary>
</indexterm>
<indexterm>
<primary>url</primary><secondary>URL</secondary>
</indexterm>
<indexterm>
<primary>URL</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>URL</secondary>
</indexterm>
<indexterm>
<primary>URL</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>URL</secondary>
</indexterm>
<indexterm>
<primary>URL</primary>
</indexterm></simpara>
<simpara>Le module <literal>url</literal> offre des outils pour interpréter des URL, les transformer
et les assembler à nouveau sous forme de chaîne de caractères.
La variable <literal>URL</literal> (en majuscules) est disponible de manière globale.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>url/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const example = new URL('https://oncletom.io/node.js/');

console.log(example.hostname);  <co xml:id="CO90-1"/>
console.log(example.pathname);  <co xml:id="CO90-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO90-1">
<para>Affiche <literal>oncletom.io</literal>.</para>
</callout>
<callout arearefs="CO90-2">
<para>Affiche <literal>/node.js/</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Web</phrase> Compatibilité avec les navigateurs</title>
<simpara><indexterm>
<primary>ECMAScript</primary><secondary>comptabilité</secondary>
</indexterm>
<indexterm>
<primary>comptabilité</primary>
</indexterm>
La classe <literal>URL</literal> que nous utilisons dans Node est la même que dans les
navigateurs web modernes.
Son fonctionnement suit le standard <phrase role="URL"><link xl:href="https://url.spec.whatwg.org">url.spec.whatwg.org</link></phrase>.</simpara>
</tip>
<simpara>L&#8217;objet retourné par le constructeur de <literal>URL</literal> est modifiable.
Il est ainsi possible de changer les parties de l&#8217;URL qui nous intéressent
et de récupérer une URL sous forme d&#8217;une chaîne de caractères&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>url/to-string.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const example = new URL('https://oncletom.io/node.js/');
example.pathname = '/';
example.hash = '#top';

console.log(example.toString());  <co xml:id="CO91-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO91-1">
<para>Affiche <literal><link xl:href="https://oncletom.io/#top">oncletom.io/#top</link></literal>&#160;– le chemin et le fragment ont été modifiés.</para>
</callout>
</calloutlist>
<simpara>La fonction <literal>format()</literal> va plus loin que <literal>url.toString()</literal>.
Ses options contrôlent plus finement ce qui sera conservé ou retiré lors
de la conversion en chaîne de caractères.
<indexterm>
<primary>objet</primary><secondary>toString()</secondary>
</indexterm>
<indexterm>
<primary>toString()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>url/format.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {format} = require('url');

const url = 'https://user:password@oncletom.io/#top?test=1';
const example = new URL(url);
const options = {
  auth: false,
  search: false,
  fragment: false,
};

console.log(format(example, options));  <co xml:id="CO92-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO92-1">
<para>Affiche <literal><link xl:href="https://oncletom.io/">oncletom.io/</link></literal>&#160;– les identifiants, l&#8217;ancre et les arguments ont été retirés par la fonction <literal>format()</literal>.
<indexterm>
<primary>module</primary><secondary>url</secondary><tertiary>url.format()</tertiary>
</indexterm>
<indexterm>
<primary>url</primary><secondary>url.format()</secondary>
</indexterm>
<indexterm>
<primary>url.format()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Le constructeur <literal>URL</literal> accepte une URL de référence en second argument.
Cette adresse résout un chemin absolu à partir du premier argument&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>url/resolve.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const url1 = new URL('/node.js/', 'https://oncletom.io');
const url2 = new URL('../', 'https://oncletom.io/node.js/');

console.log(url1.toString()); <co xml:id="CO93-1"/>
console.log(url2.toString()); <co xml:id="CO93-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO93-1">
<para>Affiche <literal><link xl:href="https://oncletom.io/node.js/">oncletom.io/node.js/</link></literal>.</para>
</callout>
<callout arearefs="CO93-2">
<para>Affiche <literal><link xl:href="https://oncletom.io/">oncletom.io/</link></literal>.</para>
</callout>
</calloutlist>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>url.parse()</literal></simpara>
</entry>
<entry>
<simpara>Transforme une chaîne de caractères en un objet utilisable avec la fonction
<link linkend="http.request"><literal>http.request()</literal></link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>classe <literal>URL</literal></simpara>
</entry>
<entry>
<simpara>Représentation de la structure d&#8217;une&#160;URL.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>classe <literal>URLSearchParams</literal></simpara>
</entry>
<entry>
<simpara>  Représentation des paramètres&#160;d&#8217;URL.
<indexterm>
<primary>module</primary><secondary>url</secondary><tertiary>url.parse()</tertiary>
</indexterm>
<indexterm>
<primary>url</primary><secondary>url.parse()</secondary>
</indexterm>
<indexterm>
<primary>url.parse()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>url</secondary><tertiary>URL</tertiary>
</indexterm>
<indexterm>
<primary>url</primary><secondary>URL</secondary>
</indexterm>
<indexterm>
<primary>URL</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>url</secondary><tertiary>URLSearchParams</tertiary>
</indexterm>
<indexterm>
<primary>url</primary><secondary>URLSearchParams</secondary>
</indexterm>
<indexterm>
<primary>URLSearchParams</primary>
</indexterm></simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de la classe <literal>URL</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>url.format()</literal></simpara>
</entry>
<entry>
<simpara>Transforme un objet <literal>URL</literal> en chaîne de caractères grâce à des contrôles&#160;fins.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>url.toString()</literal></simpara>
</entry>
<entry>
<simpara>Transforme l&#8217;objet <literal>URL</literal> en chaîne de caractères.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.hash</literal></simpara>
</entry>
<entry>
<simpara>Fragment de&#160;l&#8217;URL.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.hostname</literal></simpara>
</entry>
<entry>
<simpara>Nom de l&#8217;hôte.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.pathname</literal></simpara>
</entry>
<entry>
<simpara>Chemin d&#8217;accès à la ressource.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.protocol</literal></simpara>
</entry>
<entry>
<simpara>Protocole spécifié.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.search</literal></simpara>
</entry>
<entry>
<simpara>Paramètres de l&#8217;URL, caractère&#160;<literal>?</literal> inclus.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.searchParams</literal></simpara>
</entry>
<entry>
<simpara>Objet permettant de manipuler les paramètres.
Voir ci-après.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Manipuler une URL est plus aisé lorsqu&#8217;elle est structurée sous forme d&#8217;objet.
Les paramètres ne sont pas en reste avec l&#8217;attribut <literal>searchParams</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>url/search-params.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const example = new URL('https://oncletom.io/');
example.searchParams.set('search', 'node.js');

console.log(example.toString());               <co xml:id="CO94-1"/>
console.log(example.searchParams.toString());  <co xml:id="CO94-2"/>

example.searchParams.delete('search');
console.log(example.toString());               <co xml:id="CO94-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO94-1">
<para>Affiche <literal><link xl:href="https://oncletom.io/?search=node.js">oncletom.io/?search=node.js</link></literal>&#160;– représentation de l&#8217;URL complète.</para>
</callout>
<callout arearefs="CO94-2">
<para>Affiche <literal>search=node.js</literal>&#160;– représentation des paramètres seulement.</para>
</callout>
<callout arearefs="CO94-3">
<para>Affiche <literal><link xl:href="https://oncletom.io/">oncletom.io/</link></literal>&#160;– le paramètre <literal>search</literal> et sa valeur ont été supprimés de&#160;l&#8217;URL.</para>
</callout>
</calloutlist>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de la classe <literal>URLSearchParams</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>searchParams.append()</literal></simpara>
</entry>
<entry>
<simpara>Ajoute un paramètre à la suite de l&#8217;URL.
Cette fonction permet d&#8217;ajouter plusieurs fois une même clé, peu importe sa valeur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.delete()</literal></simpara>
</entry>
<entry>
<simpara>Supprime un paramètre&#160;d&#8217;URL.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.get()</literal></simpara>
</entry>
<entry>
<simpara>Retoure la valeur d&#8217;un paramètre donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.getAll()</literal></simpara>
</entry>
<entry>
<simpara>Renvoie toutes les valeurs d&#8217;un paramètre donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.has()</literal></simpara>
</entry>
<entry>
<simpara>Indique <literal>true</literal> si les paramètres contiennent une clé donnée.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.set()</literal></simpara>
</entry>
<entry>
<simpara>Affecte une valeur à un paramètre&#160;d&#8217;URL.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.toString()</literal></simpara>
</entry>
<entry>
<simpara>Retourne une représentation de l&#8217;objet sous forme d&#8217;une chaîne
de caractères exploitable dans une&#160;URL.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module url</title>
<simpara>La documentation du module <literal>url</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/url.html">nodejs.org/docs/latest-v10.x/api/url.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>documentation</primary><secondary>module url</secondary>
</indexterm>
<indexterm>
<primary>module url</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>url</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>url</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm></simpara>
</section>
<section xml:id="fs">
<title>fs : manipuler le système de fichiers</title>
<simpara><indexterm>
<primary>module</primary><secondary>fs</secondary>
</indexterm>
<indexterm>
<primary>fs</primary>
</indexterm></simpara>
<simpara>Le module&#160;<literal>fs</literal> est un incontournable.
On y a recours dès que l&#8217;on a besoin de lire ou d&#8217;écrire dans un fichier.
On s&#8217;en sert également pour créer, déplacer ou supprimer des fichiers
et des répertoires.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>fs/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const fs = require('fs');
const path = require('path');
const filename = path.join(__dirname, 'package.json');

fs.readFile(filename, (err, content) =&gt; {   <co xml:id="CO95-1"/>
  console.log(String(content));             <co xml:id="CO95-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO95-1">
<para>Lorsque la lecture du fichier aboutit, la <link linkend="callbacks">fonction de rappel</link> est appelée avec deux paramètres&#160;: un objet d&#8217;erreur et le contenu.</para>
</callout>
<callout arearefs="CO95-2">
<para>Affiche le contenu d&#8217;un fichier <literal>package.json</literal>.
<indexterm>
<primary>fonction</primary><secondary>de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>de rappel (callback)</primary>
</indexterm></para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Variables __filename et __dirname</title>
<simpara><literal>__filename</literal> est une chaîne de caractères faisant référence au fichier actuel.<?asciidoc-br?>
<literal>__dirname</literal> fait référence au répertoire du fichier actuel.
<indexterm>
<primary>variable globale</primary><secondary>__filename</secondary>
</indexterm>
<indexterm>
<primary>__filename</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>__dirname</secondary>
</indexterm>
<indexterm>
<primary>__dirname</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>dirname-filename.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(__filename);                      <co xml:id="CO96-1"/>
console.log(module.filename === __filename);  <co xml:id="CO96-2"/>

console.log(__dirname);                       <co xml:id="CO96-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO96-1">
<para>Affiche <literal>/&#8230;&#8203;/chapter-04/examples/dirname-filename.js</literal>.</para>
</callout>
<callout arearefs="CO96-2">
<para>Affiche <literal>true</literal>&#160;– ça ne serait pas un <emphasis>raccourci</emphasis> sinon&#160;;-).</para>
</callout>
<callout arearefs="CO96-3">
<para>Affiche <literal>/&#8230;&#8203;/chapter-04/examples</literal>.</para>
</callout>
</calloutlist>
<simpara>Ces variables sont utiles pour opérer sur des <emphasis>chemins relatifs au fichier actuel</emphasis>.</simpara>
</tip>
<simpara>Dans l&#8217;exemple précédent, nous avons parcouru le contenu d&#8217;un fichier.
<literal>fs.readdir()</literal> parcourt un répertoire&#160;:
<indexterm>
<primary>module</primary><secondary>fs</secondary><tertiary>fs.readdir()</tertiary>
</indexterm>
<indexterm>
<primary>fs</primary><secondary>fs.readdir()</secondary>
</indexterm>
<indexterm>
<primary>fs.readdir()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>fs/ls.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {readdir} = require('fs');

readdir('.', (error, files) =&gt; console.log(files));</programlisting>
</para>
</formalpara>
<simpara>En l&#8217;exécutant, nous obtenons le résultat suivant&#160;:</simpara>
<screen>$ node fs/ls.js
[ '.eslintrc.yaml',
  'console',
  'debug.txt',
  'deprecation-warning.js',
  'process/env.js',
  ...
  'util' ]</screen>
<simpara>Dans les environnements UNIX, le point&#160;(<literal>.</literal>) pour faire référence au
<emphasis>répertoire courant</emphasis> et deux points (<literal>..</literal>) pour le <emphasis>répertoire parent</emphasis>.
C&#8217;est le cas avec Node également.
La notion de <emphasis>courant</emphasis> fait référence à l&#8217;emplacement depuis lequel nous
appelons l&#8217;exécutable <literal>node</literal>.</simpara>
<simpara>Changeons de répertoire&#160;:</simpara>
<screen>$ cd ../..
$ node chapter-04/examples/fs/ls.js
[ '.eslintignore',
  'README.md',
  'chapter-01'
  'chapter-02'
  ...
  'tests' ]</screen>
<simpara>Les <emphasis>chemins relatifs</emphasis> se définissent par rapport à l&#8217;emplacement depuis
lequel on exécute la commande <literal>node</literal>.
<literal>__dirname</literal> et <literal>__filename</literal> sont déterminées par rapport
à l&#8217;emplacement du script qui fait référence à ces variables.</simpara>
<simpara>Puisque les opérations liées au système de fichiers ne sont pas immédiates
les fonctions de ce module sont en majorité <emphasis role="strong">asynchrones</emphasis>.
Leur rapidité d&#8217;exécution varie en fonction du support de stockage utilisé
(disque, mémoire), de son usure et de la capacité de traitement de la CPU
de l&#8217;ordinateur.</simpara>
<simpara>Cela veut aussi dire que les erreurs sont obtenues de manière asynchrone&#160;:
<indexterm>
<primary>fonction</primary><secondary>asynchrone</secondary>
</indexterm>
<indexterm>
<primary>asynchrone</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>fs</secondary><tertiary>fs.rmdir()</tertiary>
</indexterm>
<indexterm>
<primary>fs</primary><secondary>fs.rmdir()</secondary>
</indexterm>
<indexterm>
<primary>fs.rmdir()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>fs/rmdir.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const fs = require('fs');

fs.rmdir(__dirname, (error) =&gt; {
  console.error(error.message);   <co xml:id="CO97-1"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO97-1">
<para>Indique que la suppression n&#8217;a pas abouti car le répertoire en question n&#8217;est pas vide&#160;– et pour cause, c&#8217;est celui qui contient notre fichier d&#8217;exemple.</para>
</callout>
</calloutlist>
<simpara>On peut articuler plusieurs opérations entre elles et utiliser le <link linkend="path">module&#160;<literal>path</literal></link>
pour construire des chemins robustes qui fonctionnent avec tous les systèmes
d&#8217;exploitation, sans effort.
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>join()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>join()</secondary>
</indexterm>
<indexterm>
<primary>join()</primary>
</indexterm></simpara>
<simpara>L&#8217;exemple suivant crée un répertoire dans un <link linkend="os">dossier temporaire</link>,
copie un fichier sous un autre nom et liste le contenu du répertoire
une fois la copie effectuée.
<indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>tmpdir()</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>tmpdir()</secondary>
</indexterm>
<indexterm>
<primary>tmpdir()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>fs/copy-tmp.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {tmpdir} = require('os');
const {join} = require('path');
const fs = require('fs');

const dest_dir = join(tmpdir(), 'test');          <co xml:id="CO98-1"/>

fs.mkdir(dest_dir, (error) =&gt; {                   <co xml:id="CO98-2"/>
  const dest = join(dest_dir, 'example-copy.js');

  fs.copyFile(__filename, dest, (error) =&gt; {      <co xml:id="CO98-3"/>
    if (error === null) {
      console.log(`La copie vers ${dest} s'est bien passée.`);
    }
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO98-1">
<para>On assemble un chemin composé à partir du <link linkend="os">répertoire temporaire</link> fourni par le système d&#8217;exploitation.</para>
</callout>
<callout arearefs="CO98-2">
<para>Crée le répertoire en question.</para>
</callout>
<callout arearefs="CO98-3">
<para>Copie le contenu de ce script d&#8217;exemple vers le répertoire en question en lui attribuant un nouveau nom.</para>
</callout>
</calloutlist>
<warning>
<title><phrase role="RemarquePreTitre">Sécurité</phrase> Utilisateur et permissions</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>sécurité</secondary>
</indexterm>
<indexterm>
<primary>sécurité</primary>
</indexterm>
<indexterm>
<primary>sécurité</primary><secondary>permission système</secondary>
</indexterm>
<indexterm>
<primary>permission système</primary>
</indexterm>
Le script Node exécuté a le droit d&#8217;accéder, d&#8217;altérer et de supprimer
au même titre que l&#8217;utilisateur système qui lance le script.</simpara>
<simpara>Ce n&#8217;est pas grave si on exécute du code écrit soi-même.
Il faut être vigilant·e si le code exécuté provient d&#8217;une autre personne.</simpara>
</warning>
<simpara>Si l&#8217;exemple précédent semble agréable à lire, il révèle deux points de vigilance.</simpara>
<simpara>J&#8217;ai écrit le code de manière "optimiste", pour des questions de lisibilité.
Pourtant, à chaque opération, il y a une possibilité d&#8217;erreur à gérer&#160;:
de la création du répertoire jusqu&#8217;à la lecture des fichiers qu&#8217;il contient.
Il faudrait vérifier l&#8217;argument <literal>error</literal> à chaque fois et décider quoi faire
en fonction de la <link linkend="errors">nature du problème</link>.</simpara>
<simpara>Je vous invite à modifier ce code
pour afficher la valeur des variables <literal>error</literal> à l&#8217;aide des
<link linkend="console">fonctions du module <literal>console</literal></link>.
Certaines erreurs apparaissent quand nous invoquons le script une seconde fois.
<indexterm>
<primary>module</primary><secondary>console</secondary><tertiary>console.error()</tertiary>
</indexterm>
<indexterm>
<primary>console</primary><secondary>console.error()</secondary>
</indexterm>
<indexterm>
<primary>console.error()</primary>
</indexterm></simpara>
<simpara>L&#8217;imbrication des <link linkend="callbacks">fonctions de rappel</link> fait qu&#8217;il est
<emphasis role="strong">difficile d&#8217;en interrompre la suite</emphasis>.
Une bonne piste serait d&#8217;appliquer l'<link linkend="util">utilitaire <literal>promisify</literal></link>
sur les fonctions du module&#160;<literal>fs</literal> afin de créer une
<link xl:href="../chapter-03/index.xml#promise">chaîne de promesses</link>.<?asciidoc-br?>
Nous apprendrons à le faire dans la section sur le <link linkend="util">module&#160;<literal>util</literal></link>.
<indexterm>
<primary>promesse</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>util</secondary><tertiary>util.promisify()</tertiary>
</indexterm>
<indexterm>
<primary>util</primary><secondary>util.promisify()</secondary>
</indexterm>
<indexterm>
<primary>util.promisify()</primary>
</indexterm>
<indexterm>
<primary>fonction</primary><secondary>de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>de rappel (callback)</primary>
</indexterm></simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>fs.appendFile()</literal></simpara>
</entry>
<entry>
<simpara>Ajoute un contenu à la suite d&#8217;un fichier existant.
Le fichier sera créé le cas échéant.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.copyFile()</literal></simpara>
</entry>
<entry>
<simpara>Copie un fichier depuis un emplacement vers un autre.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.mkdir()</literal></simpara>
</entry>
<entry>
<simpara>Crée un nouveau répertoire.
Le répertoire parent doit déjà exister.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.readdir()</literal></simpara>
</entry>
<entry>
<simpara>Obtient la liste des fichiers et dossiers contenus dans un répertoire donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.readFile()</literal></simpara>
</entry>
<entry>
<simpara>Lit le contenu d&#8217;un fichier.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.rename()</literal></simpara>
</entry>
<entry>
<simpara>Renomme un fichier ou un répertoire.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.rmdir()</literal></simpara>
</entry>
<entry>
<simpara>Supprime un répertoire.
Il doit être vide.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.stat()</literal></simpara>
</entry>
<entry>
<simpara>Retourne des informations à propos d&#8217;un chemin d&#8217;accès&#160;:
est-ce que c&#8217;est un fichier, un répertoire, un lecteur, un lien symbolique&#160;?
Des attributs précisent la taille du fichier (en octets), l&#8217;identifiant
système de son propriétaire, la date de création/modification/dernier accès, etc.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.symlink()</literal></simpara>
</entry>
<entry>
<simpara>Crée un lien symbolique vers un emplacement.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.truncate()</literal></simpara>
</entry>
<entry>
<simpara>Raccourcit le contenu d&#8217;un fichier à une longueur donnée (en nombre d&#8217;octets).
Si aucun argument n&#8217;est donné, le contenu du fichier est remis à&#160;zéro.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.createReadStream()</literal></simpara>
</entry>
<entry>
<simpara>Crée un <link linkend="stream">flux de lecture</link>, pour lire un fichier en continu.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.createWriteStream()</literal></simpara>
</entry>
<entry>
<simpara>Crée un <link linkend="stream">flux d&#8217;écriture</link>, pour écrire en continu dans un fichier.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Définition</phrase> Lien symbolique</title>
<simpara>Fichier qui fait référence à un autre fichier&#160;– c&#8217;est comme un <emphasis>alias</emphasis>.
Toutes les modifications effectuées sur le lien symbolique sont
répercutées sur le fichier d&#8217;origine.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Lien_symbolique">fr.wikipedia.org/wiki/Lien_symbolique</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module fs</title>
<simpara>La documentation du module <literal>fs</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/fs.html">nodejs.org/docs/latest-v10.x/api/fs.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>documentation</primary><secondary>module fs</secondary>
</indexterm>
<indexterm>
<primary>module fs</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>fs</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>fs</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm></simpara>
</section>
<section xml:id="events">
<title>events : programmer des événements</title>
<simpara><indexterm>
<primary>module</primary><secondary>events</secondary>
</indexterm>
<indexterm>
<primary>events</primary>
</indexterm>
<indexterm>
<primary>fonction</primary><secondary>asynchrone</secondary>
</indexterm>
<indexterm>
<primary>asynchrone</primary>
</indexterm>
<indexterm>
<primary>fonction</primary><secondary>de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>de rappel (callback)</primary>
</indexterm></simpara>
<simpara>Le module <literal>events</literal> contient le nécessaire pour créer du code communiquant
à l&#8217;aide de fonctions d&#8217;écoute et d&#8217;émission de messages.
C&#8217;est comme un <emphasis>centre de tri postal</emphasis>, mais avec des variables
en guise de courriers.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>events/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const EventEmitter = require('events');
const emitter = new EventEmitter();               <co xml:id="CO99-1"/>

emitter.on('date', (date) =&gt; {                    <co xml:id="CO99-2"/>
  console.log('Année : %d', date.getFullYear());
});

emitter.emit('date', new Date('2018-03-01'));     <co xml:id="CO99-3"/>
emitter.emit('date', new Date('1983-03-24'));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO99-1">
<para>Création d&#8217;un gestionnaire d&#8217;événements.</para>
</callout>
<callout arearefs="CO99-2">
<para>Enregistrement d&#8217;une fonction d&#8217;écoute&#160;– elle sera exécutée à chaque émission de l&#8217;événement&#160;<literal>date</literal>.</para>
</callout>
<callout arearefs="CO99-3">
<para>Émission d&#8217;un événement <literal>date</literal>, avec comme argument, un <link xl:href="../chapter-03/index.xml#date">objet&#160;<literal>Date</literal></link>.</para>
</callout>
</calloutlist>
<simpara>Un événement se décompose en trois parties&#160;: les fonctions d&#8217;écoute,
les émissions de message et un objet <literal>EventEmitter</literal>
qui fait le lien entre les deux.
<indexterm>
<primary>module</primary><secondary>events</secondary><tertiary>EventEmitter</tertiary>
</indexterm>
<indexterm>
<primary>events</primary><secondary>EventEmitter</secondary>
</indexterm>
<indexterm>
<primary>EventEmitter</primary>
</indexterm></simpara>
<note>
<title><phrase role="RemarquePreTitre">Langage</phrase> ECMAScript n&#8217;est pas événementiel</title>
<simpara>Contrairement à ce que l&#8217;on pourrait penser, le langage ECMAScript ne possède
aucune structure de gestion d&#8217;événements.</simpara>
<simpara>S&#8217;il est possible de réagir à des événements dans les navigateurs web,
c&#8217;est grâce à la spécification DOM&#160;– l&#8217;API JavaScript pour manipuler
une structure de document&#160;HTML.
<indexterm>
<primary>DOM (Document Object Model)</primary>
</indexterm></simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://developer.mozilla.org/fr/docs/Web/Events">developer.mozilla.org/fr/docs/Web/Events</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara>On peut décider d&#8217;écouter un événement une seule fois avec&#160;<literal>once()</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>events/once.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const EventEmitter = require('events');
const emitter = new EventEmitter();

emitter.once('date', (date) =&gt; {                  <co xml:id="CO100-1"/>
  console.log('Année : %d', date.getFullYear());
});

emitter.emit('date', new Date('2018-03-01'));
emitter.emit('date', new Date('1983-03-24'));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO100-1">
<para>Bien que l&#8217;événement <literal>date</literal> soit appelé deux fois, la fonction d&#8217;écoute ne réagira qu&#8217;une seule fois.
<indexterm>
<primary>module</primary><secondary>events</secondary><tertiary>EventEmitter.once()</tertiary>
</indexterm>
<indexterm>
<primary>events</primary><secondary>EventEmitter.once()</secondary>
</indexterm>
<indexterm>
<primary>EventEmitter.once()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>La fonction <literal>removeListener()</literal> débranche une fonction d&#8217;écoute selon
les critères de notre choix&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>events/remove.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const EventEmitter = require('events');
const emitter = new EventEmitter();
const tick = () =&gt; process.stdout.write('.');
let counter = 0;

setInterval(() =&gt; {
  counter++;
  emitter.emit('date', new Date());             <co xml:id="CO101-1"/>

  if (counter === 5) {
    process.exit(0);
  }
}, 1000);

emitter.on('date', tick);                       <co xml:id="CO101-2"/>
emitter.on('date', () =&gt; {
  if (counter === 3) {
    emitter.removeListener('date', tick);       <co xml:id="CO101-3"/>
  }
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO101-1">
<para>L&#8217;événement <literal>date</literal> est émis toutes les secondes.</para>
</callout>
<callout arearefs="CO101-2">
<para>La fonction <literal>tick</literal> est appelée toutes les secondes.</para>
</callout>
<callout arearefs="CO101-3">
<para>La fonction <literal>tick</literal> est débranchée de l&#8217;événement <literal>date</literal> au bout de trois incréments.
<indexterm>
<primary>module</primary><secondary>events</secondary><tertiary>EventEmitter.removeListener()</tertiary>
</indexterm>
<indexterm>
<primary>events</primary><secondary>EventEmitter.removeListener()</secondary>
</indexterm>
<indexterm>
<primary>EventEmitter.removeListener()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>On remarquera qu&#8217;il faut pouvoir faire référence à la fonction d&#8217;écoute
afin de la débrancher.</simpara>
<simpara>Une utilisation alternative des événements consiste à étendre la classe <literal>EventEmitter</literal>.
Une fois étendue, notre nouvelle classe bénéficiera des méthodes <literal>.on()</literal> etc.
<indexterm>
<primary>module</primary><secondary>events</secondary><tertiary>EventEmitter.on()</tertiary>
</indexterm>
<indexterm>
<primary>events</primary><secondary>EventEmitter.on()</secondary>
</indexterm>
<indexterm>
<primary>EventEmitter.on()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>events/class.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const EventEmitter = require('events');

class Car extends EventEmitter {                   <co xml:id="CO102-1"/>
  constructor (name) {
    super();                                       <co xml:id="CO102-2"/>
    this.name = name;
  }

  start () {
    this.emit('action', this, 'démarrer');         <co xml:id="CO102-3"/>
  }
}

const auto = new Car('Boombo');
auto.on('action', (car, action) =&gt; {               <co xml:id="CO102-4"/>
  console.log('%s est en train de %s', car.name, action);
});

auto.start();</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO102-1">
<para>Extension de la classe <literal>EventEmitter</literal>.</para>
</callout>
<callout arearefs="CO102-2">
<para>L&#8217;utilisation de la fonction spéciale <literal>super()</literal> est indispensable. Elle revient à invoquer <literal>new EventEmitter()</literal> par mécanisme de cascade.</para>
</callout>
<callout arearefs="CO102-3">
<para>La méthode <literal>.start()</literal> encapsule un appel à la méthode <literal>.emit()</literal>.</para>
</callout>
<callout arearefs="CO102-4">
<para>La fonction réagira à l&#8217;émission de l&#8217;événement <literal>action</literal> quand la méthode <literal>.start()</literal> sera appelée.
<indexterm>
<primary>objet</primary><secondary>EventEmitter</secondary>
</indexterm>
<indexterm>
<primary>EventEmitter</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>classe</secondary><tertiary>héritage</tertiary>
</indexterm>
<indexterm>
<primary>classe</primary><secondary>héritage</secondary>
</indexterm>
<indexterm>
<primary>héritage</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>extends</secondary>
</indexterm>
<indexterm>
<primary>extends</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>super()</secondary>
</indexterm>
<indexterm>
<primary>super()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Ce mécanisme est utile pour cacher de la complexité applicative,
pour exécuter une fonction plusieurs fois lors d&#8217;un événement donné,
pour exposer une surface d&#8217;action compréhensible,
tout en rendant notre code communiquant vers l&#8217;extérieur.</simpara>
<simpara>Plusieurs modules Node utilisent les événements pour nous permettre d&#8217;y
réagir de manière totalement optionnelle.
Tout ce que l&#8217;on vient d&#8217;expliquer s&#8217;applique à l&#8217;identique aux modules
<link linkend="process"><literal>process</literal></link>, <link linkend="child_process"><literal>child_process</literal></link> et <link linkend="http"><literal>http</literal></link>.
<indexterm>
<primary>module</primary><secondary>process</secondary>
</indexterm>
<indexterm>
<primary>process</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>child_process</secondary>
</indexterm>
<indexterm>
<primary>child_process</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>http</secondary>
</indexterm>
<indexterm>
<primary>http</primary>
</indexterm></simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de la classe <literal>EventEmitter</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>on()</literal></simpara>
</entry>
<entry>
<simpara>Enregistre une nouvelle fonction réagissant à un événement donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>once()</literal></simpara>
</entry>
<entry>
<simpara>Enregistre une nouvelle fonction réagissant <emphasis>une seule fois</emphasis> à un événement donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>emit()</literal></simpara>
</entry>
<entry>
<simpara>Émet un événement.
Si des arguments additonnels sont présents,
ils sont transmis aux fonctions écoutant cet événement.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>eventNames()</literal></simpara>
</entry>
<entry>
<simpara>Liste les événements pour lesquels on a enregistré au moins une fonction d&#8217;écoute.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>listeners()</literal></simpara>
</entry>
<entry>
<simpara>Liste les fonctions écoutant les événements.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>removeListener()</literal></simpara>
</entry>
<entry>
<simpara>Supprime une fonction d&#8217;écoute d&#8217;un événement donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>removeAllListeners()</literal></simpara>
</entry>
<entry>
<simpara>Supprime toutes les fonctions d&#8217;écoute d&#8217;un événement donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>setMaxListeners()</literal></simpara>
</entry>
<entry>
<simpara>  Change le nombre maximum de fonctions d&#8217;écoute possibles (10&#160;par défaut,
  c&#8217;est&#160;peu).
<indexterm>
<primary>module</primary><secondary>events</secondary><tertiary>EventEmitter.emit()</tertiary>
</indexterm>
<indexterm>
<primary>events</primary><secondary>EventEmitter.emit()</secondary>
</indexterm>
<indexterm>
<primary>EventEmitter.emit()</primary>
</indexterm></simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module events</title>
<simpara>La documentation du module <literal>events</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/events.html">nodejs.org/docs/latest-v10.x/api/events.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>module</primary><secondary>events</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>events</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>module events</secondary>
</indexterm>
<indexterm>
<primary>module events</primary>
</indexterm></simpara>
</section>
<section xml:id="util">
<title>util : transformer des fonctions de rappel en promesses</title>
<simpara><indexterm>
<primary>module</primary><secondary>util</secondary>
</indexterm>
<indexterm>
<primary>util</primary>
</indexterm></simpara>
<simpara>Le petit module <literal>util</literal> contient des fonctions utilitaires
qui n&#8217;entreraient pas dans le périmètre d&#8217;autres modules.</simpara>
<simpara>On y trouve <literal>util.format()</literal>, une fonction qui fait beaucoup penser à
<link linkend="console"><literal>console.log()</literal></link> mais sans afficher le message&#160;:
<indexterm>
<primary>module</primary><secondary>util</secondary><tertiary>util.format()</tertiary>
</indexterm>
<indexterm>
<primary>util</primary><secondary>util.format()</secondary>
</indexterm>
<indexterm>
<primary>util.format()</primary>
</indexterm>
<indexterm>
<primary>fonction</primary><secondary>console.log()</secondary>
</indexterm>
<indexterm>
<primary>console.log()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>util/format.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {format} = require('util');

const message = format(           <co xml:id="CO103-1"/>
  'Il fait %s aujourd\'hui',
  '☀️ '
);
// console.log(message);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO103-1">
<para>Affecte le message formaté à une variable sans l&#8217;afficher.</para>
</callout>
</calloutlist>
<simpara>Pour afficher la valeur de la variable <literal>message</literal> de l&#8217;exemple précédent,
il suffirait de décommenter la dernière ligne et de (re)lancer le script.</simpara>
<simpara>La fonction <literal>util.debuglog()</literal> formate aussi des messages.
Son affichage est toutefois conditionnel, ce qui est pratique quand on veut
déboguer des variables sans toucher au code entre deux exécutions.
<indexterm>
<primary>module</primary><secondary>util</secondary><tertiary>util.debuglog()</tertiary>
</indexterm>
<indexterm>
<primary>util</primary><secondary>util.debuglog()</secondary>
</indexterm>
<indexterm>
<primary>util.debuglog()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>console</secondary><tertiary>console.log()</tertiary>
</indexterm>
<indexterm>
<primary>console</primary><secondary>console.log()</secondary>
</indexterm>
<indexterm>
<primary>console.log()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>util/debuglog.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {debuglog} = require('util');
const {cpus} = require('os');

const debug = debuglog('nodebook');                     <co xml:id="CO104-1"/>
const infos = cpus().map(cpu =&gt; cpu.model);

console.log('Cet ordinateur a %d CPU.', infos.length);  <co xml:id="CO104-2"/>
debug('Le modèle de CPU est %s.', infos[0]);            <co xml:id="CO104-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO104-1">
<para>Création d&#8217;un débogueur nommé <literal>nodebook</literal>.</para>
</callout>
<callout arearefs="CO104-2">
<para>Ce message s&#8217;affiche systématiquement quand on exécute le script.</para>
</callout>
<callout arearefs="CO104-3">
<para>Le modèle de CPU sera affiché en invoquant Node en présence de la variable d&#8217;environnement <literal>NODE_DEBUG</literal>.</para>
</callout>
</calloutlist>
<simpara>En lançant la commande suivante, seul le message de <literal>console.log()</literal> s&#8217;affiche&#160;:</simpara>
<screen>$ node util/debuglog.js
Cet ordinateur a 4 CPU.</screen>
<simpara>Il nous faut alors utiliser la <link linkend="process.env">variable d&#8217;environnement</link> <literal>NODE_DEBUG</literal>.
En lui attribuant la même valeur que notre débogueur, celui-ci affichera alors
le contenu attendu&#160;:
<indexterm>
<primary>variable</primary><secondary>d&#8217;environnement</secondary>
</indexterm>
<indexterm>
<primary>d&#8217;environnement</primary>
</indexterm>
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>process</secondary>
</indexterm>
<indexterm>
<primary>process</primary>
</indexterm></simpara>
<screen>$ NODE_DEBUG=nodebook node util/debuglog.js
Cet ordinateur a 4 CPU.
NODEBOOK 32486: Le modèle de CPU est Intel(R) Core(TM) i5-6267U CPU @ 2.90GHz.</screen>
<simpara>Si l&#8217;on souhaite avoir plusieurs débogueurs, dans un ou plusieurs script(s),
il suffit de séparer leurs noms par des virgules
(ex: <literal>NODE_DEBUG=nodebook,test,fromage</literal>).</simpara>
<simpara>Une de mes fonctions préférées est <literal>util.promisify()</literal>.
Elle convertit une fonction acceptant un <link linkend="callback">callback</link> en une fonction
retournant une <link xl:href="../chapter-03/index.xml#promise">promesse</link>.
C&#8217;est particulièrement pratique quand on n&#8217;a pas la maîtrise du
code source original.
<indexterm>
<primary>module</primary><secondary>util</secondary><tertiary>util.promisify()</tertiary>
</indexterm>
<indexterm>
<primary>util</primary><secondary>util.promisify()</secondary>
</indexterm>
<indexterm>
<primary>util.promisify()</primary>
</indexterm>
<indexterm>
<primary>fonction</primary><secondary>de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>de rappel (callback)</primary>
</indexterm>
<indexterm>
<primary>promesse</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>fs</secondary>
</indexterm>
<indexterm>
<primary>fs</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>util/fs-readdir-promisified.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {promisify} = require('util');
const readdir = promisify(require('fs').readdir);   <co xml:id="CO105-1"/>

readdir(__dirname)                                  <co xml:id="CO105-2"/>
  .then((files) =&gt; console.log(files))              <co xml:id="CO105-3"/>
  .catch((error) =&gt; console.error(error.message));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO105-1">
<para>Affecte une version transformée de <literal>fs.readdir()</literal> grâce à <literal>util.promisify()</literal>.</para>
</callout>
<callout arearefs="CO105-2">
<para>On ne passe pas de <link linkend="callbacks">fonction de rappel</link> contrairement à <literal>fs.readdir()</literal>.</para>
</callout>
<callout arearefs="CO105-3">
<para>Le résultat de l&#8217;opération est passé à la résolution de promesse.</para>
</callout>
</calloutlist>
<simpara>Cela ne paraît pas important mais cela ouvre un potentiel de simplification
énorme pour nous.
Fini l&#8217;argument <literal>error</literal> qui nous embête&#160;: on peut le collecter quand cela
nous arrange grâce à <literal>.catch()</literal>.</simpara>
<simpara>Cela limite également le nombre de lignes de code à écrire
pour arriver au même résultat&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>util/fs-readdir-promise.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const fs = require('fs');

const readdir = (path) =&gt; {
  return new Promise((resolve, reject) =&gt; {
    fs.readdir(path, (error, files) =&gt; {
      error ? reject(error) : resolve(files);
    });
  });
};

readdir(__dirname)
  .then((files) =&gt; console.log(files))
  .catch((error) =&gt; console.error(error.message));</programlisting>
</para>
</formalpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>util.debuglog()</literal></simpara>
</entry>
<entry>
<simpara>Crée une fonction de débogage similaire à <link linkend="console"><literal>console.error</literal></link>.
Les messages ne s&#8217;afficheront que si la <link linkend="process.env">variable d&#8217;environnement</link>
<literal>NODE_DEBUG</literal> mentionne l&#8217;identifiant du débogueur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>util.deprecate()</literal></simpara>
</entry>
<entry>
<simpara>Affiche un message d&#8217;avertissement lorsque vous souhaitez retirer une fonction
partagée dans une version ultérieure de votre&#160;code.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>util.format()</literal></simpara>
</entry>
<entry>
<simpara>Retourne une chaîne de caractères formatée, comme <link linkend="console"><literal>console.log</literal></link>
mais sans l&#8217;envoyer dans un <link linkend="process.std">flux de sortie</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>util.promisify()</literal></simpara>
</entry>
<entry>
<simpara>Transforme une <link linkend="callbacks">fonction de rappel</link> en
<link xl:href="../chapter-03/index.xml#promise">promesse</link>.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module util</title>
<simpara>La documentation du module <literal>util</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/util.html">nodejs.org/docs/latest-v10.x/api/util.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>module</primary><secondary>util</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>util</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>module util</secondary>
</indexterm>
<indexterm>
<primary>module util</primary>
</indexterm></simpara>
</section>
<section xml:id="http">
<title>http : créer et interroger des ressources via le protocole&#160;HTTP</title>
<simpara><indexterm>
<primary>module</primary><secondary>http</secondary>
</indexterm>
<indexterm>
<primary>http</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>https</secondary>
</indexterm>
<indexterm>
<primary>https</primary>
</indexterm></simpara>
<simpara>Le module <literal>http</literal> est un incontournable de Node.
Il a deux facettes&#160;: la création de requêtes et celle de serveurs.
Dans le premier cas, on utilise le protocole HTTP pour accéder à une ressource distante
et recevoir une réponse.
Dans le second, on utilise le protocole HTTP pour
<emphasis role="strong">mettre à disposition des ressources</emphasis> et les envoyer en réponse.</simpara>
<simpara>Le module <literal>https</literal> offre exactement les mêmes propriétés.
Il est à privilégier pour établir des connexions sécurisées
vers des adresses commençant par&#160;<literal>https://</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>http/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {get} = require('https');
const url = 'https://oncletom.io/node.js/package.json';

get(url, (response) =&gt; {                        <co xml:id="CO106-1"/>
  response.on('data', (data) =&gt; {
    console.log(data.toString());               <co xml:id="CO106-2"/>
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO106-1">
<para>Initialisation de la requête&#160;– un objet représentant la <link linkend="http.IncomingMessage">réponse du serveur distant</link> nous est transmis. À ce stade-là, le serveur n&#8217;a pas encore commencé à renvoyer des données.</para>
</callout>
<callout arearefs="CO106-2">
<para>On en est à l&#8217;étape où on reçoit des données. Le contenu du fichier <literal>package.json</literal> est affiché sous forme de chaînes de caractères.
<indexterm>
<primary>module</primary><secondary>http</secondary><tertiary>IncomingMessage</tertiary>
</indexterm>
<indexterm>
<primary>http</primary><secondary>IncomingMessage</secondary>
</indexterm>
<indexterm>
<primary>IncomingMessage</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Ce premier exemple met en lumière <emphasis role="strong">la nature asynchrone et non-bloquante par défaut de Node</emphasis>.
La création d&#8217;une requête et l&#8217;obtention de la réponse sont séparées d&#8217;un délai
variable, pendant lequel Node ne bloque pas le reste du code.
Les <link linkend="callbacks">fonctions de rappel</link> sont appelées lorsque l&#8217;action est terminée.
<indexterm>
<primary>fonction</primary><secondary>de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>de rappel (callback)</primary>
</indexterm></simpara>
<simpara>En regardant le code de l&#8217;exemple précédent, on en apprend un peu plus sur
le fonctionnement d&#8217;une requête&#160;HTTP&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Envoi de la requête au serveur distant&#160;: <literal>get()</literal>.</simpara>
</listitem>
<listitem>
<simpara>Obtention d&#8217;une réponse&#160;: objet <literal>response</literal> dans la fonction de rappel.</simpara>
</listitem>
<listitem>
<simpara>Transmission d&#8217;informations&#160;: événement <literal>data</literal>.</simpara>
</listitem>
<listitem>
<simpara>Clôture de la transmission&#160;: événement <literal>end</literal>&#160;– voir exemple suivant.</simpara>
</listitem>
</orderedlist>
<simpara>Pour rester rapide, Node fait aussi le choix de transmettre les données
au fur et à mesure.
L'<link linkend="events">événement</link> <literal>data</literal> renvoie en réalité environ 10&#160;Ko de données.
L&#8217;exemple précédent a tout renvoyé d&#8217;un coup car le volume des données
était inférieur à 10&#160;Ko.
<indexterm>
<primary>module</primary><secondary>http</secondary><tertiary>événement data</tertiary>
</indexterm>
<indexterm>
<primary>http</primary><secondary>événement data</secondary>
</indexterm>
<indexterm>
<primary>événement data</primary>
</indexterm></simpara>
<simpara>Voyons maintenant ce qui se passe lorsqu&#8217;on fait appel à un fichier
plus volumineux&#160;:
<indexterm>
<primary>module</primary><secondary>http</secondary><tertiary>get()</tertiary>
</indexterm>
<indexterm>
<primary>http</primary><secondary>get()</secondary>
</indexterm>
<indexterm>
<primary>get()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>http</secondary><tertiary>request()</tertiary>
</indexterm>
<indexterm>
<primary>http</primary><secondary>request()</secondary>
</indexterm>
<indexterm>
<primary>request()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>http/get.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {get} = require('https');
let count = 0;

get('https://oncletom.io/node.js/index.html', (response) =&gt; {
  response.on('data', (data) =&gt; {
    count = count + 1;
    const ko = data.length/1024;
    console.log('Morceau #%d : %iKo', count, ko); <co xml:id="CO107-1"/>
  });

  response.on('end', () =&gt; {                      <co xml:id="CO107-2"/>
    console.log('Fini (%d morceaux)', count);     <co xml:id="CO107-3"/>
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO107-1">
<para>Affiche ce message à chaque morceau/paquet reçu.</para>
</callout>
<callout arearefs="CO107-2">
<para>L&#8217;événement <literal>end</literal> se déclenche lorsque la requête n&#8217;a plus de données à recevoir.</para>
</callout>
<callout arearefs="CO107-3">
<para>Affiche le nombre de morceaux reçus pour obtenir une réponse complète.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Paramètre&#160;URL</title>
<simpara><indexterm>
<primary>module</primary><secondary>url</secondary><tertiary>URL</tertiary>
</indexterm>
<indexterm>
<primary>url</primary><secondary>URL</secondary>
</indexterm>
<indexterm>
<primary>URL</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>URL</secondary>
</indexterm>
<indexterm>
<primary>URL</primary>
</indexterm>
Les fonctions <literal>http.get()</literal> et <literal>http.request()</literal> acceptent une chaîne de caractères
comme premier argument.</simpara>
<simpara>Il est aussi possible de leur passer un <link linkend="url">objet&#160;URL</link>.
C&#8217;est plus pratique si vous manipulez des URL complexes ou si vous paginez.</simpara>
</tip>
<simpara>En clair, on peut recevoir une réponse en plusieurs fois, petit bout par petit bout.
Les données reçues ne sont pas forcément complètes.
Cela pose problème à des fonctions comme
<link xl:href="../chapter-03/index.xml#json"><literal>JSON.parse()</literal></link>, qui nécessitent un document
JSON complet pour produire un résultat.
<indexterm>
<primary>JSON</primary><secondary>JSON.parse()</secondary>
</indexterm>
<indexterm>
<primary>JSON.parse()</primary>
</indexterm></simpara>
<simpara>Une solution consiste à accumuler les morceaux de réponse et à les assembler.
Cela veut aussi dire que l&#8217;on consomme autant de mémoire que l&#8217;on reçoit de données.</simpara>
<simpara>Une autre solution repose sur l&#8217;utilisation des <link linkend="stream">flux de données</link>.
Ils pompent et brassent les données comme du liquide, en consommant peu de mémoire.
On en parle plus loin, dans la section sur le <link linkend="stream">module <literal>stream</literal></link>.
<indexterm>
<primary>module</primary><secondary>stream</secondary>
</indexterm>
<indexterm>
<primary>stream</primary>
</indexterm>
<indexterm>
<primary>flux de données</primary>
</indexterm></simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>http.createServer()</literal></simpara>
</entry>
<entry>
<simpara>Initialise un serveur HTTP et fournit une boîte à outils pour
gérer les connexions entrantes via <link linkend="http.Server"><literal>http.Server</literal></link></simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>http.get()</literal></simpara>
</entry>
<entry>
<simpara>Crée une connexion HTTP de type&#160;<literal>GET</literal>.
Il s&#8217;agit d&#8217;une version simplifiée de <literal>http.request()</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>http.request()</literal></simpara>
</entry>
<entry>
<simpara>Crée une connexion HTTP du type de son choix&#160;: <literal>GET</literal>, <literal>POST</literal>, <literal>OPTION</literal>, <literal>PUT</literal>,
etc.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara xml:id="http.request">La fonction <literal>http.request()</literal> gère une requête plus finement.
On peut aisément régler les en-têtes, le verbe HTTP et les modalités de
transmission des données.</simpara>
<simpara>L&#8217;exemple suivant illustre l&#8217;envoi d&#8217;une requête <literal>HEAD</literal>.
Ce verbe HTTP indique au serveur distant de répondre avec les métadonnées
de la ressource, mais sans les données (<literal>response.on('data')</literal>)&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>http/request.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const https = require('https');
const options = {                                 <co xml:id="CO108-1"/>
  protocol: 'https:',
  host: 'oncletom.io',
  path: '/node.js/package.json',
  method: 'HEAD',
};

const request = https.request(options);
request.setHeader('Accept', 'application/json');  <co xml:id="CO108-2"/>
request.end();                                    <co xml:id="CO108-3"/>

request.on('response', (response) =&gt; {
  const lastModified = response.headers['last-modified'];

  console.log('Modifié le %s', lastModified);     <co xml:id="CO108-4"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO108-1">
<para>Construction des paramètres de requête pour <literal>http.request()</literal>.</para>
</callout>
<callout arearefs="CO108-2">
<para>Explicite au serveur distant la nature du contenu que l&#8217;on s&#8217;apprête à recevoir.</para>
</callout>
<callout arearefs="CO108-3">
<para>Déclenche l&#8217;envoi de la requête sur le réseau.</para>
</callout>
<callout arearefs="CO108-4">
<para>Affiche la date de modification de la ressource distante.</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Avancé</phrase> Parser, destructurer, combiner</title>
<simpara>La fonction <literal>url.parse()</literal> du <link linkend="url">module&#160;<literal>url</literal></link> est une alternative à la
construction manuelle de l&#8217;URL.
Les opérateurs de <link xl:href="../chapter-03/index.xml#object">manipulation d&#8217;objets</link>
comme le <emphasis>destructuring</emphasis> et l&#8217;expansion (<emphasis>rest</emphasis>) favorisent
une écriture concise et élégante.
<indexterm>
<primary>module</primary><secondary>url</secondary><tertiary>url.parse()</tertiary>
</indexterm>
<indexterm>
<primary>url</primary><secondary>url.parse()</secondary>
</indexterm>
<indexterm>
<primary>url.parse()</primary>
</indexterm></simpara>
<formalpara>
<title>http/request-advanced.js</title>
<para>
<screen>const https = require('https');
const {parse} = require('url');
const url = parse('https://oncletom.io/node.js/package.json');

const request = https.request({ ...url, method: 'HEAD'});</screen>
</para>
</formalpara>
</note>
<simpara>L&#8217;utilisation de <literal>http.get()</literal> et <literal>http.request()</literal> est simple tant qu&#8217;on évite
la personnalisation de la requête.
On ajoute progressivement de plus en plus de travail pour bien envoyer une
requête, collecter les données et gérer les erreurs.</simpara>
<simpara>Nous verrons comment arriver au même résultat en écrivant moins de code grâce aux
<link xl:href="../chapter-05/index.xml#modules">modules&#160;<literal>npm</literal></link>
(<link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>).
<indexterm>
<primary>module</primary><secondary>npm</secondary>
</indexterm>
<indexterm>
<primary>npm</primary>
</indexterm></simpara>
<table xml:id="http.ClientRequest" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de <literal>http.ClientRequest</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>request.on('response')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsque la ressource distante a accepté la requête et s&#8217;apprête
à nous transmettre les données.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.on('end')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsque la ressource distante a signalé ne plus avoir de données
à nous transmettre.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.end()</literal></simpara>
</entry>
<entry>
<simpara>Termine l&#8217;initialisation et entame la connexion vers la ressource distante.
Dans le cas d&#8217;une requête <literal>POST</literal>, <literal>PUT</literal> ou <literal>DELETE</literal>, le premier paramètre
sert à passer une donnée au serveur distant.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.getHeader()</literal></simpara>
</entry>
<entry>
<simpara>Retourne la valeur d&#8217;un en-tête de requête.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.setHeader()</literal></simpara>
</entry>
<entry>
<simpara>Change la valeur d&#8217;un en-tête de requête.
C&#8217;est une pratique courante pour préciser nos intentions auprès du serveur
distant&#160;: format de fichier réponse attendu (<literal>Accept</literal>), agent utilisateur
(<literal>User-Agent</literal>), nature des données envoyées (<literal>Content-Type</literal>), etc.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.setTimeout()</literal></simpara>
</entry>
<entry>
<simpara>Définit un chronomètre pour déclarer la requête en erreur si aucune réponse
n&#8217;a été obtenue dans ce délai imparti.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.write()</literal></simpara>
</entry>
<entry>
<simpara>Transmet un morceau de contenu vers la ressource distante.
Cette méthode s&#8217;utilise lorsque l&#8217;on effectue un téléversement progressif.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<table xml:id="http.IncomingMessage" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de <literal>http.IncomingMessage</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>message.on('data')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche quand un morceau de données est obtenu par le client.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>message.on('end')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche quand nous avons obtenu toutes les données émises par le serveur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>message.on('readable')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche quand nous pouvons commencer à lire les données.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>message.read()</literal></simpara>
</entry>
<entry>
<simpara>Obtient un morceau de données manuellement&#160;– au lieu d&#8217;utiliser
l&#8217;événement <literal>data</literal>, automatique.
On apprendra à mieux manipuler cette fonction dans la section sur le
<link linkend="stream">module <literal>stream</literal></link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>message.destroy()</literal></simpara>
</entry>
<entry>
<simpara>Termine la transmission des données sans que le serveur distant
nous aie tout transmis.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Attribut <literal>message.headers</literal></simpara>
</entry>
<entry>
<simpara>Objet contenant les en-têtes de la réponse&#160;– le serveur distant décide
de leur contenu.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Attribut <literal>message.statusCode</literal></simpara>
</entry>
<entry>
<simpara>Code qui reflète l&#8217;état de compréhension de notre requête par le serveur distant.
<literal>200</literal>&#160;correspond à <emphasis>tout va bien</emphasis>, <literal>404</literal>&#160;à <emphasis>ressource introuvable</emphasis>,
<literal>301</literal>&#160;à <emphasis>la ressource a été déplacée</emphasis>.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Il est temps de nous pencher sur l&#8217;autre versant du module&#160;: la création
d&#8217;un serveur&#160;HTTP.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10 interactive--endpoint">
<title>http/server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const http = require('http');
const server = http.createServer();

server.listen(4000, 'localhost');                   <co xml:id="CO109-1"/>

server.on('listening', () =&gt; {                      <co xml:id="CO109-2"/>
  console.log('Serveur démarré !');
});

server.on('request', (request, response) =&gt; {
  const {method, url} = request;
  console.log('URL demandée : %s %s', method, url); <co xml:id="CO109-3"/>

  response.end('Coucou');                           <co xml:id="CO109-4"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO109-1">
<para>Ouverture de l&#8217;acceptation des connexions réseau sur le port <literal>4000</literal>, uniquement sur la boucle locale (<literal>localhost</literal>)&#160;– une erreur sera affichée si ce port réseau est déjà pris par un autre processus.</para>
</callout>
<callout arearefs="CO109-2">
<para>Affiche <literal>Serveur démarré&#160;!</literal> quand Node a fini de négocier l&#8217;accès aux ressources réseau avec le système d&#8217;exploitation&#160;– à ce stade, le serveur est prêt à recevoir des <emphasis>connexions entrantes</emphasis>.</para>
</callout>
<callout arearefs="CO109-3">
<para>Lorsqu&#8217;une requête arrive, affiche l&#8217;URL demandée par le client.</para>
</callout>
<callout arearefs="CO109-4">
<para>Termine la connexion avec le client&#160;– ce dernier considère sa requête comme terminée.
<indexterm>
<primary>module</primary><secondary>http</secondary><tertiary>http.createServer()</tertiary>
</indexterm>
<indexterm>
<primary>http</primary><secondary>http.createServer()</secondary>
</indexterm>
<indexterm>
<primary>http.createServer()</primary>
</indexterm></para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Aparté</phrase> Pourquoi démarrer un serveur&#160;HTTP ?</title>
<simpara><indexterm>
<primary>serveur web</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary>
</indexterm>
Ce concept peut sembler étrange lorsqu&#8217;on vient d&#8217;un autre langage de programmation.
Après tout, Apache ou nginx s&#8217;en chargent très bien pour nous.</simpara>
<simpara>Un serveur HTTP embarqué avec Node, c&#8217;est avant tout
<emphasis role="strong">une question d&#8217;autonomie et d&#8217;interopérabilité</emphasis>.
Il n&#8217;y a pas besoin de module spécial pour Apache ni pour nginx.</simpara>
<simpara>On peut développer un site web et le faire fonctionner instantanément sans
installer autre chose.
L&#8217;intégration avec un serveur Apache, nginx ou autre nécessite ensuite
très peu d&#8217;efforts.</simpara>
</note>
<simpara>Le serveur se démarre de la même manière qu&#8217;un script ordinaire&#160;:</simpara>
<screen>$ node http/server.js
Serveur démarré !</screen>
<simpara>Le serveur continuera d&#8217;accepter les requêtes entrantes jusqu&#8217;à ce que le
<link linkend="process">processus</link> soit interrompu par une erreur ou par un
<link linkend="signals">signal d&#8217;arrêt</link>
– en utilisant la combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> par exemple.
<indexterm>
<primary>module</primary><secondary>process</secondary>
</indexterm>
<indexterm>
<primary>process</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>process</secondary>
</indexterm>
<indexterm>
<primary>process</primary>
</indexterm></simpara>
<simpara>Accédez au serveur HTTP en ouvrant un navigateur web comme Firefox ou Chrome
puis en inscrivant <literal><link xl:href="http://localhost:4000">localhost:4000</link></literal> dans la barre d&#8217;adresses.
Dirigez ensuite le navigateur vers <literal><link xl:href="http://localhost:4000/test">localhost:4000/test</link></literal> et observez les
changements.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Parler au serveur depuis le terminal</title>
<simpara>La commande Unix <literal>curl</literal> sait envoyer des requêtes HTTP.
On peut l&#8217;utiliser pour lire les réponses de notre serveur&#160;:</simpara>
<screen>$ curl -i http://localhost:4000/test
$ curl -i -XHEAD http://localhost:4000/test</screen>
<simpara>L&#8217;option&#160;<literal>-i</literal> affiche les en-têtes de réponse.
C&#8217;est l&#8217;équivalent de <literal>response.headers</literal>.</simpara>
</tip>
<simpara>On a posé les bases d&#8217;un serveur HTTP minimaliste sur lequel on pourra
construire pas à pas tout type d&#8217;application web.
Que manque-t-il pour en faire un serveur web&#160;?
Il faut encore typer les ressources renvoyées afin qu&#8217;elles soient comprises
par un navigateur, c&#8217;est-à-dire signaler que nos réponses
contiennent du HTML, du CSS, des images, etc.</simpara>
<simpara>Modifions notre exemple précédent pour renvoyer du&#160;HTML&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10 interactive--endpoint">
<title>http/web-server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const http = require('http');
const server = http.createServer();
server.listen(4000, 'localhost');

server.on('request', (request, response) =&gt; {
  response.write('&lt;h1&gt;Salut à toi&lt;/h1&gt;');
  response.end();
});</programlisting>
</para>
</formalpara>
<warning>
<title><phrase role="RemarquePreTitre">Important</phrase> La fonction <literal>response.end()</literal></title>
<simpara>L&#8217;appel de la fonction <literal>response.end()</literal> est impératif.
Sinon, le client&#160;– ici, le navigateur&#160;– pense que des données vont encore arriver.</simpara>
<simpara>Si on supprime l&#8217;appel à <literal>response.end()</literal> dans l&#8217;exemple précédent,
l&#8217;indicateur de chargement du navigateur sera actif pendant deux minutes,
suite à quoi Node interrompra la connexion, considérant qu&#8217;elle met trop
de temps pour aboutir.</simpara>
</warning>
<simpara>Dirigeons notre navigateur vers <literal><link xl:href="http://localhost:4000">localhost:4000</link></literal> pour observer
le résultat.</simpara>
<figure>
<title>Rendu navigateur de l&#8217;exemple <literal>http/web-server.js</literal></title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/web-server.png" contentwidth="65%"/>
</imageobject>
<textobject><phrase>web server</phrase></textobject>
</mediaobject>
</figure>
<simpara>La balise HTML&#160;<literal>&lt;h1&gt;</literal> a bien été prise en compte, mais le
caractère&#160;<literal>à</literal> n&#8217;a pas été compris par le navigateur, qui affiche <literal>Ã&#160;</literal>.
<indexterm>
<primary>encodage de caractères</primary>
</indexterm></simpara>
<simpara>Si le serveur distant ne précise pas l&#8217;encodage des caractères,
le navigateur l&#8217;interprète en <link linkend="ascii">ASCII</link>.
<indexterm>
<primary>encodage de caractères</primary><secondary>ASCII</secondary>
</indexterm>
<indexterm>
<primary>ASCII</primary>
</indexterm>
Or, les éditeurs de code enregistrent les fichiers avec un autre encodage&#160;: UTF-8.
Ce standard englobe les alphabets du monde entier, dont les accents et
signes diacritiques de la langue française.
<indexterm>
<primary>encodage de caractères</primary><secondary>UTF-8</secondary>
</indexterm>
<indexterm>
<primary>UTF-8</primary>
</indexterm></simpara>
<note xml:id="ascii">
<title><phrase role="RemarquePreTitre">Histoire</phrase> American Standard Code for Information Interchange&#160;(ASCII)</title>
<simpara>Au début de l&#8217;informatique contemporaire, les systèmes étaient conçus
pour comprendre l&#8217;alphabet anglais, les signes de ponctuations et
des caractères spéciaux.
On parle alors de standard d&#8217;encodage&#160;ASCII.</simpara>
<simpara>L&#8217;émergence d&#8217;Internet et du World&#160;Wide&#160;Web ont popularisé l&#8217;encodage UTF-8
afin d&#8217;exprimer de manière commune les caractères spéciaux de toutes les
langues du monde entier.</simpara>
</note>
<simpara>Pour indiquer aux navigateurs web quel est l&#8217;encodage utilisé,
le protocole HTTP dispose de l&#8217;en-tête <literal>Content-Type</literal>&#160;:
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Content-Type</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Content-Type</secondary>
</indexterm>
<indexterm>
<primary>Content-Type</primary>
</indexterm></simpara>
<formalpara>
<title>http/web-server-ok.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const http = require('http');
const server = http.createServer();
server.listen(4000, 'localhost');

server.on('request', (request, response) =&gt; {
  const content_type = 'text/html; charset=utf-8';
  response.setHeader('Content-Type', content_type); <co xml:id="CO110-1"/>

  response.write('&lt;h1&gt;Salut à toi&lt;/h1&gt;');
  response.end();
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO110-1">
<para>L&#8217;en-tête HTTP <literal>Content-Type</literal> indique explicitement que le contenu transféré est du HTML, encodé en&#160;UTF-8.</para>
</callout>
</calloutlist>
<simpara>Cette indication suffit au navigateur pour décoder les caractères
et les afficher comme on l&#8217;espérait.</simpara>
<figure>
<title>Rendu navigateur de l&#8217;exemple <literal>http/web-server-ok.js</literal></title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/web-server-ok.png" contentwidth="65%"/>
</imageobject>
<textobject><phrase>web server ok</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;étape suivante consisterait à transmettre deux contenus différents selon
l&#8217;URL demandée, par exemple, une page HTML et un fichier CSS pour l&#8217;habiller.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10 interactive--endpoint">
<title>http/web-server-routes.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const http = require('http');
const server = http.createServer();
server.listen(4000, 'localhost');

server.on('request', (request, response) =&gt; {
  if (request.url === '/main.css') {                     <co xml:id="CO111-1"/>
    response.setHeader('Content-Type', 'text/css');      <co xml:id="CO111-2"/>
    response.write('body{ font-size: 18px; color: blue; }');
    response.end();
  }
  else {
    const content_type = 'text/html; charset=utf-8';

    response.setHeader('Content-Type', content_type);
    response.write('&lt;link rel="stylesheet" href="/main.css"&gt;');
    response.end('&lt;h1&gt;Salut à toi&lt;/h1&gt;');
  }
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO111-1">
<para>Si la requête entrante indique <literal>/main.css</literal> comme chemin, alors on lui renvoie du contenu interprétable comme du&#160;CSS.</para>
</callout>
<callout arearefs="CO111-2">
<para>On indique au client que ce contenu est du texte contenant une feuille de styles&#160;CSS.</para>
</callout>
</calloutlist>
<simpara>Si tout se passe bien, le chargement de la page HTML devrait déclencher
une requête vers <literal><link xl:href="http://localhost:4000/main.css">localhost:4000/main.css</link></literal>.
Nous en avons la confirmation visuelle en visitant le serveur grâce à un
navigateur&#160;web&#160;:</simpara>
<figure>
<title>Rendu navigateur de l&#8217;exemple <literal>http/web-server-routes.js</literal></title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/web-server-routes.png" contentwidth="65%"/>
</imageobject>
<textobject><phrase>web server routes</phrase></textobject>
</mediaobject>
</figure>
<simpara>On est en situation de contrôle&#160;: on décide de ce qu&#8217;on répond.
C&#8217;est une manière d&#8217;apprendre petit à petit comment fonctionne
le protocole HTTP sur lequel repose une majorité de notre activité sur Internet.</simpara>
<simpara>On a couvert les principes du module&#160;<literal>http</literal>, mais il reste beaucoup de choses
à apprendre pour développer une application web maintenable.
Ce sera le sujet du <link linkend="../chapter-07/index.adoc">chapitre&#160;7</link>,
aidé par les <link xl:href="../chapter-05/index.xml#modules">modules&#160;<literal>npm</literal></link> que l&#8217;on apprendra
à manipuler dans le <link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>.</simpara>
<table xml:id="http.Server" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de <literal>http.Server</literal> et de <literal>https.Server</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>server.close()</literal></simpara>
</entry>
<entry>
<simpara>Arrête l&#8217;écoute de nouvelles connexions.
Les connexions existantes sont maintenues jusqu&#8217;à ce qu&#8217;elles soient honorées.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>server.listen()</literal></simpara>
</entry>
<entry>
<simpara>Démarre l&#8217;acceptation des connexions sur un port et une adresse donnés.
Combinée avec <link linkend="os"><literal>os.networkInterfaces()</literal></link>, vous pourriez choisir
sur quelle carte/adresse réseau écouter les requêtes entrantes.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>server.on('close')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsque le serveur s&#8217;arrête et a terminé d&#8217;honorer toutes les
connexions déjà ouvertes.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>server.on('connection')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsqu&#8217;une nouvelle connexion réseau est établie.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>server.on('request')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsqu&#8217;une nouvelle requête entrante est adressée au serveur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>server.on('upgrade')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsqu&#8217;une requête entrante demande un changement de protocole.
Utilisée pour basculer vers HTTP/2 et
<link xl:href="../chapter-09/index.xml#io-websocket">WebSocket</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.on('close')</literal></simpara>
</entry>
<entry>
<simpara>Se délenche lorsque la requête a été terminée par le client,
avant qu&#8217;on ait pu transmettre l&#8217;intégralité des données.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.on('finish')</literal></simpara>
</entry>
<entry>
<simpara>Se délenche après l&#8217;envoi du dernier morceau de données.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.end()</literal></simpara>
</entry>
<entry>
<simpara>Signale au client que nous n&#8217;avons plus de données à transmettre.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.getHeader()</literal></simpara>
</entry>
<entry>
<simpara>Retourne la valeur d&#8217;un en-tête de la réponse.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.removeHeader()</literal></simpara>
</entry>
<entry>
<simpara>Supprime un en-tête de la réponse.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.setHeader()</literal></simpara>
</entry>
<entry>
<simpara>Affecte une valeur à un en-tête de la réponse.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.write()</literal></simpara>
</entry>
<entry>
<simpara>Transmet un morceau de données au client.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.writeHead()</literal></simpara>
</entry>
<entry>
<simpara>Transmet le code de réponse et un ensemble d&#8217;en-têtes au client.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Attribut <literal>response.statusCode</literal></simpara>
</entry>
<entry>
<simpara>  Contient le code de réponse qui sera transmis au client.
<indexterm>
<primary>HTTP</primary><secondary>code de statut de la réponse</secondary>
</indexterm>
<indexterm>
<primary>code de statut de la réponse</primary>
</indexterm></simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module http</title>
<simpara>La documentation du module <literal>http</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/http.html">nodejs.org/docs/latest-v10.x/api/http.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>module</primary><secondary>http</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>http</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>module http</secondary>
</indexterm>
<indexterm>
<primary>module http</primary>
</indexterm></simpara>
</section>
<section xml:id="os">
<title>os : en savoir plus sur les capacités de l&#8217;ordinateur</title>
<simpara><indexterm>
<primary>module</primary><secondary>os</secondary>
</indexterm>
<indexterm>
<primary>os</primary>
</indexterm></simpara>
<simpara>Le module&#160;<literal>os</literal> donne des informations sur l&#8217;environnement système dans lequel
le script est exécuté.
Cela permet par exemple de <emphasis role="strong">prendre des décisions par rapport aux ressources disponibles</emphasis>
(mémoire, CPU, réseau) et par rapport au système d&#8217;exploitation (Windows, Linux, macOS).</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>os/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const os = require('os');

const {username} = os.userInfo();
const cpus = os.cpus().length;

console.log(
  `Salut ${username}, cet ordinateur a ${cpus} CPU.` <co xml:id="CO112-1"/>
);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO112-1">
<para>Affiche un message comme <literal>Salut anonymous, cet ordinateur a 4&#160;CPU</literal>.</para>
</callout>
</calloutlist>
<simpara>Node a pour vocation de nous abstraire du système d&#8217;exploitation
en faisant en sorte que notre code fonctionne partout de la même façon.
Pourtant, des situations nous obligent à prendre en compte certains critères
pour déterminer un choix.</simpara>
<simpara>Par exemple, lister les applications installées sur l&#8217;ordinateur dépend
du système&#160;; leur emplacement d&#8217;installation est différent sous Linux, Windows
et macOS.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>os/apps.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {type} = require('os');
const {readdir} = require('fs');

const log = (error, modules) =&gt; {
  return error
    ? console.error(error.message)
    : console.log(modules);
};

switch (type()) {
  case 'Windows_NT': readdir('C:\\Program Files', log); break;
  case 'Linux':      readdir('/usr/bin', log);          break;
  case 'Darwin':     readdir('/Applications', log);     break;
}</programlisting>
</para>
</formalpara>
<simpara><indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>os.type()</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>os.type()</secondary>
</indexterm>
<indexterm>
<primary>os.type()</primary>
</indexterm></simpara>
<simpara>L&#8217;exemple précédent se base sur la valeur retournée par la fonction <literal>os.type()</literal>
afin de choisir le répertoire à lister.</simpara>
<simpara>On pourrait combiner ce mécanisme avec le <link linkend="child_process">module <literal>child_process</literal></link>,
pour appeler une application système différente et parvenir à un résultat similaire.</simpara>
<simpara>À l&#8217;inverse, on peut <emphasis role="strong">accéder à une ressource de manière uniforme</emphasis>, peu importe
le nom du compte utilisateur ou du type de système d&#8217;exploitation.
Nous allons maintenant lire le contenu du fichier <literal>.npmrc</literal>,
le fichier de configuration de
l'<link xl:href="../chapter-05/index.xml#cli">exécutable&#160;npm</link>&#160;:
<indexterm>
<primary>npm</primary><secondary>.npmrc (fichier de configuration)</secondary>
</indexterm>
<indexterm>
<primary>.npmrc (fichier de configuration)</primary>
</indexterm>
<indexterm>
<primary>configuration</primary><secondary>.npmrc</secondary>
</indexterm>
<indexterm>
<primary>.npmrc</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>os/npmrc.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {homedir} = require('os');
const {readFile} = require('fs');
const {join} = require('path');

const file = join(homedir(), '.npmrc');     <co xml:id="CO113-1"/>

readFile(file, (error, content='') =&gt; {
  if (error &amp;&amp; error.code !== 'ENOENT') {   <co xml:id="CO113-2"/>
    return console.log(error);
  }

  console.log(String(content));
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO113-1">
<para>Construit un chemin sans connaissance préalable du système d&#8217;exploitation sur lequel tournera le script&#160;: par exemple <literal>C:\Users\anonymous\.npmrc</literal> pour Windows, <literal>/Users/anonymous/.npmrc</literal> pour macOS et <literal>/home/anonymous/.npmrc</literal> pour Linux.</para>
</callout>
<callout arearefs="CO113-2">
<para><literal>ENOENT</literal> est un <link linkend="fs.errors">code d&#8217;erreur</link> indiquant que le fichier n&#8217;existe pas&#160;; on se permet de l&#8217;ignorer et de considérer que le fichier est vide.
<indexterm>
<primary>erreur</primary><secondary>ENOENT (fichier introuvable)</secondary>
</indexterm>
<indexterm>
<primary>ENOENT (fichier introuvable)</primary>
</indexterm></para>
</callout>
</calloutlist>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>os.arch()</literal></simpara>
</entry>
<entry>
<simpara>Retourne l&#8217;architecture CPU.
Les valeurs les plus courantes sont généralement <literal>x64</literal>, <literal>arm</literal> et&#160;<literal>arm64</literal>.
<indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>os.arch()</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>os.arch()</secondary>
</indexterm>
<indexterm>
<primary>os.arch()</primary>
</indexterm></simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.cpus()</literal></simpara>
</entry>
<entry>
<simpara>Retourne un tableau contenant des informations à propos de la ou des CPU.
Entre autres, on retrouve leur modèle, leur fréquence et
le temps passé en attente ou en action depuis le démarrage de l&#8217;ordinateur.
<indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>os.cpus()</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>os.cpus()</secondary>
</indexterm>
<indexterm>
<primary>os.cpus()</primary>
</indexterm></simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.homedir()</literal></simpara>
</entry>
<entry>
<simpara>Retourne le chemin vers le répertoire utilisateur.
Équivalent de la variable <literal>$HOME</literal> sous Unix et <literal>%USERPROFILE%</literal> ou <literal>%AppData%</literal>
sous Windows.
<indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>os.homedir()</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>os.homedir()</secondary>
</indexterm>
<indexterm>
<primary>os.homedir()</primary>
</indexterm></simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.hostname()</literal></simpara>
</entry>
<entry>
<simpara>Retourne l&#8217;identifiant réseau de la machine.
<indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>os.hostname()</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>os.hostname()</secondary>
</indexterm>
<indexterm>
<primary>os.hostname()</primary>
</indexterm></simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.networkInterfaces()</literal></simpara>
</entry>
<entry>
<simpara>Retourne un tableau contenant des informations à propos de la ou des
carte(s) réseau de l&#8217;ordinateur.
Entre autres, on retrouve l&#8217;adresse&#160;IP (IPv4, IPv6), l&#8217;adresse MAC
et le masque réseau.
<indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>os.networkInterfaces()</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>os.networkInterfaces()</secondary>
</indexterm>
<indexterm>
<primary>os.networkInterfaces()</primary>
</indexterm></simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.platform()</literal></simpara>
</entry>
<entry>
<simpara>Retourne la nature du système d&#8217;exploitation.
Les valeurs les plus courantes sont généralement <literal>win32</literal>, <literal>linux</literal>, <literal>darwin</literal>
et <literal>freebsd</literal>.
<indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>os.platform()</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>os.platform()</secondary>
</indexterm>
<indexterm>
<primary>os.platform()</primary>
</indexterm></simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.tmpdir()</literal></simpara>
</entry>
<entry>
<simpara>Retourne l&#8217;emplacement du répertoire temporaire fourni par
le système d&#8217;exploitation.
<indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>os.tmpdir()</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>os.tmpdir()</secondary>
</indexterm>
<indexterm>
<primary>os.tmpdir()</primary>
</indexterm></simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.type()</literal></simpara>
</entry>
<entry>
<simpara>Retourne une forme normalisée de la nature du système d&#8217;exploitation,
équivalent à ce que retournerait la commande Unix <literal>uname -s</literal>.
Les valeurs les plus courantes sont généralement
<literal>Windows_NT</literal>, <literal>Linux</literal>, <literal>Darwin</literal> et <literal>FreeBSD</literal>.
<indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>os.type()</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>os.type()</secondary>
</indexterm>
<indexterm>
<primary>os.type()</primary>
</indexterm></simpara>
</entry>
</row>
<row>
<entry>
<simpara>Attribut <literal>os.constants</literal></simpara>
</entry>
<entry>
<simpara>Objet contenant la liste des <link linkend="signals">signaux système</link> et des codes d&#8217;erreur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Attribut <literal>os.EOL</literal></simpara>
</entry>
<entry>
<simpara>Caractère utilisé pour marquer les fins de ligne.
En général le caractère&#160;<literal>\n</literal> sous Unix et <literal>\r\n</literal> sous Windows.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module os</title>
<simpara>La documentation du module&#160;<literal>os</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/os.html">nodejs.org/docs/latest-v10.x/api/os.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>module</primary><secondary>os</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>os</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>module os</secondary>
</indexterm>
<indexterm>
<primary>module os</primary>
</indexterm></simpara>
</section>
<section xml:id="child_process">
<title>child_process : appeler un exécutable système</title>
<simpara><indexterm>
<primary>module</primary><secondary>child_process</secondary>
</indexterm>
<indexterm>
<primary>child_process</primary>
</indexterm></simpara>
<simpara>Le module <literal>child_process</literal> exécute des programmes externes,
leur transmet des données et consulte leurs résultats via
les <link linkend="process.std">flux standards</link>.
<indexterm>
<primary>flux de données</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stdout</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stdout</secondary>
</indexterm>
<indexterm>
<primary>stdout</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stdin</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stdin</secondary>
</indexterm>
<indexterm>
<primary>stdin</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stderr</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stderr</secondary>
</indexterm>
<indexterm>
<primary>stderr</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>child_process/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {exec} = require('child_process');

exec('npm --version', (error, stdout, stderr) =&gt; {  <co xml:id="CO114-1"/>
  console.log(`npm version ${stdout.trim()}`);      <co xml:id="CO114-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO114-1">
<para>Exécute la commande exécute la fonction de rappel, avec comme arguments la <link linkend="process.std">sortie standard</link> et la <link linkend="process.std">sortie erreur</link> du processus enfant.</para>
</callout>
<callout arearefs="CO114-2">
<para>Affiche <literal>npm version 6.4.0</literal>.</para>
</callout>
</calloutlist>
<simpara>L&#8217;utilisation du module <literal>child_process</literal> se justifie quand un programme
externe fournit une fonctionnalité mais ne s&#8217;interface pas avec Node,
ou encore quand on veut sortir l&#8217;exécution d&#8217;un script Node du processus courant
pour tirer parti des autres CPU de l&#8217;ordinateur sans ralentir l&#8217;application principale.</simpara>
<simpara>La fonction <literal>child_process.exec()</literal> accepte un deuxième argument optionnel.
<literal>cwd</literal> (<emphasis>current working directory</emphasis>) en est une des options utiles.
<indexterm>
<primary>module</primary><secondary>child_process</secondary><tertiary>child_process.exec()</tertiary>
</indexterm>
<indexterm>
<primary>child_process</primary><secondary>child_process.exec()</secondary>
</indexterm>
<indexterm>
<primary>child_process.exec()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>child_process/ls.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {exec} = require('child_process');

exec('ls .', {cwd: null}, (error, stdout, stderr) =&gt; {  <co xml:id="CO115-1"/>
  console.log(stdout);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO115-1">
<para>On lance la commande système&#160;<literal>ls</literal> sans spécifier le répertoire de travail.</para>
</callout>
</calloutlist>
<simpara>Exécutons le script pour observer le résultat&#160;:</simpara>
<screen>$ node child_process/ls.js</screen>
<simpara>Le constat est similaire à celui produit avec le <link linkend="fs">module&#160;<literal>fs</literal></link>&#160;:
les fichiers listés sont ceux du <emphasis>répertoire courant</emphasis>,
notre emplacement dans le terminal.</simpara>
<simpara>Modifions maintenant la valeur de l&#8217;option&#160;<literal>cwd</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>child_process/ls-root.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {exec} = require('child_process');

exec('ls .', {cwd: '/'}, (error, stdout, stderr) =&gt; { <co xml:id="CO116-1"/>
  console.log(stdout);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO116-1">
<para>La valeur de&#160;<literal>cwd</literal> est réglée sur&#160;<literal>/</literal>, c&#8217;est-à-dire le répertoire racine du système de fichiers.</para>
</callout>
</calloutlist>
<screen>$ node child_process/ls-root.js</screen>
<simpara>La liste des fichiers et répertoires affichés est désormais différente,
même si la commande passée à <literal>child_process.exec()</literal> est la même.
<literal>cwd</literal>&#160;a changé le répertoire courant l&#8217;espace d&#8217;une commande.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Performance</phrase> ls&#160;vs. fs.readdir</title>
<simpara><indexterm>
<primary>module</primary><secondary>child_process</secondary><tertiary>child_process.exec()</tertiary>
</indexterm>
<indexterm>
<primary>child_process</primary><secondary>child_process.exec()</secondary>
</indexterm>
<indexterm>
<primary>child_process.exec()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>fs</secondary><tertiary>fs.readdir()</tertiary>
</indexterm>
<indexterm>
<primary>fs</primary><secondary>fs.readdir()</secondary>
</indexterm>
<indexterm>
<primary>fs.readdir()</primary>
</indexterm>
Si on arrive au même résultat avec <literal>exec('ls')</literal>, pourquoi utiliser
la fonction <literal>fs.readdir()</literal> du <link linkend="fs">module&#160;<literal>fs</literal></link>&#160;?
Cette dernière présente au moins trois avantages&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Elle est plus rapide&#160;– à écrire, à exécuter, à diagnostiquer.</simpara>
</listitem>
<listitem>
<simpara>On économise la création d&#8217;un processus système.</simpara>
</listitem>
<listitem>
<simpara>Elle est compatible avec tous les systèmes d&#8217;exploitation.</simpara>
</listitem>
</orderedlist>
</note>
<simpara><literal>env</literal>&#160;est une deuxième option à passer à <literal>child_process.exec()</literal>.
Elle redéfinit les <link linkend="process.env">variables d&#8217;environnement</link> utilisables
par le processus enfant&#160;:</simpara>
<formalpara>
<title>child_process/ping.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {exec} = require('child_process');

const env = {PING_COUNT: 1, ...process.env};    <co xml:id="CO117-1"/>
const cmd = 'ping -c $PING_COUNT oncletom.io';

exec(cmd, {env}, (error, stdout) =&gt; {           <co xml:id="CO117-2"/>
  return error
    ? console.error(error)
    : console.log(stdout);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO117-1">
<para>On transmet les variables d&#8217;environnement existantes au processus enfant.</para>
</callout>
<callout arearefs="CO117-2">
<para>Utilisation de la variable d&#8217;environnement <literal>PING_COUNT</literal> comme valeur d&#8217;option du programme&#160;<literal>ping</literal>.</para>
</callout>
</calloutlist>
<simpara>Si on ne transmettait pas les valeurs de <literal>process.env</literal> au processus enfant,
la variable d&#8217;environnement <literal>PATH</literal> ne serait pas définie.
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm>
Le processus enfant ne saurait plus où chercher l&#8217;exécutable&#160;<literal>ping</literal>.<?asciidoc-br?>
On aurait pu appeler le programme <literal>ping</literal> en utilisant un chemin absolu comme
<literal>/sbin/ping</literal> mais son emplacement varie selon les systèmes d&#8217;exploitation.</simpara>
<screen>$ node child_process/ping.js
PING oncletom.io (185.31.40.11): 56 data bytes
64 bytes from 185.31.40.11: icmp_seq=0 ttl=56 time=23.763 ms

--- oncletom.io ping statistics ---
1 packets transmitted, 1 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 23.763/23.763/23.763/0.000 ms</screen>
<warning>
<title><phrase role="RemarquePreTitre">Compatibilité</phrase> Mon programme ne fonctionne pas sous Windows/Linux/macOS</title>
<simpara>Le programme externe peut ne pas exister sur tous les systèmes d&#8217;exploitation,
ou ne pas s&#8217;appeler avec les mêmes arguments, ni avec le même&#160;nom.</simpara>
<simpara>Une des solutions consiste à se reposer sur le <link linkend="os">module&#160;<literal>os</literal></link>
et adapter la commande en fonction du système d&#8217;exploitation.</simpara>
</warning>
<simpara><literal>child_process.spawn()</literal> est une autre approche de démarrage
et de communication avec un processus externe.
<indexterm>
<primary>module</primary><secondary>child_process</secondary><tertiary>child_process.spawn()</tertiary>
</indexterm>
<indexterm>
<primary>child_process</primary><secondary>child_process.spawn()</secondary>
</indexterm>
<indexterm>
<primary>child_process.spawn()</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>child_process/spawn.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {spawn} = require('child_process');

const subprocess = spawn('cat', ['package.json']);  <co xml:id="CO118-1"/>

subprocess.stdout.on('data', (data) =&gt; {            <co xml:id="CO118-2"/>
  console.log(String(data));                        <co xml:id="CO118-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO118-1">
<para><literal>cat</literal>&#160;est un programme qui affiche le contenu d&#8217;un fichier&#160;– un peu comme <literal>fs.readFile</literal>.</para>
</callout>
<callout arearefs="CO118-2">
<para>Les données retournées par la commande externe se lisent depuis les <link linkend="process.std">flux de sortie</link>.</para>
</callout>
<callout arearefs="CO118-3">
<para>Affiche le contenu du fichier <literal>package.json</literal>.</para>
</callout>
</calloutlist>
<simpara>Les arguments et options à transmettre au programme sont passés dans un tableau.
Dans le programme externe, on y accède avec <link linkend="process.argv"><literal>process.argv</literal></link>.
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.argv</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.argv</secondary>
</indexterm>
<indexterm>
<primary>process.argv</primary>
</indexterm></simpara>
<simpara>Pour transmettre un volume de données plus important en paramètre,
il vaut mieux faire appel à la propriété <literal>stdin</literal>.
C&#8217;est un <link linkend="stream">flux d&#8217;écriture</link> dont le fonctionnement est identique
à <link linkend="process.std"><literal>process.stdin</literal></link>.
<indexterm>
<primary>flux de données</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stdin</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stdin</secondary>
</indexterm>
<indexterm>
<primary>stdin</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>child_process/spawn-stdin.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {spawn} = require('child_process');

const subprocess = spawn('tr', ['0-9a-f', 'a-p']);
subprocess.stdout.on('data', (data) =&gt; {
  console.log(String(data));              <co xml:id="CO119-1"/>
});

subprocess.stdin.write('0123 abcd');      <co xml:id="CO119-2"/>
subprocess.stdin.end();                   <co xml:id="CO119-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO119-2">
<para>Écrit <literal>0123 abcd</literal> dans le flux d&#8217;entrée.</para>
</callout>
<callout arearefs="CO119-3">
<para>Signale au processus externe qu&#8217;il n&#8217;aura plus de donnée&#160;– le programme&#160;<literal>tr</literal> rendra la main dès qu&#8217;il nous aura tout transmis.</para>
</callout>
<callout arearefs="CO119-1">
<para>Affiche <literal>abcd klmn</literal>.</para>
</callout>
</calloutlist>
<simpara>L&#8217;exécutable <literal>tr</literal> (<phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Tr_(Unix">fr.wikipedia.org/wiki/Tr_(Unix</link>)</phrase>)
remplace des plages de caractères.
On lui a transmis des caractères en entrée et spécifié les plages de traduction
en arguments.
Nous avons utilisé la <link linkend="process.std">sortie standard</link> pour lire les résultats.
<indexterm>
<primary>flux de données</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stdout</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stdout</secondary>
</indexterm>
<indexterm>
<primary>stdout</primary>
</indexterm></simpara>
<simpara>L&#8217;exemple précédent revient au même que la commande suivante&#160;:</simpara>
<screen>$ echo -n '0123 abcd' | tr 0-9a-f a-p
abcd klmn</screen>
<simpara>Dans ce cas précis, je trouve que l&#8217;instruction en ligne de commande est plus
concise que l&#8217;utilisation d&#8217;un script Node faisant appel à <literal>child_process.spawn()</literal>.
J&#8217;aurais plutôt tendance à transmettre le résultat de cette commande
à l'<link linkend="process.std">entrée standard</link> d&#8217;un script Node.</simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables du module child_process</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>child_process.exec()</literal></simpara>
</entry>
<entry>
<simpara>Exécute une commande et retourne son résultat.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>child_process.spawn()</literal></simpara>
</entry>
<entry>
<simpara>Exécute une commande et retourne un objet <link linkend="process">processus</link>.
Le script Node et le nouveau processus peuvent communiquer entre eux.
<indexterm>
<primary>module</primary><secondary>process</secondary>
</indexterm>
<indexterm>
<primary>process</primary>
</indexterm></simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de la classe <literal>ChildProcess</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>process.on('message')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsque le processus enfant reçoit un message envoyé par l&#8217;autre script.
<indexterm>
<primary>module</primary><secondary>child_process</secondary><tertiary>process.on()</tertiary>
</indexterm>
<indexterm>
<primary>child_process</primary><secondary>process.on()</secondary>
</indexterm>
<indexterm>
<primary>process.on()</primary>
</indexterm></simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>process.kill()</literal></simpara>
</entry>
<entry>
<simpara>Envoie un <link linkend="signals">signal d&#8217;arrêt</link> au processus enfant.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>process.send()</literal></simpara>
</entry>
<entry>
<simpara>Envoie un message au processus enfant.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>process.stdin</literal></simpara>
<simpara><literal>process.stdout</literal></simpara>
<simpara><literal>process.stderr</literal></simpara>
</entry>
<entry>
<simpara><link linkend="process.std">Flux standards</link> du processus enfant.
Idéal pour envoyer et récupérer des données en continu.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module child_process</title>
<simpara>La documentation du module <literal>child_process</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/child_process.html">nodejs.org/docs/latest-v10.x/api/child_process.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>module</primary><secondary>child_process</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>child_process</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>module child_process</secondary>
</indexterm>
<indexterm>
<primary>module child_process</primary>
</indexterm></simpara>
</section>
<section xml:id="process">
<title>process : en savoir plus sur le processus en cours</title>
<simpara><indexterm>
<primary>module</primary><secondary>process</secondary>
</indexterm>
<indexterm>
<primary>process</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>process</secondary>
</indexterm>
<indexterm>
<primary>process</primary>
</indexterm>
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm></simpara>
<simpara>La module <literal>process</literal> retourne des informations
sur l&#8217;environnement dans lequel le script est exécuté.
À l&#8217;instar de <link linkend="console"><literal>console</literal></link>, la variable <literal>process</literal>
est globale.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>process/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const variables = Object.keys(process.env);

console.log(variables);                     <co xml:id="CO120-1"/>
console.log(process.argv);                  <co xml:id="CO120-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO120-1">
<para>Affiche quelque chose comme <literal>['LANG', 'SHELL', 'PATH', 'HOME', 'USER', …]</literal>&#160;– voir plus bas, les <quote><link linkend="process.env">variables d&#8217;environnement</link></quote>.</para>
</callout>
<callout arearefs="CO120-2">
<para>Affiche <literal>[ '&#8230;&#8203;/v10.9.0/bin/node', '&#8230;&#8203;/chapter-04/examples/process/intro.js' ]</literal>&#160;– voir plus bas, les <quote>&#160;<link linkend="process.argv">arguments d&#8217;exécution</link></quote>.</para>
</callout>
</calloutlist>
<simpara>Notre code peut être interprété par Node
sur plusieurs types de machines
(ordinateur récent ou fatigué, Raspberry&#160;Pi, etc.) et sur différents
systèmes d&#8217;exploitation (Windows, Linux, macOS, etc.).
Nous avons avec le module <literal>process</literal> tout le loisir d&#8217;adapter nos scripts
à ces diverses conditions.</simpara>
<simpara xml:id="process.env">Les variables d&#8217;environnement sont <emphasis role="strong">définies au niveau du système d&#8217;exploitation</emphasis>.
Elles contiennent des informations comme le répertoire courant, la langue du
système d&#8217;exploitation, l&#8217;utilisateur système courant, le type de terminal,
les emplacements d&#8217;installation des exécutables, etc.
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.env</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.env</secondary>
</indexterm>
<indexterm>
<primary>process.env</primary>
</indexterm>
<indexterm>
<primary>variable</primary><secondary>d&#8217;environnement</secondary>
</indexterm>
<indexterm>
<primary>d&#8217;environnement</primary>
</indexterm>
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm></simpara>
<simpara>On retrouve ces variables sous la forme d&#8217;un
<link xl:href="../chapter-03/index.xml#object">objet ECMAScript</link> nommé <literal>process.env</literal>&#160;:</simpara>
<screen>$ node -p 'process.env'
{ ITERM_PROFILE: 'Default',
  LANG: 'en_GB.UTF-8',
  PWD: '/Users/oncletom/workspace/nodebook',
  SHELL: '/bin/zsh',
  TERM_PROGRAM_VERSION: '3.1.5',
  TERM_PROGRAM: 'iTerm.app',
  ...
}</screen>
<simpara>En créant des variables d&#8217;environnement, nous sommes en mesure de
<emphasis role="strong">transmettre des informations contextuelles</emphasis> à nos programmes&#160;:
des chemins d&#8217;accès à une base de données, si on est en situation de test
ou de production, l&#8217;emplacement de fichiers nécessaires au fonctionnement
de notre programme, etc.</simpara>
<simpara>Par exemple et par convention, la variable <literal>NODE_ENV</literal> est utilisée pour indiquer au programme
s&#8217;il est lancé dans le cadre du développement, de l&#8217;exécution des tests
ou s&#8217;il tourne sur le serveur de production.
<indexterm>
<primary>Node.js</primary><secondary>NODE_ENV</secondary>
</indexterm>
<indexterm>
<primary>NODE_ENV</primary>
</indexterm></simpara>
<variablelist>
<varlistentry>
<term>Variable d&#8217;environnement éphémère</term>
<listitem>
<simpara><indexterm>
<primary>variable d&#8217;environnement</primary><secondary>éphémère</secondary>
</indexterm>
<indexterm>
<primary>éphémère</primary>
</indexterm>
La variable n&#8217;existe que pendant la durée de vie du programme.
La définition <literal>CLÉ=valeur</literal> est placée sur la même ligne que le programme
en question.</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>$ NODE_ENV=production node process/env.js
mode : production</screen>
<variablelist>
<varlistentry>
<term>Variable d&#8217;environnement permanente</term>
<listitem>
<simpara><indexterm>
<primary>variable d&#8217;environnement</primary><secondary>permanente</secondary>
</indexterm>
<indexterm>
<primary>permanente</primary>
</indexterm>
La variable existe pendant la durée de la session
grâce à l&#8217;opérateur <literal>export</literal> sous Linux et macOS et
avec l&#8217;opérateur <literal>set</literal> sous Windows.<?asciidoc-br?>
La définition <literal>export CLÉ=valeur</literal> est placée sur sa propre ligne.
Elle restera accessible par tout programme jusqu&#8217;à la fin de la session
ou jusqu&#8217;à ce qu&#8217;on efface la variable.</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>$ export NODE_ENV=production
$ node process/env.js
mode : production</screen>
<tip>
<title><phrase role="RemarquePreTitre">Revenir en arrière</phrase> Effacer une variable d&#8217;environnement</title>
<simpara><indexterm>
<primary>variable d&#8217;environnement</primary><secondary>effacement</secondary>
</indexterm>
<indexterm>
<primary>effacement</primary>
</indexterm>
L&#8217;opérateur <literal>unset</literal> dans un terminal efface le contenu
d&#8217;une variable d&#8217;environnement.</simpara>
<screen>$ export NODE_ENV=dev
$ echo $NODE_ENV
$ unset NODE_ENV
$ echo $NODE_ENV</screen>
</tip>
<simpara>Voici le contenu du fichier <literal>process/env.js</literal> utilisé dans les exemples précédents&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>process/env.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {NODE_ENV} = process.env;

if (NODE_ENV === 'dev') {
  console.log('On est en mode développement.');
}

console.log('mode : %s', NODE_ENV);</programlisting>
</para>
</formalpara>
<simpara>On notera que son comportement s&#8217;adapte à la présence et à la valeur
de la variable d&#8217;environnement <literal>NODE_ENV</literal>.
Elle est accessible dans Node en tant que <literal>process.env.NODE_ENV</literal>.
<indexterm>
<primary>Node.js</primary><secondary>NODE_ENV</secondary>
</indexterm>
<indexterm>
<primary>NODE_ENV</primary>
</indexterm></simpara>
<screen>$ NODE_ENV=dev node process/env.js
On est en mode développement.
mode : dev</screen>
<simpara>Nous verrons d&#8217;autres mises en situation des variables d&#8217;environnement pour
<link xl:href="../chapter-06/index.xml#configuration">configurer une application</link>
dans le <link xl:href="../chapter-06/index.xml">chapitre&#160;6</link> et pour
<link xl:href="../chapter-08/index.xml#debug">déboguer une application en ligne de commande</link>
dans le <link xl:href="../chapter-08/index.xml">chapitre&#160;8</link>.</simpara>
<simpara xml:id="process.argv">Les arguments d&#8217;exécution sont des morceaux d&#8217;information transmis
à un script Node.
On les place à droite du nom du fichier&#160;:
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.argv</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.argv</secondary>
</indexterm>
<indexterm>
<primary>process.argv</primary>
</indexterm></simpara>
<screen>$ node print-first.js salut
"salut"</screen>
<simpara>On utilise les arguments pour affiner le comportement d&#8217;un programme.
Je pense par exemple au numéro du port sur lequel lancer un serveur web,
une liste de fichiers à traiter ou
encore des fonctionnalités à activer ou à désactiver.</simpara>
<simpara>Il faut imaginer les arguments comme des paramètres de fonction,
accessibles dans un programme Node dans
le <link xl:href="../chapter-03/index.xml#array">tableau</link> <literal>process.argv</literal>&#160;:
<indexterm>
<primary>tableau</primary>
</indexterm></simpara>
<formalpara>
<title>print-first.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const [,,first_arg] = process.argv;

console.log(first_arg);</programlisting>
</para>
</formalpara>
<simpara>Les deux premiers éléments de <literal>process.argv</literal> sont rarement utilisés.
Ils correspondent respectivement à l&#8217;emplacement de l&#8217;exécutable Node
et à l&#8217;emplacement du script.</simpara>
<simpara>Tous les autres arguments sont accessibles à partir de l&#8217;index&#160;2 de
<literal>process.argv</literal>, dans l&#8217;ordre où ils sont placés&#160;:</simpara>
<screen>$ node print-first.js salut ça va ?
"salut"</screen>
<simpara>Le script <literal>print-first.js</literal> affiche le premier argument.
On en conclut que les arguments sont séparés par le caractère <quote>espace</quote>.</simpara>
<simpara>Dans le cas où un argument doit contenir un espace, on l&#8217;encadre alors
de guillemets&#160;:</simpara>
<screen>$ node print-first.js "salut ça va ?" "oui et toi ?"
"salut ça va ?"</screen>
<simpara>L&#8217;inconvénient des arguments est que leur ordre compte
et qu&#8217;il devient difficile de connaître leur rôle sans se référer
au manuel d&#8217;utilisation.</simpara>
<simpara>C&#8217;est là qu&#8217;interviennent les options.
Comme leur nom l&#8217;indique, ce sont des arguments optionnels.
Elles sont préfixées de deux traits d&#8217;union (<literal>--</literal>).
On leur associe ou non une valeur.</simpara>
<screen>$ node print-text.js "salut ça va ?" --uppercase
SALUT ÇA VA ?</screen>
<simpara>Quand on n&#8217;associe pas de valeur à une option,
on considère qu&#8217;elle équivaut à un <link xl:href="../chapter-03/index.xml#boolean">booléen</link>
de valeur&#160;<literal>true</literal>.</simpara>
<formalpara>
<title>print-text.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let [,,text] = process.argv;

if (process.argv.includes('--uppercase')) { <co xml:id="CO121-1"/>
  text = text.toLocaleUpperCase();
}

console.log(text);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO121-1">
<para>La condition est positive si l&#8217;on détecte <literal>--uppercase</literal> dans la liste des arguments.</para>
</callout>
</calloutlist>
<simpara>Les options se combinent très bien avec les arguments.
Il faut les imaginer comme des interrupteurs.</simpara>
<simpara>Dans d&#8217;autres situations, on a besoin de passer une valeur à une option&#160;:</simpara>
<screen>$ node print-text-limit.js "salut ça va ?" --limit 2
salut ça</screen>
<simpara>L&#8217;exemple précédent illustre la césure d&#8217;une phrase après deux&#160;mots
lorsque l&#8217;option <literal>--limit</literal> est associée à la valeur&#160;`2`.</simpara>
<formalpara>
<title>print-text-limit.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let [,,text] = process.argv;

const limitIndex = process.argv.indexOf('--limit');     <co xml:id="CO122-1"/>

if (limitIndex &gt;= 2) {
  const limitValue = process.argv[limitIndex + 1];      <co xml:id="CO122-2"/>
  text = text.split(' ').slice(0, limitValue).join(' ');<co xml:id="CO122-3"/>
}

console.log(text);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO122-1">
<para>On récupère l&#8217;index de l&#8217;option <literal>--limit</literal> dans le tableau <literal>process.argv</literal>.</para>
</callout>
<callout arearefs="CO122-2">
<para>On récupère la valeur de l&#8217;élément suivant <literal>--limit</literal> dans <literal>process.argv</literal>.</para>
</callout>
<callout arearefs="CO122-3">
<para>La troncature est paramétrée en fonction de la valeur associée à <literal>--limit</literal>.</para>
</callout>
</calloutlist>
<simpara>Au fond, <emphasis role="strong">les options sont des repères pour les utilisateurs</emphasis> de nos programmes.
Elles leur permettent de s&#8217;interfacer avec leurs fonctionnalités, un peu à la
manière des différents boutons qu&#8217;on retrouve
en façade d&#8217;une machine à laver.</simpara>
<simpara>L&#8217;exemple suivant est totalement fictif, mais il illustre comment
on s&#8217;interfacerait avec une machine à laver en ligne de commande&#160;:</simpara>
<screen>$ machine-a-laver P-ECO 40 --fast --no-dry --room kitchen</screen>
<simpara>Ce qu&#8217;il faut en comprendre, c&#8217;est qu&#8217;on démarrerait la machine située
dans la cuisine avec un programme économique <emphasis>et</emphasis> à&#160;40°C,
en activant l&#8217;option rapide et en désactivant l&#8217;option séchage.</simpara>
<simpara>Nous verrons d&#8217;autres mises en situation pour
<link xl:href="../chapter-08/index.xml#argv">passer des paramètres à une application en ligne de commande</link>
dans le <link xl:href="../chapter-08/index.xml">chapitre&#160;8</link>.</simpara>
<simpara xml:id="process.std">Chaque processus système est doté de trois flux de données&#160;:
le flux d&#8217;entrée (<literal>stdin</literal>), le flux de sortie (<literal>stdout</literal>)
et le flux d&#8217;erreur (<literal>stderr</literal>).
<indexterm>
<primary>flux de données</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stdin</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stdin</secondary>
</indexterm>
<indexterm>
<primary>stdin</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stdout</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stdout</secondary>
</indexterm>
<indexterm>
<primary>stdout</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stderr</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stderr</secondary>
</indexterm>
<indexterm>
<primary>stderr</primary>
</indexterm></simpara>
<simpara>Les flux standards peuvent être alimentés pendant la durée de vie du processus
en utilisant peu de mémoire.
On les utilisera pour passer le résultat d&#8217;un autre programme
à notre script Node, pour informer l&#8217;utilisateur de notre programme,
mais aussi pour consigner les erreurs.</simpara>
<simpara>Node expose ces flux standards via les variables <literal>process.stdin</literal> (entrée),
<literal>process.stdout</literal> (sortie) et <literal>process.stderr</literal> (erreur).
Chacune possède des méthodes pour écouter ce qui s&#8217;y passe,
pour y écrire du contenu et pour <link linkend="stream">rediriger leur&#160;flux</link>.</simpara>
<simpara>Commençons par l&#8217;utilisation de <literal>process.stdout</literal> pour écrire un message
dans notre terminal&#160;:</simpara>
<screen>$ node process/stdout.js
un deuxtrois
quatre</screen>
<simpara>Le code source de <literal>process/stdout.js</literal> fait appel à la fonction
<literal>process.stdout.write()</literal> par deux fois.
On notera que le caractère&#160;<literal>\n</literal> symbolise un retour à la ligne
(<literal>\r\n</literal> sous Windows)&#160;:</simpara>
<formalpara>
<title>process/stdout.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">process.stdout.write('un deux');
process.stdout.write('trois\nquatre');</programlisting>
</para>
</formalpara>
<simpara>Cela rappelle nos précédentes utilisations de la fonction <literal>console.log()</literal>,
qui se repose en effet sur <literal>process.stdout</literal> (voir encadré).</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Les fonctions <literal>console.log</literal> et <literal>console.error</literal></title>
<simpara><indexterm>
<primary>module</primary><secondary>console</secondary><tertiary>console.log()</tertiary>
</indexterm>
<indexterm>
<primary>console</primary><secondary>console.log()</secondary>
</indexterm>
<indexterm>
<primary>console.log()</primary>
</indexterm>
La fonction d&#8217;affichage <literal>console.log()</literal> écrit dans le flux de sortie
<literal>process.stdout</literal>.
Sans surprise, <literal>console.error()</literal> écrit dans le flux d&#8217;erreur
<literal>process.stderr</literal>.
<indexterm>
<primary>module</primary><secondary>console</secondary><tertiary>console.error()</tertiary>
</indexterm>
<indexterm>
<primary>console</primary><secondary>console.error()</secondary>
</indexterm>
<indexterm>
<primary>console.error()</primary>
</indexterm></simpara>
<simpara>Elles ajoutent un retour à la ligne et des options de formatage pour
notre confort.</simpara>
<simpara>On en parle davantage dans la section sur le <link linkend="console">module <literal>console</literal></link>.</simpara>
</tip>
<simpara>Les flux de sortie et d&#8217;erreur sont manipulables en continu,
à l&#8217;aide d&#8217;utilitaires systèmes existants (<literal>grep</literal>, <literal>awk</literal>, etc.)
ou de programmes spécifiques (analyse de <emphasis>logs</emphasis>).
On peut ainsi se concentrer sur un programme qui fait juste ce dont on a besoin.
On laisse le travail de spécialisation à d&#8217;autres programmes.</simpara>
<simpara>Filtrons la sortie de l&#8217;exemple précédent sans écrire une ligne de code de plus.
Le programme <literal>grep</literal> (<phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Grep">fr.wikipedia.org/wiki/Grep</link></phrase>)
est fourni par défaut sur les systèmes Linux et macOS.
Il ne retourne que les lignes qui contiennent le motif
donné en <link linkend="process.argv">argument</link>&#160;:</simpara>
<screen>$ node process/stdout.js | grep 'tre'
qua<emphasis role="marked">tre</emphasis></screen>
<simpara>La sortie standard de <literal>process/stdout.js</literal> est devenue l&#8217;entrée standard
de <literal>grep</literal> grâce à l&#8217;utilisation du <emphasis>pipe</emphasis>&#160;(<literal>|</literal>).
<indexterm>
<primary>flux de données</primary><secondary>redirection (pipe)</secondary>
</indexterm>
<indexterm>
<primary>redirection (pipe)</primary>
</indexterm></simpara>
<simpara>C&#8217;est le moment idéal pour regarder du côté de l&#8217;entrée standard de Node.
Implémentons quelque chose qui transforme un message&#160;:</simpara>
<screen>$ echo "un deuxtrois\nquatre" | node process/stdin-uppercase.js
UN DEUXTROIS
QUATRE</screen>
<simpara>On aurait aussi pu réutiliser la sortie de l&#8217;exemple <literal>process/stdout.js</literal>&#160;:</simpara>
<screen>$ node process/stdout.js | node process/stdin-uppercase.js
UN DEUXTROIS
QUATRE</screen>
<simpara>Voyons comment cela fonctionne&#160;:</simpara>
<formalpara>
<title>process/stdin-uppercase.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">process.stdin.on('data', (chunk) =&gt; {             <co xml:id="CO123-1"/>
  const text = chunk.toString();                  <co xml:id="CO123-2"/>

  process.stdout.write(text.toLocaleUpperCase()); <co xml:id="CO123-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO123-1">
<para>Chaque afflux de données appelle notre fonction en lui fournissant un seul paramètre contenant les données en question.</para>
</callout>
<callout arearefs="CO123-2">
<para>Le paramètre est de <link linkend="buffer">type Buffer</link>&#160;– on souhaite le transformer en <link xl:href="../chapter-03/index.xml#string">chaîne de caractères</link>.</para>
</callout>
<callout arearefs="CO123-3">
<para>La chaîne de caractères est transformée en majuscules et écrite dans le flux de sortie.
<indexterm>
<primary>objet</primary><secondary>Buffer</secondary>
</indexterm>
<indexterm>
<primary>Buffer</primary>
</indexterm>
<indexterm>
<primary>Buffer</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Terminons avec la sortie erreur (<literal>process.stderr</literal>).
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.stderr</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.stderr</secondary>
</indexterm>
<indexterm>
<primary>process.stderr</primary>
</indexterm>
Elle fonctionne de manière identique à la sortie standard (<literal>process.stdout</literal>).
S&#8217;il n&#8217;y a visuellement aucune différence, la sortie erreur écrit son contenu
dans un canal différent&#160;– un descripteur différent.
On l&#8217;utilise pour <emphasis role="strong">déboguer des programmes</emphasis>, pour <emphasis role="strong">lister des erreurs</emphasis> ou des
contenus que l&#8217;on souhaite dissocier de la sortie standard.</simpara>
<simpara>L&#8217;exemple suivant affiche un nombre toutes les demi-secondes et l&#8217;état
du compteur de nombres tous les cinq affichages&#160;:</simpara>
<screen>$ node process/stdout-long.js
7
24
3
19
25
Compteur = 5
22
...</screen>
<note>
<title><phrase role="RemarquePreTitre">Rappel</phrase> Interrompre un programme avec&#160;<keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo></title>
<simpara>Un programme peut être interrompu à tout moment en utilisant la combinaison
de touches&#160;<keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>.</simpara>
</note>
<formalpara>
<title>process/stdout-long.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const random = (limit) =&gt; Math.floor(Math.random() * limit);
let counter = 0;

setInterval(() =&gt; {
  counter++;
  process.stdout.write(`${random(30)}\n`);            <co xml:id="CO124-1"/>

  if (Number.isInteger(counter / 5)) {                <co xml:id="CO124-2"/>
    process.stderr.write(`Compteur = ${counter}\n`);  <co xml:id="CO124-3"/>
  }
}, 500);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO124-1">
<para>Écrit un nombre entre&#160;0 et 30&#160;dans la sortie standard.</para>
</callout>
<callout arearefs="CO124-2">
<para>On vérifie si la valeur du compteur est divisible par&#160;5&#160;– c&#8217;est le cas si la division produit un entier au lieu d&#8217;un nombre à virgule.</para>
</callout>
<callout arearefs="CO124-3">
<para>Affiche <literal>Compteur = 5</literal> puis <literal>Compteur = 10</literal> (et ainsi de suite) dans la sortie erreur.</para>
</callout>
</calloutlist>
<simpara>On pourrait décider de n&#8217;afficher que le flux d&#8217;erreur.
Utilisons l&#8217;opérateur&#160;<literal>&gt;</literal> pour <emphasis role="strong">rediriger la sortie standard vers un fichier</emphasis>&#160;:
<indexterm>
<primary>flux de données</primary><secondary>redirection (entrée standard)</secondary>
</indexterm>
<indexterm>
<primary>redirection (entrée standard)</primary>
</indexterm></simpara>
<screen>$ node process/stdout-long.js &gt; stdout.txt
Compteur = 5
Compteur = 10
...</screen>
<simpara>En ouvrant le fichier <literal>stdout.txt</literal>, on voit
la liste de nombres générée par notre programme.</simpara>
<simpara>En maîtrisant les flux standards, on est capable de <emphasis role="strong">créer des programmes modulaires</emphasis>
qui consomment du contenu sans avoir à connaître leur provenance.
<emphasis role="strong">Les données circulent</emphasis> depuis et vers des programmes externes,
des fichiers ou des sites web distants.</simpara>
<simpara>Pour mieux comprendre la logique de flux continu que l&#8217;on vient de découvrir,
je vous invite à lire la section liée au <link linkend="stream">module <literal>stream</literal></link>.
<indexterm>
<primary>module</primary><secondary>stream</secondary>
</indexterm>
<indexterm>
<primary>stream</primary>
</indexterm>
On y détaillera la liste des événements à écouter, ainsi que les différentes
méthodes d&#8217;écriture, de pause et de lecture.</simpara>
<simpara xml:id="process.on">Un processus système reçoit et émet des données, mais il peut aussi
<emphasis role="strong">écouter des événements</emphasis> grâce à la fonction <literal>process.on</literal>.
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.on()</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.on()</secondary>
</indexterm>
<indexterm>
<primary>process.on()</primary>
</indexterm></simpara>
<formalpara>
<title>process/exit.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log('Le processus démarre');

process.on('exit', (code) =&gt; {
  console.log(`Le processus termine avec le code ${code}`);
});</programlisting>
</para>
</formalpara>
<simpara>Cet exemple illustre l&#8217;événement <literal>exit</literal>, qui est déclenché quand le processus se termine.
À ce titre, un <emphasis role="strong">code de sortie</emphasis> est fourni pour signaler l&#8217;état dans
lequel le programme se termine.
On parlera davantage du code de sortie et de sa signification
dans la section <quote><link linkend="process.exit">Mettre fin au processus</link></quote>.
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>code de sortie</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>code de sortie</secondary>
</indexterm>
<indexterm>
<primary>code de sortie</primary>
</indexterm></simpara>
<simpara>Lançons le script précédent&#160;:</simpara>
<screen>$ node process/exit.js
Le processus démarre
Le processus termine avec le code 0</screen>
<simpara>Tout s&#8217;est passé correctement.
Le code de sortie est alors&#160;<literal>0</literal>.</simpara>
<simpara>Si le programme venait à se terminer de manière imprévue, le code serait différent.
L&#8217;exemple suivant provoque volontairement une erreur en faisant
référence à une variable qui n&#8217;existe pas&#160;:</simpara>
<formalpara>
<title>process/exit-error.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">process.on('exit', (code) =&gt; {
  console.log(`Le processus termine avec le code ${code}`);
});

console.log(jenexistepas);</programlisting>
</para>
</formalpara>
<simpara>Lançons le script&#160;:</simpara>
<screen>$ node process/exit-error.js
Le processus termine avec le code 1

<emphasis role="marked">ReferenceError</emphasis>: jenexistepas is not defined
    at Object.&lt;anonymous&gt; (/.../examples/process/<emphasis role="marked">exit-error.js</emphasis>:<emphasis role="marked">5</emphasis>:13)</screen>
<simpara>Cette fois-ci, le code de sortie est&#160;<literal>1</literal>.
Cela correspond à une erreur qui n&#8217;a pas été capturée.
Le reste du message décrit pourquoi l&#8217;erreur s&#8217;est manifestée.</simpara>
<simpara>D&#8217;autres événements liés au cycle de vie de nos applications sont disponibles&#160;:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Événements liés au cycle de vie du processus Node</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Événement</entry>
<entry align="left" valign="top">Paramètres</entry>
<entry align="left" valign="top">Raison du déclenchement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>exit</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>(exitCode)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le programme se termine et va rendre la main au système d&#8217;exploitation.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>unhandledRejection</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>(reason, promise)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Une <link xl:href="../chapter-03/index.xml#promise">promesse</link> a échoué
et n&#8217;a pas été capturée à l&#8217;aide de la méthode <literal>.catch()</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>uncaughtException</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>(error)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Une erreur s&#8217;est produite et n&#8217;a pas été capturée.
Si rien n&#8217;est fait, le processus va s&#8217;arrêter avec un code erreur.<?asciidoc-br?>
<emphasis role="strong">Note</emphasis> : il vaut mieux qu&#8217;un programme s&#8217;arrête en cas de problème.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>message</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>(message, sourceSocket)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Un <link linkend="child_process">processus parent</link> nous envoie un message.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>liste des événements</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>liste des événements</secondary>
</indexterm>
<indexterm>
<primary>liste des événements</primary>
</indexterm></simpara>
<simpara xml:id="signals">La méthode <literal>process.on</literal> est à l&#8217;écoute des signaux système.
Par exemple, la combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> met en réalité
un signal d&#8217;interruption qui répond à l&#8217;identifiant <literal>SIGINT</literal>.</simpara>
<simpara>Node gère ces signaux pour nous, mais on peut aussi se mettre à les écouter
et décider de faire autrement que son comportement par défaut.</simpara>
<simpara>Par exemple, affichons l&#8217;heure de l&#8217;arrêt du processus avant de rendre la main&#160;:</simpara>
<formalpara>
<title>process/interrupt.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const log = (msg) =&gt; {
  console.log(`${new Date().toISOString()} - ${msg}`);
}

log('Processus démarré');                     <co xml:id="CO125-1"/>

process.on('SIGINT', () =&gt; {                  <co xml:id="CO125-2"/>
  log('Processus terminé (manuellement)');
  process.exit(0);                            <co xml:id="CO125-3"/>
});

setTimeout(() =&gt; {                            <co xml:id="CO125-4"/>
  log('Processus terminé (timeout)');
  process.exit(0);
}, 5000)</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO125-1">
<para>Un premier message s&#8217;affiche au démarrage du script.</para>
</callout>
<callout arearefs="CO125-2">
<para>Cette <link xl:href="../chapter-03/index.xml#function">fonction</link> se déclenche lors de la réception du <emphasis>signal d&#8217;interruption</emphasis> (<literal>SIGINT</literal>), lorsque le système d&#8217;exploitation lui relaie notre combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>.</para>
</callout>
<callout arearefs="CO125-3">
<para>La fonction <link linkend="process.exit"><literal>process.exit()</literal></link> termine le processus.</para>
</callout>
<callout arearefs="CO125-4">
<para>Sinon, ce chronomètre mettra fin au processus au bout de 5 secondes.</para>
</callout>
</calloutlist>
<simpara>En pratique le résultat ressemble à ceci&#160;:</simpara>
<screen>$ node process/interrupt.js
2018-03-16T10:58:32.855Z - Processus démarré
<keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>
2018-03-16T10:58:40.000Z - Processus terminé (manuellement)</screen>
<simpara>En plus du signal <literal>SIGINT</literal>, Node nous relaie les signaux suivants&#160;:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Événements liés aux signaux systèmes</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="66.6667*"/>
<thead>
<row>
<entry align="left" valign="top">Événement</entry>
<entry align="left" valign="top">Raison du déclenchement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>SIGINT</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Interruption de la commande en&#160;cours</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SIGTERM</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Demande au processus de s&#8217;arrêter</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SIGUSR1</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Node reçoit le signal d&#8217;attacher l'<link linkend="inspect">inspecteur</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SIGHUP</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le terminal est en train d&#8217;être fermé</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SIGWINCH</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le terminal a été redimensionné</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><literal>SIGKILL</literal> est un autre événement important, mais on ne peut pas l&#8217;écouter.
Quand il est émis, le processus doit être arrêté quoiqu&#8217;il arrive.
On l&#8217;utilise justement en dernier recours, quand <literal>SIGINT</literal>
et <literal>SIGTERM</literal> ne font pas effet&#160;; par exemple à cause d&#8217;un bogue dans notre code,
ou d&#8217;une ressource qui ne rend pas la main.</simpara>
<simpara xml:id="process.exit"><emphasis role="strong">Un processus Node se termine quand il n&#8217;a plus d&#8217;instructions à exécuter</emphasis>.
Ce peut être provoqué via
l'<link linkend="signals">émission d&#8217;un signal extérieur</link>, mais aussi de l&#8217;intérieur
par l&#8217;intermédiaire de la fonction <literal>process.exit()</literal>.
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.exit()</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.exit()</secondary>
</indexterm>
<indexterm>
<primary>process.exit()</primary>
</indexterm></simpara>
<simpara>On utilise cette fonction car le programme a atteint son but.
On le fait aussi lorsqu&#8217;on intercepte une erreur en souhaitant
effectuer un <emphasis role="strong">traitement spécial avant de mettre fin au processus</emphasis>.
Il se peut aussi qu&#8217;il vaille mieux terminer l&#8217;application en cas de perte
d&#8217;accès à des ressources distantes (base de données, stockage de fichiers)
au lieu de présenter une application web instable.</simpara>
<simpara>L&#8217;exemple suivant illustre que l&#8217;on souhaite clôturer notre script
si on trouve le bon nombre&#160;:</simpara>
<screen>$ node process/exit-devinette.js
JEU ! Trouve le nombre auquel je pense :
10<keycap>ENTRÉE</keycap>
Hm hm, essaie encore.
3<keycap>ENTRÉE</keycap>
Tu as trouvé, bravo !</screen>
<simpara>Dans cet exemple, on écoute l&#8217;utilisateur de manière indéfinie, jusqu&#8217;à ce qu&#8217;il
ou elle trouve le bon nombre.
Lorsque c&#8217;est le cas, on interrompt le programme en transmettant
un code de sortie de réussite&#160;: le code <literal>0</literal>.</simpara>
<formalpara>
<title>process/exit-devinette.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const secret_number = Number(process.argv[2] || 3); <co xml:id="CO126-1"/>

console.log('JEU ! Trouve le nombre auquel je pense :');
process.stdin.on('data', (chunk) =&gt; {               <co xml:id="CO126-2"/>
  if (parseFloat(chunk) === secret_number) {
    console.log('Tu as trouvé, bravo !');
    process.exit(0);                                <co xml:id="CO126-3"/>
  }
  else {
    console.log('Hm hm, essaie encore.');           <co xml:id="CO126-4"/>
  }
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO126-1">
<para>Le nombre secret est&#160;<literal>3</literal> par défaut, sauf s&#8217;il est passé <link linkend="process.argv">en argument</link> du script.</para>
</callout>
<callout arearefs="CO126-2">
<para>Cette fonction est invoquée à chaque saisie suivie de l&#8217;appui sur la touche <keycap>ENTRÉE</keycap>.</para>
</callout>
<callout arearefs="CO126-3">
<para>Cette ligne met fin au script, après avoir affiché un message de félicitations.</para>
</callout>
<callout arearefs="CO126-4">
<para>Ce message s&#8217;affiche à chaque saisie erronée, jusqu&#8217;à ce que le nombre secret soit trouvé.</para>
</callout>
</calloutlist>
<simpara>On pourrait tout à fait imaginer une variante de ce script dans laquelle
on limiterait le nombre de mauvaises réponses.
Lorsqu&#8217;on atteindrait cette limite, le programme utiliserait un code de sortie
différent de&#160;<literal>0</literal>.
Le code&#160;<literal>9</literal> ferait l&#8217;affaire puisqu&#8217;il indique qu&#8217;un argument invalide a été
passé.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Avancé</phrase> process.abort()</title>
<simpara><indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.abort()</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.abort()</secondary>
</indexterm>
<indexterm>
<primary>process.abort()</primary>
</indexterm>
Comme avec <literal>process.exit()</literal>, le programme est terminé immédiatement.
On l&#8217;utilise quand quelque chose d&#8217;inopiné et nécessitant un débogage
avancé se produit.</simpara>
<simpara>La fonction génère un fichier de débogage (<emphasis>core file</emphasis>) qui contient tout le contenu
de la mémoire utilisée par Node.
<indexterm>
<primary>Node.js</primary><secondary>débogage (core file)</secondary>
</indexterm>
<indexterm>
<primary>débogage (core file)</primary>
</indexterm>
Ce fichier s&#8217;analyse avec des logiciels avancés comme <literal>mdb_v8</literal>.</simpara>
</note>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module process</title>
<simpara>La documentation du module <literal>process</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/process.html">nodejs.org/docs/latest-v10.x/api/process.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>module process</secondary>
</indexterm>
<indexterm>
<primary>module process</primary>
</indexterm></simpara>
</section>
<section xml:id="stream">
<title>stream : manipuler des flux de données</title>
<simpara><indexterm>
<primary>module</primary><secondary>stream</secondary>
</indexterm>
<indexterm>
<primary>stream</primary>
</indexterm>
<indexterm>
<primary>flux de données</primary>
</indexterm></simpara>
<simpara>Le module <literal>stream</literal> contient les éléments de base pour lire, écrire et
transformer des flux de données rapidement et avec peu de mémoire.</simpara>
<simpara>Créer ses propres flux est une chose assez compliquée à réaliser.
Dans cette section, nous allons nous focaliser sur l&#8217;utilisation des modules
Node qui génèrent de tels&#160;flux.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createReadStream} = require('fs');

createReadStream(__filename)                    <co xml:id="CO127-1"/>
  .on('data', (data) =&gt; {                       <co xml:id="CO127-2"/>
    console.log('%d octets lus', data.length);  <co xml:id="CO127-3"/>
  });</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO127-1">
<para>On crée un flux de lecture qui ouvre le fichier courant (<literal>__filename</literal>).</para>
</callout>
<callout arearefs="CO127-2">
<para>Invoque cette fonction à chaque morceau de données&#160;lu.</para>
</callout>
<callout arearefs="CO127-3">
<para>Affiche le nombre d&#8217;octets lus dans ce morceau.</para>
</callout>
</calloutlist>
<screen>$ node stream/intro.js
214 octets lus</screen>
<simpara><emphasis role="strong">Un flux de lecture consomme les données petit à petit</emphasis>.
Il correspond à une instance de l&#8217;objet <link linkend="stream.Readable"><literal>stream.Readable</literal></link>.
<indexterm>
<primary>module</primary><secondary>stream</secondary><tertiary>stream.Readable</tertiary>
</indexterm>
<indexterm>
<primary>stream</primary><secondary>stream.Readable</secondary>
</indexterm>
<indexterm>
<primary>stream.Readable</primary>
</indexterm>
<indexterm>
<primary>flux de données</primary><secondary>en lecture</secondary>
</indexterm>
<indexterm>
<primary>en lecture</primary>
</indexterm>
L&#8217;exemple précédent n&#8217;a affiché qu&#8217;un seul morceau car la taille maximale
par défaut est d&#8217;environ <literal>16&#160;Ko</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/read.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createReadStream} = require('fs');

createReadStream(__filename, {highWaterMark: 100})  <co xml:id="CO128-1"/>
  .on('end', () =&gt; console.log('Lecture terminée')) <co xml:id="CO128-2"/>
  .on('data', (data) =&gt; {
    console.log('%d octets reçus', data.length);
  });</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO128-1">
<para>On spécifie cette fois qu&#8217;on lit <literal>100&#160;octets</literal> à la fois.</para>
</callout>
<callout arearefs="CO128-2">
<para>Affiche <literal>Lecture terminée</literal> lorsque tous les morceaux ont été&#160;lus.</para>
</callout>
</calloutlist>
<simpara>L&#8217;option <literal>highWaterMark</literal> adapte le débit de lecture.
Cette valeur est exprimée en octets.
Plus ce nombre est petit, moins Node utilise de mémoire&#160;:</simpara>
<screen>$ node stream/read.js
100 octets lus
100 octets lus
78 octets lus
Lecture terminée</screen>
<simpara>Le mécanisme de flux s&#8217;applique également à l&#8217;écriture.
<indexterm>
<primary>module</primary><secondary>stream</secondary><tertiary>stream.Writeable</tertiary>
</indexterm>
<indexterm>
<primary>stream</primary><secondary>stream.Writeable</secondary>
</indexterm>
<indexterm>
<primary>stream.Writeable</primary>
</indexterm>
<indexterm>
<primary>flux de données</primary><secondary>en écriture</secondary>
</indexterm>
<indexterm>
<primary>en écriture</primary>
</indexterm>
<emphasis role="strong">Un flux d&#8217;écriture écrit des données petit à petit</emphasis>.
Il correspond à une instance de l&#8217;objet <link linkend="stream.Writeable"><literal>stream.Writeable</literal></link>.</simpara>
<simpara>L&#8217;exemple suivant illustre une succession d&#8217;écritures dans un même&#160;flux&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/write.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createWriteStream, readFile} = require('fs');
const {join} = require('path');

const dest = join(__dirname, 'debug.txt');
const stream = createWriteStream(dest);     <co xml:id="CO129-1"/>

stream.on('finish', () =&gt; {
  readFile(dest, (error, data) =&gt; {         <co xml:id="CO129-2"/>
    console.log(String(data));
  });
});

stream.write('Hell');                       <co xml:id="CO129-3"/>
stream.write('o Worl');
stream.end('d!');                           <co xml:id="CO129-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO129-1">
<para>On crée un flux d&#8217;écriture vers le fichier <literal>stream/debug.txt</literal>.</para>
</callout>
<callout arearefs="CO129-3">
<para>Écrit <literal>Hell</literal> dans le&#160;flux.</para>
</callout>
<callout arearefs="CO129-4">
<para>Écrit&#160;<literal>d!</literal> dans le flux et signale que nous n&#8217;avons plus de données à transmettre.</para>
</callout>
<callout arearefs="CO129-2">
<para>L&#8217;utilisation de <literal>stream.end()</literal> déclenche l&#8217;événement <literal>finish</literal>&#160;– nous lisons le contenu du fichier à ce moment&#160;là.</para>
</callout>
</calloutlist>
<simpara>Cette écriture par morceaux a pour effet de réduire la pression mémoire
exercée par Node sur le système d&#8217;exploitation et pour le reste du programme.
Ce mécanisme est particulièrement adapté lorsque l&#8217;écriture prend du temps
ou implique un certain volume de données.</simpara>
<simpara><emphasis role="strong">Les flux de lecture et d&#8217;écriture se combinent</emphasis>.
<indexterm>
<primary>module</primary><secondary>stream</secondary><tertiary>stream.pipe()</tertiary>
</indexterm>
<indexterm>
<primary>stream</primary><secondary>stream.pipe()</secondary>
</indexterm>
<indexterm>
<primary>stream.pipe()</primary>
</indexterm>
<indexterm>
<primary>flux de données</primary><secondary>redirection (pipe)</secondary>
</indexterm>
<indexterm>
<primary>redirection (pipe)</primary>
</indexterm>
Les données lues depuis une source (<literal>Readable</literal>) sont redirigées vers
une destination (<literal>Writeable</literal>) à l&#8217;aide de la fonction <literal>pipe()</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/pipe.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createReadStream, createWriteStream} = require('fs');
const {join} = require('path');

const filename_copy = join(__dirname, 'copie.js');
const source = createReadStream(__filename);            <co xml:id="CO130-1"/>
const dest = createWriteStream(filename_copy);          <co xml:id="CO130-2"/>

source.pipe(dest)                                       <co xml:id="CO130-3"/>
  .on('finish', () =&gt; console.log('Copie terminée !')); <co xml:id="CO130-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO130-1">
<para>On crée un flux de lecture.</para>
</callout>
<callout arearefs="CO130-2">
<para>On crée un flux d&#8217;écriture.</para>
</callout>
<callout arearefs="CO130-3">
<para>On redirige le flux de lecture vers celui d&#8217;écriture.</para>
</callout>
<callout arearefs="CO130-4">
<para>La redirection retourne le flux d&#8217;écriture, que l&#8217;on écoute pour savoir quand il a terminé d&#8217;écrire sur le disque.</para>
</callout>
</calloutlist>
<simpara>Dans cet exemple, nous avons pris deux fichiers respectivement comme source de lecture
et destination d&#8217;écriture.
Nous avons assemblé les deux flux avec <literal>pipe()</literal> puis détecté la fin de la copie.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Unix</phrase> Opérateur pipe&#160;(<literal>|</literal>)</title>
<simpara>La fonction <literal>stream.pipe()</literal> correspond littéralement à l&#8217;opérateur Unix&#160;<literal>|</literal>.</simpara>
<simpara>Les morceaux de données d&#8217;un premier programme sont transmis en entrée à un
second programme.
Ici, le mécanisme s&#8217;applique à des fonctions&#160;Node.</simpara>
</note>
<simpara>L&#8217;utilisation de <literal>pipe()</literal> semble superflue pour copier des fichiers.
À vrai dire, la fonction <link linkend="fs"><literal>fs.copyFile()</literal></link> fait exactement la même chose.
<indexterm>
<primary>module</primary><secondary>fs</secondary><tertiary>fs.copyFile()</tertiary>
</indexterm>
<indexterm>
<primary>fs</primary><secondary>fs.copyFile()</secondary>
</indexterm>
<indexterm>
<primary>fs.copyFile()</primary>
</indexterm>
<indexterm>
<primary>flux de données</primary><secondary>redirection (pipe)</secondary>
</indexterm>
<indexterm>
<primary>redirection (pipe)</primary>
</indexterm>
Toutefois, le mécanisme de redirection proposé par <literal>pipe()</literal> est modulaire et composable.
On peut par exemple diriger une source de données vers plusieurs flux d&#8217;écriture
en même temps.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/pipe-multi.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const fs = require('fs');
const {join} = require('path');

const filename_copy = join(__dirname, 'copie.js');
const read = fs.createReadStream(__filename);
read.on('end', () =&gt; console.log('Lecture terminée !'));

read.pipe(fs.createWriteStream(filename_copy)); <co xml:id="CO131-1"/>
read.pipe(process.stdout);                      <co xml:id="CO131-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO131-1">
<para>Écrit une copie du fichier comme dans l&#8217;exemple <literal>stream/pipe.js</literal>.</para>
</callout>
<callout arearefs="CO131-2">
<para>Redirige le contenu de lecture vers la <link linkend="process.std">sortie standard</link> de notre terminal.</para>
</callout>
</calloutlist>
<simpara>Cette technique agit comme une gare de triage&#160;: nous avons la liberté
d&#8217;agir sur les données avant de les envoyer vers leur flux d&#8217;écriture distinct.</simpara>
<simpara>On peut aussi <emphasis role="strong">transformer les contenus à la volée</emphasis> en utilisant plusieurs
fois la fonction <literal>pipe()</literal>.
Les données sont passées à des objets capables de lire et d&#8217;écrire des flux.
C&#8217;est le cas du <link linkend="extras">module <literal>zlib</literal></link>, responsable de compresser et de
décompresser des données&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/pipe-transform.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createReadStream} = require('fs');
const {createGzip} = require('zlib');

createReadStream(__filename)
  .pipe(createGzip())         <co xml:id="CO132-1"/>
  .pipe(process.stdout);      <co xml:id="CO132-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO132-1">
<para>Compresse les données à la volée.</para>
</callout>
<callout arearefs="CO132-2">
<para>Les données compressées sont transmises à la <link linkend="process.std">sortie standard</link>.</para>
</callout>
</calloutlist>
<simpara>Cet exemple devrait afficher le contenu de notre fichier source avec une taille
réduite&#160;:</simpara>
<screen>$ node stream/pipe-transform.js</screen>
<simpara>L&#8217;affichage semble bizarre et c&#8217;est normal&#160;: ce sont des données compressées
au format Gzip&#160;– un format de compression libre.</simpara>
<simpara>Le programme Unix <literal>gzip</literal> sait décoder des données compressées dans ce format.
Il sait aussi les décoder à la volée avec un&#160;<emphasis>pipe</emphasis>&#160;:
<indexterm>
<primary>flux de données</primary><secondary>redirection (pipe)</secondary>
</indexterm>
<indexterm>
<primary>redirection (pipe)</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>gzip</secondary>
</indexterm>
<indexterm>
<primary>gzip</primary>
</indexterm></simpara>
<screen>$ node stream/pipe-transform.js | gzip</screen>
<simpara>Nous avons vu comment transmettre des flux de données de manière interopérable
entre un script Node et un programme externe, entre deux programmes externes
et entre deux scripts&#160;Node.</simpara>
<table xml:id="stream.Readable" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Principaux attributs d&#8217;un flux Readable</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>stream.pipe()</literal></simpara>
</entry>
<entry>
<simpara>Redirige un flux de lecture vers un flux d&#8217;écriture.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('data')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsqu&#8217;un morceau de données a été&#160;lu.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('error')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorqu&#8217;une erreur se produit.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('end')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsqu&#8217;il n&#8217;y a plus de données à&#160;lire.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('readable')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsque la lecture de données est prête à démarrer.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<table xml:id="stream.Writeable" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Principaux attributs d&#8217;un flux Writeable</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>stream.write()</literal></simpara>
</entry>
<entry>
<simpara>Écrit des données dans le flux.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.end()</literal></simpara>
</entry>
<entry>
<simpara>Signale que nous n&#8217;avons plus de données à transmettre.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('drain')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsque la mémoire d&#8217;écriture est vide et prête à accepter
de nouvelles données.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('error')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche lorsqu&#8217;une erreur se produit.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('finish')</literal></simpara>
</entry>
<entry>
<simpara>Se déclenche à la clôture du flux d&#8217;écriture.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module stream</title>
<simpara>La documentation du module <literal>stream</literal> est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/stream.html">nodejs.org/docs/latest-v10.x/api/stream.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>module</primary><secondary>stream</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>stream</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>module stream</secondary>
</indexterm>
<indexterm>
<primary>module stream</primary>
</indexterm></simpara>
</section>
<section xml:id="dautres_modules_pour_aller_plus_loin">
<title>D&#8217;autres modules pour aller plus loin</title>
<simpara>Node embarque d&#8217;autres modules que ceux listés précédemment.
Ils nécessitent des connaissances sur des sujets bas niveau,
plus proches du matériel et des protocoles réseau.</simpara>
<variablelist>
<varlistentry>
<term><anchor xml:id="cluster" xreflabel="[cluster]"/><literal>cluster</literal></term>
<listitem>
<simpara>Gère la distribution d&#8217;une application sur plusieurs CPU d&#8217;un même ordinateur.
<indexterm>
<primary>module</primary><secondary>cluster</secondary>
</indexterm>
<indexterm>
<primary>cluster</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="crypto" xreflabel="[crypto]"/><literal>crypto</literal></term>
<listitem>
<simpara>Fonctions cryptographiques pour chiffrer, signer et vérifier des données.
<indexterm>
<primary>module</primary><secondary>crypto</secondary>
</indexterm>
<indexterm>
<primary>crypto</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="dgram" xreflabel="[dgram]"/><literal>dgram</literal></term>
<listitem>
<simpara>Création et consommation de ressources&#160;UDP.
<indexterm>
<primary>module</primary><secondary>dgram</secondary>
</indexterm>
<indexterm>
<primary>dgram</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="dns" xreflabel="[dns]"/><literal>dns</literal></term>
<listitem>
<simpara>Résolution et lecture d&#8217;enregistrements&#160;DNS.
<indexterm>
<primary>module</primary><secondary>dns</secondary>
</indexterm>
<indexterm>
<primary>dns</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="net" xreflabel="[net]"/><literal>net</literal></term>
<listitem>
<simpara>Création et consommation de ressources TCP.
Les modules <literal>http</literal>, <literal>https</literal> et <literal>http2</literal> se basent dessus.
<indexterm>
<primary>module</primary><secondary>net</secondary>
</indexterm>
<indexterm>
<primary>net</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="readline" xreflabel="[readline]"/><literal>readline</literal></term>
<listitem>
<simpara>Manipulation ligne par ligne d&#8217;un <link linkend="stream">flux</link>.
Ce module est particulièrement utilisé dans des
<link xl:href="../chapter-08/index.xml">applications en ligne de commande</link> (chapitre&#160;8),
pour mettre à jour une barre de progression et animer des éléments d&#8217;affichage.
<indexterm>
<primary>module</primary><secondary>readline</secondary>
</indexterm>
<indexterm>
<primary>readline</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="tty" xreflabel="[tty]"/><literal>tty</literal></term>
<listitem>
<simpara>Gestion d&#8217;interface de terminal en mode texte.
Le module <literal>readline</literal> se base dessus.
<indexterm>
<primary>module</primary><secondary>tty</secondary>
</indexterm>
<indexterm>
<primary>tty</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="v8" xreflabel="[v8]"/><literal>v8</literal></term>
<listitem>
<simpara>Lecture et écriture d&#8217;instructions de la machine virtuelle&#160;V8
dans le processus actuel.
<indexterm>
<primary>module</primary><secondary>v8</secondary>
</indexterm>
<indexterm>
<primary>v8</primary>
</indexterm>
<indexterm>
<primary>V8 (machine virtuelle)</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="vm" xreflabel="[vm]"/><literal>vm</literal></term>
<listitem>
<simpara>Création de nouveaux contextes d&#8217;interprétation de la machine virtuelle&#160;V8.
<indexterm>
<primary>module</primary><secondary>vm</secondary>
</indexterm>
<indexterm>
<primary>vm</primary>
</indexterm>
<indexterm>
<primary>V8 (machine virtuelle)</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="zlib" xreflabel="[zlib]"/><literal>zlib</literal></term>
<listitem>
<simpara>Compression et décompression de données (Gzip, Inflate/Deflate).
Ces formats sont utilisés pour la compression de requêtes&#160;HTTP.
<indexterm>
<primary>module</primary><secondary>zlib</secondary>
</indexterm>
<indexterm>
<primary>zlib</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="modules">
<title>Créer ses propres modules Node</title>
<simpara><indexterm>
<primary>module</primary>
</indexterm></simpara>
<simpara>Les <link linkend="modules-builtin">modules de base</link> nous fournissent de nombreuses fonctionnalités.
Nous pouvons réutiliser le même mécanisme pour
<emphasis role="strong">organiser notre code dans plusieurs fichiers</emphasis>.
C&#8217;est un mécanisme comparable à ce que l&#8217;on retrouve en Python (<literal>import</literal>),
PHP (<literal>require</literal>) et Ruby (<literal>require</literal> et <literal>require_relative</literal>).</simpara>
<section xml:id="modules.require">
<title>Importer et exporter des valeurs</title>
<simpara><indexterm>
<primary>module</primary><secondary>require()</secondary>
</indexterm>
<indexterm>
<primary>require()</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>require()</secondary>
</indexterm>
<indexterm>
<primary>require()</primary>
</indexterm></simpara>
<formalpara>
<title>modules/enfant.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const number = 42;</programlisting>
</para>
</formalpara>
<simpara>Le fichier d&#8217;exemple <literal>modules/enfant.js</literal> contient une variable, <literal>number</literal>.
Essayons de la réutiliser dans le fichier <literal>modules/parent.js</literal>
à l&#8217;aide de la fonction <literal>require()</literal>.</simpara>
<formalpara>
<title>modules/parent.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const enfant = require('./enfant.js');    <co xml:id="CO133-1"/>

console.log(enfant.number);               <co xml:id="CO133-2"/>
console.log(enfant);                      <co xml:id="CO133-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO133-1">
<para>Contrairement aux <link linkend="modules-builtin">modules de base</link>, on passe un chemin relatif au fichier courant.</para>
</callout>
<callout arearefs="CO133-2">
<para>Est-ce que cela affichera la valeur de la variable <literal>number</literal>&#160;?</para>
</callout>
<callout arearefs="CO133-3">
<para>Mais au fond, que contient notre variable <literal>enfant</literal>&#160;?</para>
</callout>
</calloutlist>
<simpara>Exécutons le fichier <literal>modules/parent.js</literal> avec Node pour en avoir le cœur&#160;net&#160;:</simpara>
<screen>$ node modules/parent.js
undefined
{}</screen>
<simpara>Nous pouvons en tirer un apprentissage important&#160;:
on ne peut pas voir ce qu&#8217;il y a dans un module depuis l&#8217;extérieur.</simpara>
<simpara>Choisissons maintenant ce que l&#8217;on souhaite exporter en affectant
la valeur de notre choix à <literal>module.exports</literal>&#160;:
<indexterm>
<primary>module</primary><secondary>exports</secondary>
</indexterm>
<indexterm>
<primary>exports</primary>
</indexterm></simpara>
<formalpara>
<title>modules/enfant-export.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const number = 42;

module.exports = number;</programlisting>
</para>
</formalpara>
<simpara>Comment cela ça se traduit-il lorsqu&#8217;on l&#8217;appelle avec <literal>require()</literal>&#160;?</simpara>
<formalpara>
<title>modules/parent-export.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const enfant = require('./enfant-export.js');

console.log(enfant.number);               <co xml:id="CO134-1"/>
console.log(enfant);                      <co xml:id="CO134-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO134-1">
<para>Affiche <literal>undefined</literal>.</para>
</callout>
<callout arearefs="CO134-2">
<para>Affiche&#160;<literal>42</literal>.</para>
</callout>
</calloutlist>
<simpara><literal>module.exports</literal> rend visible depuis l&#8217;extérieur ce qui est exporté par un module.
Par défaut, <literal>module.exports</literal> est un objet.</simpara>
<simpara>Essayons maintenant d&#8217;exporter plusieurs valeurs en une seule fois.</simpara>
<formalpara>
<title>modules/enfant-export-multiple.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const number = 42;

module.exports.number = number;

module.exports.random = (limit = 100) =&gt; {
  return Math.floor(Math.random() * limit)
};</programlisting>
</para>
</formalpara>
<simpara>Nous avons créé deux nouvelles valeurs&#160;: <literal>number</literal> (un nombre) et
<literal>random()</literal> (une fonction).</simpara>
<formalpara>
<title>modules/parent-export-multiple.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const enfant = require('./enfant-export-multiple.js');

console.log(enfant.number);               <co xml:id="CO135-1"/>
console.log(enfant.random());             <co xml:id="CO135-2"/>

module.exports = enfant.random;           <co xml:id="CO135-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO135-1">
<para>Affiche&#160;<literal>42</literal>.</para>
</callout>
<callout arearefs="CO135-2">
<para>Affiche un nombre aléatoire entre&#160;0 et&#160;100.</para>
</callout>
<callout arearefs="CO135-3">
<para>Réexporte la fonction <literal>enfant.number</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Exporter un objet</title>
<simpara><indexterm>
<primary>module</primary><secondary>exports</secondary>
</indexterm>
<indexterm>
<primary>exports</primary>
</indexterm>
L&#8217;utilisation de la syntaxe d&#8217;objet raccourcie évite la répétition
du nom des variables lors de l&#8217;export.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">const number = 42;

const random = (limit = 100) =&gt; {
  return Math.floor(Math.random() * limit);
};

module.exports = {number, random};          <co xml:id="CO136-1"/></programlisting>
<calloutlist>
<callout arearefs="CO136-1">
<para>Liste des valeurs retournée par l&#8217;objet <literal>module.exports</literal>.</para>
</callout>
</calloutlist>
</tip>
<simpara>En résumé, <emphasis role="strong">pour Node</emphasis>, <emphasis role="strong">tout fichier&#160;<literal>.js</literal> est un module</emphasis>.
Le mécanisme d&#8217;import et d&#8217;export est basé sur des chemins de fichiers.
Si on n&#8217;utilise pas de chemin, Node pense que l&#8217;on fait
référence à un <link linkend="modules-builtin">module de base</link> ou à un
<link xl:href="../chapter-05/index.xml#modules">module&#160;<literal>npm</literal></link>
(<link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>).</simpara>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Modules CommonJS</title>
<simpara><indexterm>
<primary>module</primary><secondary>CommonJS</secondary>
</indexterm>
<indexterm>
<primary>CommonJS</primary>
</indexterm>
<indexterm>
<primary>CommonJS (type de module)</primary>
</indexterm>
Le mécanisme de modules implémenté dans Node est basé sur la
spécification <emphasis>CommonJS</emphasis>, à peu de choses près.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="http://www.commonjs.org/specs/modules/1.0/">www.commonjs.org/specs/modules/1.0/</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="require">
<title>Aller plus loin avec <literal>require()</literal></title>
<simpara><indexterm>
<primary>module</primary><secondary>require()</secondary>
</indexterm>
<indexterm>
<primary>require()</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>require()</secondary>
</indexterm>
<indexterm>
<primary>require()</primary>
</indexterm></simpara>
<simpara>Lorsqu&#8217;on fait appel à la fonction <literal>require()</literal>, Node effectue les actions suivantes&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Résout le chemin vers le module en question.</simpara>
</listitem>
<listitem>
<simpara>Lit du fichier.</simpara>
</listitem>
<listitem>
<simpara>Interprète le code.</simpara>
</listitem>
<listitem>
<simpara>Exécute le code.</simpara>
</listitem>
<listitem>
<simpara>Retourne la valeur de <literal>module.exports</literal>.</simpara>
</listitem>
</orderedlist>
<simpara>L&#8217;utilisation de <literal>require()</literal> est synchrone et bloquante.
Si l&#8217;exécution du code dans le module chargé prend du temps
– code lent, accès à une ressource distante&#160;– le temps de chargement
du module sera affecté.</simpara>
<simpara><literal>require()</literal> permet de charger trois types de modules&#160;:</simpara>
<variablelist>
<varlistentry>
<term>Fichiers relatifs au module actuel</term>
<listitem>
<simpara><literal>require('./module.js')</literal> cherche le fichier <literal>module.js</literal> dans le répertoire courant.
<literal>require('../module.js')</literal> cherche <literal>module.js</literal> dans le répertoire parent.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Modules Node de base</term>
<listitem>
<simpara>Ils sont disponibles avec chaque installation de Node.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Modules&#160;<literal>npm</literal></term>
<listitem>
<simpara>Ils sont disponibles avec une étape d&#8217;installation supplémentaire
(<link xl:href="../chapter-05/index.xml">chapitre 5</link>).
<indexterm>
<primary>module</primary><secondary>npm</secondary>
</indexterm>
<indexterm>
<primary>npm</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><emphasis role="strong">Node met les modules en cache</emphasis>.
Si on inclut deux fois le même module, le deuxième import ira directement
à la dernière étape de la liste d&#8217;actions.
Cela implique aussi que si le module modifie une de ses variables privée,
cette modification affectera le deuxième import.</simpara>
<simpara>Voici un module illustrant une variable privée et une variable exportée&#160;:</simpara>
<formalpara>
<title>modules/increment.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let counter = 0;                      <co xml:id="CO137-1"/>

const increment = () =&gt; ++counter;

module.exports = increment;           <co xml:id="CO137-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO137-1">
<para>Variable privée.</para>
</callout>
<callout arearefs="CO137-2">
<para><literal>increment</literal> est rendue publique à cet endroit&#160;– la fonction incrémente la variable privée <literal>counter</literal>.</para>
</callout>
</calloutlist>
<simpara>Nous allons importer ce module par deux fois, dans deux variables différentes.</simpara>
<formalpara>
<title>modules/double-import.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const first = require('./increment.js');
const second = require('./increment.js');

console.log(first());   <co xml:id="CO138-1"/>
console.log(first());   <co xml:id="CO138-2"/>
console.log(second());  <co xml:id="CO138-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO138-1">
<para>Affiche&#160;<literal>1</literal>.</para>
</callout>
<callout arearefs="CO138-2">
<para>Affiche&#160;<literal>2</literal>.</para>
</callout>
<callout arearefs="CO138-3">
<para>Affiche&#160;<literal>1</literal> ou&#160;<literal>3</literal>&#160;?</para>
</callout>
</calloutlist>
<simpara>Quel est le verdict à votre avis&#160;?
Rien ne vaut une vérification, quitte à remettre en question
notre avis initial&#160;:</simpara>
<screen>$ node modules/double-import.js
1
2
3</screen>
<simpara>Il faut garder cette information en tête lorsqu&#8217;on importe un module.
Ce mécanisme se transforme en atout afin de partager
une variable entre plusieurs modules.
Il est pratique dans le cas d&#8217;un cache de données ou d&#8217;une configuration partagée.</simpara>
<simpara>Enfin, plusieurs <emphasis role="strong">problèmes</emphasis> sont susceptibles d&#8217;apparaître lors du chargement d&#8217;un module&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Le chemin vers le module est erroné&#160;;</simpara>
</listitem>
<listitem>
<simpara>Le module contient une erreur de syntaxe.</simpara>
</listitem>
</itemizedlist>
<simpara>Node lance alors une <link linkend="errors">exception</link> et le programme s&#8217;arrête aussitôt.
<indexterm>
<primary>erreur</primary><secondary>exception</secondary>
</indexterm>
<indexterm>
<primary>exception</primary>
</indexterm></simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module <quote>modules</quote></title>
<simpara>L&#8217;intégralité des variables, fonctions et classes du module <literal>modules</literal>
est documentée sur le site web du projet Node.
La documentation contient des informations à jour et qui ne sont pas
forcément listées dans cet ouvrage.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/modules.html">nodejs.org/docs/latest-v10.x/api/modules.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>module</primary><secondary>modules</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>modules</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>module CommonJS</secondary>
</indexterm>
<indexterm>
<primary>module CommonJS</primary>
</indexterm></simpara>
</section>
<section xml:id="esm">
<title>Le futur : les modules ECMAScript</title>
<simpara><indexterm>
<primary>module</primary><secondary>ECMAScript</secondary>
</indexterm>
<indexterm>
<primary>ECMAScript</primary>
</indexterm>
<indexterm>
<primary>ECMAScript</primary><secondary>(type de module)</secondary>
</indexterm>
<indexterm>
<primary>(type de module)</primary>
</indexterm></simpara>
<simpara>Pendant que le mécanisme de modules de Node montait en puissance,
les navigateurs web étaient en attente d&#8217;une solution native.
La spécification des modules ECMAScript a été validée en&#160;2013,
mais les navigateurs ont tardé à en implémenter le mécanisme&#160;:
en&#160;2017 pour la plupart.
C&#8217;est le cas du navigateur web Chrome et de
sa <link xl:href="../chapter-01/index.xml#v8">machine virtuelle&#160;V8</link>.</simpara>
<warning>
<title><phrase role="RemarquePreTitre">Attention</phrase> Fonctionnalité expérimentale</title>
<simpara>Si la syntaxe des modules ECMAScript est standardisée,
ce n&#8217;est pas encore aussi stable du côté de&#160;Node.</simpara>
<simpara>Les modules ECMAScript sont suffixés de l&#8217;extension <literal>.mjs</literal>
et nécessitent l&#8217;utilisation de l'<link linkend="options">option de démarrage</link>
<literal>--experimental-modules</literal>.</simpara>
</warning>
<simpara>Reprenons l&#8217;exemple <literal>modules/increment.js</literal> pour le
transformer en module ECMAScript.</simpara>
<formalpara>
<title>modules/increment.mjs</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let counter = 0;

export default () =&gt; ++counter;           <co xml:id="CO139-1"/>
export const reset = () =&gt; counter = 0;   <co xml:id="CO139-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO139-1">
<para>Export par défaut.</para>
</callout>
<callout arearefs="CO139-2">
<para>Export nommé.</para>
</callout>
</calloutlist>
<simpara>La syntaxe <literal>export</literal> sert à exporter des variables.
Elle se combine avec <literal>import</literal>&#160;:
<indexterm>
<primary>instruction</primary><secondary>export</secondary>
</indexterm>
<indexterm>
<primary>export</primary>
</indexterm>
<indexterm>
<primary>instruction</primary><secondary>import</secondary>
</indexterm>
<indexterm>
<primary>import</primary>
</indexterm></simpara>
<formalpara>
<title>modules/ecmascript.mjs</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import increment from './increment.js';     <co xml:id="CO140-1"/>

console.log(increment());</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO140-1">
<para>On n&#8217;importe ici que la valeur par défaut.</para>
</callout>
</calloutlist>
<simpara>Il ne nous reste maintenant plus qu&#8217;à exécuter notre script <literal>.mjs</literal>
pour observer le résultat.
On notera l&#8217;utilisation de <literal>--experimental-modules</literal>&#160;:
<indexterm>
<primary>Node.js</primary><secondary>--experimental-modules (option de démarrage)</secondary>
</indexterm>
<indexterm>
<primary>--experimental-modules (option de démarrage)</primary>
</indexterm></simpara>
<screen>$ node --experimental-modules modules/ecmascript.mjs
(node:35074) ExperimentalWarning: The ESM module loader is experimental.
1</screen>
<simpara>Reprenons cet exemple pour importer plusieurs exports d&#8217;un coup&#160;:</simpara>
<formalpara>
<title>modules/ecmascript-multiple.mjs</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import increment, {reset} from './increment.mjs'; <co xml:id="CO141-1"/>

increment();
console.log(increment());

reset();                                          <co xml:id="CO141-2"/>
console.log(increment());</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO141-1">
<para>On importe la valeur par défaut, ainsi qu&#8217;une valeur nommée&#160;– c&#8217;est particulièrement pratique pour sélectionner avec finesse ce que l&#8217;on veut utiliser d&#8217;un module.</para>
</callout>
<callout arearefs="CO141-2">
<para>La fonction <literal>reset()</literal> remet le compteur à&#160;zéro.</para>
</callout>
</calloutlist>
<simpara>On notera au passage qu&#8217;on utilise la
<link xl:href="../chapter-03/index.xml#object-destructuring">décomposition d&#8217;objet</link>
pour extraire un export nommé depuis un module ECMAScript.</simpara>
<screen>$ node --experimental-modules modules/ecmascript-multiple.mjs
(node:35074) ExperimentalWarning: The ESM module loader is experimental.
2
1</screen>
<simpara>La fonction <literal>reset()</literal> a bien remis le compteur à zéro entre-temps.
Objectif accompli&#160;!</simpara>
<simpara>Résumons les différences notables avec le mécanisme de modules&#160;Node&#160;:
<indexterm>
<primary>module</primary><secondary>CommonJS</secondary>
</indexterm>
<indexterm>
<primary>CommonJS</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>ECMAScript</secondary>
</indexterm>
<indexterm>
<primary>ECMAScript</primary>
</indexterm>
<indexterm>
<primary>instruction</primary><secondary>import</secondary>
</indexterm>
<indexterm>
<primary>import</primary>
</indexterm>
<indexterm>
<primary>instruction</primary><secondary>export</secondary>
</indexterm>
<indexterm>
<primary>export</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>require()</secondary>
</indexterm>
<indexterm>
<primary>require()</primary>
</indexterm></simpara>
<itemizedlist>
<listitem>
<simpara>Tous les appels à <literal>import</literal> doivent se faire en début de fichier.</simpara>
</listitem>
<listitem>
<simpara>On ne peut pas utiliser <literal>import</literal> de manière dynamique
(dans un <literal>if &#8230;&#8203; else</literal> par exemple).</simpara>
</listitem>
<listitem>
<simpara>On peut exporter une variable par défaut et plusieurs variables nommées.</simpara>
</listitem>
<listitem>
<simpara>Il est possible d&#8217;importer des modules Node depuis un module ECMAScript&#160;–
l&#8217;inverse n&#8217;est pas&#160;vrai.</simpara>
</listitem>
<listitem>
<simpara>Les fichiers doivent être suffixés par&#160;<literal>.mjs</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>Ce dernier point est le plus embêtant car il ralentit l&#8217;interopérabilité
entre les scripts destinés au développement web <emphasis>front-end</emphasis> et les scripts&#160;Node.</simpara>
<simpara>L&#8217;histoire nous dira si les modalités s&#8217;assoupliront avec le temps.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">npm</phrase> Module&#160;esm</title>
<simpara>Le <link xl:href="../chapter-05/index.xml#modules">module&#160;<literal>npm</literal></link>&#160;<literal>esm</literal>
(<phrase role="URL"><link xl:href="https://npmjs.com/esm">npmjs.com/esm</link></phrase>) a pris le parti de déblayer le chemin
de l&#8217;interopérabilité.
Il suffit de le charger avant de démarrer un script Node,
peu importe son mécanisme de chargement de modules&#160;:
<literal>esm</literal> rend le chargement des modules totalement transparent.
<indexterm>
<primary>module npm</primary><secondary>esm</secondary>
</indexterm>
<indexterm>
<primary>esm</primary>
</indexterm></simpara>
<screen>$ node -r esm modules/ecmascript.js
1
$ node -r esm modules/ecmascript.mjs
1</screen>
<simpara>Pour en savoir plus sur l&#8217;option&#160;<literal>-r</literal>, rendez-vous
dans la section <quote><link linkend="require">Précharger un module</link></quote>.</simpara>
</tip>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Modules ECMAScript</title>
<simpara>L&#8217;intégralité des fonctionnalités des modules ECMAScript
est documentée sur le site web du projet Node.
La documentation contient des informations à jour et qui ne sont pas
forcément listées dans cet ouvrage.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/esm.html">nodejs.org/docs/latest-v10.x/api/esm.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>module</primary><secondary>modules</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>modules</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>module ECMAScript</secondary>
</indexterm>
<indexterm>
<primary>module ECMAScript</primary>
</indexterm></simpara>
</section>
</section>
<section xml:id="errors">
<title>S&#8217;en sortir quand ça ne se passe pas comme&#160;prévu</title>
<simpara><indexterm>
<primary>erreur</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>erreur (voir erreur)</secondary>
</indexterm>
<indexterm>
<primary>erreur (voir erreur)</primary>
</indexterm></simpara>
<simpara>On fait toutes et tous des erreurs.
Notre code va forcément mener à des plantages applicatifs.
La nature des causes varie et affecte notre lecture des messages d&#8217;erreur.</simpara>
<simpara>Cette section a pour intention de nous aider à prendre confiance dans ce qu&#8217;on
voit et de piocher l&#8217;information qui va nous aider à résoudre le problème.</simpara>
<section xml:id="une_erreur_est_nichée_dans_notrecode">
<title>Une erreur est nichée dans notre&#160;code</title>
<simpara><indexterm>
<primary>erreur</primary><secondary>de syntaxe</secondary>
</indexterm>
<indexterm>
<primary>de syntaxe</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>SyntaxError</secondary>
</indexterm>
<indexterm>
<primary>SyntaxError</primary>
</indexterm></simpara>
<simpara>Il y a deux familles d&#8217;erreurs dans du code ECMAScript&#160;: celles de syntaxe
et celles d&#8217;exécution.</simpara>
<simpara>Dans tous les cas, Node lance une exception complétée d&#8217;une trace d&#8217;erreur.
Le but est de comprendre où l&#8217;interpréteur se prend les pieds dans le tapis
et quel est le chemin parcouru au sein du code pour y parvenir.</simpara>
<simpara>Commençons avec une erreur de syntaxe&#160;:</simpara>
<screen>$ node <emphasis role="marked">syntax-error.js</emphasis>
console.log(<emphasis role="marked">'oups j'</emphasis>ai fait une erreur de guillemets);
            ^^^^^^^^

<emphasis role="marked">SyntaxError</emphasis>: <emphasis role="marked">missing ) after argument list</emphasis>
    at new Script (vm.js:74:7)
    at createScript (vm.js:246:10)
    at Object.runInThisContext (vm.js:298:10)</screen>
<simpara><emphasis role="strong">Une erreur de syntaxe est immédiate</emphasis>.
Node la détecte lorsqu&#8217;il <emphasis>parse</emphasis> notre code.</simpara>
<simpara>Dans l&#8217;exemple précédent, Node indique qu&#8217;il manque une parenthèse après le
deuxième guillemet, car c&#8217;est le symbole que l&#8217;interpréteur attend.
En effet, le guillemet indique une intention incorrecte&#160;: on ne veut pas qu&#8217;il
signifie la fin de la chaîne, mais qu&#8217;il représente un caractère apostrophe dans
la chaîne.</simpara>
<simpara>La correction à entreprendre ne sera pas d&#8217;ajouter une parenthèse après le
guillemet mais bien de l&#8217;échapper en le préfixant d&#8217;un caractère&#160;<literal>\</literal>.
Node l&#8217;interprétera alors correctement.</simpara>
<simpara>Penchons-nous à présent sur les erreurs provoquées lorsque le code est exécuté&#160;:
<indexterm>
<primary>erreur</primary><secondary>d&#8217;exécution</secondary>
</indexterm>
<indexterm>
<primary>d&#8217;exécution</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>ReferenceError</secondary>
</indexterm>
<indexterm>
<primary>ReferenceError</primary>
</indexterm></simpara>
<screen>$ node process/exit-error.js
console.log(<emphasis role="marked">jenexistepas</emphasis>);
            ^
<emphasis role="marked">ReferenceError</emphasis>: <emphasis role="marked">jenexistepas</emphasis> <emphasis role="marked">is not defined</emphasis>
    at Object.&lt;anonymous&gt; (/.../chapter-04/examples/process/<emphasis role="marked">exit-error.js</emphasis>:<emphasis role="marked">5</emphasis>:13)
    at Module._compile (module.js:643:30)</screen>
<simpara>Le marqueur <literal>+^+</literal>&#160;indique l&#8217;emplacement où le problème est rencontré.
La ligne en-dessous documente le type d&#8217;erreur (<literal>ReferenceError</literal>)
en précisant ce qui n&#8217;est pas défini (la variable <literal>jenexistepas</literal>).
La notation <literal>exit-error.js:5:13</literal> indique que l&#8217;origine de l&#8217;erreur
se trouve à la <emphasis>ligne&#160;5</emphasis> du fichier <literal>exit-error.js</literal>.</simpara>
<simpara>Pour y remédier, il faut vérifier si on appelle bien la bonne variable ou la
créer avec la valeur attendue le cas échéant.</simpara>
<simpara>Les erreurs d&#8217;exécution sont pernicieuses&#160;; elles sont parfois
provoquées après le démarrage de l&#8217;application.
Dans l&#8217;exemple qui suit, l&#8217;une d&#8217;elles se produit deux secondes après le
démarrage du script&#160;:
<indexterm>
<primary>erreur</primary><secondary>XYZ is not a function</secondary>
</indexterm>
<indexterm>
<primary>XYZ is not a function</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>TypeError</secondary>
</indexterm>
<indexterm>
<primary>TypeError</primary>
</indexterm></simpara>
<screen>$ node runtime-error.js
setTimeout(() =&gt; console.log(<emphasis role="marked">secret.toLocaleUperCase()</emphasis>), 2000);
                                    ^
<emphasis role="marked">TypeError</emphasis>: <emphasis role="marked">secret.toLocaleUperCase</emphasis> <emphasis role="marked">is not a function</emphasis>
    at Timeout.setTimeout [as _onTimeout] (/.../chapter-04/examples/runtime-error.js:4:37)</screen>
<simpara>La notation <literal>runtime-error.js:4:37</literal> indique que l&#8217;origine de l&#8217;erreur
se trouve à la <emphasis>ligne&#160;4</emphasis> du fichier <literal>runtime-error.js</literal>, <emphasis>colonne&#160;37</emphasis>.
Le type d&#8217;erreur (<literal>TypeError</literal>) signifie qu&#8217;on cherche à manipuler une variable
de manière <emphasis role="strong">inattendue par rapport à son type</emphasis>.
Le message d&#8217;erreur nous précise qu&#8217;on appelle comme une fonction quelque chose
qui ne serait donc pas une fonction.</simpara>
<simpara>En effet, le nom de la fonction est mal orthographié et <literal>secret.toLocaleUperCase</literal>
vaut <literal>undefined</literal>.
L&#8217;erreur sera corrigée en utilisant <literal>secret.toLocaleUpperCase</literal>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">npm</phrase> Module eslint</title>
<simpara><indexterm>
<primary>module npm</primary><secondary>eslint</secondary>
</indexterm>
<indexterm>
<primary>eslint</primary>
</indexterm>
Le module&#160;<literal>npm</literal>&#160;<literal>eslint</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/eslint">npmjs.com/eslint</link></phrase>)
est un vérificateur syntaxique.
Son intention est de s&#8217;accorder sur le style d&#8217;écriture et d&#8217;éviter des
effets de bord du langage
qui causent des problèmes difficiles à déceler.</simpara>
<simpara>On apprendra à le configurer dans l'<link xl:href="../appendix-a/index.xml#eslint">annexe&#160;A</link>.</simpara>
</tip>
<simpara>Les erreurs affichées affichent des informations importantes.
Si elles n&#8217;indiquent pas forcément le chemin de résolution évident,
elles demandent qu&#8217;on cherche à en comprendre la nature.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">npm</phrase> Module pretty-error</title>
<simpara><indexterm>
<primary>module npm</primary><secondary>pretty-error</secondary>
</indexterm>
<indexterm>
<primary>pretty-error</primary>
</indexterm>
Le module&#160;<literal>npm</literal>&#160;<literal>pretty-error</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/pretty-error">npmjs.com/pretty-error</link></phrase>)
enjolive l&#8217;affichage des erreurs.
Il suffit de l&#8217;installer, de le <link linkend="require">précharger</link> et
d&#8217;exécuter un script pour en bénéficier.</simpara>
<screen>$ node -r pretty-error/start process/exit-error.js</screen>
</tip>
</section>
<section xml:id="une_erreur_est_retournée_dans_une_fonction_de_rappel">
<title>Une erreur est retournée dans une fonction de rappel</title>
<simpara><indexterm>
<primary>fonction</primary><secondary>de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>de rappel (callback)</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>dans une fonction de rappel (callback)</secondary>
</indexterm>
<indexterm>
<primary>dans une fonction de rappel (callback)</primary>
</indexterm></simpara>
<simpara>La fonction de rappel est un des moyens de retourner le résultat
d&#8217;une exécution asynchrone.
Par convention, le premier paramètre est une erreur.</simpara>
<simpara>Ce paramètre est nul (<literal>null</literal>) ou indéfini (<literal>undefined</literal>) lorsqu&#8217;il n&#8217;y a pas eu
d&#8217;erreurs en cours de route.
En revanche, il contient un objet d&#8217;erreur lorsque un problème s&#8217;est produit.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/callback.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {readFile} = require('fs');

readFile('je-n-existe-pas.txt', (error, content) =&gt; {
  if (error) {                                          <co xml:id="CO142-1"/>
    console.error(error.message);                       <co xml:id="CO142-2"/>
    console.error(error);                               <co xml:id="CO142-3"/>
    return;
  }

  console.log(String(content));
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO142-1">
<para>On vérifie la présence de l&#8217;erreur.</para>
</callout>
<callout arearefs="CO142-2">
<para><literal>error.message</literal> contient une raison textuelle de l&#8217;erreur.</para>
</callout>
<callout arearefs="CO142-3">
<para>Affichage de l&#8217;objet d&#8217;erreur complet.</para>
</callout>
</calloutlist>
<screen>$ node errors/callback.js
<emphasis role="marked">ENOENT</emphasis>: <emphasis role="marked">no such file or directory</emphasis>, open '<emphasis role="marked">je-n-existe-pas.txt</emphasis>'
{ Error: ENOENT: no such file or directory, open 'je-n-existe-pas.txt'
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: 'je-n-existe-pas.txt' }</screen>
<simpara><indexterm>
<primary>erreur</primary><secondary>structure de l&#8217;objet Error</secondary>
</indexterm>
<indexterm>
<primary>structure de l&#8217;objet Error</primary>
</indexterm>
<indexterm>
<primary>objet</primary><secondary>Error</secondary>
</indexterm>
<indexterm>
<primary>Error</primary>
</indexterm></simpara>
<simpara>L&#8217;erreur affichée nous précise que le fichier demandé n&#8217;existe pas.
Son code (<literal>ENOENT</literal>) signifie la même chose, mais a l&#8217;avantage d&#8217;être plus
facile à vérifier dans une condition.</simpara>
<simpara>L&#8217;objet <literal>error</literal> donné en argument de la fonction de rappel est utile
pour vérifier des détails précis de l&#8217;erreur et mieux interagir avec
au niveau du code.
Nous y retrouvons le type d&#8217;erreur (<literal>errno</literal>),
la référence vers la ressource concernée (<literal>path</literal>) et le nom de la fonction
système utilisée par Node pour accéder à la ressource (<literal>syscall</literal>).</simpara>
<simpara>La valeur et la signification du code d&#8217;erreur varie en fonction
du module Node employé à ce moment-là.
Le <link linkend="fs">module&#160;<literal>fs</literal></link> ne retourne pas les mêmes codes
que le <link linkend="http">module&#160;<literal>http</literal></link>.
Les appels à des ressources système retournent
<link linkend="errors.system">une variété de codes d&#8217;erreur</link>.</simpara>
<simpara>La décision nous appartient de savoir quoi faire quand l&#8217;erreur se produit.
Doit-on arrêter le programme avec <link linkend="process.exit"><literal>process.exit()</literal></link>&#160;?
Passe-t-on à la suite en considérant que ce n&#8217;est pas grave&#160;?
Ou peut-être que ce fichier était censé exister et qu&#8217;on devrait
informer l&#8217;équipe de maintenance et
afficher une page d&#8217;erreur côté utilisateur.</simpara>
</section>
<section xml:id="une_erreur_est_retournée_dans_une_promesse">
<title>Une erreur est retournée dans une promesse</title>
<simpara><indexterm>
<primary>promesse</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>dans une promesse</secondary>
</indexterm>
<indexterm>
<primary>dans une promesse</primary>
</indexterm>
<indexterm>
<primary>promesse</primary><secondary>catch()</secondary>
</indexterm>
<indexterm>
<primary>catch()</primary>
</indexterm></simpara>
<simpara>La gestion d&#8217;erreur des <link xl:href="../chapter-03/index.xml#promise">promesses</link>
s&#8217;effectue à l&#8217;aide de la fonction <literal>.catch()</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/promise.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

Promise.resolve('ok')
  .then((message) =&gt; {
    throw new Error('Oops !');                      <co xml:id="CO143-1"/>
  })
  .catch((error) =&gt; console.error(error));          <co xml:id="CO143-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO143-1">
<para>On génère une erreur dans notre code.</para>
</callout>
<callout arearefs="CO143-2">
<para>L&#8217;objet d&#8217;erreur est transmis à la prochaine occurrence de <literal>.catch()</literal>.</para>
</callout>
</calloutlist>
<simpara>Le contenu de l&#8217;erreur est accessible dans le seul argument de la fonction
de rappel passée à <literal>.catch()</literal>.</simpara>
<screen>$ node errors/promise.js
Error: <emphasis role="marked">Oops !</emphasis>
    at <emphasis role="marked">Promise.resolve</emphasis>.<emphasis role="marked">then</emphasis> (/.../chapter-04/examples/errors/<emphasis role="marked">promise.js</emphasis>:<emphasis role="marked">5</emphasis>:11)
    at process._tickCallback (internal/process/next_tick.js:178:7)</screen>
<simpara>La trace indique que l&#8217;erreur s&#8217;est produite à la <emphasis>ligne&#160;5</emphasis>,
dans la méthode <literal>.then()</literal> suite à l&#8217;utilisation de <literal>Promise.resolve()</literal>.</simpara>
<simpara>L&#8217;utilisation multiple de <literal>.catch()</literal> nous aide à gérer finement les erreurs&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/promise-chain.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

Promise.reject(new Error('Oops !'))
  .catch((error) =&gt; {
    console.error('Erreur : %s', error.message);  <co xml:id="CO144-1"/>
    return 'Aaah';                                <co xml:id="CO144-2"/>
  })
  .then((message) =&gt; console.log(message))        <co xml:id="CO144-3"/>
  .catch((error) =&gt; console.error(error));        <co xml:id="CO144-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO144-1">
<para>On gère l&#8217;erreur en la signalant dans le terminal.</para>
</callout>
<callout arearefs="CO144-2">
<para>La fonction de rappel a la possibilité de retourner un résultat.</para>
</callout>
<callout arearefs="CO144-3">
<para>Ce résultat est transmis à la prochaine occurrence de <literal>.then()</literal>.</para>
</callout>
<callout arearefs="CO144-4">
<para>Dans ce cas, le dernier <literal>.catch()</literal> n&#8217;affiche rien car nous n&#8217;avons pas rencontré d&#8217;autre erreur entre-temps.</para>
</callout>
</calloutlist>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/promise-no-catch.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

Promise.resolve('ok')
  .then(() =&gt; {
    throw new Error('Oops !');
  });</programlisting>
</para>
</formalpara>
<simpara>L&#8217;absence de <literal>.catch()</literal> provoque un plantage applicatif et le délenchement
de l'<link linkend="process.on">événement de processus</link> <literal>unhandledRejection</literal>&#160;:</simpara>
<screen>$ node errors/promise-no-catch.js
(node:27412) <emphasis role="marked">UnhandledPromiseRejectionWarning</emphasis>: Error: Oops !
    at <emphasis role="marked">Promise.resolve</emphasis>.<emphasis role="marked">then</emphasis> (/.../chapter-04/examples/errors/<emphasis role="marked">promise-no-catch.js</emphasis>:<emphasis role="marked">5</emphasis>:11)
    at process._tickCallback (internal/process/next_tick.js:178:7)</screen>
<simpara>L&#8217;affichage de <literal>UnhandledPromiseRejectionWarning</literal> indique que l&#8217;erreur s&#8217;est
produite mais qu&#8217;aucun <literal>.catch()</literal> ne l&#8217;a pris en charge.
Nous savons cependant que l&#8217;erreur s&#8217;est produite dans la méthode <literal>.then()</literal>
suite à l&#8217;utilisation de <literal>Promise.resolve()</literal>.
<indexterm>
<primary>erreur</primary><secondary>UnhandledPromiseRejectionWarning</secondary>
</indexterm>
<indexterm>
<primary>UnhandledPromiseRejectionWarning</primary>
</indexterm></simpara>
</section>
<section xml:id="une_erreur_est_retournée_dans_un_événement">
<title>Une erreur est retournée dans un événement</title>
<simpara><indexterm>
<primary>erreur</primary><secondary>dans un événement</secondary>
</indexterm>
<indexterm>
<primary>dans un événement</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>events</secondary><tertiary>EventEmitter.on('error')</tertiary>
</indexterm>
<indexterm>
<primary>events</primary><secondary>EventEmitter.on('error')</secondary>
</indexterm>
<indexterm>
<primary>EventEmitter.on('error')</primary>
</indexterm></simpara>
<simpara>Tout élément doté d&#8217;une méthode <literal>.on()</literal> a un événement spécial&#160;: <literal>.on('error')</literal>.
Il est appelé à chaque fois qu&#8217;une erreur se produit.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/on-error.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

process.emit('error', new Error('Oops !'));             <co xml:id="CO145-1"/>

process.on('error', (error) =&gt; console.error(error));   <co xml:id="CO145-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO145-1">
<para>On émet un événement <literal>error</literal> avec un objet <literal>Error</literal> précisant la nature du problème.</para>
</callout>
<callout arearefs="CO145-2">
<para>L&#8217;objet d&#8217;erreur est transmis à l&#8217;événement <literal>error</literal>.</para>
</callout>
</calloutlist>
<screen>$ node errors/on-error.js
Error: <emphasis role="marked">Oops !</emphasis>
    at Object.<emphasis role="marked">&amp;lt;anonymous&amp;gt;</emphasis> (/.../chapter-04/examples/errors/<emphasis role="marked">on-error.js</emphasis>:<emphasis role="marked">5</emphasis>:23)
    at Module._compile (internal/modules/cjs/loader.js:678:30)</screen>
<simpara>La trace d&#8217;erreur est similaire à celle des promesses et des fonctions de rappel.
Le message d&#8217;erreur précise le problème tandis que son origine (fichier, ligne)
nous indiquent quoi regarder pour mieux comprendre la cause.</simpara>
<simpara>Si une erreur est émise et si aucune fonction n&#8217;est à l&#8217;écoute,
l&#8217;événement <literal>uncaughtException</literal> est produit&#160;:
<indexterm>
<primary>erreur</primary><secondary>uncaughtException</secondary>
</indexterm>
<indexterm>
<primary>uncaughtException</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/on-error.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

process.emit('error', new Error('Oops !'));</programlisting>
</para>
</formalpara>
<screen>$ node errors/on-error-uncaught.js
events.js:167
      throw er; // <emphasis role="marked">Unhandled 'error'</emphasis> event
      ^

Error: Oops !
    at Object.<emphasis role="marked">&amp;lt;anonymous&amp;gt;</emphasis> (/.../chapter-04/examples/errors/<emphasis role="marked">on-error-uncaught.js</emphasis>:<emphasis role="marked">3</emphasis>:23)
    at Module._compile (internal/modules/cjs/loader.js:678:30)</screen>
<simpara>La section liée au <link linkend="events">module <literal>events</literal></link> explique plus en détail
la gestion des événements.
<indexterm>
<primary>module</primary><secondary>events</secondary>
</indexterm>
<indexterm>
<primary>events</primary>
</indexterm>
On les retrouve par exemple dans les modules <link linkend="http"><literal>http</literal></link>, <link linkend="stream"><literal>stream</literal></link>
et <link linkend="process"><literal>process</literal></link>.</simpara>
</section>
<section xml:id="errors.system">
<title>Une erreur est renvoyée par le système d&#8217;exploitation</title>
<simpara><indexterm>
<primary>erreur</primary><secondary>d&#8217;accès à une ressource du système d&#8217;exploitation</secondary>
</indexterm>
<indexterm>
<primary>d&#8217;accès à une ressource du système d&#8217;exploitation</primary>
</indexterm></simpara>
<simpara>L&#8217;accès à une ressource distante est plus complexe qu&#8217;il n&#8217;y paraît
car les erreurs sont de natures variées et sujettes à interprétation au cas par cas,
en fonction de notre intention et du contexte d&#8217;exécution.</simpara>
<simpara>Les erreurs système indiquent la raison du problème.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Erreurs couramment rencontrées</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Code erreur</entry>
<entry align="left" valign="top">Raison</entry>
<entry align="left" valign="top">Piste de résolution</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>EACCES</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Permission refusée : nous n&#8217;avons pas le droit d&#8217;accéder à cette ressource.</simpara></entry>
<entry align="left" valign="top"><simpara>Changer les permissions d&#8217;accès sans mettre en péril la sécurité.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>EADDRINUSE</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Adresse déjà utilisée : nous tentons de créer une ressource réseau alors qu&#8217;une
interface existe déjà à la même adresse.</simpara></entry>
<entry align="left" valign="top"><simpara>Vérifier l&#8217;origine du serveur déjà en place à cette adresse. Attribuer une autre adresse/port à la ressource réseau.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ECONNREFUSED</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource distante a refusé la connexion.</simpara></entry>
<entry align="left" valign="top"><simpara>Vérifier si c&#8217;est normal que la ressource distante soit inactive. Vérifier qu&#8217;on se connecte à la bonne ressource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ECONNRESET</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource distante a été interrompue en cours de route.</simpara></entry>
<entry align="left" valign="top"><simpara>Retenter la connexion. Vérifier la stabilité de la connexion réseau.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>EEXIST</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource à créer existe&#160;déjà.</simpara></entry>
<entry align="left" valign="top"><simpara>C&#8217;est un problème seulement si la ressource n&#8217;était pas censée exister au préalable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>EMFILE</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Trop de fichiers sont ouverts simultanément.</simpara></entry>
<entry align="left" valign="top"><simpara>Les systèmes d&#8217;exploitation peuvent travailler sur une quantité finie de fichiers. Peut-être que vous avez ouvert trop de fichiers en même temps. Fermer l&#8217;accès aux fichiers ouverts.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ENOENT</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Ressource inexistante.</simpara></entry>
<entry align="left" valign="top"><simpara>Vérifier que le chemin d&#8217;accès est correct. Inspecter la raison de l&#8217;inexistance de la ressource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>EPERM</literal></simpara></entry>
<entry align="left" valign="top"><simpara>L&#8217;opération n&#8217;est pas autorisée.</simpara></entry>
<entry align="left" valign="top"><simpara>Des droits d&#8217;administration sont nécessaires pour effectuer cette opération.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>EPIPE</literal></simpara></entry>
<entry align="left" valign="top"><simpara>L&#8217;accès à la ressource distante a été interrompu.</simpara></entry>
<entry align="left" valign="top"><simpara>Retenter l&#8217;opération.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ETIMEDOUT</literal></simpara></entry>
<entry align="left" valign="top"><simpara>L&#8217;opération a été annulée car la ressource distante a mis trop de temps pour aboutir.</simpara></entry>
<entry align="left" valign="top"><simpara>Retenter l&#8217;opération. Vérifier la disponibilité de la ressource distante. S&#8217;assurer que le volume demandé n&#8217;est pas trop important.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>erreur</primary><secondary>EACCES</secondary>
</indexterm>
<indexterm>
<primary>EACCES</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>EADDRINUSE</secondary>
</indexterm>
<indexterm>
<primary>EADDRINUSE</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>ECONNREFUSED</secondary>
</indexterm>
<indexterm>
<primary>ECONNREFUSED</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>EEXIST</secondary>
</indexterm>
<indexterm>
<primary>EEXIST</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>EMFILE</secondary>
</indexterm>
<indexterm>
<primary>EMFILE</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>ENOENT</secondary>
</indexterm>
<indexterm>
<primary>ENOENT</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>EPERM</secondary>
</indexterm>
<indexterm>
<primary>EPERM</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>EPIPE</secondary>
</indexterm>
<indexterm>
<primary>EPIPE</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>ETIMEDOUT</secondary>
</indexterm>
<indexterm>
<primary>ETIMEDOUT</primary>
</indexterm></simpara>
</section>
<section xml:id="le_programme_ne_se_termine_pas">
<title>Le programme ne se termine pas</title>
<simpara><indexterm>
<primary>erreur</primary><secondary>le programme ne se termine pas</secondary>
</indexterm>
<indexterm>
<primary>le programme ne se termine pas</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>timeout</secondary>
</indexterm>
<indexterm>
<primary>timeout</primary>
</indexterm></simpara>
<simpara>Il arrive qu&#8217;un programme ne se termine pas contrairement à nos attentes.
Il peut y avoir plusieurs raisons à cela&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Une ressource distante <emphasis role="strong">met du temps à répondre</emphasis>&#160;–
un <emphasis>timeout</emphasis> déclenchera une erreur (généralement sous&#160;30&#160;s).</simpara>
</listitem>
<listitem>
<simpara>Un traitement prend du temps.</simpara>
</listitem>
<listitem>
<simpara>Un <emphasis role="strong">événement est en cours d&#8217;écoute</emphasis>&#160;– typiquement un serveur web qui attend
des requêtes entrantes.</simpara>
</listitem>
<listitem>
<simpara>Une erreur n&#8217;a pas été capturée et perturbe les instructions suivantes.</simpara>
</listitem>
</itemizedlist>
<simpara>Il faudra inspecter le système pour en savoir plus et observer la
consommation mémoire et CPU du processus Node en question.</simpara>
<simpara>Peut-être qu&#8217;il faudra sonder le programme pour déceler le point de blocage.
L'<link linkend="inspect">inspecteur Node</link> est un outil particulièrement adapté à cet usage.
<indexterm>
<primary>Node.js</primary><secondary>inspecteur</secondary>
</indexterm>
<indexterm>
<primary>inspecteur</primary>
</indexterm></simpara>
<tip>
<title><phrase role="RemarquePreTitre">npm</phrase> Module debug</title>
<simpara><indexterm>
<primary>module npm debug</primary>
</indexterm>
Le module&#160;<literal>npm</literal>&#160;<literal>debug</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/debug">npmjs.com/debug</link></phrase>) affiche des
messages dans la console de manière conditionnelle.
Les messages s&#8217;affichent lorsque les variables d&#8217;environnement de notre choix
sont renseignées au démarrage de l&#8217;application.</simpara>
<simpara>On apprendra à le configurer dans l'<link xl:href="../appendix-a/index.xml#debug">annexe&#160;A</link>.</simpara>
</tip>
</section>
<section xml:id="deprecation">
<title>Une alerte de dépréciation s&#8217;affiche</title>
<simpara><indexterm>
<primary>erreur</primary><secondary>alerte de dépréciation</secondary>
</indexterm>
<indexterm>
<primary>alerte de dépréciation</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>DeprecationWarning</secondary>
</indexterm>
<indexterm>
<primary>DeprecationWarning</primary>
</indexterm></simpara>
<simpara>Un des objectifs de l&#8217;équipe développant Node est de maintenir
la stabilité de la plate-forme.
Certains de leurs choix de conception sont revisités en changeant
leur comportement ou en les retirant des modules de&#160;base.</simpara>
<simpara>Quand ce changement affecte notre code, une alerte de dépréciation s&#8217;affiche.
Par exemple&#160;:</simpara>
<formalpara>
<title>deprecation-warning.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const a = new Buffer(10);</programlisting>
</para>
</formalpara>
<screen>$ node deprecation-warning.js
(node:8130) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.</screen>
<simpara>Nous avons ainsi le temps de modifier notre code pour migrer
vers la nouvelle recommandation petit à petit.</simpara>
</section>
</section>
<section xml:id="les_différences_decmascript_entre_node_et_les_navigateursweb">
<title>Les différences d&#8217;ECMAScript entre Node et les navigateurs&#160;web</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>différence avec le JavaScript côté client</secondary>
</indexterm>
<indexterm>
<primary>différence avec le JavaScript côté client</primary>
</indexterm></simpara>
<simpara>Puisqu&#8217;on utilise du code ECMAScript avec Node et avec les navigateurs web,
qu&#8217;est-ce qui les distingue vraiment&#160;?</simpara>
<section xml:id="labsence_du_dom_et_des_variables_window_et_document">
<title>L&#8217;absence du DOM et des variables <literal>window</literal> et <literal>document</literal></title>
<simpara><indexterm>
<primary>variable globale</primary><secondary>window</secondary>
</indexterm>
<indexterm>
<primary>window</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>document</secondary>
</indexterm>
<indexterm>
<primary>document</primary>
</indexterm>
<indexterm>
<primary>variable globale</primary><secondary>process</secondary>
</indexterm>
<indexterm>
<primary>process</primary>
</indexterm>
<indexterm>
<primary>DOM (Document Object Model)</primary>
</indexterm></simpara>
<simpara>Dans Node, il n&#8217;est pas possible de faire appel aux variables <literal>window</literal>
et <literal>document</literal> (raccourci pour <literal>window.document</literal>).</simpara>
<simpara>Ces variables représentent respectivement la fenêtre/onglet et le document
HTML interprété par le navigateur web.
Les fonctions <literal>document.querySelector()</literal> et <literal>document.createElement()</literal>
relèvent du DOM (<emphasis>Document Object Model</emphasis>), une représentation JavaScript interactive
du document&#160;HTML.</simpara>
<simpara>L&#8217;équivalent de <literal>window</literal> pour Node serait la variable <link linkend="process"><literal>process</literal></link>&#160;:
elle décrit le processus exécutant notre code.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Variables globales</title>
<simpara>La documentation des variables globales est disponible sur le site officiel de Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/globals.html">nodejs.org/docs/latest-v10.x/api/globals.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="il_ny_a_pas_dinterface_graphique">
<title>Il n&#8217;y a pas d&#8217;interface graphique</title>
<simpara>Suite logique du point précédent&#160;: Node n&#8217;a pas d&#8217;interface graphique.
Le code exécuté n&#8217;affiche rien en tant que tel, à part les messages dirigés
vers la <link linkend="console">console</link>.</simpara>
<simpara>L'<link linkend="inspect">inspecteur Node</link> est un moyen de visualiser l&#8217;état interne
d&#8217;un script.</simpara>
<simpara>On peut toutefois construire des applications graphiques en ligne de commande
(<link xl:href="../chapter-08/index.xml">chapitre&#160;8</link>).</simpara>
</section>
<section xml:id="le_mécanisme_de_modules">
<title>Le mécanisme de modules</title>
<simpara><indexterm>
<primary>module</primary><secondary>CommonJS</secondary>
</indexterm>
<indexterm>
<primary>CommonJS</primary>
</indexterm></simpara>
<simpara>Pour l&#8217;instant, Node utilise un <link linkend="modules">mécanisme de modules</link> (CommonJS)
différent des modules ECMAScript des navigateurs.</simpara>
<simpara>La convergence vers les modules ECMAScript est en cours.
Il y a fort à parier qu&#8217;ils seront pris en charge nativement par Node dans une
version ultérieure.</simpara>
<simpara>Nous verrons au <link xl:href="../chapter-08/index.xml">chapitre&#160;9</link> comment utiliser
les modules Node dans les navigateurs.</simpara>
</section>
<section xml:id="linterfaçage_avec_le_système_dexploitation">
<title>L&#8217;interfaçage avec le système d&#8217;exploitation</title>
<simpara>Les fonctions ECMAScript spécifiques aux navigateurs sont liées
à la récupération d&#8217;informations (<literal>AJAX</literal>, <literal>fetch()</literal>),
à l&#8217;affichage (Canvas, WebGL, WebVR) ainsi qu&#8217;à la manipulation de
documents&#160;HTML.</simpara>
<simpara>Les fonctions ECMAScript fournies par les <link linkend="modules-builtin">modules Node</link>
sont liées à la gestion des ressources dont le système d&#8217;exploitation
se fait l&#8217;interface&#160;: fichiers&#160;(<link linkend="fs"><literal>fs</literal></link>),
réseau&#160;(<link linkend="http"><literal>http</literal></link>, <link linkend="net"><literal>net</literal></link>, <link linkend="dns"><literal>dns</literal></link>,
<link linkend="dgram"><literal>dgram</literal></link>), terminal&#160;(<link linkend="tty"><literal>tty</literal></link>, <link linkend="readline"><literal>readline</literal></link>)
et processus&#160;(<link linkend="process"><literal>process</literal></link>, <link linkend="child_process"><literal>child_process</literal></link>).</simpara>
</section>
<section xml:id="node_est_un_processus_système">
<title>Node est un processus système</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>interpréteur</secondary>
</indexterm>
<indexterm>
<primary>interpréteur</primary>
</indexterm></simpara>
<simpara>Le système d&#8217;exploitation crée un nouveau processus dès
qu&#8217;on exécute le programme <literal>node</literal>.
Il peut être de courte ou de longue durée, selon qu&#8217;il dure quelques secondes
ou un temps indéfini.</simpara>
<simpara>Le processus s&#8217;arrête en cas d&#8217;erreur, lorsqu&#8217;il n&#8217;y a plus d&#8217;opération
à effectuer ou en cas d&#8217;interruption volontaire.</simpara>
<simpara>Le code ECMAScript exécuté dans un navigateur dépasse rarement la durée
d&#8217;une session utilisateur, de quelques secondes à quelques heures.
En cas de problème, un rafraîchissement de la page remet à zéro son&#160;état.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Performances</phrase> Utilisation des&#160;CPU</title>
<simpara>Un processus Node est <emphasis>mono</emphasis> CPU.
Tous les autres processus système affectés à cette même CPU
se partageront une quantité finie de puissance.</simpara>
<simpara>Par exemple, si un processus Node partage la même CPU qu&#8217;une base de données
et si une requête gourmande s&#8217;exécute, la rapidité de notre application
en sera affectée.</simpara>
</note>
</section>
</section>
<section xml:id="options">
<title>Options utiles pour démarrer&#160;Node</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>options de démarrage</secondary>
</indexterm>
<indexterm>
<primary>options de démarrage</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>interpréteur</secondary>
</indexterm>
<indexterm>
<primary>interpréteur</primary>
</indexterm></simpara>
<simpara>L&#8217;exécutable <literal>node</literal> accepte plusieurs options afin de personnaliser
son comportement et l&#8217;affichage des résultats.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Exécutable&#160;node</title>
<simpara>La documentation de l&#8217;exécutable <literal>node</literal> est disponible sur le site officiel&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/cli.html">nodejs.org/docs/latest-v10.x/api/cli.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<section xml:id="print-eval">
<title>Afficher le résultat d&#8217;une expression, sans&#160;script</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>invite de commande (REPL)</secondary>
</indexterm>
<indexterm>
<primary>invite de commande (REPL)</primary>
</indexterm></simpara>
<simpara>L&#8217;interpréteur Node sait interpréter du code qu&#8217;on lui donne
via l&#8217;option&#160;<literal>-p</literal> (pour <emphasis>print</emphasis>, c&#8217;est-à-dire <emphasis>afficher</emphasis>).
Il affiche le résultat de l&#8217;expression ou détaille la <link linkend="errors">raison de l&#8217;erreur</link>.</simpara>
<simpara>J&#8217;utilise cette forme d&#8217;interaction pour obtenir un résultat rapide,
sans créer de nouveau fichier, par exemple, pour une opération mathématique&#160;:</simpara>
<screen>$ node -p '2 + 2'
4</screen>
<simpara>Toute expression ECMAScript valide est acceptée&#160;:</simpara>
<screen>$ node -p '"abc".toLocaleUpperCase()'
ABC</screen>
</section>
<section xml:id="options-require">
<title>Précharger un module</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>--require (option de démarrage)</secondary>
</indexterm>
<indexterm>
<primary>--require (option de démarrage)</primary>
</indexterm></simpara>
<simpara>L&#8217;option de démarrage <literal>--require</literal> charge le module indiqué avant le script&#160;Node.</simpara>
<screen>$ node --require ./print-exit.js url/intro.js</screen>
<simpara>Dans cet exemple, le <link linkend="modules">module <literal>print-exit.js</literal></link> sera chargé
avant <literal>url/intro.js</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>print-exit.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">process.on('exit', (code) =&gt; {
  const {filename} = process.mainModule;

  console.log(`${filename} : arrêt avec le code ${code}`);
});</programlisting>
</para>
</formalpara>
<simpara>Le chargement de ce module aura pour effet d&#8217;afficher un message
avec le chemin du fichier chargé et le <link linkend="process.exit">code de sortie</link>.</simpara>
<simpara>On peut appeler l&#8217;option <literal>--require</literal> plusieurs fois, ou son raccourci&#160;`-r`.</simpara>
<simpara>Ce mécanisme fonctionne très bien avec des
<link xl:href="../chapter-05/index.xml">modules&#160;<literal>npm</literal></link> conçus pour
rendre nos scripts <link linkend="esm">compatibles avec les modules ECMAScript</link>
ou pour <link linkend="pretty-error">simplifier les erreurs</link> affichées
lors d&#8217;un plantage applicatif, entre autres.</simpara>
</section>
<section xml:id="inspect">
<title>Inspecter notre code avec Google&#160;Chrome</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>inspecteur</secondary>
</indexterm>
<indexterm>
<primary>inspecteur</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>--inspect (option de démarrage)</secondary>
</indexterm>
<indexterm>
<primary>--inspect (option de démarrage)</primary>
</indexterm></simpara>
<simpara>Node accepte deux options <literal>--inspect</literal> et <literal>--inspect-brk</literal>.
Elles exposent un protocole de débogage auquel on peut se connecter
avec le navigateur Chrome.</simpara>
<screen>$ node --inspect-brk print-text.js texte --uppercase
Debugger listening on ws://127.0.0.1:9229/ddd9bbfd-09ac-4426-a53e-c8abe4fc36da
For help see https://nodejs.org/en/docs/inspector</screen>
<simpara>Cette commande lance un de nos exemples de la section
sur le <link linkend="process">module&#160;<literal>process</literal></link>.
L&#8217;option <literal>--inspect-brk</literal> démarre l&#8217;inspecteur
et met aussitôt son exécution en pause.</simpara>
<simpara>Le logo de Node s&#8217;affiche dans les outils de développement de Chrome&#160;:</simpara>
<figure>
<title>Outils de développement Google Chrome avec l&#8217;icône de l&#8217;inspecteur&#160;Node</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/chrome-devtools.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>chrome devtools</phrase></textobject>
</mediaobject>
</figure>
<simpara>Un clic sur le logo Node ouvre une nouvelle fenêtre, outillée pour inspecter
ce qui se passe dans notre script.</simpara>
<figure>
<title>Inspecteur en pause sur la première ligne de notre script&#160;Node</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/inspector-paused.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>inspector paused</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Outils de développement</phrase> Point d&#8217;arrêt</title>
<simpara>Un point d&#8217;arrêt se crée en cliquant sur le numéro de ligne souhaité.</simpara>
<simpara>Le débogueur se mettra en pause à chaque fois que le chemin d&#8217;exécution
de l&#8217;interpréteur atteindra cette ligne.</simpara>
<simpara>La valeur des variables ECMAScript courantes s&#8217;affichent au survol de la souris
ou en interagissant avec la console.</simpara>
</tip>
<figure>
<title>Inspecteur en pause, avec un point d&#8217;arrêt marqué sur une des lignes du&#160;script</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/inspector-breakpoint.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>inspector breakpoint</phrase></textobject>
</mediaobject>
</figure>
<simpara>C&#8217;est le moment idéal pour placer un ou plusieurs point(s) d&#8217;arrêt.</simpara>
<simpara>Un clic sur le bouton&#160;<guibutton>&#9654;</guibutton> met alors fin à la pause.
Le script s&#8217;exécutera jusqu&#8217;à l&#8217;épuisement des instructions
ou jusqu&#8217;au <emphasis>prochain point d&#8217;arrêt</emphasis>.</simpara>
<figure>
<title>Inspecteur en pause, suite à la rencontre d&#8217;un point d&#8217;arrêt</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/inspector-breakpoint-in.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>inspector breakpoint in</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;option <literal>--inspect</literal> est adaptée à des processus de longue durée,
comme un serveur HTTP.
L&#8217;option <literal>--inspect-brk</literal> est adaptée à des processus de courte durée et qui
se termineraient avant qu&#8217;on ait le temps de jeter un œil au contenu.</simpara>
</section>
<section xml:id="options-v8">
<title>Ajuster les options de compatibilité et de traçabilité de&#160;V8</title>
<simpara><indexterm>
<primary>V8 (machine virtuelle)</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>--v8-options (option de démarrage)</secondary>
</indexterm>
<indexterm>
<primary>--v8-options (option de démarrage)</primary>
</indexterm></simpara>
<simpara>Node repose sur la <link xl:href="../chapter-01/index.xml#v8">machine virtuelle&#160;V8</link>
pour interpréter nos instructions ECMAScript et en expose différentes options
pour affiner son comportement en fonction
de notre environnement.</simpara>
<simpara>L&#8217;intégralité des options de configuration de&#160;V8 s&#8217;affiche
avec l&#8217;option <literal>--v8-options</literal>&#160;:</simpara>
<screen>$ node --v8-options</screen>
<simpara>Il n&#8217;y a pas de meilleure configuration qui conviendrait à chacun de nos usages.
Le mieux reste encore d&#8217;explorer les options possibles, les différents concepts
et d&#8217;ajuster les valeurs offrant le meilleur rapport stabilité/performances.</simpara>
<variablelist>
<title>Options notables de V8</title>
<varlistentry>
<term><literal>--optimize_for_size</literal></term>
<listitem>
<simpara>Optimise le fonctionnement interne pour utiliser moins de mémoire,
au détriment de la vitesse.
Idéal pour l&#8217;exécution de scripts Node sur des environnements à faible mémoire,
comme les Raspberry&#160;Pi.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--mem_old_space_limit</literal></term>
<listitem>
<simpara>Détermine la quantité de mémoire maximale qu&#8217;un processus Node pourra utiliser.
Idéal pour le confiner sur des environnements à faible mémoire.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--gc_inverval</literal></term>
<listitem>
<simpara>Détermine le nombre de cycles entre chaque déclenchement du ramasse-miettes.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--expose_gc</literal></term>
<listitem>
<simpara>Expose les fonctions de manipulation du ramasse-miettes.
Idéal si vous souhaitez contrôler finement l&#8217;optimisation de la mémoire.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--stack_trace_limit</literal></term>
<listitem>
<simpara>Change la limite du nombre de lignes affichées dans une trace d&#8217;erreur
(10 par défaut).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--trace-deopt</literal></term>
<listitem>
<simpara>Signale les optimisations invalidées par&#160;V8.
Les portions de code indiquées gagneraient à être retravaillées, pour rendre
uniforme le type de variables passées en arguments par exemple.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--trace-gc</literal></term>
<listitem>
<simpara>Signale les moments où le ramasse-miettes se déclenche.
On peut ainsi mieux en comprendre les raisons.</simpara>
</listitem>
</varlistentry>
</variablelist>
<note>
<title><phrase role="RemarquePreTitre">Notion</phrase> Ramasse-miettes (<emphasis>garbage collector</emphasis>)</title>
<simpara>Le ramasse-miettes est un mécanisme informatique qui libère les objets inutilisés
de la mémoire.
Il est déclenché de manière cyclique par la
<link xl:href="../chapter-01/index.xml#v8">machine virtuelle&#160;V8</link>.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Ramasse-miettes_(informatique">fr.wikipedia.org/wiki/Ramasse-miettes_(informatique</link>)</phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara>Les options préfixées par <literal>harmony</literal> activent la prise en charge
de fonctionnalités ECMAScript qui ne font pas encore partie du standard.
Elles sont encore au stade expérimental.</simpara>
</section>
</section>
<section xml:id="conclusion_4">
<title>Conclusion</title>
<simpara>Les modules de base sont un élément différenciant entre Node et le langage
ECMAScript.
Ils nous interfacent avec le système d&#8217;exploitation pour naviguer dans les fichiers,
ouvrir des connexions réseau et télécharger des fichiers distants.
<emphasis role="strong">Bien les connaître nous aidera au quotidien</emphasis>.</simpara>
<simpara>L&#8217;organisation des modules CommonJS&#160;– voire des modules ECMAScript&#160;– est l&#8217;autre
élément majeur de ce chapitre.
Avec cela, nous rendons notre <emphasis role="strong">code modulaire, réutilisable et donc testable</emphasis>.</simpara>
<simpara>Toutes ces connaissances seront largement réutilisées dans les chapitres suivants.
Elles nous aideront à mieux choisir nos modules&#160;<literal>npm</literal> dans le chapitre&#160;5,
à structurer une application web au chapitre&#160;7, à créer de belles applications
en ligne de commande au chapitre&#160;8 et même à partager du code entre Node
et les navigateurs au chapitre&#160;9.</simpara>
</section>
</chapter>
<chapter xml:id="jouer_avecnpm">
<title>Jouer avec&#160;npm</title>
<simpara>Savoir naviguer dans la richesse de l&#8217;écosystème&#160;<literal>npm</literal> est une force pour
la durabilité de nos projets.
Ces modules nous aident à façonner un outillage résilient et adapté à chacun
de nos projets.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Créer un fichier <literal>package.json</literal></simpara>
</listitem>
<listitem>
<simpara>Installer un module&#160;<literal>npm</literal></simpara>
</listitem>
<listitem>
<simpara>Outiller un projet avec les scripts&#160;<literal>npm</literal></simpara>
</listitem>
<listitem>
<simpara>Anatomie du fichier <literal>package.json</literal></simpara>
</listitem>
<listitem>
<simpara>Quelques commandes pour aller plus loin</simpara>
</listitem>
<listitem>
<simpara>Questions et mystères autour de&#160;<literal>npm</literal></simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Ce chapitre va nous permettre d&#8217;y voir plus clair du côté des <link linkend="modules">modules <literal>npm</literal></link>.
Nous apprendrons comment identifier des modules de confiance, les installer et
les mettre à jour sans casser nos projets.</simpara>
<simpara>Nous nous tournerons ensuite du côté des <link linkend="scripts">scripts&#160;<literal>npm</literal></link> pour créer
un outillage sur mesure et de qualité.
Grâce à eux, nous serons en mesure d&#8217;automatiser les tâches répétitives à notre
rythme.</simpara>
<simpara>Enfin, nous découvrirons des commandes moins connues de&#160;<literal>npm</literal>.
Elles pourrons nous faciliter la vie ou nous débloquer quand ça ne va pas.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node&#160;v10</emphasis>
et <emphasis role="strong">npm&#160;v6</emphasis>.
Ce sont les versions stables recommandées en&#160;2019.</simpara>
</note>
<simpara>Le mot <emphasis>npm</emphasis> correspond à trois concepts différents que nous aborderons
tout au long de ce chapitre&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>l'<emphasis role="strong">exécutable</emphasis> <literal>npm</literal>&#160;– un programme écrit en ECMAScript&#160;;</simpara>
</listitem>
<listitem>
<simpara>le <emphasis role="strong">registre</emphasis> <literal>npm</literal>&#160;– une plate-forme de distribution de modules&#160;;</simpara>
</listitem>
<listitem>
<simpara>un <emphasis role="strong">module</emphasis> <literal>npm</literal>&#160;– en général installé depuis le registre et utilisable
avec les fonctions <literal>require()</literal> et <literal>import</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>Je préciserai toujours si l&#8217;utilisation de <literal>npm</literal> fait référence
à l'<emphasis>exécutable</emphasis>, au <emphasis>registre</emphasis> ou à un <emphasis>module</emphasis>.</simpara>
<simpara>L&#8217;exécutable <literal>npm</literal> est installé par défaut avec Node.
Vérifions la version installée en ouvrant un terminal
et en écrivant la commande suivante&#160;:</simpara>
<screen>$ npm --version
6.4.0</screen>
<simpara>Si un message s&#8217;affiche en indiquant que <literal>npm</literal> n&#8217;est pas un programme reconnu,
veuillez vous référer au <link linkend="../chapter-02/index.adoc">chapitre&#160;2</link> et
vérifier que Node v10 est bien installé.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal></title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-05
$ cd $(nodebook dir chapter-05)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les instructions d&#8217;installation pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<section xml:id="cli">
<title>Créer un fichier <literal>package.json</literal></title>
<simpara><indexterm>
<primary>configuration</primary><secondary>package.json</secondary>
</indexterm>
<indexterm>
<primary>package.json</primary>
</indexterm>
<indexterm>
<primary>package.json</primary>
</indexterm></simpara>
<simpara>La présence d&#8217;un fichier <literal>package.json</literal> devient nécessaire dès qu&#8217;un projet
inclut un <link linkend="modules">module&#160;<literal>npm</literal></link> ou a vocation à être publié pour être repris
dans un autre projet&#160;– que ce soit dans un cadre professionnel ou personnel.</simpara>
<simpara>Le fichier <literal>package.json</literal> est la clé de voûte servant à reproduire l&#8217;installation
du projet et créer un <link linkend="scripts">outillage autonome</link>.
La commande <literal>npm init</literal> génère un tel fichier.
<indexterm>
<primary>npm</primary><secondary>init</secondary>
</indexterm>
<indexterm>
<primary>init</primary>
</indexterm>
L&#8217;utilisation de l&#8217;option <literal>--yes</literal> va plus vite car elle nous évite
de répondre aux questions&#160;:</simpara>
<screen>$ npm init --yes</screen>
<simpara>Si aucun fichier <literal>package.json</literal> n&#8217;existe dans le répertoire courant,
il sera créé avec des valeurs par défaut&#160;– le nom du module correspondra
au nom du répertoire courant.
Si ce fichier existait déjà, il sera alors préservé et son contenu sera affiché&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<screen>{
  "name": "nodebook.chapter-05",
  "private": true,
  "version": "1.0.0",
  "main": "./examples/index.js",
  "description": "",
  "scripts": {
    "lint": "eslint ./examples",
    "print-args": "node examples/print-args.js",
    "start": "micro examples/app.js",
    "test": "mocha examples/tests.js",
    "pretest": "npm run lint"
  },
  "engines": {
    "node": "^10.0.0"
  },
  "author": "Thomas Parisot (https://oncletom.io)",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/oncletom/nodebook/issues"
  },
  "homepage": "https://github.com/oncletom/nodebook",
  "dependencies": {
    "cowsay": "^1.3.1",
    "lodash": "^4.17.11",
    "micro": "^9.3.3"
  },
  "devDependencies": {
    "eslint": "^5.9.0",
    "mocha": "^5.2.0"
  }
}</screen>
</para>
</formalpara>
<simpara>Nous reviendrons sur la structure du fichier.
En attendant, focalisons-nous sur les opérations courantes comme
l&#8217;installation de modules.</simpara>
</section>
<section xml:id="modules">
<title>Installer des modules&#160;npm</title>
<simpara><indexterm>
<primary>npm</primary><secondary>install &lt;module&gt;</secondary>
</indexterm>
<indexterm>
<primary>install &lt;module&gt;</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>npm</secondary>
</indexterm>
<indexterm>
<primary>npm</primary>
</indexterm></simpara>
<simpara>Le mécanisme des modules est documenté dans
le <link xl:href="../chapter-04/index.xml#modules">chapitre&#160;4</link>.
Les fonctions <literal>require()</literal> et <literal>import</literal> chargent nos propres modules mais aussi
les modules de base, installés avec Node.
Les modules <literal>npm</literal> sont <emphasis role="strong">complémentaires et téléchargeables</emphasis> à l&#8217;aide
de l&#8217;exécutable <literal>npm</literal>.</simpara>
<simpara>Cette section va nous aider à comprendre ce qui se passe pendant les phases
d&#8217;installation, de mise à jour et de désinstallation des modules <literal>npm</literal>.</simpara>
<section xml:id="depuis_le_registre_npm">
<title>Depuis le registre npm</title>
<simpara><indexterm>
<primary>npm</primary><secondary>registre principal</secondary>
</indexterm>
<indexterm>
<primary>registre principal</primary>
</indexterm></simpara>
<simpara>Le registre&#160;<literal>npm</literal> (<phrase role="URL"><link xl:href="https://npmjs.com">npmjs.com</link></phrase>) est l&#8217;hébergement principal
des modules ECMAScript, pour Node et le front-end.</simpara>
<simpara>La commande <literal>npm install</literal> s&#8217;utilise directement quand nous connaissons déjà
le nom d&#8217;un module à installer,
par exemple  <emphasis>cowsay</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/cowsay">npmjs.com/cowsay</link></phrase>)&#160;:
<indexterm>
<primary>module npm</primary><secondary>cowsay</secondary>
</indexterm>
<indexterm>
<primary>cowsay</primary>
</indexterm></simpara>
<screen>$ npm install cowsay
+ cowsay@1.3.1
added 10 packages from 3 contributors in 1.667s
found 0 vulnerabilities</screen>
<simpara>Le module est installé et prêt à être inclus dans un script.
Nous constatons aussi que le champ <literal>dependencies</literal> est apparu
dans le fichier <literal>package.json</literal>&#160;:
<indexterm>
<primary>package.json</primary><secondary>dépendance</secondary>
</indexterm>
<indexterm>
<primary>dépendance</primary>
</indexterm></simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "dependencies": {
    "cowsay": "^1.3.1"
  }
}</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exécutable <literal>npm</literal> tient les comptes des modules installés à notre demande.
Cela nous sera utile pour <link linkend="install">installer les modules sur un autre ordinateur</link>.
Nous reviendrons plus tard sur la notation des versions
– on en reparlera sous le nom de <emphasis>versions sémantiques</emphasis> (<emphasis>Semantic Versionning</emphasis>).
<indexterm>
<primary>version sémantique</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>cow.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {say} = require('cowsay');
const message = say({ text: 'Bonjour !' });

console.log(message);</programlisting>
</para>
</formalpara>
<simpara>L&#8217;inclusion d&#8217;un module&#160;<literal>npm</literal> est identique
à celle d&#8217;un <link xl:href="../chapter-04/index.xml#modules-builtin">module de&#160;base</link>.
<indexterm>
<primary>module</primary>
</indexterm></simpara>
<simpara>Regardons le résultat sans plus tarder&#160;:</simpara>
<screen>$ node cow.js
___________
&lt; Bonjour ! &gt;
-----------
       \   ^__^
        \  (oo)\_______
           (__)\       )\/\
               ||----w |</screen>
<simpara>Le module&#160;<literal>npm</literal> nous a permis d&#8217;utiliser du code sans avoir à le
créer, alors qu&#8217;il n&#8217;était pas fourni par la plate-forme Node.</simpara>
<simpara>Maintenant que nous savons installer un module&#160;<literal>npm</literal>, nous pouvons en chercher
d&#8217;autres et comprendre comment les utiliser.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Où sont stockés les modules&#160;npm ?</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>node_modules (répertoire)</secondary>
</indexterm>
<indexterm>
<primary>node_modules (répertoire)</primary>
</indexterm>
Les modules <literal>npm</literal> et leurs dépendances sont stockés dans un répertoire
<literal>node_modules</literal>, situé au même niveau que le fichier <literal>package.json</literal>.</simpara>
</note>
<note>
<title><phrase role="RemarquePreTitre">Sous le capot</phrase> Ce que fait l&#8217;exécutable&#160;npm pendant l&#8217;installation</title>
<simpara><indexterm>
<primary>npm</primary><secondary>fonctionnement</secondary>
</indexterm>
<indexterm>
<primary>fonctionnement</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>install &lt;module&gt;</secondary>
</indexterm>
<indexterm>
<primary>install &lt;module&gt;</primary>
</indexterm>
L&#8217;exécutable <literal>npm</literal> effectue un bon nombre d&#8217;actions lorsqu&#8217;on valide la
commande <literal>npm install cowsay</literal>&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Il interroge le registre <phrase role="URL">npmjs.com</phrase> pour obtenir des informations sur le module demandé.</simpara>
</listitem>
<listitem>
<simpara>Il détermine que <literal>1.3.1</literal> est la version la plus récente.</simpara>
</listitem>
<listitem>
<simpara>Il télécharge une archive compressée (<literal>.tar.gz</literal>) qui contient tous les fichiers de la version <literal>1.3.1</literal>.</simpara>
</listitem>
<listitem>
<simpara>L&#8217;archive est décompressée dans le répertoire <literal>node_modules</literal>.</simpara>
</listitem>
<listitem>
<simpara>Les dépendances sont elles aussi téléchargées puis décompressées dans le répertoire <literal>node_modules</literal>.</simpara>
</listitem>
<listitem>
<simpara>Le module <literal>cowsay</literal> est inscrit dans le fichier <literal>package.json</literal>.</simpara>
</listitem>
</orderedlist>
</note>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Dépendances de développement</title>
<simpara><indexterm>
<primary>package.json</primary><secondary>dépendance de développement</secondary>
</indexterm>
<indexterm>
<primary>dépendance de développement</primary>
</indexterm>
Il existe une variante de la commande pour distinguer les dépendances
spécifiques à l&#8217;outillage du projet.
Rendez-vous dans la section <quote><link linkend="install.dev">Dépendances de développement</link></quote>
pour en savoir plus.</simpara>
</note>
</section>
<section xml:id="registry">
<title>Trouver son bonheur dans le registre&#160;npm</title>
<simpara><indexterm>
<primary>npm</primary><secondary>search</secondary>
</indexterm>
<indexterm>
<primary>search</primary>
</indexterm></simpara>
<simpara>Le registre <literal>npm</literal> (<phrase role="URL"><link xl:href="https://npmjs.com">npmjs.com</link></phrase>) fourmille de modules
– de simples fonctions, des bibliothèques ou des frameworks complets.
Ils couvrent un spectre d&#8217;usages très larges&#160;: accès aux bases de données,
frameworks web, outils <emphasis>front-end</emphasis>, utilitaires de test,
compression de données, paiement bancaire, des frameworks mobiles, etc.</simpara>
<simpara>Cherchons une bibliothèque pour nous connecter à une base de données MySQL ou MariaDB.
Tapez <quote>mysql</quote> dans le champ de recherche du registre&#160;<literal>npm</literal> ou saisissez
directement l&#8217;URL menant aux résultats de cette recherche
(<phrase role="URL"><link xl:href="https://npmjs.com/search?q=mysql">npmjs.com/search?q=mysql</link></phrase>)&#160;:</simpara>
<figure>
<title>Extrait des résultats d&#8217;une recherche de modules&#160;npm avec le mot-clé <quote>mysql</quote></title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/npm-registry-search.png"/>
</imageobject>
<textobject><phrase>npm registry search</phrase></textobject>
</mediaobject>
</figure>
<simpara>Les résultats sont triés par pertinence&#160;– un mélange entre popularité,
qualité et maintenance des projets.</simpara>
<simpara>Je trouve qu&#8217;il est difficile de décider uniquement en regardant la liste.
J&#8217;ai tendance à ouvrir un onglet par module pour en lire la documentation.
Prenons le cas du module <emphasis>mysql2</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/mysql2">npmjs.com/mysql2</link></phrase>) justement&#160;:</simpara>
<figure>
<title>Extrait de la page consacrée au module&#160;npm&#160;mysql2</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/npm-package-mysql2.png"/>
</imageobject>
<textobject><phrase>npm package mysql2</phrase></textobject>
</mediaobject>
</figure>
<simpara>Plusieurs éléments de cette page tendent à me rassurer
et m&#8217;aident à juger de la robustesse de ce module&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>les badges colorés qui affichent le statut d&#8217;exécution des tests&#160;;</simpara>
</listitem>
<listitem>
<simpara>une introduction de <emphasis role="strong">documentation claire et concise</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>un <emphasis role="strong">nombre de téléchargements</emphasis> en progrès réguliers&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;utilisation avec des <link xl:href="../chapter-03/index.xml#promise">promesses</link>&#160;;</simpara>
</listitem>
<listitem>
<simpara>le nombre important de modules dépendants&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">je reconnais une personne</emphasis> qui contribue du code de qualité&#160;– Rebecca&#160;Turner (<phrase role="URL"><link xl:href="https://npmjs.com/~iarna">npmjs.com/~iarna</link></phrase>).</simpara>
</listitem>
</itemizedlist>
<simpara>J&#8217;ai un doute quand je lis <phrase role="Menu">108&#160;issues</phrase> et <phrase role="Menu">13&#160;pull&#160;requests</phrase>.
Dans ce cas-là, je me dis que les personnes qui maintiennent le projet ne sont
pas forcément très réactives.</simpara>
<simpara>Cependant, il y a suffisamment d&#8217;indicateurs au vert pour l&#8217;installer avec
<literal>npm install mysql2</literal> puis l&#8217;essayer dans un script.
<indexterm>
<primary>npm</primary><secondary>install &lt;module&gt;</secondary>
</indexterm>
<indexterm>
<primary>install &lt;module&gt;</primary>
</indexterm></simpara>
<simpara>Le module <emphasis>mysql-libmysqlclient</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/mysql-libmysqlclient">npmjs.com/mysql-libmysqlclient</link></phrase>)
ne me fait pas du tout le même effet.</simpara>
<figure>
<title>Extrait de la page consacrée au module&#160;npm&#160;mysql-libmysqlclient</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/npm-package-mysql-libmysqlclient.png"/>
</imageobject>
<textobject><phrase>npm package mysql libmysqlclient</phrase></textobject>
</mediaobject>
</figure>
<simpara>La page du module ne met pas d&#8217;exemple simple à comprendre et fait référence
à des versions de Node antédiluviennes.
Rien n&#8217;indique qu&#8217;il ne peut pas fonctionner avec Node&#160;v10,
mais la présence du mot <phrase role="Menu">binding</phrase> m&#8217;évoque que l&#8217;installation du module
compile un programme écrit dans un autre langage
– en l&#8217;occurrence, <emphasis>libmysqlclient</emphasis>.
<indexterm>
<primary>Node.js</primary><secondary>binding</secondary>
</indexterm>
<indexterm>
<primary>binding</primary>
</indexterm></simpara>
<simpara>Point positif&#160;: il n&#8217;y a que <phrase role="Menu">14&#160;issues</phrase> GitHub.
C&#8217;est peu, mais l&#8217;une d&#8217;entre elles est intitulée
<phrase role="Menu">Does not work with any modern version of Node.js</phrase>.
Cela confirme mes doutes&#160;; c&#8217;est suffisant pour que je passe mon chemin.</simpara>
<simpara>En continuant plus loin dans la liste des résultats de recherche,
je suis tombé sur le module nommé <emphasis>falchion</emphasis>.</simpara>
<figure>
<title>Extrait de la page consacrée au module&#160;npm&#160;falchion</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/npm-package-falchion.png"/>
</imageobject>
<textobject><phrase>npm package falchion</phrase></textobject>
</mediaobject>
</figure>
<simpara>Il n&#8217;y a qu&#8217;une seule version du module, qui date de quatre années
avec une documentation qui tient sur une ligne.
Il y a très peu de chances que nous puissions en faire quelque chose.</simpara>
<simpara>Voici au final ce que j&#8217;estime être le plus important pour me faire
une idée d&#8217;un module et décider de l&#8217;installer ou&#160;non&#160;:
<indexterm>
<primary>npm</primary><secondary>choisir un module</secondary>
</indexterm>
<indexterm>
<primary>choisir un module</primary>
</indexterm></simpara>
<itemizedlist>
<listitem>
<simpara>Présence d&#8217;une <emphasis role="strong">documentation</emphasis>&#160;– je peux me faire une idée des fonctionnalités
et de la complexité d&#8217;utilisation du module.</simpara>
</listitem>
<listitem>
<simpara>Des badges d'<emphasis role="strong">intégration continue</emphasis>&#160;– je sais ainsi qu&#8217;il y a des tests
unitaires qui sont exécutés automatiquement avant que le module soit publié.</simpara>
</listitem>
<listitem>
<simpara>Le nombre de <emphasis role="strong">téléchargements</emphasis>&#160;– je sais si d&#8217;autres personnes s&#8217;en servent
en espérant qu&#8217;ils remontent les problèmes rencontrés.</simpara>
</listitem>
<listitem>
<simpara>Le nombre de <emphasis role="strong">versions</emphasis>&#160;– cela me donne une idée de la maturité du projet
et de la réactivité aux demandes de la communauté.</simpara>
</listitem>
</itemizedlist>
<simpara>Ce sont des <emphasis role="strong">critères subjectifs</emphasis>.
Un module est parfois populaire par ancienneté alors qu&#8217;il existe des alternatives,
plus légères ou plus simples d&#8217;utilisation.
C&#8217;est le cas du module <emphasis>moment.js</emphasis>, plus populaire que <emphasis>date-fns</emphasis>&#160;– que je préfère.</simpara>
<simpara>Il y a aussi des modules dans lesquels j&#8217;ai une confiance quasi-aveugle.
Ils sont publiés par les personnes présentes dans cette liste non&#160;exhaustive&#160;:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Personnes ayant écrit des modules npm à suivre</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><link xl:href="https://npmjs.com/~dougwilson">dougwilson</link></simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://github.com/jdalton">jdalton</link></simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://npmjs.com/~sindresorhus">sindresorhus</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link xl:href="https://npmjs.com/~feross">feross</link></simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://github.com/jshttp">jshttp</link></simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://npmjs.com/~substack">substack</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link xl:href="https://npmjs.com/~fgribreau">fgribreau</link></simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://npmjs.com/~mbostock">mbostock</link></simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://npmjs.com/~zkat">zkat</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link xl:href="https://npmjs.com/~iarna">iarna</link></simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://github.com/nodejitsu">nodejitsu</link></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link xl:href="https://npmjs.com/~isaacs">isaacs</link></simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://npmjs.com/~rwaldron">rwaldron</link></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Sélection de modules npm</title>
<simpara>J&#8217;ai compilé une liste de modules utiles pour mieux démarrer
dans vos projets.
Vous la trouverez en <link xl:href="../appendix-a/index.xml">annexe&#160;A</link>.</simpara>
</tip>
</section>
<section xml:id="uninstall">
<title>Désinstaller un module</title>
<simpara><indexterm>
<primary>npm</primary><secondary>uninstall</secondary>
</indexterm>
<indexterm>
<primary>uninstall</primary>
</indexterm>
<indexterm>
<primary>package.json</primary>
</indexterm></simpara>
<simpara>L&#8217;utilisation de la commande <literal>npm uninstall</literal> supprime en toute sécurité
un module&#160;<literal>npm</literal> et les fichiers qu&#8217;il a installés.
La commande le retire ensuite de la liste des dépendances
du fichier <literal>package.json</literal>.</simpara>
<screen>$ npm uninstall cowsay
removed 10 packages in 1.963s
found 0 vulnerabilities</screen>
<simpara>Le module <emphasis>cowsay</emphasis> n&#8217;est plus installé.
Que se passe-t-il si nous exécutons à nouveau un l&#8217;exemple <literal>cow.js</literal>&#160;?</simpara>
<screen>$ node cow.js
internal/modules/cjs/loader.js:596
    throw err;
    ^

Error: Cannot find module 'cowsay'</screen>
<simpara><indexterm>
<primary>erreur</primary><secondary>Cannot find module '&#8230;&#8203;'</secondary>
</indexterm>
<indexterm>
<primary>Cannot find module '&#8230;&#8203;'</primary>
</indexterm></simpara>
<simpara>Le chargement du module a échoué car Node n&#8217;arrive pas à le trouver
– et c&#8217;est normal.</simpara>
<simpara>Nous devons relancer la commande <literal>npm install cowsay</literal>
pour que le script fonctionne à nouveau.</simpara>
</section>
<section xml:id="install">
<title>Depuis un fichier <literal>package.json</literal></title>
<simpara><indexterm>
<primary>npm</primary><secondary>install</secondary>
</indexterm>
<indexterm>
<primary>install</primary>
</indexterm>
<indexterm>
<primary>package.json</primary>
</indexterm></simpara>
<simpara>Jusqu&#8217;à présent, nous avons installé des modules en les ajoutant un par&#160;un.
La procédure est légèrement différente quand nous installons le projet de zéro
ou quand le fichier <literal>package.json</literal> a été mis à jour par un·e collègue, par exemple.</simpara>
<simpara>L&#8217;exemple suivant illustre la remise à zéro des modules
utilisés en exemple de ce chapitre&#160;:</simpara>
<screen>$ cd $(nodebook dir {chapter-id} --root)
$ rm -rf node_modules
$ npm install
added 164 packages from 583 contributors in 4.781s
found 0 vulnerabilities</screen>
<simpara>Nous nous sommes positionnés dans un répertoire qui contient
un fichier <literal>package.json</literal> puis nous avons supprimé tout ce qui aurait pu
être installé.</simpara>
<simpara>La commande <literal>npm install</literal> s&#8217;utilise de manière systématique quand
nous récupérons du code avec Git pour la première fois (<literal>git clone</literal>)
ou après une mise à jour, par exemple avec <literal>git pull</literal>.</simpara>
<simpara>L&#8217;exécutable <literal>npm</literal> vérifie que la correspondance est bien respectée
entre ce qui est installé dans le répertoire <literal>node_modules</literal> et
les modules listés dans le fichier <literal>package.json</literal>.
La commande <literal>npm install</literal> installe, met à jour et retire les modules nécessaires.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> npm&#160;clean-install (npm ci)</title>
<simpara><indexterm>
<primary>npm</primary><secondary>clean-install</secondary>
</indexterm>
<indexterm>
<primary>clean-install</primary>
</indexterm>
La commande <literal>npm clean-install</literal> réinstalle un projet de zéro de manière prédictible.
<link linkend="ci">Nous y reviendrons plus loin</link>.</simpara>
</tip>
</section>
<section xml:id="install.version">
<title>Spécifier une version</title>
<simpara><indexterm>
<primary>npm</primary><secondary>install &lt;module&gt;</secondary>
</indexterm>
<indexterm>
<primary>install &lt;module&gt;</primary>
</indexterm></simpara>
<simpara>Par défaut, l&#8217;exécutable <literal>npm</literal> installe la dernière version d&#8217;un module.
Nous avons la liberté d&#8217;en installer d&#8217;autres qui sont antérieures.
C&#8217;est pratique quand des modules arrêtent de prendre en charge
des navigateurs web ou des versions de Node alors que nous les utilisons encore.</simpara>
<simpara>Nous allons nous servir du module <emphasis>lodash</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/lodash">npmjs.com/lodash</link></phrase>)
pour illustrer nos allées et venues entre différentes versions.
À l&#8217;heure où j&#8217;écris ces lignes, sa version la plus récente est la <literal>4.17.11</literal>.
C&#8217;est ce que rapporte le résultat de la commande <literal>npm install lodash</literal>&#160;:</simpara>
<screen>$ npm install lodash
+ lodash@4.17.11</screen>
<simpara>L&#8217;utilisation du caractère <literal>@</literal> conjointement à un numéro de version précise
la version à installer&#160;:</simpara>
<screen>$ npm install lodash@3.0.0
+ lodash@3.0.0</screen>
<simpara>Nous avons installé une version précise, mais il y a sûrement des mises à jour
qui ont suivi pour corriger des bogues.
Le problème est que, à ce stade, nous ne connaissons pas le numéro de version
à spécifier.
Idéalement, je préférerais installer la version la plus récente de la série&#160;3.
Il se trouve que l&#8217;exécutable <literal>npm</literal> sait le faire pour nous et sans effort&#160;:</simpara>
<screen>$ npm install lodash@3
+ lodash@<emphasis role="marked">3.10.1</emphasis></screen>
<simpara>Nous pouvons faire la même chose avec les versions les plus récentes de
la série&#160;3 et de la série&#160;2.2&#160;:</simpara>
<screen>$ npm install lodash@3
+ lodash@3.10.1
$ npm install lodash@2.2
+ lodash@2.2.1</screen>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Connaître toutes les versions d&#8217;un module</title>
<simpara><indexterm>
<primary>npm</primary><secondary>view</secondary>
</indexterm>
<indexterm>
<primary>view</primary>
</indexterm>
La <link linkend="view">commande <literal>npm view</literal></link> affiche les informations d&#8217;un module&#160;<literal>npm</literal>
directement depuis notre terminal.
Elle affiche toutes les versions publiées avec l&#8217;argument <literal>versions</literal>&#160;:</simpara>
<screen>$ npm view lodash <emphasis role="marked">versions</emphasis>
[ '0.1.0',
  '0.2.0',
  ...
  '1.0.0',
  '1.0.1',
  '1.0.2',
  ... ]</screen>
</tip>
<simpara>Revenons à la version la plus récente en réutilisant la
<link linkend="install">commande d&#8217;installation</link> abordée auparavant&#160;:
<indexterm>
<primary>npm</primary><secondary>install &lt;module&gt;</secondary>
</indexterm>
<indexterm>
<primary>install &lt;module&gt;</primary>
</indexterm></simpara>
<screen>$ npm install lodash
+ lodash@2.4.2</screen>
<simpara>Quelque chose d&#8217;inattendu s&#8217;est produit&#160;: la version la plus récente
de la série&#160;2 a été installée au lieu de la version&#160;4.17.11.
Nous trouverons un élément de réponse dans le fichier <literal>package.json</literal>&#160;:
<indexterm>
<primary>package.json</primary><secondary>dépendance</secondary>
</indexterm>
<indexterm>
<primary>dépendance</primary>
</indexterm></simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "dependencies": {
    "cowsay": "^1.3.1",
    "lodash": "<emphasis role="marked">^2.4.2</emphasis>"
  }
}</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exécutable <literal>npm</literal> respecte la version indiquée dans le fichier <literal>package.json</literal>
si aucune autre n&#8217;est précisée dans la commande.
Si la dépendance n&#8217;est pas listée, alors l&#8217;exécutable <literal>npm</literal> installe la version
la plus récente.</simpara>
<simpara>L&#8217;étiquette <literal>latest</literal> explicite notre envie d&#8217;installer la version
la plus récente et sans tenir compte du fichier <literal>package.json</literal>&#160;:
<indexterm>
<primary>latest (étiquette de version) (voir npm install &lt;module&gt;)</primary>
</indexterm></simpara>
<screen>$ npm install lodash@<emphasis role="marked">latest</emphasis>
+ lodash@4.17.11</screen>
<simpara>Nous sommes désormais en mesure de choisir entre différentes versions
d&#8217;un module et de manière plus ou moins&#160;fine.</simpara>
<simpara>Nous prendrons le temps d&#8217;explorer le mécanisme de numérotation des versions
dans la section suivante afin de mieux comprendre ce qui est renseigné
dans le fichier <literal>package.json</literal>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Connaître les étiquettes d&#8217;un module</title>
<simpara><indexterm>
<primary>npm</primary><secondary>view</secondary>
</indexterm>
<indexterm>
<primary>view</primary>
</indexterm>
La <link linkend="view">commande <literal>npm view</literal></link> va à nouveau nous aider.
Elle affiche toutes les versions publiées avec l&#8217;argument <literal>dist-tags</literal>&#160;:</simpara>
<screen>$ npm view lodash dist-tags
{ <emphasis role="marked">latest</emphasis>: '4.17.11' }</screen>
<simpara>Ce mécanisme d&#8217;étiquette sert de raccourci pour associer un numéro de version
(qui change) à un intitulé (qui reste dans le temps).</simpara>
</tip>
</section>
<section xml:id="semver">
<title>Comprendre les numéros de versions (Semantic Versioning)</title>
<simpara><indexterm>
<primary>version sémantique</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>install &lt;module&gt;</secondary>
</indexterm>
<indexterm>
<primary>install &lt;module&gt;</primary>
</indexterm></simpara>
<simpara>Les numéros de versions ont été utilisés de deux manières dans les
sections précédentes&#160;: avec l&#8217;exécutable <literal>npm</literal> et en observant la liste
de dépendances dans le fichier <literal>package.json</literal>.</simpara>
<simpara>L&#8217;exécutable <literal>npm</literal> découpe un numéro de version en trois parties&#160;:
<emphasis>majeure</emphasis>, <emphasis>mineure</emphasis> et <emphasis>patch</emphasis>.
Pour le numéro de version <literal>1.2.3</literal>, <literal>1</literal> indique la version majeure,
<literal>2</literal> la version mineure et <literal>3</literal> la version <emphasis>patch</emphasis>.</simpara>
<simpara>Si nous devions mettre à jour <literal>lodash@2.2.0</literal>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Vers <literal>lodash@2.2.1</literal>&#160;: mise à jour patch&#160;– des bogues sont corrigés.</simpara>
</listitem>
<listitem>
<simpara>Vers <literal>lodash@2.4.2</literal>&#160;: mise à jour mineure&#160;– des fonctionnalités sont ajoutées,
corrigées ou modifiées sans affecter notre code.</simpara>
</listitem>
<listitem>
<simpara>Vers <literal>lodash@4.17.11</literal>&#160;: mise à jour majeure&#160;– des fonctionnalités sont
modifiées, remaniées ou supprimées et peuvent casser notre code qui repose dessus.</simpara>
</listitem>
</itemizedlist>
<simpara>Une mise à jour majeure demande de lire attentivement la documentation du module
pour comprendre le volume de travail à fournir avant de monter en version.
La mise à jour mineure peut occasionnellement demander du travail selon
l&#8217;interprétation des développeurs de modules <literal>npm</literal>.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Différentes manières d&#8217;exprimer des versions</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="11.1111*"/>
<colspec colname="col_2" colwidth="22.2222*"/>
<colspec colname="col_3" colwidth="33.3333*"/>
<colspec colname="col_4" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Symbole</entry>
<entry align="left" valign="top">Version</entry>
<entry align="left" valign="top">Représentation alternative</entry>
<entry align="left" valign="top">Représentation étendue</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara><literal>1.0.0</literal></simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>^</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>^1.0.0</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>1.x.x</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>&gt;=1.0.0 &lt;2.0.0</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>~</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>~1.0.0</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>1.0.x</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>&gt;=1.0.0 &lt;1.1.0</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>*</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>*</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>x.x.x</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>&gt;=0.0.1</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>version sémantique</primary><secondary>syntaxe</secondary>
</indexterm>
<indexterm>
<primary>syntaxe</primary>
</indexterm></simpara>
<simpara>Je ne pense pas qu&#8217;il soit nécessaire de toujours choisir la dernière version majeure.
Les versions <emphasis>patch</emphasis> et mineures sont plus importantes à mes yeux,
car elles contiennent des corrections dont bénéficient nos applications.
<indexterm>
<primary>version sémantique</primary><secondary>patch</secondary>
</indexterm>
<indexterm>
<primary>patch</primary>
</indexterm></simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Calculateur de version</title>
<simpara>L&#8217;outil en ligne <phrase role="URL"><link xl:href="https://semver.npmjs.com">semver.npmjs.com</link></phrase> sert à tester
la syntaxe des versions sémantiques avec de véritables modules&#160;<literal>npm</literal>.</simpara>
</tip>
</section>
<section xml:id="update">
<title>Mises à jour</title>
<simpara>Nous avons appris à installer des modules <literal>npm</literal> dans les versions de notre choix
et à les réinstaller depuis la liste contenue dans le fichier <literal>package.json</literal>.
Comment savoir s&#8217;il faut les mettre à&#160;jour&#160;?</simpara>
<simpara>L&#8217;utilisation combinée des commandes <literal>npm outdated</literal> et <literal>npm update</literal> va
nous permettre d&#8217;y arriver.</simpara>
<simpara>Commençons par installer d&#8217;anciennes versions des modules <emphasis>lodash</emphasis> et <emphasis>cowsay</emphasis>&#160;:</simpara>
<screen>$ npm install lodash@2.0.0 cowsay@1.0.0</screen>
<simpara>La commande <literal>npm outdated</literal> affiche les dépendances qui ne sont pas à&#160;jour&#160;:
<indexterm>
<primary>npm</primary><secondary>outdated</secondary>
</indexterm>
<indexterm>
<primary>outdated</primary>
</indexterm></simpara>
<screen>$ npm outdated
Package  Current  Wanted   Latest  Location
cowsay     1.0.0   1.3.1    1.3.1  nodebook.chapter-05
lodash     2.0.0   2.4.2  4.17.11  nodebook.chapter-05</screen>
<simpara>Le numéro de version affiché dans la colonne <literal>Wanted</literal> est celui qui sera atteint
avec la commande <literal>npm update</literal>.
<indexterm>
<primary>npm</primary><secondary>update</secondary>
</indexterm>
<indexterm>
<primary>update</primary>
</indexterm></simpara>
<screen>$ npm update
+ cowsay@1.3.1
+ lodash@2.4.2
added 7 packages and updated 3 packages in 2.717s</screen>
<simpara>Observons ce qui a changé dans les résultats de la commande <literal>npm outdated</literal>&#160;:
<indexterm>
<primary>npm</primary><secondary>outdated</secondary>
</indexterm>
<indexterm>
<primary>outdated</primary>
</indexterm></simpara>
<screen>$ npm outdated
Package  Current  Wanted   Latest  Location
lodash     2.4.2   2.4.2  4.17.11  nodebook.chapter-05</screen>
<simpara>Les modules <emphasis>cowsay</emphasis> et <emphasis>lodash</emphasis> ont été mis à jour au plus sûr et seul le
deuxième est désormais listé&#160;; il peut rester en l&#8217;état si nous n&#8217;avons pas le temps
de rendre notre code compatible avec ses changements.</simpara>
<simpara>Sinon, une <link linkend="install.version">installation manuelle</link> s&#8217;impose
avec l&#8217;étiquette <literal>latest</literal>&#160;:
<indexterm>
<primary>npm</primary><secondary>version &lt;module&gt;</secondary>
</indexterm>
<indexterm>
<primary>version &lt;module&gt;</primary>
</indexterm></simpara>
<screen>$ npm install lodash@latest
+ lodash@4.17.11</screen>
<simpara>Un dernier appel à <literal>npm outdated</literal> nous en donne le cœur&#160;net&#160;:
<indexterm>
<primary>npm</primary><secondary>outdated</secondary>
</indexterm>
<indexterm>
<primary>outdated</primary>
</indexterm></simpara>
<screen>$ npm outdated</screen>
<simpara>Si rien ne s&#8217;affiche, c&#8217;est que tout est bon&#160;: nos modules sont à&#160;jour&#160;!</simpara>
</section>
</section>
<section xml:id="autres_manières_dinstaller_et_dutiliser_des_modulesnpm">
<title>Autres manières d&#8217;installer et d&#8217;utiliser des modules&#160;npm</title>
<simpara>Dans la section précédente, nous avons vu comment installer des modules
depuis le registre&#160;<literal>npm</literal>.
Maintenant, nous allons apprendre à les installer depuis des sources
variées, uniquement à des fins de développement ou en tant que
commandes exécutables au niveau du système d&#8217;exploitation.</simpara>
<section xml:id="install.git">
<title>Depuis GitHub, GitLab ou un dépôt&#160;Git</title>
<simpara><indexterm>
<primary>npm</primary><secondary>install &lt;module&gt; (depuis Git)</secondary>
</indexterm>
<indexterm>
<primary>install &lt;module&gt; (depuis Git)</primary>
</indexterm></simpara>
<simpara>Il arrive que l&#8217;auteur·e d&#8217;un module&#160;<literal>npm</literal> corrige un problème
sans publier le correctif sur le registre&#160;<literal>npm</literal>.
Il arrive aussi qu&#8217;un module soit hébergé de manière publique ou privée
sur une plate-forme d&#8217;hébergement Git comme GitLab ou GitHub,
sans passer par le registre&#160;<literal>npm</literal>.</simpara>
<simpara>Le module <emphasis>cowsay</emphasis> est publié sur le registre&#160;<literal>npm</literal>, mais il est aussi
hébergé sur GitHub à l&#8217;adresse <phrase role="URL"><link xl:href="https://github.com/piuccio/cowsay">github.com/piuccio/cowsay</link></phrase>.
Installons-le depuis cette source&#160;:</simpara>
<screen>$ npm install https://github.com/piuccio/cowsay
+ cowsay@1.3.1
updated 1 package in 5.866s</screen>
<simpara>L&#8217;exécutable <literal>npm</literal> vérifie qu&#8217;un fichier <literal>package.json</literal> est situé à la racine
du dépôt.
Dans ce cas de figure, il utilise le programme Git pour obtenir le code source
du module.</simpara>
<simpara>Une écriture raccourcie existe pour installer un module depuis un hébergement
Git populaire, sans avoir à écrire l&#8217;URL en entier&#160;:</simpara>
<screen>$ npm install github:piuccio/cowsay
+ cowsay@1.3.1
updated 1 package in 4.513s</screen>
<caution>
<title><phrase role="RemarquePreTitre">Considérations</phrase> Performance d&#8217;accès à&#160;Git</title>
<simpara>L&#8217;installation est plus lente depuis un dépôt Git que depuis un registre&#160;<literal>npm</literal>.
L&#8217;exécutable&#160;<literal>npm</literal> fait appel à l&#8217;exécutable&#160;<literal>git</literal> pour cloner l&#8217;historique
du dépôt et de ses dépendances pour extraire la version adéquate
de la copie de travail.</simpara>
<simpara>Le temps de téléchargement sera proportionnel au nombre de <emphasis>commits</emphasis>.</simpara>
</caution>
<simpara>L&#8217;exécutable <literal>npm</literal> sait aussi installer des modules avec le protocole
<emphasis>Secure Shell</emphasis> (<emphasis>SSH</emphasis>) désigné par <literal>git+ssh</literal>&#160;:</simpara>
<screen>$ npm install git+ssh://git@github.com:piuccio/cowsay.git
+ cowsay@1.3.1
updated 1 package in 10.263s</screen>
<simpara>Les clients Git et SSH doivent être configurés au niveau du système pour
être en mesure de s&#8217;authentifier sur l&#8217;hôte distant.</simpara>
<simpara>C&#8217;est une solution intéressante pour automatiser l&#8217;installation de modules privés.
L&#8217;étape suivante serait de déployer un registre&#160;<literal>npm</literal> privé ou de souscrire
une option payante sur le registre principal.</simpara>
</section>
<section xml:id="install.dev">
<title>Dépendances de développement</title>
<simpara><indexterm>
<primary>package.json</primary><secondary>dépendance de développement</secondary>
</indexterm>
<indexterm>
<primary>dépendance de développement</primary>
</indexterm></simpara>
<simpara>Les dépendances de développement sont des modules <literal>npm</literal> utilisés
pour <emphasis role="strong">exécuter les tests unitaires</emphasis> ou pour <emphasis role="strong">de l&#8217;outillage</emphasis> sont aussi des
dépendances de développement.
Ce sont des modules que nous n&#8217;appelons pas directement avec les
fonctions <literal>require()</literal> et <literal>import</literal>.</simpara>
<simpara>Par exemple, le module&#160;<literal>npm</literal> <emphasis>mocha</emphasis> est utilisé pour structurer et exécuter
des tests unitaires pour Node et les navigateurs web.
Il est donc logique de l&#8217;installer comme dépendance de développement.
L&#8217;option <literal>--save-dev</literal> signale cette intention à l&#8217;exécutable <literal>npm</literal>&#160;:
<indexterm>
<primary>npm</primary><secondary>install --save-dev</secondary>
</indexterm>
<indexterm>
<primary>install --save-dev</primary>
</indexterm></simpara>
<screen>$ npm install --save-dev mocha
+ mocha@5.2.0</screen>
<simpara>L&#8217;exécutable <literal>npm</literal> range alors ce module dans une nouvelle section du
fichier <literal>package.json</literal>&#160;– la section <literal>devDependencies</literal>&#160;:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "dependencies": {
    "cowsay": "^1.3.1",
    "lodash": "^4.17.11"
  },
  "<emphasis role="marked">devDependencies</emphasis>": {
    "mocha": "^5.2.0"
  }
}</programlisting>
<tip>
<title><phrase role="RemarquePreTitre">Optimisation</phrase> Installer seulement les dépendances de production</title>
<simpara><indexterm>
<primary>npm</primary><secondary>install --production</secondary>
</indexterm>
<indexterm>
<primary>install --production</primary>
</indexterm>
La <link linkend="install">commande <literal>npm install</literal></link> accepte l&#8217;option <literal>--production</literal>.
Elle installe seulement les dépendances listées dans la section <literal>dependencies</literal>&#160;:</simpara>
<screen>$ npm install --production</screen>
<simpara>Le <emphasis role="strong">poids d&#8217;installation est ainsi réduit</emphasis>.
C&#8217;est l&#8217;idéal dans le cas du déploiement de
<link xl:href="../chapter-06/index.xml#lambda">fonctions événementielles</link>
(<link xl:href="../chapter-06/index.xml">chapitre&#160;6</link>).</simpara>
</tip>
</section>
<section xml:id="install.global">
<title>Exécutable système (installation globale)</title>
<simpara><indexterm>
<primary>npm</primary><secondary>install --global</secondary>
</indexterm>
<indexterm>
<primary>install --global</primary>
</indexterm></simpara>
<simpara>Certains modules <literal>npm</literal> s&#8217;installent comme des programmes exécutables.
Ils s&#8217;appellent ensuite dans un terminal, exactement comme nous le faisions
jusqu&#8217;à présent avec l&#8217;exécutable <literal>npm</literal>.
<indexterm>
<primary>module npm</primary><secondary>serve</secondary>
</indexterm>
<indexterm>
<primary>serve</primary>
</indexterm></simpara>
<simpara>C&#8217;est le cas du module <emphasis>serve</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/serve">npmjs.com/serve</link></phrase>), par exemple.
Il démarre un serveur web en ligne de commande pour tester le rendu
de fichiers HTML sans avoir à configurer de logiciels comme <emphasis>Apache</emphasis> ou <emphasis>nginx</emphasis>.</simpara>
<simpara>L&#8217;installation est rendue globale&#160;– à l&#8217;échelle du système d&#8217;exploitation
– avec l&#8217;utilisation de l&#8217;option <literal>--global</literal>&#160;:</simpara>
<screen>$ npm install <emphasis role="marked">--global</emphasis> serve
+ serve@10.0.0</screen>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Comment savoir si un module&#160;npm s&#8217;installe comme un exécutable système ?</title>
<simpara>En général, les modules qui se prêtent bien au jeu du <literal>npm install --global</literal>
sont ceux qui documentent des exemples de commande à exécuter,
qui se décrivent comme des outils en ligne de commande ou qui
mentionnent explicitement l&#8217;installation globale.</simpara>
</note>
<simpara>L&#8217;exécutable <literal>serve</literal> est disponible suite à l&#8217;installation globale&#160;:</simpara>
<screen>$ serve --version
10.0.0</screen>
<simpara>Le module&#160;<literal>npm</literal> s&#8217;exécute de manière transparente, sans invoquer Node ni
l&#8217;exécutable&#160;<literal>npm</literal>&#160;:</simpara>
<screen>$ serve .
INFO: Accepting connections at http://localhost:3000</screen>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> L&#8217;option&#160;--help</title>
<simpara>Par convention, les modules <literal>npm</literal> qui s&#8217;utilisent en ligne de commande
sont accompagnés d&#8217;une documentation.
Ce manuel décrit des cas d&#8217;usage ainsi que les options à disposition.</simpara>
<simpara>Affichage de la documentation du module&#160;<literal>npm</literal> <emphasis>serve</emphasis>
depuis la ligne de commande&#160;:</simpara>
<screen>$ serve --help</screen>
</tip>
<simpara>Un module installé de manière globale se désinstalle en passant l&#8217;option
<literal>--global</literal> à la <link linkend="uninstall">commande <literal>npm uninstall</literal></link>&#160;:
<indexterm>
<primary>npm</primary><secondary>uninstall</secondary>
</indexterm>
<indexterm>
<primary>uninstall</primary>
</indexterm></simpara>
<screen>$ npm uninstall --global serve</screen>
<simpara>Le <link xl:href="../chapter-08/index.xml">chapitre&#160;8</link> sera l&#8217;occasion d&#8217;entrer plus
en détail dans le développement d&#8217;exécutables système écrits en ECMAScript.</simpara>
</section>
</section>
<section xml:id="scripts">
<title>Outiller un projet avec les scripts&#160;npm</title>
<simpara><indexterm>
<primary>npm</primary><secondary>run</secondary>
</indexterm>
<indexterm>
<primary>run</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>script npm</secondary>
</indexterm>
<indexterm>
<primary>script npm</primary>
</indexterm></simpara>
<simpara>Les scripts&#160;<literal>npm</literal> sont des outils puissants qui <emphasis role="strong">autonomisent l&#8217;outillage projet</emphasis>,
<emphasis role="strong">automatisent des actions</emphasis> manuelles et <emphasis role="strong">simplifient des actions</emphasis> trop
complexes à mémoriser.</simpara>
<simpara>Ils sont consignés dans la section <literal>scripts</literal> du fichier <literal>package.json</literal>.
Ils se basent sur des scripts Node et des modules <literal>npm</literal> pour
lancer des actions quand des fichiers sont modifiés,
transformer des feuilles de style, exécuter des tests unitaires ou fonctionnels,
déployer le projet, entre autres.</simpara>
<simpara>Ils permettent de créer des conventions entre nos projets.
Nous réutiliserons ainsi les mêmes noms et adapterons les commandes
au projet en question.</simpara>
<section xml:id="start">
<title>Démarrer l&#8217;application</title>
<simpara><indexterm>
<primary>npm</primary><secondary>start</secondary>
</indexterm>
<indexterm>
<primary>start</primary>
</indexterm></simpara>
<simpara>Le script <literal>npm start</literal> concerne les projets dont le script principal
tourne en continu&#160;– une application web par exemple.</simpara>
<simpara>L&#8217;exemple suivant démarre un serveur web sans que nous ayons à connaître
la commande associée&#160;:</simpara>
<screen>$ npm start

&gt; nodebook.chapter-05@1.0.0 start         <co xml:id="CO146-1"/>
&gt; micro examples/app.js                   <co xml:id="CO146-2"/>

micro: Accepting connections on port 3000</screen>
<calloutlist>
<callout arearefs="CO146-1">
<para>L&#8217;exécutable <literal>npm</literal> affiche le nom du script en cours d&#8217;exécution</para>
</callout>
<callout arearefs="CO146-2">
<para><literal>micro examples/app.js</literal> est la commande réellement exécutée par npm</para>
</callout>
</calloutlist>
<simpara>Nous sommes libres de renseigner la valeur du champ <literal>scripts.start</literal>
du fichier <literal>package.json</literal> comme bon nous semble&#160;:
<indexterm>
<primary>package.json</primary><secondary>script npm</secondary>
</indexterm>
<indexterm>
<primary>script npm</primary>
</indexterm></simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "start": "micro examples/app.js"
  },
  "dependencies": {
    "micro": "^9.3.3"
  }
}</programlisting>
</para>
</formalpara>
<simpara>Nous avons utilisé le module&#160;<literal>npm</literal> <emphasis>micro</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/micro">npmjs.com/micro</link></phrase>)
pour démarrer une application web.
Plus exactement, nous avons utilisé l&#8217;exécutable fourni par ce module.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Les modules exécutables dans les scripts&#160;npm</title>
<simpara>Les <link linkend="install.global">modules <literal>npm</literal> exécutables</link> sont disponibles au niveau du
système lorsqu&#8217;ils sont installés avec l&#8217;option <literal>--global</literal>.</simpara>
<simpara>Les exécutables des modules listés dans <literal>dependencies</literal> et <literal>devDependencies</literal>
sont utilisables dans les scripts&#160;<literal>npm</literal>.</simpara>
<simpara>Nous pouvons ainsi contenir tous les exécutables nécessaires dans les
dépendances du projet.</simpara>
</tip>
<simpara>Nous verrons dans le <link linkend="../chapter-06/index.adoc">chapitre&#160;6</link> que les
plates-formes de service utilisent aussi la valeur du champ <literal>scripts.start</literal>
pour déterminer comment démarrer notre application.</simpara>
</section>
<section xml:id="test">
<title>Exécuter des tests</title>
<simpara><indexterm>
<primary>npm</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm></simpara>
<simpara>Le script <literal>npm test</literal> concerne tous les projets pour lesquels nous avons écrit
des tests qu&#8217;ils soient unitaires ou fonctionnels.</simpara>
<simpara>L&#8217;intention de la commande lancée par le script&#160;<literal>npm</literal> est de terminer
en erreur si un des tests n&#8217;aboutit pas au résultat escompté.</simpara>
<simpara>L&#8217;exemple suivant lance un test unitaire qui s&#8217;assure de la cohérence
d&#8217;un des exemples précédents&#160;:</simpara>
<screen>$ npm test

&gt; nodebook.chapter-05@1.0.0 test  <co xml:id="CO147-1"/>
&gt; mocha examples/tests.js         <co xml:id="CO147-2"/>

app.js
  ✓ prints a cow as a response

1 passing</screen>
<calloutlist>
<callout arearefs="CO147-1">
<para>L&#8217;exécutable <literal>npm</literal> affiche le nom du script en cours d&#8217;exécution.</para>
</callout>
<callout arearefs="CO147-2">
<para><literal>mocha examples/tests.js</literal> est la commande réellement exécutée par npm.</para>
</callout>
</calloutlist>
<simpara>Cette fois-ci, nous avons personnalisé la valeur du champ <literal>scripts.test</literal>
du fichier <literal>package.json</literal>&#160;:
<indexterm>
<primary>package.json</primary><secondary>script npm</secondary>
</indexterm>
<indexterm>
<primary>script npm</primary>
</indexterm></simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "test": "mocha examples/tests.js"
  },
  "devDependencies": {
    "mocha": "^5.2.0"
  }
}</programlisting>
</para>
</formalpara>
<simpara>Nous avons eu recours au module&#160;<literal>npm</literal> <emphasis>mocha</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/mocha">npmjs.com/mocha</link></phrase>),
de même qu&#8217;avec le <link linkend="start">script de démarrage</link>, nous nous sommes basés
sur l&#8217;exécutable fourni par le module.
En revanche, nous l&#8217;avons listé dans la <link linkend="install.dev">section <literal>devDependencies</literal></link>
car il est relatif à l&#8217;outillage du projet.
<indexterm>
<primary>module npm</primary><secondary>mocha</secondary>
</indexterm>
<indexterm>
<primary>mocha</primary>
</indexterm></simpara>
<simpara>Les services d&#8217;intégration continue lancent le script <literal>npm test</literal>
lorsqu&#8217;ils détectent qu&#8217;ils ont affaire à un projet Node.
<indexterm>
<primary>npm</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm></simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Scripts définis par&#160;npm</title>
<simpara>D&#8217;autres scripts que <literal>test</literal> et <literal>start</literal> sont définis par l&#8217;exécutable&#160;<literal>npm</literal>.
Ils sont tous documentés sur&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://docs.npmjs.com/misc/scripts">docs.npmjs.com/misc/scripts</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara><indexterm>
<primary>documentation</primary><secondary>script npm</secondary>
</indexterm>
<indexterm>
<primary>script npm</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>package.json</secondary>
</indexterm>
<indexterm>
<primary>package.json</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm></simpara>
</section>
<section xml:id="run">
<title>Créer un script&#160;npm personnalisé</title>
<simpara><indexterm>
<primary>npm</primary><secondary>run</secondary>
</indexterm>
<indexterm>
<primary>run</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>script npm</secondary>
</indexterm>
<indexterm>
<primary>script npm</primary>
</indexterm></simpara>
<simpara>Les scripts&#160;<literal>npm</literal> personnalisés sont utiles <emphasis role="strong">lorsque nous souhaitons outiller</emphasis>
notre projet sans forcément que ce soit en rapport avec le lancement des tests
ou de l&#8217;application.</simpara>
<simpara>Les scripts personnalisés se démarrent avec <literal>npm run</literal>&#160;:</simpara>
<screen>$ npm <emphasis role="marked">run</emphasis> print-args

&gt; nodebook.chapter-05@1.0.0 print-args
&gt; node examples/print-args.js

Rien à signaler.</screen>
<simpara>Nous avons créé ce script en configurant la valeur du champ <literal>scripts.print-args</literal>
du fichier <literal>package.json</literal>&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "print-args": "node examples/print-args.js"
  }
}</programlisting>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Lister les scripts disponibles</title>
<simpara>La commande <literal>npm run</literal> (sans argument) liste tous les scripts&#160;<literal>npm</literal> du projet.</simpara>
</tip>
<simpara>Avec le temps, j&#8217;ai développé les conventions suivantes&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>npm run build</literal>&#160;: construit les artefacts à déployer.</simpara>
</listitem>
<listitem>
<simpara><literal>npm run deploy</literal>&#160;: déploie le projet vers l&#8217;hébergeur.</simpara>
</listitem>
<listitem>
<simpara><literal>npm run lint</literal>&#160;: applique un vérificateur syntaxique au code du projet.</simpara>
</listitem>
<listitem>
<simpara><literal>npm run watch</literal>&#160;: démarre l&#8217;application et la relance à chaque changement.</simpara>
</listitem>
</itemizedlist>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Passer des arguments à un script&#160;npm</title>
<simpara><indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.argv</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.argv</secondary>
</indexterm>
<indexterm>
<primary>process.argv</primary>
</indexterm>
Une option spéciale nous aide à transmettre des arguments à un script.
Les arguments doivent être placés à droite de l&#8217;option <literal>--</literal>&#160;:</simpara>
<screen>$ npm run print-args un --test=true
['un']
$ npm run print-args ##--## un --test=true
['un', '--test=true']</screen>
</tip>
<simpara>Un script&#160;<literal>npm</literal> peut faire appel à d&#8217;autres&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "lint": "eslint ./examples",
    "test": "npm run lint <emphasis role="marked">&&</emphasis> mocha examples/tests.js"
  }
}</programlisting>
</para>
</formalpara>
<simpara>J&#8217;ai plutôt tendance à découper mes scripts de sorte à ce qu&#8217;ils fassent
tous une chose et une seule.
Je peux ainsi les appeler de manière individuelle.
<indexterm>
<primary>package.json</primary><secondary>script npm</secondary>
</indexterm>
<indexterm>
<primary>script npm</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>run</secondary>
</indexterm>
<indexterm>
<primary>run</primary>
</indexterm></simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "lint": "eslint ./examples",
    "test": "npm run lint && npm run test:unit",
    "test:unit": "mocha examples/tests.js"
  }
}</programlisting>
</para>
</formalpara>
<simpara>La section suivante va nous aider à orchestrer l&#8217;exécution des scripts
les uns par rapport aux autres.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Accéder aux valeurs du fichier <literal>package.json</literal></title>
<simpara><indexterm>
<primary>npm</primary><secondary>run</secondary><tertiary>variable d&#8217;environnement</tertiary>
</indexterm>
<indexterm>
<primary>run</primary><secondary>variable d&#8217;environnement</secondary>
</indexterm>
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm>
Toutes les sections du fichier <literal>package.json</literal> sont accessibles depuis
les scripts&#160;<literal>npm</literal> sous forme de
<link xl:href="../chapter-04/index.xml#process.argv">variables d&#8217;environnement</link>.
Leur nom est préfixé par <literal>npm_package</literal> suivi de leur nom <quote>mis à plat</quote>.
Ainsi, le champ <literal>version</literal> est accessible en tant que <literal>$npm_package_version</literal>
et le champ <literal>config.port</literal> en tant que <literal>$npm_package_config_port</literal>&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "<emphasis role="marked">config</emphasis>": {
    "<emphasis role="marked">port</emphasis>": "4000"
  };
  "scripts": {
    "start": "node server --port $npm_package_<emphasis role="marked">config</emphasis>_<emphasis role="marked">port</emphasis>",
  }
}</programlisting>
</para>
</formalpara>
</tip>
</section>
<section xml:id="run-pre-post">
<title>Exécuter des commandes avant et après des scripts&#160;npm</title>
<simpara><indexterm>
<primary>npm</primary><secondary>run</secondary>
</indexterm>
<indexterm>
<primary>run</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>script npm</secondary><tertiary>pré et post-script</tertiary>
</indexterm>
<indexterm>
<primary>script npm</primary><secondary>pré et post-script</secondary>
</indexterm>
<indexterm>
<primary>pré et post-script</primary>
</indexterm></simpara>
<simpara>L&#8217;ordre d&#8217;exécution des scripts se contrôle en utilisant les préfixes
<literal>pre</literal> et <literal>post</literal>.
Par exemple, les scripts nommés <literal>pretest</literal> et <literal>posttest</literal> seront exécutés
respectivement avant et après le script <literal>test</literal>.</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "lint": "eslint ./examples",
    "test": "mocha examples/tests.js",
    "<emphasis role="marked">pre</emphasis>test": "npm run lint"
  }
}</programlisting>
</para>
</formalpara>
<simpara>Dans cet exemple de configuration, l&#8217;exécution de la commande <literal>npm test</literal>
lancera d&#8217;abord le script <literal>pretest</literal>, puis <literal>lint</literal> puis enfin&#160;<literal>test</literal>&#160;:
<indexterm>
<primary>npm</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm></simpara>
<screen>$ npm test

&gt; nodebook.chapter-05@1.0.0 pretest
&gt; npm run lint
...

&gt; nodebook.chapter-05@1.0.0 lint
&gt; eslint ./examples
...

&gt; nodebook.chapter-05@1.0.0 test
&gt; mocha examples/tests.js
...</screen>
<simpara>Ce mécanisme est utile pour s&#8217;intercaler sur des temps particuliers
du cycle de vie d&#8217;un projet&#160;Node.
En voici une sélection.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Script</entry>
<entry align="left" valign="top">Quand ?</entry>
<entry align="left" valign="top">Pourquoi ?</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>pretest</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avant les tests</simpara></entry>
<entry align="left" valign="top"><simpara>Préparer l&#8217;espace de travail</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>posttest</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Après les tests</simpara></entry>
<entry align="left" valign="top"><simpara>Vérifier les règles de syntaxe de notre code</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>postinstall</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Après installation les dépendances</simpara></entry>
<entry align="left" valign="top"><simpara>Préparation significative du projet (téléchargements supplémentaires, etc.)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>prestart</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avant de démarrer l&#8217;application</simpara></entry>
<entry align="left" valign="top"><simpara>Préparatifs légers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>prepublishOnly</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avant de publier le module</simpara></entry>
<entry align="left" valign="top"><simpara>Préparation du projet avant de le distribuer (compilation de fichiers, etc.)</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="run-all">
<title>Automatiser tout l&#8217;outillage projet</title>
<simpara><indexterm>
<primary>npm</primary><secondary>run</secondary>
</indexterm>
<indexterm>
<primary>run</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>npm-run-all</secondary>
</indexterm>
<indexterm>
<primary>npm-run-all</primary>
</indexterm></simpara>
<simpara>Les scripts&#160;<literal>npm</literal> suffisent à outiller la majorité des projets.
Cependant ils deviennent difficiles à lire lorsque les
lignes deviennent trop longues.</simpara>
<simpara><emphasis>npm-run-all</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/npm-run-all">npmjs.com/npm-run-all</link></phrase>) est un
module qui parallélise leur exécution et simplifie l&#8217;appel d&#8217;un groupe de scripts.</simpara>
<formalpara>
<title>package.json</title>
<para>
<screen>{
  "scripts": {
    "build": "npm-run-all --parallel 'build:*'", <co xml:id="CO148-1"/>
    "build:front-end": "browserify ...",
    "build:backend": "browserify ...",
    "build:css": "sass ..."
  }
  "devDependencies": {
    "npm-run-all": "*"
  }
}</screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO148-1">
<para>Les trois scripts préfixés par <literal>build:</literal> seront appelés en parallèle en exécutant <literal>npm run build</literal>.</para>
</callout>
</calloutlist>
<simpara>Il est aussi possible de déclencher des actions parallèles après une première
action séquentielle.</simpara>
<formalpara>
<title>package.json</title>
<para>
<screen>{
  "scripts": {
    "clean": "rm -rf ./dist",
    "build": "npm-run-all clean --parallel 'build:*'", <co xml:id="CO149-1"/>
    "build:front-end": "browserify ...",
    "build:backend": "browserify ..."
  }
  "devDependencies": {
    "npm-run-all": "*"
  }
}</screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO149-1">
<para><literal>npm-run-all</literal> exécute le script <literal>clean</literal> avant les autres scripts préfixés par <literal>build:</literal>.</para>
</callout>
</calloutlist>
<simpara>Ils vous appartient d&#8217;orchestrer les scripts en les groupant avec un motif de noms
ainsi qu&#8217;en combinant les options <literal>--parallel</literal> (alias&#160;<literal>-p</literal>)
et <literal>--sequential</literal> (alias&#160;<literal>-s</literal>) pour activer ou désactiver
le parallélisme d&#8217;exécution.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Pourtant j&#8217;ai entendu parler de Gulp et de Grunt</title>
<simpara>L&#8217;énorme avantage d&#8217;outiller un projet avec la commande <literal>npm run</literal> et
l&#8217;exécutable <literal>npm-run-all</literal> est que nous utilisons directement les outils
dont nous avons besoin.</simpara>
<simpara>Gulp et Grunt introduisent une complexité d&#8217;apprentissage et des couches
d&#8217;abstraction qui augmentent la fragilité de l&#8217;outillage et la barrière d&#8217;entrée de nos projets.</simpara>
<simpara>C&#8217;est tant mieux si nous pouvons nous en passer pour façonner nos propres outils.</simpara>
</note>
</section>
</section>
<section xml:id="package.json">
<title>Anatomie du fichier <literal>package.json</literal></title>
<simpara><indexterm>
<primary>package.json</primary><secondary>liste des champs</secondary>
</indexterm>
<indexterm>
<primary>liste des champs</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>package.json</secondary>
</indexterm>
<indexterm>
<primary>package.json</primary>
</indexterm></simpara>
<simpara>Le fichier <literal>package.json</literal> est essentiel pour tirer parti de l&#8217;exécutable <literal>npm</literal>.
Tout projet concerné par l'<link linkend="install">installation de modules <literal>npm</literal></link> ou par
l'<link linkend="scripts">outillage des scripts</link> va forcément avoir ce fichier quelque
part dans son arborescence.</simpara>
<simpara>Il se décompose en plusieurs parties&#160;:
les <emphasis role="strong">informations générales</emphasis> qui aident les utilisateurs et utilisatrices
à découvrir le module en <link linkend="registry">effectuant une recherche</link>,
les <emphasis role="strong">points d&#8217;entrée</emphasis> pour inclure ou exécuter le module
et la <emphasis role="strong">configuration projet</emphasis> qui affecte le fonctionnement de l&#8217;exécutable npm.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Informations pour faciliter la découverte et la compréhension</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="14.2857*"/>
<colspec colname="col_2" colwidth="14.2857*"/>
<colspec colname="col_3" colwidth="14.2857*"/>
<colspec colname="col_4" colwidth="28.5714*"/>
<colspec colname="col_5" colwidth="28.5715*"/>
<thead>
<row>
<entry align="left" valign="top">Section</entry>
<entry align="left" valign="top">Obligatoire&#160;?</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Modifiable</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>version</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="semver">Semver</link></simpara></entry>
<entry align="left" valign="top"><simpara>Avec <link linkend="version"><literal>npm version</literal></link></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>description</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Explique l&#8217;intention du module à une personne qui le découvre</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>keywords</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Tableau de texte</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Facilite sa découverte sur <phrase role="URL">npmjs.com</phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>homepage</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte&#160;(URL)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Indique où trouver de la documentation et des exemples d&#8217;utilisation – cela peut être l&#8217;adresse du dépôt GitLab ou GitHub</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>license</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Explicite les conditions de réutilisation du code dans un autre projet</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>bugs.url</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte&#160;(URL)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Facilite la remontée de bogues</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>repository.type</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>En général la valeur est <literal>git</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>repository.url</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte&#160;(URL)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Facilite la découverte du code source à l&#8217;origine du module</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="all" rowsep="1" colsep="1">
<title>Points d&#8217;entrée pour utiliser votre module</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="14.2857*"/>
<colspec colname="col_2" colwidth="14.2857*"/>
<colspec colname="col_3" colwidth="14.2857*"/>
<colspec colname="col_4" colwidth="28.5714*"/>
<colspec colname="col_5" colwidth="28.5715*"/>
<thead>
<row>
<entry align="left" valign="top">Section</entry>
<entry align="left" valign="top">Obligatoire&#160;?</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Modifiable</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>name</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Correspond au nom à spécifier aux fonctions <literal>require()</literal> et <literal>import</literal>. Un changement de nom obligera à mettre à jour tous les scripts qui appellent ce module</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>main</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte (chemin)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Script qui sera utilisé lors de l&#8217;appel à <literal>require()</literal> et <literal>import</literal> (par défaut <literal>index.js</literal>)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>bin</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte (chemin)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Script qui sera utilisé comme exécutable lors de l&#8217;appel <literal>npx &lt;module&gt;</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>bin</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Objet (nom/chemin)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Idem – forme qui permet de déclarer plusieurs exécutables au sein d&#8217;un même module</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>package.json</primary><secondary>main</secondary>
</indexterm>
<indexterm>
<primary>main</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>bin</secondary>
</indexterm>
<indexterm>
<primary>bin</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>name</secondary>
</indexterm>
<indexterm>
<primary>name</primary>
</indexterm></simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Configuration projet pour l&#8217;exécutable <literal>npm</literal></title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="14.2857*"/>
<colspec colname="col_2" colwidth="14.2857*"/>
<colspec colname="col_3" colwidth="14.2857*"/>
<colspec colname="col_4" colwidth="28.5714*"/>
<colspec colname="col_5" colwidth="28.5715*"/>
<thead>
<row>
<entry align="left" valign="top">Section</entry>
<entry align="left" valign="top">Obligatoire&#160;?</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Modifiable</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>private</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Booléen</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Empêche la publication accidentelle sur le registre&#160;<literal>npm</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>engines</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Objet (nom/<link linkend="semver">SemVer</link>)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Certains hébergeurs utilisent ce champ pour déterminer la version de Node à utiliser</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>dependencies</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Objet (nom/<link linkend="semver">SemVer</link>)</simpara></entry>
<entry align="left" valign="top"><simpara>Avec <literal>npm install</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Voir la section <quote><link linkend="install">Installer des modules <literal>npm</literal></link></quote></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>devDependencies</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Objet (nom/<link linkend="semver">SemVer</link>)</simpara></entry>
<entry align="left" valign="top"><simpara>Avec <literal>npm install</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Voir la section <quote><link linkend="install.dev">Dépendances de développement</link></quote></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>scripts</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Objet (nom/commande)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Voir la section <quote><link linkend="scripts">Scripts&#160;<literal>npm</literal></link></quote></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Tout sur le fichier package.json</title>
<simpara><indexterm>
<primary>documentation</primary><secondary>package.json</secondary>
</indexterm>
<indexterm>
<primary>package.json</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
La page <phrase role="URL"><link xl:href="https://docs.npmjs.com/files/package.json">docs.npmjs.com/files/package.json</link></phrase> documente
de manière exhaustive les sections du fichier <literal>package.json</literal>.</simpara>
<simpara>En la lisant, vous apprendrez l&#8217;existence d&#8217;autres sections qui pourraient
peut-être vous intéresser.</simpara>
</note>
</section>
<section xml:id="commands">
<title>Quelques commandes pour aller plus&#160;loin</title>
<simpara>Nous venons de voir les commandes les plus utilisées de l&#8217;exécutable&#160;<literal>npm</literal>.
Il en existe d&#8217;autres dont l&#8217;intérêt varie en fonction de vos envies et de
vos pratiques de développement.
Pas d&#8217;inquiétude donc si vous ne les utilisez pas toutes&#160;:
j&#8217;en parle pour <emphasis role="strong">éclairer quelques points intéressants à explorer</emphasis>.</simpara>
<section xml:id="view">
<title>npm view : voir les informations d&#8217;un module</title>
<simpara><indexterm>
<primary>npm</primary><secondary>view</secondary>
</indexterm>
<indexterm>
<primary>view</primary>
</indexterm></simpara>
<simpara>La commande <literal>npm view</literal> donne une vue synthétique d&#8217;un module&#160;<literal>npm</literal> donné.
Elle est similaire à celle que nous pourrions trouver sur le registre&#160;<literal>npm</literal>,
mais condensée pour l&#8217;affichage dans un terminal.</simpara>
<simpara>Nous y retrouvons des informations fournies par les personnes en charge du module
ainsi que d&#8217;autres, fournies par le registre&#160;<literal>npm</literal>.</simpara>
<screen>$ npm view nodebook

nodebook@0.9.1 | CC-BY-NC-SA-4.0 | deps: 6 | versions: 21
Node.js – Apprendre par l'exemple

keywords: nodejs, book, french, livre, learn, apprendre

bin: nodebook

dist
.tarball https://registry.npmjs.org/nodebook/nodebook-0.9.1.tgz
.shasum: 5ea87e9b85782e23164705a49cb7bd2dc4063775
.integrity: sha512-...
.unpackedSize: 15.0 MB

dependencies:
finalhandler: ^1.1.1  serve-static: ^1.13.2
get-port: ^3.2.0      update-check: ^1.5.2
glob: ^7.1.2          yargs: ^11.1.0

maintainers:
- oncletom

dist-tags:
latest: 0.9.1

published 23 hours ago by oncletom</screen>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Sélection de champs que je trouve intéressants</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>bin</literal></simpara>
</entry>
<entry>
<simpara>Indique la présence d&#8217;un moins un <link linkend="install.global">exécutable</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>dist</literal></simpara>
</entry>
<entry>
<simpara>Donne des informations à propos du fichier téléchargé avec <literal>npm install &lt;module&gt;</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>dependencies</literal></simpara>
</entry>
<entry>
<simpara>Liste les modules additionnels téléchargés lors de l&#8217;installation.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>dist-tags</literal></simpara>
</entry>
<entry>
<simpara>Précise les étiquettes définies par personnes en charge du module,
utiles quand nous souhaitons <link linkend="install.version">jongler entre ses différentes versions</link>.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Nous pouvons aussi zoomer sur une métadonnée.
Par exemple, spécifions le champ <literal>dependencies</literal> pour ne lister que les
dépendances directes&#160;:</simpara>
<screen>$ npm view nodebook dependencies
{ finalhandler: '^1.1.1',
  'get-port': '^3.2.0',
  glob: '^7.1.2',
  'serve-static': '^1.13.2',
  'update-check': '^1.5.2',
  yargs: '^11.1.0' }</screen>
<simpara>Il est même possible de zoomer sur un niveau plus fin de métadonnée,
avec une annotation similaire à celle d&#8217;un objet ECMAScript&#160;:</simpara>
<screen>$ npm view nodebook dist.<emphasis role="marked">unpackedSize</emphasis>
14985184
$ npm view nodebook dist
{ integrity:
   'sha512-...',
  shasum: '5ea87e9b85782e23164705a49cb7bd2dc4063775',
  tarball:
    'https://registry.npmjs.org/nodebook/nodebook-0.9.1.tgz',
  fileCount: 486,
  <emphasis role="marked">unpackedSize</emphasis>: 14985184 }</screen>
</section>
<section xml:id="npx">
<title>npx : exécuter un module sans l&#8217;installer</title>
<simpara><indexterm>
<primary>npx</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>utilitaire npx</secondary>
</indexterm>
<indexterm>
<primary>utilitaire npx</primary>
</indexterm></simpara>
<simpara>L'<link linkend="install.global">installation globale</link> est idéale pour disposer d&#8217;un module
npm sous forme d&#8217;exécutable système.
On peut cependant vite arriver à en installer beaucoup sans vraiment penser à
les enlever quand on n&#8217;en a plus besoin.</simpara>
<simpara>L&#8217;exécutable <literal>npx</literal> (pour <literal>npm executable</literal>) s&#8217;installe automatiquement avec npm.
Il agit comme un raccourci&#160;: il va récupérer le module désiré et l&#8217;exécute en
lui passant les arguments souhaités.</simpara>
<screen>$ npx cowsay Magique !
npx: installed 10 in 2.122s
 ___________
&lt; Magique ! &gt;
 -----------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||</screen>
<simpara>C&#8217;est en quelque sorte l&#8217;équivalent des trois commandes suivantes&#160;:</simpara>
<screen>$ npm install --global cowsay
$ cowsay Magique !
$ npm uninstall cowsay</screen>
</section>
<section xml:id="home">
<title>npm home : visiter le site web d&#8217;un module</title>
<simpara><indexterm>
<primary>npm</primary><secondary>home</secondary>
</indexterm>
<indexterm>
<primary>home</primary>
</indexterm></simpara>
<simpara>Vous vous demandez où trouver davantage de documentation à propos d&#8217;un
module&#160;<literal>npm</literal>&#160;?
<literal>npm home</literal> ouvre un nouvel onglet de navigateur et dirige ce dernier
vers sur le site web du module de votre choix.</simpara>
<screen>$ npm home lodash
$ npm home micro</screen>
</section>
<section xml:id="audit">
<title>npm audit : vérifier la sécurité des dépendances</title>
<simpara><indexterm>
<primary>npm</primary><secondary>audit</secondary>
</indexterm>
<indexterm>
<primary>audit</primary>
</indexterm>
<indexterm>
<primary>sécurité</primary><secondary>module npm</secondary>
</indexterm>
<indexterm>
<primary>module npm</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>sécurité des dépendances</secondary>
</indexterm>
<indexterm>
<primary>sécurité des dépendances</primary>
</indexterm></simpara>
<simpara>La commande <literal>npm audit</literal> part à la recherche de vulnérabilités connues
dans l&#8217;intégralité des dépendances d&#8217;un projet.</simpara>
<simpara><literal>npm install</literal> effectue un audit de manière implicite afin de s&#8217;assurer
que notre projet n&#8217;est pas compromis à notre insu.
Les deux dernières lignes sont issues de la fonctionnalité d&#8217;audit de sécurité&#160;:</simpara>
<screen>$ npm install lodash@3
+ lodash@3.10.1
added 1 package from 5 contributors in 1.95s
found 1 low severity vulnerability
  run `npm audit fix` to fix them, or `npm audit` for details</screen>
<simpara>Un affichage plus détaillé est présenté en exécutant <literal>npm audit</literal>&#160;:</simpara>
<screen>$ npm audit

# Run  npm install lodash@4.17.10  to resolve 1 vulnerability
Recommended action is a potentially breaking change
┌───────────────┬───────────────────────────────────────────┐
│ Low           │ Prototype Pollution                       │
├───────────────┼───────────────────────────────────────────┤
│ Package       │ <emphasis role="marked">lodash</emphasis>                                    │
├───────────────┼───────────────────────────────────────────┤
│ Dependency of │ lodash                                    │
├───────────────┼───────────────────────────────────────────┤
│ <emphasis role="marked">Path</emphasis>          │ lodash                                    │
├───────────────┼───────────────────────────────────────────┤
│ More info     │ https://nodesecurity.io/advisories/577    │
└───────────────┴───────────────────────────────────────────┘

found 1 low severity vulnerability
  1 vulnerability requires semver-major dependency updates.</screen>
<simpara>Chaque module concerné par une faille connue est listé à l&#8217;écran (champ <literal>Package</literal>).
Le champ <literal>Path</literal> spécifie l&#8217;arbre de dépendances qui mène à la vulnérabilité
– c&#8217;est utile pour identifier quelle dépendance directe actualiser.</simpara>
<simpara>La commande <literal>npm audit</literal> précise la marche à suivre dès qu&#8217;elle le peut.
Ici, elle indique qu&#8217;une <link linkend="semver">mise à jour majeure</link> est
nécessaire pour se débarrasser du problème.
Cela nécessitera peut-être d&#8217;ajuster le code utilisant cette
dépendance sous peine de casser notre application.
<indexterm>
<primary>version sémantique</primary><secondary>version majeure</secondary>
</indexterm>
<indexterm>
<primary>version majeure</primary>
</indexterm></simpara>
<simpara>La commande <literal>npm audit fix</literal> corrigera toutes les dépendances pour lesquelles
il est possible de changer la version de manière automatique et sans risque.
Les mises à jour majeures sont toujours manuelles et demandent votre intervention.
<indexterm>
<primary>npm</primary><secondary>audit</secondary><tertiary>fix</tertiary>
</indexterm>
<indexterm>
<primary>audit</primary><secondary>fix</secondary>
</indexterm>
<indexterm>
<primary>fix</primary>
</indexterm></simpara>
</section>
<section xml:id="ci">
<title>npm clean-install : installer à toute vitesse</title>
<simpara><indexterm>
<primary>npm</primary><secondary>clean-install</secondary>
</indexterm>
<indexterm>
<primary>clean-install</primary>
</indexterm>
<indexterm>
<primary>package-lock.json</primary>
</indexterm>
<indexterm>
<primary>package.json</primary>
</indexterm></simpara>
<simpara>La commande <literal>npm clean-install</literal> (<literal>npm ci</literal>) est destinée à installer les
modules listés dans le fichier <literal>package.json</literal>.
Elle vise à s&#8217;exécuter plus rapidement et dans des environnements
autres que ceux de développement&#160;: en intégration continue, en production, etc.</simpara>
<simpara>Cette commande fait une chose de plus que <link linkend="install"><literal>npm install</literal></link>&#160;:
elle supprime systématiquement le répertoire <literal>node_modules</literal> pour rendre
chaque installation reproductible à l&#8217;identique.
Elle fait aussi une chose de moins&#160;: elle se contente d&#8217;installer les
modules tels que listés dans le <link linkend="package-lock">fichier <literal>package-lock.json</literal></link>.
C&#8217;est ce dernier point qui rend cette commande si rapide&#160;– moins de vérifications,
moins d&#8217;allers-retours, moins de complexité.</simpara>
<formalpara>
<title>.travis.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">language: node_js
node_js: v10
install: npm ci   <co xml:id="CO150-1"/>
script: npm test
cache: npm        <co xml:id="CO150-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO150-1">
<para>Surcharge la commande par défaut (<literal>npm install</literal>)</para>
</callout>
<callout arearefs="CO150-2">
<para>Les modules <literal>npm</literal> seront sauvegardés entre deux jobs&#160;– l&#8217;installation ira plus vite si les modules sont obtenus depuis le cache plutôt que depuis le registre&#160;<literal>npm</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Remettre un projet à&#160;zéro</title>
<simpara>La commande <literal>npm clean-install</literal> est pratique pour remettre un projet à zéro,
en cas de problème d&#8217;installation ou après avoir bidouillé dans le répertoire
<literal>node_modules</literal> par exemple.</simpara>
</tip>
</section>
<section xml:id="doctor">
<title>npm doctor : vérifier l&#8217;état du système</title>
<simpara><indexterm>
<primary>npm</primary><secondary>doctor</secondary>
</indexterm>
<indexterm>
<primary>doctor</primary>
</indexterm>
<indexterm>
<primary>installation</primary><secondary>vérification</secondary>
</indexterm>
<indexterm>
<primary>vérification</primary>
</indexterm></simpara>
<simpara><literal>npm doctor</literal> est une commande utilitaire qui vérifie que npm trouve
tout ce qu&#8217;il lui faut pour bien fonctionner.</simpara>
<simpara>L&#8217;exécutable <literal>npm</literal> inspecte le système à la recherche de Git,
teste la connectivité vers le registre&#160;<literal>npm</literal> et s&#8217;assure qu&#8217;il a accès en écriture
à des répertoires essentiels à son bon fonctionnement.</simpara>
<screen>$ npm doctor
Check                               Value
npm ping                            OK
npm -v                              v6.4.0
node -v                             v10.0.0
npm config get registry             https://registry.npmjs.org
which git                           /usr/local/bin/git
Perms check on cached files         ok
Perms check on global node_modules  ok
Perms check on local node_modules   ok
Verify cache contents               verified 4066 tarballs</screen>
</section>
<section xml:id="config">
<title>npm config : changer les réglages de l&#8217;exécutable <literal>npm</literal></title>
<simpara><indexterm>
<primary>npm</primary><secondary>config</secondary>
</indexterm>
<indexterm>
<primary>config</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>.npmrc (fichier de configuration)</secondary>
</indexterm>
<indexterm>
<primary>.npmrc (fichier de configuration)</primary>
</indexterm>
<indexterm>
<primary>configuration</primary><secondary>.npmrc</secondary>
</indexterm>
<indexterm>
<primary>.npmrc</primary>
</indexterm></simpara>
<simpara>La commande <literal>npm config</literal> affiche et modifie la configuration
de l&#8217;exécutable <literal>npm</literal>.
Elle se découpe en plusieurs sous-commandes comme en atteste cette tentative
d&#8217;utilisation&#160;:</simpara>
<screen>$ npm config
npm ERR! Usage:
npm ERR! npm config set &lt;key&gt; &lt;value&gt;
npm ERR! npm config get [&lt;key&gt;]
npm ERR! npm config delete &lt;key&gt;
npm ERR! npm config list [--json]
npm ERR! npm config edit</screen>
<simpara>La sous-commande <literal>get</literal> affiche la valeur par défaut d&#8217;une clé de configuration&#160;:
<indexterm>
<primary>npm</primary><secondary>config</secondary><tertiary>get</tertiary>
</indexterm>
<indexterm>
<primary>config</primary><secondary>get</secondary>
</indexterm>
<indexterm>
<primary>get</primary>
</indexterm></simpara>
<screen>$ npm config get loglevel
notice</screen>
<simpara>Cette configuration reflète le degré d&#8217;affichage de l&#8217;exécutable.
Elle agit comme un curseur pour choisir une vue plus ou moins détaillée de
ce qui se trame sous le capot.</simpara>
<simpara>Augmentons le taux d&#8217;affichage avec la sous-commande <literal>set</literal>&#160;:
<indexterm>
<primary>npm</primary><secondary>config</secondary><tertiary>set</tertiary>
</indexterm>
<indexterm>
<primary>config</primary><secondary>set</secondary>
</indexterm>
<indexterm>
<primary>set</primary>
</indexterm></simpara>
<screen>$ npm config set loglevel http</screen>
<simpara>Nous voyons désormais les requêtes HTTP lancées (ici, en rejouant
l&#8217;exemple d'<link linkend="install.global">installation globale</link> du module&#160;<emphasis>serve</emphasis>)&#160;:</simpara>
<screen>$ npm install --global serve
GET 200 https://registry.npmjs.org/serve 653ms
GET 304 https://registry.npmjs.org/chalk 271ms (from cache)
GET 304 https://registry.npmjs.org/arg 274ms (from cache)
...</screen>
<simpara>La sous-commande&#160;<literal>ls</literal> récapitule tous nos changements de configuration.
Elle affiche tous les réglages par défaut en la suffixant de l&#8217;option <literal>--long</literal>&#160;:
<indexterm>
<primary>npm</primary><secondary>config</secondary><tertiary>ls</tertiary>
</indexterm>
<indexterm>
<primary>config</primary><secondary>ls</secondary>
</indexterm>
<indexterm>
<primary>ls</primary>
</indexterm></simpara>
<screen>$ npm config ls
$ npm config ls --long</screen>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Sauvegarder sa configuration&#160;npm</title>
<simpara><indexterm>
<primary>npm</primary><secondary>.npmrc (fichier de configuration)</secondary>
</indexterm>
<indexterm>
<primary>.npmrc (fichier de configuration)</primary>
</indexterm>
<indexterm>
<primary>configuration</primary><secondary>.npmrc</secondary>
</indexterm>
<indexterm>
<primary>.npmrc</primary>
</indexterm>
Chaque appel à <literal>npm config set</literal> enregistre les changements dans un fichier
de configuration <literal>~/.npmrc</literal>.</simpara>
<simpara>Il est propre à l&#8217;utilisateur actif de notre ordinateur.
Il vous appartient de le sauvegarder ou d&#8217;en fournir un spécifique dans le cadre
de votre environnement de production ou d&#8217;intégration continue.</simpara>
</tip>
<simpara>Pour y voir plus clair, voici une petite sélection des éléments
de configuration que vous pourriez être amené·e à modifier sur votre
machine de développement ou sur votre configuration de production&#160;:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sélection d&#8217;éléments de configuration de la commande npm</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="60*"/>
<thead>
<row>
<entry align="left" valign="top">Clé</entry>
<entry align="left" valign="top">Valeur par défaut</entry>
<entry align="left" valign="top">Remarque</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>access</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>restricted</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>public</literal> pour faire en sorte que les modules faisant partie d&#8217;une organisation soient considérés comme publics.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>audit</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>false</literal> pour désactiver l&#8217;audit automatique à chaque installation de module (voir <link linkend="audit"><literal>npm audit</literal></link>).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>cache</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>~/.npm</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Modifiez le chemin pour que le cache des modules <literal>npm</literal> soit géré ailleurs.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>color</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>false</literal> pour désactiver l&#8217;utilisation des couleurs de&#160;<literal>npm</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>depth</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Infinity</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le nombre utilisé limitera la profondeur d&#8217;affichage des commandes <literal>npm ls</literal>, <literal>npm outdated</literal>, etc.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>git</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>git</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Nom de l&#8217;exécutable ou chemin d&#8217;accès de l&#8217;exécutable <literal>git</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>https-proxy</literal></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Adresse du proxy HTTPS – remplace alors la variable d&#8217;environnement <literal>HTTPS_PROXY</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>loglevel</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>notice</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Change le taux d&#8217;affichage des messages – <literal>silent</literal>, <literal>error</literal>, <literal>warn</literal> diminueront ce taux tandis que <literal>http</literal>, <literal>timing</literal>, <literal>info</literal>, <literal>verbose</literal> ou <literal>silly</literal> augmenteront le niveau de détail.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>offline</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>true</literal> pour que l&#8217;installation des modules <literal>npm</literal> se fasse sans transiter par le réseau.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>progress</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>false</literal> pour désactiver l&#8217;affichage de la barre de progression.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>proxy</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Adresse du proxy HTTP – remplace alors la variable d&#8217;environnement <literal>HTTP_PROXY</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>registry</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal><link xl:href="https://registry.npmjs.org/">registry.npmjs.org/</link></literal></simpara></entry>
<entry align="left" valign="top"><simpara>Changez cette valeur par celle de votre registre privé ou auto-hébergé.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>send-metrics</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>true</literal> pour envoyer des statistiques d&#8217;utilisation à l&#8217;équipe de&#160;<literal>npm</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>tmp</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>$TMPDIR</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Changez cette valeur pour utiliser un autre répertoire temporaire.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>npm</primary><secondary>.npmrc (fichier de configuration)</secondary>
</indexterm>
<indexterm>
<primary>.npmrc (fichier de configuration)</primary>
</indexterm>
<indexterm>
<primary>configuration</primary><secondary>.npmrc</secondary>
</indexterm>
<indexterm>
<primary>.npmrc</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>npm</secondary><tertiary>configuration</tertiary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>configuration</secondary>
</indexterm>
<indexterm>
<primary>configuration</primary>
</indexterm></simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Tout sur npm&#160;config</title>
<simpara>La page <phrase role="URL"><link xl:href="https://docs.npmjs.com/misc/config#config-settings">docs.npmjs.com/misc/config#config-settings</link></phrase> documente
de manière exhaustive toutes les clés de configuration et leur effet sur
l&#8217;exécutable&#160;<literal>npm</literal>.</simpara>
</note>
</section>
<section xml:id="publish">
<title>npm publish : publier un module&#160;npm</title>
<simpara><indexterm>
<primary>npm</primary><secondary>publish</secondary>
</indexterm>
<indexterm>
<primary>publish</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>publier un module</secondary>
</indexterm>
<indexterm>
<primary>publier un module</primary>
</indexterm></simpara>
<simpara>Nous savons comment <link linkend="install">installer des modules</link> depuis le registre,
mais nous n&#8217;avons pas encore vu comment contribuer nous-même à cet écosystème.</simpara>
<simpara>L&#8217;option <literal>--dry-run</literal> est peut-être la première à utiliser avec cette commande,
puisqu&#8217;elle fait comme si nous voulions publier le module, mais
sans aller jusqu&#8217;à téléverser le code sur le registre&#160;<literal>npm</literal>.
Je la recommande pour voir de nos propres yeux ce qui serait transmis
et rectifier un problème avant qu&#8217;il ne se produise&#160;– vous n&#8217;avez pas envie
de mettre en ligne un fichier qui contient un mot de passe n&#8217;est-ce pas&#160;?</simpara>
<screen>$ npm publish --dry-run
npm notice
npm notice 📦  nodebook.chapter-05@1.0.0
npm notice === Tarball Contents ===
npm notice 754B    package.json
npm notice 59B     .eslintrc.yaml
npm notice 59.3kB  index.adoc
npm notice 133B    examples/app.js
npm notice 115B    examples/cow.js
npm notice 65B     examples/hello.js
npm notice 138B    examples/print-args.js
npm notice 223B    examples/tests.js
npm notice 46.3kB  images/module-content.png
npm notice 75.6kB  images/npm-package-falchion.png
npm notice 219.5kB images/npm-package-mysql-libmysqlclient.png
npm notice 170.2kB images/npm-package-mysql2.png
npm notice 172.7kB images/npm-registry-search.png
npm notice === Tarball Details ===
npm notice name:          nodebook.chapter-05
npm notice version:       1.0.0
npm notice package size:  656.8 kB
npm notice unpacked size: 745.1 kB
npm notice shasum:        7f2887b8840124cf8d0c2fa72e8d61cd739
npm notice integrity:     sha512-a6yvb8WO[...]yUeLy2jg/viXQ==
npm notice total files:   13</screen>
<tip>
<title><phrase role="RemarquePreTitre">Configuration</phrase> Empêcher un module d&#8217;être publié</title>
<simpara><indexterm>
<primary>package.json</primary><secondary>private</secondary>
</indexterm>
<indexterm>
<primary>private</primary>
</indexterm>
La section de configuration <literal>private</literal> est à ajouter dans le fichier <literal>package.json</literal>
d&#8217;un module pour empêcher toute publication involontaire.</simpara>
<formalpara>
<title>package.json</title>
<para>
<screen>{
  "name": "...",
  "private": true
}</screen>
</para>
</formalpara>
</tip>
<simpara>La publication d&#8217;un module implique que vous ayez configuré les sections
<literal>main</literal> ou <literal>bin</literal> du fichier <literal>package.json</literal> pour respectivement indiquer
quel fichier charger avec <literal>require('&lt;module&gt;')</literal> ou exécuter avec <link linkend="npx"><literal>npx &lt;module&gt;</literal></link>.</simpara>
<simpara>La publication d&#8217;un module nécessite de se créer un compte sur le registre
<phrase role="URL"><link xl:href="https://npmjs.com">npmjs.com</link></phrase>.
<indexterm>
<primary>npm</primary><secondary>registre principal</secondary>
</indexterm>
<indexterm>
<primary>registre principal</primary>
</indexterm>
Si c&#8217;est la première fois, l&#8217;exécutable <literal>npm</literal> vous
demandera alors de vous identifier&#160;– le module sera ensuite publié en votre nom.</simpara>
<simpara>Idéalement, je recommande de ne pas publier de module à la main mais de
<emphasis role="strong">préférer l&#8217;utilisation d&#8217;un service d&#8217;intégration continue</emphasis> comme
<emphasis>Travis&#160;CI</emphasis> (<phrase role="URL"><link xl:href="https://travis-ci.com">travis-ci.com</link></phrase>).
La configuration d&#8217;un tel service permet de publier <link linkend="version">une nouvelle version</link>
seulement si les tests passent au&#160;vert.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Ignorer des fichiers à publier</title>
<simpara><indexterm>
<primary>npm</primary><secondary>.npmignore (fichier de configuration)</secondary>
</indexterm>
<indexterm>
<primary>.npmignore (fichier de configuration)</primary>
</indexterm>
L&#8217;exécutable <literal>npm</literal> ignore par défaut les mêmes fichiers que Git.
Il honore la présence des fichiers <literal>.gitignore</literal> et exclut les fichiers
et répertoires concernés de la publication.</simpara>
<simpara>Le fichier <literal>.npmignore</literal> remplace <literal>.gitignore</literal> dans le cas
où votre besoin de fichiers à versionner est différent de celui de fichiers
à publier sur le registre&#160;<literal>npm</literal>.</simpara>
<formalpara>
<title>.npmignore</title>
<para>
<screen>.DS_Store       <co xml:id="CO151-1"/>
node_modules    <co xml:id="CO151-2"/>

src/*.html      <co xml:id="CO151-3"/>
!src/index.html <co xml:id="CO151-4"/></screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO151-1">
<para>Ignore un fichier nommé <literal>.DS_Store</literal>&#160;– courant sous macOS.</para>
</callout>
<callout arearefs="CO151-2">
<para>Ignore le répertoire <literal>node_modules</literal> et tout ce qu&#8217;il contient.</para>
</callout>
<callout arearefs="CO151-3">
<para>Ignore tous les fichiers <literal>.html</literal> contenus dans le répertoire&#160;<literal>src</literal>.</para>
</callout>
<callout arearefs="CO151-4">
<para>À l&#8217;exception du fichier <literal>index.html</literal> contenu dans le répertoire&#160;<literal>src</literal>.</para>
</callout>
</calloutlist>
</tip>
</section>
<section xml:id="version">
<title>npm version : déterminer une nouvelle version sans se tromper</title>
<simpara><indexterm>
<primary>npm</primary><secondary>version</secondary>
</indexterm>
<indexterm>
<primary>version</primary>
</indexterm></simpara>
<simpara>Nous ne pouvons pas <link linkend="publish">publier</link> deux fois une même version d&#8217;un
module&#160;<literal>npm</literal>.
Nous devons donc a&#160;minima modifier la valeur de la section <literal>version</literal>
dans le fichier <literal>package.json</literal>.</simpara>
<simpara>La commande <literal>npm version</literal> automatise le calcul du prochain numéro de version,
reflète ce dernier dans le champ <literal>version</literal> du fichier <literal>package.json</literal>
et procède à un <literal>commit</literal> Git, étiqueté avec cette nouvelle version.
Je trouve cette manière élégante, notamment en complément de la
publication automatique par le biais d&#8217;un service d&#8217;intégration continue.</simpara>
<simpara>La commande <literal>npm version</literal> se complète forcément d&#8217;un argument pour
indiquer la <link linkend="semver">granularité de version sémantique</link> concernée.
Ainsi, si nous voulons mettre à jour un module actuellement en version&#160;<literal>1.0.0</literal>&#160;:
<indexterm>
<primary>version sémantique</primary>
</indexterm></simpara>
<itemizedlist>
<listitem>
<simpara><literal>npm version patch</literal> la changera en&#160;<literal>1.0.1</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>npm version minor</literal> la changera en&#160;<literal>1.1.0</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>npm version major</literal> la changera en&#160;<literal>2.0.0</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>Cette montée en version se complète optionnellement de <link linkend="scripts">scripts&#160;<literal>npm</literal></link>
pour automatiser d&#8217;autres actions lors d&#8217;une montée en version&#160;:
<indexterm>
<primary>npm</primary><secondary>run</secondary>
</indexterm>
<indexterm>
<primary>run</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>script npm</secondary><tertiary>pré et post-script</tertiary>
</indexterm>
<indexterm>
<primary>script npm</primary><secondary>pré et post-script</secondary>
</indexterm>
<indexterm>
<primary>pré et post-script</primary>
</indexterm></simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Ordre d&#8217;exécution des <link linkend="run">scripts&#160;<literal>npm</literal></link> lors d&#8217;une montée de version</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>preversion</literal></simpara>
</entry>
<entry>
<simpara>Le nouveau numéro de version n&#8217;a pas encore été appliqué.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>version</literal></simpara>
</entry>
<entry>
<simpara>Le nouveau numéro de version est appliqué&#160;– vous pouvez encore ajouter de nouveaux fichiers au <literal>commit</literal>&#160;Git.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>postversion</literal></simpara>
</entry>
<entry>
<simpara>Le nouveau numéro de version est appliqué et un <literal>commit</literal> a été ajouté à l&#8217;historique&#160;Git.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Avancé</phrase> Déterminer la version depuis&#160;Git</title>
<simpara><indexterm>
<primary>npm</primary><secondary>version</secondary><tertiary>from-git</tertiary>
</indexterm>
<indexterm>
<primary>version</primary><secondary>from-git</secondary>
</indexterm>
<indexterm>
<primary>from-git</primary>
</indexterm>
Peut-être que vous gérez vous-même le numéro de version en l&#8217;attribuant
directement avec un <literal>tag</literal>&#160;Git&#160;(<literal>git tag</literal>).</simpara>
<simpara>Dans ce cas, la commande <literal>npm version from-git</literal> reporte le numéro de version
du dernier <literal>tag</literal>&#160;Git dans le fichier <literal>package.json</literal>.</simpara>
</tip>
</section>
</section>
<section xml:id="questions">
<title>Questions et mystères autour de&#160;npm</title>
<simpara>L&#8217;exécutable <literal>npm</literal> et le registre du même nom ont accompagné Node quasiment
depuis le début.
Il paraît simple de prime abord et je pense que c&#8217;est normal de se sentir
surpris·e par ses résultats.</simpara>
<simpara>Passons en revue des critiques ou questionnements que j&#8217;entends régulièrement
afin d&#8217;y voir plus&#160;clair.</simpara>
<section xml:id="npm.update">
<title>Quand mettre à jour l&#8217;exécutable&#160;npm ?</title>
<simpara><indexterm>
<primary>npm</primary><secondary>mise à jour du module npm</secondary>
</indexterm>
<indexterm>
<primary>mise à jour du module npm</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>install --global</secondary><tertiary>npm</tertiary>
</indexterm>
<indexterm>
<primary>install --global</primary><secondary>npm</secondary>
</indexterm>
<indexterm>
<primary>npm</primary>
</indexterm>
<indexterm>
<primary>mise à jour de Node.js</primary><secondary>mise à jour du module npm</secondary>
</indexterm>
<indexterm>
<primary>mise à jour du module npm</primary>
</indexterm></simpara>
<simpara>De nouvelles versions de l&#8217;exécutable <literal>npm</literal> sont régulièrement publiées.
Un message s&#8217;affiche dans notre terminal lorsque nous l&#8217;utilisons et qu&#8217;il
détecte qu&#8217;une version plus récente est disponible.</simpara>
<screen>╭─────────────────────────────────────╮
│                                     │
│   Update available 6.0.0 → 6.4.0  │
│     Run npm i -g npm to update      │
│                                     │
╰─────────────────────────────────────╯</screen>
<simpara>Le module qui contient l&#8217;exécutable <literal>npm</literal> suit le principe des
<link linkend="semver">versions sémantiques</link>.
Ainsi, la mise à jour sera sans effort si le numéro majeur reste le même.</simpara>
<simpara>J&#8217;ai tendance à regarder du côté de <phrase role="URL"><link xl:href="https://github.com/npm/npm/releases">github.com/npm/npm/releases</link></phrase>
pour lire tous les <emphasis>Breaking Changes</emphasis> et comprendre en quoi la mise à jour
majeure m&#8217;affecte.</simpara>
</section>
<section xml:id="package-lock">
<title>Je ne vois pas l&#8217;intérêt du fichier package-lock.json</title>
<simpara><indexterm>
<primary>package-lock.json</primary>
</indexterm></simpara>
<simpara>Le fichier <literal>package-lock.json</literal> est créé automatiquement par l&#8217;exécutable <literal>npm</literal>
dès que vous ajoutez votre première dépendance à un projet.</simpara>
<simpara>Jetons un œil à son contenu pour tenter d&#8217;en cerner les contours&#160;:</simpara>
<screen>{
  "name": "nodebook.chapter-05",
  "version": "1.0.0",
  "lockfileVersion": 1,
  "requires": true,
  "dependencies": {
    "acorn": {
      "version": "5.6.1",
      "resolved":
        "https://registry.npmjs.org/acorn/-/acorn-5.6.1.tgz",
      "integrity": "sha512-...",
      "dev": true
    },
    "cowsay": {
      "version": "1.3.1",
      "resolved":
        "https://registry.npmjs.org/cowsay/-/cowsay-1.3.1.tgz",
      "integrity": "sha512-...",
      "requires": {
        "get-stdin": "^5.0.1",
        "optimist": "~0.6.1",
        "string-width": "~2.1.1",
        "strip-eof": "^1.0.0"
      }
    },
    ...
  }
}</screen>
<simpara>Il ressemble beaucoup au fichier <literal>package.json</literal>.
On notera qu&#8217;il contient exclusivement des données liées aux dépendances,
ainsi qu&#8217;à <emphasis role="strong">toutes les dépendances des dépendances</emphasis>.</simpara>
<simpara>Si le fichier <literal>package.json</literal> contient une <link linkend="semver">version sémantique</link>,
<literal>package-lock.json</literal> <emphasis role="strong">contient la version exacte</emphasis> de chaque dépendance ainsi
que deux autres types d&#8217;informations&#160;: l&#8217;URL de téléchargement et une signature
qui sert à vérifier si le fichier téléchargé est le bon (intégrité).</simpara>
<simpara>La représentation complète de l&#8217;arbre de dépendances dans le fichier <literal>package-lock.json</literal>
traduit deux intentions&#160;:
rendre l&#8217;installation des dépendances possibles en se basant uniquement sur
ce fichier et accélérer le processus d&#8217;installation.</simpara>
<note>
<title>Avantages</title>
<itemizedlist>
<listitem>
<simpara>Le projet s&#8217;installe encore plus rapidement grâce à la commande <literal>npm ci</literal>.</simpara>
</listitem>
<listitem>
<simpara>Nous pouvons reproduire la même installation sur plusieurs ordinateurs.</simpara>
</listitem>
<listitem>
<simpara>La commande <literal>npm install</literal> installe plus rapidement en présence d&#8217;un fichier <literal>package-lock.json</literal>.</simpara>
</listitem>
</itemizedlist>
</note>
<note>
<title>Inconvénients</title>
<itemizedlist>
<listitem>
<simpara>Nous devons vérifier manuellement s&#8217;il y a des <emphasis>patchs</emphasis> avec <literal>npm outdated</literal> et <literal>npm update</literal>.</simpara>
</listitem>
<listitem>
<simpara>C&#8217;est une chose de plus à apprendre même si on n&#8217;a pas l&#8217;intention de l&#8217;utiliser.</simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="bower">
<title>npm c&#8217;est pour le back-end et bower pour le front-end</title>
<simpara><indexterm>
<primary>module npm</primary><secondary>bower</secondary>
</indexterm>
<indexterm>
<primary>bower</primary>
</indexterm>
<indexterm>
<primary>bower.json</primary>
</indexterm></simpara>
<simpara><emphasis>bower</emphasis> (<phrase role="URL"><link xl:href="https://bower.io">bower.io</link></phrase>) est un gestionnaire de modules
spécialisé dans le développement <emphasis>front-end</emphasis>.</simpara>
<simpara>Je pense qu&#8217;il était utile à une époque où l&#8217;outillage <emphasis>front-end</emphasis> disponible
dans Node était encore confidentiel.
Je pense aussi que cette époque est révolue, au sens où l&#8217;outillage dédié à
Node et aux navigateurs web tend à se confondre.</simpara>
<simpara>En apprenant ECMAScript, Node et <literal>npm</literal>, nous gagnons non seulement un outillage
disponible immédiatement, mais aussi la capacité à créer le nôtre.
Pour en savoir plus sur comment développer pour le <emphasis>front-end</emphasis> comme on développe
pour Node, je vous invite à lire le <link xl:href="../chapter-09/index.xml">chapitre&#160;9</link>.</simpara>
<note>
<title>Avantages</title>
<itemizedlist>
<listitem>
<simpara>On peut installer un projet sans qu&#8217;il possède un fichier <literal>package.json</literal>.</simpara>
</listitem>
<listitem>
<simpara>On n&#8217;a pas nécessairement besoin de s&#8217;outiller pour utiliser les modules&#160;Bower.</simpara>
</listitem>
</itemizedlist>
</note>
<note>
<title>Inconvénients</title>
<itemizedlist>
<listitem>
<simpara>Si on utilise déjà un fichier <literal>package.json</literal> pour d&#8217;autres besoins, autant l&#8217;utiliser pour les dépendances <emphasis>front-end</emphasis>&#160;; donc autant utiliser&#160;<literal>npm</literal>.</simpara>
</listitem>
<listitem>
<simpara>Le développement de&#160;Bower stagne depuis 2015 et je pense que le projet sera arrêté tôt ou&#160;tard.</simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="est_ce_que_je_dois_versionner_le_répertoire_node_modules">
<title>Est-ce que je dois versionner le répertoire node_modules ?</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>node_modules (répertoire)</secondary>
</indexterm>
<indexterm>
<primary>node_modules (répertoire)</primary>
</indexterm>
<indexterm>
<primary>package.json</primary>
</indexterm>
<indexterm>
<primary>package-lock.json</primary>
</indexterm></simpara>
<simpara>Le contenu du répertoire <literal>node_modules</literal> se recrée automatiquement
en utilisant l&#8217;exécutable <literal>npm</literal>, que ce soit avec <link linkend="install"><literal>npm install</literal></link> ou
<link linkend="update"><literal>npm update</literal></link>.
Mieux vaut versionner les fichiers <literal>package.json</literal> et
<link linkend="package-lock"><literal>package-lock.json</literal></link> pour être certain·e
de les recréer comme il&#160;faut.</simpara>
<simpara>Le répertoire <literal>node_modules</literal> n&#8217;a donc pas besoin d&#8217;être versionné.
Je vous encourage à <emphasis role="strong">ajouter <literal>node_modules</literal> dans le fichier <literal>.gitignore</literal></emphasis>.
Ce fichier texte se situe en général à la racine de votre projet.</simpara>
<note>
<title>Avantages</title>
<itemizedlist>
<listitem>
<simpara>Je n&#8217;en vois pas.</simpara>
</listitem>
</itemizedlist>
</note>
<note>
<title>Inconvénients</title>
<itemizedlist>
<listitem>
<simpara>C&#8217;est difficile à versionner avec Git en cas de conflit.</simpara>
</listitem>
<listitem>
<simpara>Ça va exploser si deux personnes utilisent des systèmes d&#8217;exploitation différents&#160;– certaines dépendances génèrent des fichiers en fonction du système.</simpara>
</listitem>
<listitem>
<simpara>Ça va exploser s&#8217;il manque un module quelque part&#160;– et ce sera plus un problème à régler que de <emphasis>ne pas</emphasis> versionner ce répertoire.</simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="yarn">
<title>Il paraît que Yarn, c&#8217;est mieux</title>
<simpara><indexterm>
<primary>module npm</primary><secondary>yarn</secondary>
</indexterm>
<indexterm>
<primary>yarn</primary>
</indexterm>
<indexterm>
<primary>yarn</primary>
</indexterm></simpara>
<simpara>L&#8217;application <emphasis>Yarn</emphasis> (<phrase role="URL"><link xl:href="https://yarnpkg.com">yarnpkg.com</link></phrase>) veut être une alternative
à l&#8217;exécutable&#160;<literal>npm</literal>.
Le programme vise une installation rapide, hors-ligne et sécurisée.</simpara>
<simpara>npm rattrape régulièrement les fonctionnalités qui <quote>donnent de l&#8217;avance</quote> à <emphasis>Yarn</emphasis>.
Le choix tient donc plutôt du goût ou de l&#8217;idéologie.
Essayez donc <emphasis>Yarn</emphasis> et gardez-le pour les bonnes raisons&#160;– les vôtres.</simpara>
<note>
<title>Avantages</title>
<itemizedlist>
<listitem>
<simpara>Le mode <emphasis>workspace</emphasis> permet de lier plusieurs projets entre eux de manière déclarative.</simpara>
</listitem>
</itemizedlist>
</note>
<note>
<title>Inconvénients</title>
<itemizedlist>
<listitem>
<simpara>Il faudra quand même savoir comment fonctionne npm pour les projets qui n&#8217;utilisent pas&#160;<emphasis>Yarn</emphasis>.</simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="all-your-base-are-belong-to-us">
<title>npm&#160;est lent, il installe la moitié d&#8217;Internet à chaque&#160;fois</title>
<simpara>L&#8217;exécutable <literal>npm</literal> passe le plus clair de son temps à faire des allers-retours
vers le registre&#160;<literal>npm</literal> en utilisant votre connexion Internet.
Il téléchargera un module seulement s&#8217;il ne l&#8217;a pas déjà téléchargé sur un autre projet.</simpara>
<simpara>L&#8217;équipe de développement de l&#8217;exécutable <literal>npm</literal> travaille à améliorer
ses performances et sa qualité d&#8217;utilisation.
Cette équipe n&#8217;a pas d&#8217;influence sur les choix faits par les personnes en charge
des modules.</simpara>
<simpara>Le temps de téléchargement d&#8217;un module&#160;<literal>npm</literal> dépend de deux choses&#160;:
du <emphasis role="strong">nombre de dépendances</emphasis> à installer et de leur <emphasis role="strong">poids</emphasis>, lequel correspond à
la somme des poids des scripts et des ressources additionnelles (images, documentation).
Dans les deux cas, <emphasis role="strong">plus il y en&#160;a, plus l&#8217;installation prendra du temps</emphasis>.</simpara>
<simpara>Par exemple, le seul ajout de <emphasis>webpack&#160;4</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/webpack">npmjs.com/webpack</link></phrase>)
augmente le coût de téléchargement de 14&#160;Mo lors de <literal>npm install</literal>.
Ce n&#8217;est pas rien et ce n&#8217;est certainement pas la faute de l&#8217;exécutable&#160;<literal>npm</literal>.</simpara>
<simpara>Le service en ligne <emphasis>Package Phobia</emphasis> (<phrase role="URL"><link xl:href="https://packagephobia.now.sh">packagephobia.now.sh</link></phrase>)
garde un historique du poids des modules <literal>npm</literal>.
Celui de <emphasis>webpack</emphasis> se trouve sur
<phrase role="URL"><link xl:href="https://packagephobia.now.sh/result?p=webpack">packagephobia.now.sh/result?p=webpack</link></phrase>.</simpara>
<figure>
<title>Coût d&#8217;installation du module&#160;npm&#160;webpack (en foncé) et de ses dépendances (en clair)</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/module-content.png"/>
</imageobject>
<textobject><phrase>module content</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Connaître le coût des dépendances de son projet</title>
<simpara><indexterm>
<primary>module npm</primary><secondary>cost-of-modules</secondary>
</indexterm>
<indexterm>
<primary>cost-of-modules</primary>
</indexterm>
<indexterm>
<primary>npx</primary>
</indexterm>
Le module&#160;<literal>npm</literal> <emphasis>cost-of-modules</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/cost-of-modules">npmjs.com/cost-of-modules</link></phrase>)
calcule la quantité et le poids des dépendances listées
dans un fichier <literal>package.json</literal>.</simpara>
<simpara>C&#8217;est pratique pour identifier quel module remplacer par un autre, plus léger et
plus rapide à installer.</simpara>
<screen>$ npx cost-of-modules               <co xml:id="CO152-1"/>
┌───────────┬─────────────┬───────┐
│ name      │ children    │ size  │
├───────────┼─────────────┼───────┤
│ lodash    │ 0           │ 1.34M │
├───────────┼─────────────┼───────┤
│ micro     │ 19          │ 0.67M │
├───────────┼─────────────┼───────┤
│ cowsay    │ 9           │ 0.22M │
├───────────┼─────────────┼───────┤
│ 3 modules │ 28 children │ 2.22M │
└───────────┴─────────────┴───────┘</screen>
<calloutlist>
<callout arearefs="CO152-1">
<para>La <link linkend="npx">commande <literal>npx</literal></link> est un raccourci pour exécuter des modules <literal>npm</literal> sans les installer.</para>
</callout>
</calloutlist>
</tip>
</section>
<section xml:id="errors">
<title>Que signifient les erreurs affichées pendant npm install ?</title>
<simpara><indexterm>
<primary>erreur</primary><secondary>lors de npm install</secondary>
</indexterm>
<indexterm>
<primary>lors de npm install</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>install</secondary><tertiary>erreur pendant l&#8217;installation</tertiary>
</indexterm>
<indexterm>
<primary>install</primary><secondary>erreur pendant l&#8217;installation</secondary>
</indexterm>
<indexterm>
<primary>erreur pendant l&#8217;installation</primary>
</indexterm></simpara>
<simpara>L&#8217;exécutable <literal>npm</literal> est généreux en messages pendant l&#8217;installation
de modules.
C&#8217;est parfois difficile à lire, notamment pour comprendre la raison du message
et la solution à apporter.</simpara>
<simpara>Si <literal>npm WARN</literal> s&#8217;affiche, ce n&#8217;est pas une erreur mais un message
à caractère informatif.<?asciidoc-br?>
Si <literal>npm ERR</literal> débute la ligne, il y a un problème sur lequel nous
avons une action immédiate à mener.</simpara>
<section xml:id="error-deprecated">
<title>Module déprécié</title>
<simpara><indexterm>
<primary>erreur</primary><secondary>npm WARN deprecated &#8230;&#8203;</secondary>
</indexterm>
<indexterm>
<primary>npm WARN deprecated &#8230;&#8203;</primary>
</indexterm></simpara>
<simpara>Un module est déprécié quand il n&#8217;est plus maintenu,
s&#8217;il est développé sous un nouveau nom ou si nous sommes encouragé·e·s à
<link linkend="install.version">faire une mise à jour majeure</link>.</simpara>
<simpara>Un module déprécié ne nous regarde pas sauf s&#8217;il est listé dans le champ
<literal>dependencies</literal> ou <literal>devDependencies</literal> d&#8217;un fichier <literal>package.json</literal>.</simpara>
<formalpara>
<title>Exemple d&#8217;encouragements à utiliser un autre module</title>
<para>
<screen>npm WARN deprecated babel-preset-es2017@6.24.1:
  Thanks for using Babel: <emphasis role="marked">we recommend using babel-preset-env</emphasis>
  now: please read babeljs.io/env to update!

npm WARN deprecated babel-preset-babili@0.0.10: babili has
  been <emphasis role="marked">renamed to babel-minify</emphasis>.
  Please update to babel-preset-minify</screen>
</para>
</formalpara>
<formalpara>
<title>Exemple de module qui n&#8217;est plus maintenu</title>
<para>
<screen>npm WARN deprecated nomnom@1.6.2: <emphasis role="marked">Package no longer supported</emphasis>.
  Contact support@npmjs.com for more info.</screen>
</para>
</formalpara>
<simpara>Un module qui n&#8217;est plus maintenu ne recevra probablement plus de mises à jour.
Il vaut mieux dans ce cas en trouver un autre qui fait plus ou moins la même chose.</simpara>
</section>
<section xml:id="error-skipping">
<title>Problème avec une dépendance optionnelle</title>
<simpara><indexterm>
<primary>npm</primary><secondary>install</secondary><tertiary>erreur pendant l&#8217;installation</tertiary>
</indexterm>
<indexterm>
<primary>install</primary><secondary>erreur pendant l&#8217;installation</secondary>
</indexterm>
<indexterm>
<primary>erreur pendant l&#8217;installation</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>npm WARN optional SKIPPING OPTIONAL &#8230;&#8203;</secondary>
</indexterm>
<indexterm>
<primary>npm WARN optional SKIPPING OPTIONAL &#8230;&#8203;</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>npm WARN notsup SKIPPING OPTIONAL &#8230;&#8203;</secondary>
</indexterm>
<indexterm>
<primary>npm WARN notsup SKIPPING OPTIONAL &#8230;&#8203;</primary>
</indexterm></simpara>
<simpara>Certains modules effectuent une opération de compilation&#160;: une partie de leur
code source est écrit dans un autre langage que l&#8217;ECMAScript et ils
font en sorte de créer un pont avec&#160;Node.</simpara>
<simpara>Il arrive que l&#8217;opération de compilation n&#8217;aboutisse pas pour diverses raisons
– logiciel manquant, incompatibilité avec le système d&#8217;exploitation
ou avec l&#8217;architecture CPU.</simpara>
<simpara>Le fait de voir écrit <literal>SKIPPING</literal> et <literal>OPTIONAL</literal> me laisse penser
que ce n&#8217;est pas grave si l&#8217;opération ne se passe pas comme prévu.</simpara>
<screen>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY:
  Unsupported platform for fsevents@1.1.3:
  wanted {"os":"darwin","arch":"any"}
  (current: {"os":"win32","arch":"x64"})</screen>
</section>
<section xml:id="error-404">
<title>Module introuvable</title>
<simpara><indexterm>
<primary>npm</primary><secondary>install</secondary><tertiary>erreur pendant l&#8217;installation</tertiary>
</indexterm>
<indexterm>
<primary>install</primary><secondary>erreur pendant l&#8217;installation</secondary>
</indexterm>
<indexterm>
<primary>erreur pendant l&#8217;installation</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>npm ERR! code E404</secondary>
</indexterm>
<indexterm>
<primary>npm ERR! code E404</primary>
</indexterm></simpara>
<simpara>Le module que vous cherchez à installer n&#8217;existe pas.
Il s&#8217;agit peut-être d&#8217;une erreur de frappe ou alors le module a été retiré
de la circulation.</simpara>
<screen>$ npm i aria-roless
npm ERR! code E404
npm ERR! 404 Not Found: aria-roless@latest</screen>
</section>
<section xml:id="error-crlf">
<title>Caractère de fin de ligne sous Windows</title>
<simpara><indexterm>
<primary>erreur</primary><secondary>npm error Expected linebreaks to be &#8230;&#8203;</secondary>
</indexterm>
<indexterm>
<primary>npm error Expected linebreaks to be &#8230;&#8203;</primary>
</indexterm></simpara>
<simpara>Les anciennes versions de&#160;<literal>npm</literal> avaient du mal à concilier les caractères de fin
de ligne sous Windows (<literal>\r\n</literal>), différents des autres systèmes (<literal>\n</literal>).</simpara>
<screen>npm error Expected linebreaks to be 'LF' but
  found 'CRLF' linebreak-style</screen>
<simpara><link linkend="npm.update">Mettez&#160;<literal>npm</literal> à jour</link> vers une version plus récente pour
régler le problème.</simpara>
</section>
<section xml:id="error-pkg">
<title>Fichier package.json incomplet</title>
<simpara><indexterm>
<primary>package.json</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>npm WARN &#8230;&#8203; No description</secondary>
</indexterm>
<indexterm>
<primary>npm WARN &#8230;&#8203; No description</primary>
</indexterm></simpara>
<simpara>Les messages suivants s&#8217;affichent quand les champs <literal>description</literal> et
<literal>repository</literal> manquent à l&#8217;appel de notre fichier <literal>package.json</literal>.</simpara>
<screen>npm WARN tmp@1.0.0 No description
npm WARN tmp@1.0.0 No repository field.</screen>
<simpara>Référez-vous à la section <quote><link linkend="package.json">Anatomie du fichier <literal>package.json</literal></link></quote>
pour savoir comment remplir ces champs manquants.</simpara>
</section>
<section xml:id="error-peer-dependency">
<title>Dépendance complémentaire à installer</title>
<simpara><indexterm>
<primary>npm</primary><secondary>install</secondary><tertiary>erreur pendant l&#8217;installation</tertiary>
</indexterm>
<indexterm>
<primary>install</primary><secondary>erreur pendant l&#8217;installation</secondary>
</indexterm>
<indexterm>
<primary>erreur pendant l&#8217;installation</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>npm WARN &#8230;&#8203; requires a peer of &#8230;&#8203;</secondary>
</indexterm>
<indexterm>
<primary>npm WARN &#8230;&#8203; requires a peer of &#8230;&#8203;</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>dépendance complémentaire</secondary>
</indexterm>
<indexterm>
<primary>dépendance complémentaire</primary>
</indexterm></simpara>
<simpara>Certains modules nécessitent des modules complémentaires pour fonctionner.
Toutefois ces derniers sont à installer manuellement.
C&#8217;est la signification du message d&#8217;erreur suivant&#160;:</simpara>
<screen>npm WARN <emphasis role="marked">react-power-picture</emphasis>@1.0.0 <emphasis role="marked">requires</emphasis> a peer of
  <emphasis role="marked">react</emphasis>@^15.0.0-0 || ^16.0.0-0 but none is installed.
  You must install peer dependencies yourself.</screen>
<simpara>Cet exemple indique que nous avons installé le module&#160;<literal>npm</literal>
<emphasis>react-power-picture</emphasis> et que le module complémentaire <emphasis>react</emphasis>
est nécessaire mais que nous ne l&#8217;avons pas installé.</simpara>
<simpara>Si vous pensez que c&#8217;est une erreur ou une incompréhension, désinstallez
le module et cherchez une alternative.
Cela se produit généralement quand on ne s&#8217;aperçoit pas qu&#8217;un module est dédié
à un certain framework&#160;– qu&#8217;on ne veut pas utiliser.</simpara>
</section>
</section>
</section>
<section xml:id="conclusion_5">
<title>Conclusion</title>
<simpara>L&#8217;exécutable <literal>npm</literal> est un outil qui va bien au-delà de la simple installation
de modules&#160;: il va jusqu&#8217;à <emphasis role="strong">créer un outillage autonome</emphasis> pour chacun de nos projets.</simpara>
<simpara>Nous avons appris à <emphasis role="strong">jongler entre les différentes versions d&#8217;un module</emphasis>
pour comprendre la notion de <link linkend="semver">version sémantique</link> et son effet
sur les commandes d&#8217;installation et de mise à&#160;jour.</simpara>
<simpara>Nous avons vu que les <emphasis role="strong">scripts&#160;<literal>npm</literal> représentent un outillage à portée de main</emphasis>.
Ils nous facilitent la vie en plus d&#8217;être partagés avec
les personnes impliquées dans un même projet.</simpara>
<simpara>Avec le langage ECMAScript (<link xl:href="../chapter-03/index.xml">chapitre&#160;3</link>),
l&#8217;environnement Node (<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>)
et maintenant&#160;<literal>npm</literal>, nous avons des fondations solides pour
déployer du code (<link xl:href="../chapter-06/index.xml">chapitre&#160;6</link>) et créer toutes
sortes d&#8217;applications ECMAScript.</simpara>
</section>
</chapter>
<chapter xml:id="déployer_notrecode">
<title>Déployer notre&#160;code</title>
<simpara>En déployant une application Node, nous améliorerons la
qualité de notre code en gommant les derniers bogues et en automatisant
la détection des erreurs et des failles de sécurité.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Déployer une application Node</simpara>
</listitem>
<listitem>
<simpara>Choisir son hébergement</simpara>
</listitem>
<listitem>
<simpara>Améliorer la portabilité</simpara>
</listitem>
<listitem>
<simpara>Démarrer automatiquement nos applications</simpara>
</listitem>
<listitem>
<simpara>À quoi penser après la mise en ligne&#160;?</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Ce chapitre nous permettra d&#8217;y voir plus clair du côté de l&#8217;hébergement
et de la mise en ligne d&#8217;une application Node.
Nous pourrons choisir ce qui nous paraît le plus abordable,
que ça soit en termes d&#8217;argent ou de complexité d&#8217;utilisation.</simpara>
<simpara>Nous mettrons en œuvre les
<link xl:href="../chapter-04/index.xml#process.env">variables d&#8217;environnement</link>
du chapitre 4 pour que nos applications en ligne
fonctionnent de la même manière que sur notre ordinateur.</simpara>
<simpara>Enfin, nous verrons différents types de service pour être tenu·e informé·e
des erreurs applicatives et des failles de sécurité, sans effort.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node&#160;v10</emphasis>
et <emphasis role="strong">npm&#160;v6</emphasis>.
Ce sont les versions stables recommandées en&#160;2019.</simpara>
</note>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal></title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-06
$ cd $(nodebook dir chapter-06)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les instructions d&#8217;installation pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<section xml:id="deploy">
<title>Déployer une application&#160;Node</title>
<simpara>Le choix de la technique de déploiement dépend de plusieurs facteurs qui
renvoient à eux-mêmes&#160;: l&#8217;hébergement peut dépendre du déploiement et vice-versa.</simpara>
<simpara>Je vous propose de partir balayer les différentes techniques de déploiement
avec des exemples et de voir quelles seraient les raisons d&#8217;opter pour l&#8217;une
ou l&#8217;autre d&#8217;entre&#160;elles.</simpara>
<simpara>Le choix est subjectif et vous appartient, en fonction de votre aisance
à vous en emparer.
C&#8217;est un sujet qui prend du temps avant d&#8217;être maîtrisé, donc n&#8217;hésitez pas
à vous y reprendre à plusieurs&#160;fois.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Quelles techniques de déploiement utiliser avec quel type d&#8217;hébergement ?</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><link linkend="hosting.paas"><emphasis>PaaS</emphasis></link></entry>
<entry align="left" valign="top"><link linkend="hosting.shared">Mutualisé</link></entry>
<entry align="left" valign="top"><link linkend="hosting.cloud">Cloud</link></entry>
<entry align="left" valign="top"><link linkend="hosting.lambda">Lambda</link></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.notebook">Notebook&#160;web</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.sftp">SSH/SFTP</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2248;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.github">Import GitHub</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.cli">CLI</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.git"><literal>git push</literal></link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.clone">SSH +&#160;<literal>git pull</literal></link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.recipe">Recette</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.docker"><literal>docker push</literal></link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.ci">Intégration continue</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<section xml:id="deploy.notebook">
<title>En codant dans un navigateur&#160;web</title>
<simpara><indexterm>
<primary>installation</primary><secondary>service en ligne</secondary>
</indexterm>
<indexterm>
<primary>service en ligne</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary>
</indexterm>
<indexterm>
<primary>service en ligne</primary>
</indexterm>
<indexterm>
<primary>Runkit</primary>
</indexterm></simpara>
<simpara>Le moyen le plus rapide d&#8217;exécuter un programme Node sans avoir à se préoccuper
du déploiement est d&#8217;utiliser un service en ligne et de modifier le code
avec un navigateur&#160;web.</simpara>
<simpara>Je recommande <emphasis>RunKit</emphasis> (<phrase role="URL"><link xl:href="https://runkit.com">runkit.com</link></phrase>) pour créer rapidement
du code qui tient dans un seul fichier, sans installer Node sur sa machine.
Le code est exécuté sur les serveurs de RunKit, le résultat s&#8217;affiche chez nous.
Les <link xl:href="../chapter-05/index.xml#modules">modules <literal>npm</literal></link>
(<link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>) sont installés automatiquement dans
leur version la plus récente.
<indexterm>
<primary>module</primary><secondary>npm</secondary>
</indexterm>
<indexterm>
<primary>npm</primary>
</indexterm></simpara>
<figure>
<title>Exemple de notebook RunKit dans le navigateur Firefox</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/runkit-notebook.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>runkit notebook</phrase></textobject>
</mediaobject>
</figure>
<simpara>RunKit propose aussi un modèle de <link linkend="lambda">fonction éphémère</link> dont le
résultat devient accessible depuis une URL dédiée.
<indexterm>
<primary>fonction</primary><secondary>éphémère (lambda)</secondary>
</indexterm>
<indexterm>
<primary>éphémère (lambda)</primary>
</indexterm>
Essayez de copier/coller le code suivant dans un nouveau notebook en vous
rendant sur <phrase role="URL"><link xl:href="https://runkit.com/new">runkit.com/new</link></phrase>&#160;:</simpara>
<formalpara>
<title>runkit-endpoint.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const pokemon = require('pokemon-random-name'); <co xml:id="CO153-1"/>

exports.endpoint = (request, response) =&gt; {     <co xml:id="CO153-2"/>
  response.end(pokemon());
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO153-1">
<para>Le module npm <phrase role="URL"><link xl:href="https://npmjs.com/pokemon-random-name">npmjs.com/pokemon-random-name</link></phrase> exporte une fonction qui retourne un nom aléatoire de Pokémon.</para>
</callout>
<callout arearefs="CO153-2">
<para><literal>exports.endpoint</literal> est spécifique à RunKit et accepte une fonction identique à l&#8217;événement <literal>server.on('request')</literal> du <link xl:href="../chapter-04/index.xml#http">module <literal>http</literal></link> (<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>).</para>
</callout>
</calloutlist>
<simpara>Une fois sauvegardé puis cliqué sur le lien <phrase role="Menu">endpoint</phrase>,
un nouvel onglet s&#8217;ouvre et affiche un nom aléatoire de Pokémon.
C&#8217;est la valeur de retour passée à la réponse, comme on l&#8217;aurait fait
avec le <link xl:href="../chapter-04/index.xml#http">module&#160;<literal>http</literal></link> ou dans une
<link xl:href="../chapter-07/index.xml">application web</link> (<link xl:href="../chapter-07/index.xml">chapitre&#160;7</link>).</simpara>
<simpara>Le service en ligne <emphasis>Glitch</emphasis> (<phrase role="URL"><link xl:href="https://glitch.com">glitch.com</link></phrase>) va plus loin
en développant, hébergeant et partageant des applications complètes.
<indexterm>
<primary>Glitch</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>Glitch</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>Glitch</secondary>
</indexterm>
<indexterm>
<primary>Glitch</primary>
</indexterm>
Le service redéploie notre application à chaque changement.
Le fichier <literal>.env</literal> stocke les
<link xl:href="../chapter-04/index.xml#process.env">variables d&#8217;environnement</link> de manière
sécurisée&#160;– personne d&#8217;autre que nous n&#8217;y a accès.
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.env</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.env</secondary>
</indexterm>
<indexterm>
<primary>process.env</primary>
</indexterm>
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm></simpara>
<figure>
<title>Exemple d&#8217;application Node sur glitch.com</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/glitch-app.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>glitch app</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Console&#160;web</title>
<simpara><indexterm>
<primary>terminal</primary>
</indexterm>
Glitch nous offre même une console web&#160;: un <link linkend="../chapter-04/index.adoc">terminal</link>
entièrement fonctionnel, depuis un navigateur&#160;!</simpara>
<simpara>C&#8217;est parfait pour <link xl:href="../chapter-08/index.xml">coder un outil en ligne de commande</link>
(<link xl:href="../chapter-08/index.xml">chapitre&#160;8</link>) en travaillant depuis plusieurs
ordinateurs sans avoir à tout réinstaller à chaque&#160;fois.</simpara>
</tip>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Remixez les exemples de cet ouvrage</title>
<simpara>Vous pouvez créer votre premier projet sur Glitch.
Remixez cet ouvrage en vous rendant sur
<phrase role="URL">https://glitch.com/edit/#!/remix/nodebook</phrase>.</simpara>
<simpara>Le contenu et les exemples seront copiés dans un nouveau projet,
exécutable et modifiable selon vos envies.</simpara>
</tip>
</section>
<section xml:id="deploy.sftp">
<title>En transférant des fichiers via&#160;SSH</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>SSH</secondary>
</indexterm>
<indexterm>
<primary>SSH</primary>
</indexterm></simpara>
<simpara>Transférer des fichiers est idéal pour débuter et lorsqu&#8217;on n&#8217;utilise pas Git
pour versionner son&#160;code.</simpara>
<simpara>Les services d&#8217;hébergement mutualisé, virtualisé ou dédié accordent
un accès à votre espace en ligne par le biais de
SSH (<phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Secure_Shell">fr.wikipedia.org/wiki/Secure_Shell</link></phrase>).
Ce protocole crée une connexion sécurisée&#160;: les commandes saisies dans votre
terminal font effet sur la machine sur laquelle vous êtes connecté·e.</simpara>
<simpara>Des logiciels comme <emphasis>FileZilla Client</emphasis> (<phrase role="URL"><link xl:href="https://filezilla-project.org/">filezilla-project.org/</link></phrase>)
servent d&#8217;interfaces graphiques pour transférer des fichiers vers une machine distante.</simpara>
<simpara>Les codes d&#8217;accès SSH se trouvent en général dans la section <phrase role="Menu">Aide</phrase>
ou <phrase role="Menu">Guides</phrase> de votre hébergeur.</simpara>
<figure>
<title>Exemple de connexion à un serveur SSH distant avec FileZilla Client sous macOS</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/filezilla-file-transfer.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>filezilla file transfer</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Windows</phrase> WinSCP</title>
<simpara><emphasis>WinSCP</emphasis> (<phrase role="URL"><link xl:href="https://winscp.net">winscp.net</link></phrase>) est une alternative libre à
FileZilla pour Windows.</simpara>
</tip>
<note>
<title><phrase role="RemarquePreTitre">Avancé</phrase> scp et rsync</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>rsync</secondary>
</indexterm>
<indexterm>
<primary>rsync</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>scp</secondary>
</indexterm>
<indexterm>
<primary>scp</primary>
</indexterm>
Notre terminal peut aussi servir à transférer des fichiers.
Deux programmes se basent sur SSH et sont installés par défaut sur la plupart
des ordinateurs Linux et macOS&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>scp</literal> pour envoyer des fichiers de machine à machine&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>rsync</literal> pour n&#8217;envoyer que les fichiers qui ont été modifiés ou supprimés.</simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="deploy.github">
<title>En important du code depuis GitHub</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>GitHub</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>GitHub</secondary>
</indexterm>
<indexterm>
<primary>GitHub</primary>
</indexterm></simpara>
<simpara>Importer du code depuis GitHub est la manière la plus simple de transférer
tous les fichiers versionnés sans être familier avec&#160;Git.</simpara>
<simpara>La plate-forme de <link linkend="deploy.notebook">programmation en ligne</link> Glitch
offre une option pour importer n&#8217;importe quel projet GitHub&#160;– à partir du moment
où le dépôt est public.</simpara>
<figure>
<title>Bouton d&#8217;import d&#8217;un dépôt GitHub sur glitch.com</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/glitch-github-import.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>glitch github import</phrase></textobject>
</mediaobject>
</figure>
<simpara>Un clic sur le bouton <guibutton>Import from GitHub</guibutton> ouvre une invite de saisie
destinée à mentionner le nom du dépôt GitHub concerné.
Le projet en cours sera entièrement remplacé par le contenu du dépôt distant.
C&#8217;est pratique pour récupérer des exercices ou pour apprendre en travaillant
sur du code écrit par quelqu&#8217;un d&#8217;autre.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Importer les exemples de cet ouvrage</title>
<simpara>Récupérez tout le contenu et les exemples de cet ouvrage
en recopiant <literal>oncletom/nodebook</literal> dans l&#8217;invite de saisie.</simpara>
</tip>
<simpara>La <link linkend="paas">plate-forme de services</link> <emphasis>Heroku</emphasis> (<phrase role="URL"><link xl:href="https://heroku.com">heroku.com</link></phrase>)
pousse l&#8217;import GitHub un peu plus loin.
<indexterm>
<primary>Heroku</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>Heroku</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>Heroku</secondary>
</indexterm>
<indexterm>
<primary>Heroku</primary>
</indexterm>
Sa fonctionnalité déploie l&#8217;application à chaque nouveau commit.
L&#8217;application redémarre ensuite automatiquement pour prendre les changements en compte.</simpara>
<figure>
<title>Paramétrage de déploiement automatisé depuis un dépôt GitHub sur heroku.com</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/heroku-github-import.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>heroku github import</phrase></textobject>
</mediaobject>
</figure>
<simpara>Une option nous permet de déployer une nouvelle version de l&#8217;application
à la suite d&#8217;une <link linkend="deploy.ci">intégration continue réussie</link>.
Nous réduisons ainsi les risques de déployer une version défectueuse.</simpara>
</section>
<section xml:id="deploy.cli">
<title>Avec l&#8217;outil en ligne de commande de l&#8217;hébergeur</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary>
</indexterm>
<indexterm>
<primary>service en ligne</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>outil en ligne de commande</secondary>
</indexterm>
<indexterm>
<primary>outil en ligne de commande</primary>
</indexterm></simpara>
<simpara>L&#8217;outil en ligne de commande d&#8217;un hébergeur permet de gérer les déploiements
et d&#8217;autres aspects de l&#8217;hébergement en même temps.</simpara>
<simpara>La <link linkend="paas">plate-forme de services</link> <emphasis>now</emphasis> (<phrase role="URL"><link xl:href="https://zeit.co/now">zeit.co/now</link></phrase>)
est un exemple de simplicité à ce niveau.
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>now</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>now</secondary>
</indexterm>
<indexterm>
<primary>now</primary>
</indexterm></simpara>
<formalpara>
<title>Installation et configuration de l&#8217;outil&#160;now</title>
<para>
<screen>$ npm install -g now
$ now login</screen>
</para>
</formalpara>
<simpara>Dans un terminal, déplacez-vous vers le répertoire de l&#8217;application à déployer.
Il suffit de taper&#160;<literal>now</literal> pour transférer les fichiers.
Les dépendances s&#8217;installent et le déploiement est accessible quelques secondes
plus tard&#160;:</simpara>
<screen>$ now
Deploying ~/workspace/dtc-innovation/food-coops-dashboards
&gt; Using Node.js 9.10.1 (requested: `&gt;=8.0.0`)
&gt; https://food-coops-dashboards-okgwzegyus.now.sh
&gt; Synced 1 file (169.84KB) [11s]
&gt; Building...
&gt; ▲ npm install
&gt; ✓ Using "package-lock.json"
&gt; ⧗ Installing 9 main dependencies...
&gt; ▲ npm install
&gt; added 389 packages in 8.609s
&gt; ▲ Snapshotting deployment
&gt; Build completed
&gt; Verifying instantiation in bru1
&gt; ✔ Scaled 1 instance in bru1 [31s]
&gt; Success! Deployment ready</screen>
<simpara>En optant pour l&#8217;offre payante, nous pouvons aussi gérer les noms de domaine et
sous-domaines en leur attribuant l&#8217;URL du déploiement&#160;:</simpara>
<screen>$ now alias food-coops-dashboards-okgwzegyus.now.sh my-domain.com</screen>
<note>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Application de bureau</title>
<simpara>Le client en ligne de commande existe en version graphique.
Un glisser/déposer de fichiers suffit à lancer un déploiement.</simpara>
<simpara>Il se télécharge sur <phrase role="URL"><link xl:href="https://zeit.co/download">zeit.co/download</link></phrase>.</simpara>
</note>
<simpara>L&#8217;outil de la <link linkend="paas">plate-forme de services</link> <emphasis>Heroku</emphasis> suit une approche
légèrement différente.
<indexterm>
<primary>Heroku</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>Heroku</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>Heroku</secondary>
</indexterm>
<indexterm>
<primary>Heroku</primary>
</indexterm>
Il nous informe de l&#8217;état de nos applications et en augmente ou diminue
la quantité de ressources allouée à leur fonctionnement.
Il simplifie la configuration de&#160;Git et
<link linkend="deploy.git">délègue le déploiement</link> à ce dernier.
L&#8217;outil se télécharge sur
<phrase role="URL"><link xl:href="https://devcenter.heroku.com/articles/heroku-cli">devcenter.heroku.com/articles/heroku-cli</link></phrase>.</simpara>
<formalpara>
<title>Configuration de l&#8217;outil <literal>heroku</literal></title>
<para>
<screen>$ heroku login</screen>
</para>
</formalpara>
<simpara>La commande <literal>heroku apps:create</literal> crée une nouvelle application chez <emphasis>Heroku</emphasis>.
On peut faire la même chose dans un navigateur web en nous rendant sur
<phrase role="URL"><link xl:href="https://dashboard.heroku.com/new-app">dashboard.heroku.com/new-app</link></phrase>.
La commande <literal>heroku git:remote</literal> associe notre copie locale Git à cette application&#160;:</simpara>
<formalpara>
<title>Configuration de notre dépôt Git pour en faire une application Heroku</title>
<para>
<screen>$ heroku apps:create --region eu
Creating app... done, ⬢ <emphasis role="marked">polar-taiga-61296</emphasis>, region is eu
https://polar-taiga-61296.herokuapp.com/
https://git.heroku.com/polar-taiga-61296.git
$ heroku git:remote --app <emphasis role="marked">polar-taiga-61296</emphasis></screen>
</para>
</formalpara>
<simpara>Il ne nous reste plus qu&#8217;à <link linkend="deploy.git">pousser notre code avec&#160;Git</link>
pour terminer la mise en ligne.</simpara>
</section>
<section xml:id="deploy.git">
<title>En faisant git&#160;push depuis sa machine</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>Git</secondary>
</indexterm>
<indexterm>
<primary>Git</primary>
</indexterm></simpara>
<simpara>Le déploiement d&#8217;une branche Git est le moyen le plus facile d&#8217;automatiser
tous les aspects d&#8217;un déploiement.</simpara>
<simpara>Cette méthode est privilégiée par les <link linkend="paas">plates-formes de services</link>
comme <emphasis>Heroku</emphasis>, <emphasis>now</emphasis> et <emphasis>Clever Cloud</emphasis>.
Chaque projet d&#8217;application est accessible via un dépôt Git distant
(<emphasis>remote</emphasis>)&#160;: un dépôt est utilisé pour versionner notre code (GitHub par exemple)
tandis qu&#8217;un autre sert pour réceptionner le code à déployer.</simpara>
<simpara>L&#8217;exemple suivant part du principe que notre terminal est positionné dans un
répertoire qui est un projet Git contenant au moins un <emphasis>commit</emphasis>.
Vous avez déjà configuré le dépôt distant à l&#8217;aide de
l'<link linkend="deploy.cli">outil de déploiement</link> <emphasis>Heroku</emphasis> (<link linkend="deploy.cli">section précédente</link>).</simpara>
<simpara>Nous pouvons vérifier si le dépôt est bien configuré à l&#8217;aide de la
commande <literal>git remote</literal>&#160;:</simpara>
<formalpara>
<title>Liste des dépôts distants d&#8217;un projet Git configuré pour Heroku</title>
<para>
<screen>$ git remote -v
<emphasis role="marked">heroku</emphasis>	https://git.heroku.com/mon-application.git (fetch)
<emphasis role="marked">heroku</emphasis>	https://git.heroku.com/mon-application.git (push)
origin	git@github.com:mon-compte/mon-application.git (fetch)
origin	git@github.com:mon-compte/mon-application.git (push)</screen>
</para>
</formalpara>
<simpara>La commande <literal>heroku git:remote</literal> crée un <emphasis>remote</emphasis> nommé
<literal>heroku</literal>.
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>Heroku</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>Heroku</secondary>
</indexterm>
<indexterm>
<primary>Heroku</primary>
</indexterm>
<indexterm>
<primary>Heroku</primary>
</indexterm>
Heroku redéploie notre application dès qu&#8217;on lui envoie du code avec
<literal>git push heroku</literal>&#160;:</simpara>
<screen>$ git push heroku
&gt; Counting objects: 4, done.
&gt; Delta compression using up to 4 threads.
&gt; Compressing objects: 100% (4/4), done.
&gt; Writing objects: 100% (4/4), 17.77 KiB | 5.92 MiB/s, done.
&gt; Total 4 (delta 2), reused 0 (delta 0)
&gt; remote: Compressing source files... done.
&gt; remote: Building source:
&gt; remote:
&gt; remote: -----&gt; Node.js app detected
&gt; remote:
&gt; remote: -----&gt; Creating runtime environment
&gt; ...
&gt; remote: -----&gt; Launching...
&gt; remote:        Released v30                     <co xml:id="CO154-1"/>
&gt; remote:        https://mon-application.herokuapp.com/ deployed
&gt; remote:
&gt; remote: Verifying deploy... done.</screen>
<calloutlist>
<callout arearefs="CO154-1">
<para>C&#8217;est le trentième déploiement&#160;– on peut revenir à une version antérieure si nécessaire.</para>
</callout>
</calloutlist>
<simpara>L&#8217;URL de l&#8217;application est rappelée dans les <emphasis>logs</emphasis> du déploiement.
En cas d&#8217;erreur, la version précédente de l&#8217;application reste en ligne.
Nous avons ainsi le temps de corriger le problème sans interruption de service.</simpara>
</section>
<section xml:id="deploy.clone">
<title>En faisant git&#160;pull lors d&#8217;une session&#160;SSH</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>SSH</secondary>
</indexterm>
<indexterm>
<primary>SSH</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>Git</secondary>
</indexterm>
<indexterm>
<primary>Git</primary>
</indexterm></simpara>
<simpara>La récupération du code source à distance avec Git et SSH est une manière de déployer
similaire à la mise à jour et au démarrage d&#8217;une application sur notre ordinateur.</simpara>
<simpara>Cette technique s&#8217;applique si notre application est placée sur un
<link linkend="hosting.shared">hébergement mutualisé</link>,
<link linkend="hosting.vm">dédié ou virtualisé</link> ou une <link linkend="hosting.cloud">offre cloud</link>.</simpara>
<simpara>L&#8217;exemple suivant illustre l&#8217;initialisation d&#8217;un projet via la connexion
SSH à un <link linkend="hosting.shared">hébergement mutualisé</link> chez alwaysdata.</simpara>
<formalpara>
<title>Première récupération d&#8217;un dépôt Git lors d&#8217;une session&#160;SSH</title>
<para>
<screen>$ ssh moncompte@ssh-moncompte.alwaysdata.net
$$ git clone https://github.com/moncompte/monprojet .
$$ npm install</screen>
</para>
</formalpara>
<simpara>Nous avons cloné un projet comme nous aurions pu le faire si nous installions
notre projet depuis zéro sur notre ordinateur.</simpara>
<simpara>Dans le cas d&#8217;une mise à jour, nous récupérons les changements depuis le dépôt
distant avec <literal>git pull</literal>.
<literal>npm install</literal> met à jour les dépendances s&#8217;il y a des différences entre
le contenu du fichier <literal>package.json</literal> et les modules déjà installés
(<link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>).</simpara>
<formalpara>
<title>Mise à jour d&#8217;une application lors d&#8217;une session&#160;SSH</title>
<para>
<screen>$ ssh moncompte@ssh-moncompte.alwaysdata.net
$$ git pull
$$ npm install</screen>
</para>
</formalpara>
<simpara>Dans le cas d&#8217;alwaysdata, l&#8217;application se redémarre depuis
l'<link linkend="hosting.shared">interface d&#8217;administration</link>.
Dans les autres cas, redémarrez l&#8217;application selon le procédé choisi après
avoir lu la section <quote><link linkend="startup">Démarrer automatiquement nos applications</link></quote>.</simpara>
</section>
<section xml:id="deploy.recipe">
<title>Avec une recette de déploiement (Ansible, Chef, etc.)</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>recette</secondary>
</indexterm>
<indexterm>
<primary>recette</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>SSH</secondary>
</indexterm>
<indexterm>
<primary>SSH</primary>
</indexterm></simpara>
<simpara>La recette de déploiement est la manière la plus complète de partager et
d&#8217;automatiser un déploiement complexe.</simpara>
<simpara>Cette méthode se place dans la continuité de
<link linkend="deploy.clone"><literal>git pull</literal> lors d&#8217;une session SSH</link>&#160;: nous orchestrons les
actions nécessaires au déploiement en les listant dans un
fichier de configuration, en choisissant dans quel ordre les déclencher
et sur quel(s) serveur(s).</simpara>
<simpara>Nous retrouvons Puppet (<phrase role="URL"><link xl:href="https://puppet.com">puppet.com</link></phrase>),
Chef (<phrase role="URL"><link xl:href="https://www.chef.io">www.chef.io</link></phrase>) et Ansible (<phrase role="URL"><link xl:href="https://ansible.com">ansible.com</link></phrase>)
parmi les outils les plus utilisés et les mieux documentés.
Ils ont des philosophies de configuration et d&#8217;exécution différentes
– l&#8217;idéal est encore d&#8217;essayer d&#8217;écrire une première recette avec chacun d&#8217;entre
eux pour voir celui qui vous semble le plus naturel à utiliser.</simpara>
<simpara>Ma préférence va vers Ansible car le logiciel s&#8217;installe facilement
sur macOS et Linux, se configure avec une syntaxe que je connais déjà (YAML)
et je trouve ses messages d&#8217;erreurs informatifs.</simpara>
<simpara>L&#8217;exemple suivant illustre le déploiement de l&#8217;application Node <emphasis>Slackin</emphasis>
(<phrase role="URL"><link xl:href="https://github.com/rauchg/slackin">github.com/rauchg/slackin</link></phrase>) sur
l'<link linkend="hosting.shared">hébergement mutualisé</link> alwaysdata&#160;:</simpara>
<screen>$ ansible-playbook  -i ansible/inventory.yaml ansible/playbook.yaml

PLAY [webservers] *******************************

TASK [Gathering Facts] **************************
ok: [ssh-moncompte.alwaysdata.net]

TASK [code source via git] **********************
ok: [ssh-moncompte.alwaysdata.net]

TASK [mise à jour des modules `npm`] **************
ok: [ssh-moncompte.alwaysdata.net]

PLAY RECAP **************************************
ssh-moncompte.alwaysdata.net : ok=3</screen>
<simpara>La commande précédente a eu pour effet de créer des connexions SSH avec les
machines listées dans le fichier <literal>inventory.yaml</literal> puis de jouer les actions
listées dans le fichier <literal>playbook.yaml</literal>.</simpara>
<note>
<title>Inventaire</title>
<simpara><emphasis role="strong">Liste de serveurs connus</emphasis> sur lesquels effectuer des déploiements.
En les catégorisant (par type, par emplacement), on contrôle finement
les actions à déclencher&#160;; par exemple, uniquement les serveurs web de production,
les bases de données de test, l&#8217;API de la région Europe.</simpara>
</note>
<note>
<title>Playbook</title>
<simpara><emphasis role="strong">Liste des actions possibles</emphasis> en fonction des types de serveurs.
Ces actions peuvent être rejouées à l&#8217;infini et de manière prédictible.</simpara>
</note>
<simpara>Le <emphasis>playbook</emphasis> suivant illustre deux tâches appliquées uniquement sur
les serveurs étiquetés dans notre inventaire en tant que <literal>webservers</literal>&#160;:</simpara>
<formalpara>
<title>ansible/playbook.yaml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">---
- hosts: webservers
  tasks:
    - name: code source via git
      git:                                            <co xml:id="CO155-1"/>
        repo: "https://github.com/rauchg/slackin.git" <co xml:id="CO155-2"/>
        dest: "{{ ansible_env.HOME }}"
        clone: yes                                    <co xml:id="CO155-3"/>
        update: yes                                   <co xml:id="CO155-4"/>
    - name: mise à jour des modules npm
      npm:                                            <co xml:id="CO155-5"/>
        state: present                                <co xml:id="CO155-6"/>
        path: "{{ ansible_env.HOME }}"
        production: true                              <co xml:id="CO155-7"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO155-1">
<para>Actions Git&#160;– <phrase role="URL"><link xl:href="https://docs.ansible.com/ansible/2.5/modules/git_module">docs.ansible.com/ansible/2.5/modules/git_module</link></phrase>.</para>
</callout>
<callout arearefs="CO155-2">
<para>Adresse du dépôt Git à récupérer.</para>
</callout>
<callout arearefs="CO155-3">
<para>Indique de cloner le dépôt s&#8217;il n&#8217;est pas déjà présent.</para>
</callout>
<callout arearefs="CO155-4">
<para>Indique de récupérer les <emphasis>commit</emphasis> du dépôt en faisant <literal>git pull</literal>.</para>
</callout>
<callout arearefs="CO155-5">
<para>Actions npm&#160;– <phrase role="URL"><link xl:href="https://docs.ansible.com/ansible/2.5/modules/npm_module">docs.ansible.com/ansible/2.5/modules/npm_module</link></phrase>.</para>
</callout>
<callout arearefs="CO155-6">
<para>Indique d&#8217;installer les dépendances <literal>npm</literal> avec <literal>npm install</literal>.</para>
</callout>
<callout arearefs="CO155-7">
<para>Indique de lancer la mise à jour des modules <literal>npm</literal> avec l&#8217;option <literal>--production</literal>&#160;– c&#8217;est-à-dire sans les dépendances listées dans le champ <literal>devDependencies</literal>.</para>
</callout>
</calloutlist>
<simpara>Les tâches sont réplicables sur les serveurs listés dans un fichier d&#8217;inventaire.</simpara>
<formalpara>
<title>ansible/inventory.yaml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">webservers:
  hosts:
    ssh-moncompte.alwaysdata.net</programlisting>
</para>
</formalpara>
<simpara>Nous déployons sur un seul serveur dans ce cas de figure,
mais nous pourrions tout à fait déployer une même application avec la même
configuration sur une dizaine de serveurs (application à fort trafic)
ou chez plusieurs centaines de clients.
Dans tous les cas, l&#8217;application serait dans un état cohérent sur toutes les
machines, avec peu de chances d&#8217;oublier une opération et une plus grande facilité
à revenir en arrière.</simpara>
</section>
<section xml:id="deploy.docker">
<title>En publiant une image Docker</title>
<simpara><indexterm>
<primary>installation</primary><secondary>Docker</secondary>
</indexterm>
<indexterm>
<primary>Docker</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>Docker</secondary>
</indexterm>
<indexterm>
<primary>Docker</primary>
</indexterm></simpara>
<simpara>Une image Docker est un moyen fiable de reproduire le même environnement
applicatif et ses dépendances sur plusieurs systèmes d&#8217;exploitation
(Windows, Linux, macOS).</simpara>
<simpara>Un des objectifs de Node est de faire fonctionner un même script
sur tout système d&#8217;exploitation compatible.
Docker (<phrase role="URL"><link xl:href="https://www.docker.com">www.docker.com</link></phrase>) pousse cette compatibilité plus
loin en empaquetant tout ce qui est nécessaire au bon fonctionnement
de l&#8217;application (dépendances, logiciels système).
Le mécanisme d&#8217;exécution aide à la fois à orchestrer plusieurs conteneurs entre
eux&#160;– y&#160;compris bases de données et moteurs de recherche&#160;–
et à revenir dans l&#8217;état applicatif initial.</simpara>
<simpara>Le fichier suivant est un exemple fonctionnel d&#8217;image Docker.
Son intention est de créer un environnement Node&#160;v10
pour une <link xl:href="../chapter-07/index.xml">application web</link> (chapitre&#160;7)
qui comporte une <link xl:href="../chapter-05/index.xml">dépendance&#160;<literal>npm</literal></link> (chapitre&#160;5)&#160;:</simpara>
<formalpara>
<title>Dockerfile</title>
<para>
<programlisting language="dockerfile" linenumbering="unnumbered">FROM node:10-alpine

WORKDIR /app

COPY ./app.js ./app.js
COPY ./package.json ./package.json
RUN npm install --production

EXPOSE 4000

CMD ["npm", "start"]</programlisting>
</para>
</formalpara>
<simpara>Nous choisissons l&#8217;environnement Node (<literal>FROM</literal>), avant de procéder à la copie
des fichiers applicatifs vers l&#8217;image (<literal>COPY</literal>).
Suite à cela, nous installons aussi les dépendances de l&#8217;application et spécifions
quelle commande effectuer lorsque l&#8217;image Docker est lancée&#160;(<literal>CMD</literal>).</simpara>
<simpara>L&#8217;image se construit et on démarre le conteneur sur notre ordinateur comme suit&#160;:</simpara>
<screen>$ docker build -t nodebook/demo .
$ docker run -ti --rm -p 4000:4000 nodebook/demo
$ curl -L http://localhost:4000</screen>
<simpara>Nous avons déjà parlé de l'<link linkend="deploy.cli">outil en ligne de commande</link>
du service <literal>now</literal> (<phrase role="URL"><link xl:href="https://zeit.co/now">zeit.co/now</link></phrase>) dans la section du même nom.
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>now</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>now</secondary>
</indexterm>
<indexterm>
<primary>now</primary>
</indexterm>
Il est aussi capable de déployer un conteneur Docker en se basant sur un fichier
<literal>Dockerfile</literal> en ajoutant l&#8217;option <literal>--docker</literal>&#160;:</simpara>
<screen>$ now <emphasis role="marked">--docker</emphasis> --public
&gt; Deploying ~/.../examples under oncletom
&gt; https://examples-zlssezfiej.now.sh [in clipboard] (bru1) [7s]
&gt; Synced 1 file (156B) [7s]
&gt; Building…
&gt; ▲ docker build
&gt; Sending build context to Docker daemon 17.92 kBkB
&gt; ▲ Storing image
&gt; Build completed
&gt; Verifying instantiation in bru1
&gt; ✔ Scaled 1 instance in bru1 [18s]
&gt; Success! Deployment ready</screen>
<simpara>Une autre solution consiste à publier notre image sur <emphasis>Docker&#160;Hub</emphasis>
(<phrase role="URL"><link xl:href="https://hub.docker.com">hub.docker.com</link></phrase>), la plate-forme officielle de partage
d&#8217;images Docker, qui dispose d&#8217;une fonctionnalité de construction automatique
connectée à GitHub.
Docker&#160;Hub construit l&#8217;image à chaque nouveau <emphasis>commit</emphasis>,
puis la met à disposition.</simpara>
<figure>
<title>Création d&#8217;un build automatisé à partir d&#8217;un dépôt GitHub</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/docker-automated-build.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>docker automated build</phrase></textobject>
</mediaobject>
</figure>
<simpara>Il ne reste alors plus qu&#8217;à la collecter sur un ordinateur avec la commande
<literal>docker pull</literal>&#160;– que ce soit sur notre machine, chez notre hébergeur
ou par le biais du <link linkend="deploy.ci">service d&#8217;intégration continue</link>.
Cette façon de procéder garantit l&#8217;exécution de ce même environnement applicatif,
partout.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Avancé</phrase> Amazon Elastic Container Registry</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>AWS</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>AWS</secondary>
</indexterm>
<indexterm>
<primary>AWS</primary>
</indexterm>
<indexterm>
<primary>AWS (Amazon Web Services)</primary>
</indexterm>
Le <link linkend="hosting.cloud">fournisseur cloud</link> Amazon Web Services intègre
un registre privé d&#8217;images Docker pour chaque compte client.</simpara>
<simpara><emphasis>Elastic Container Registry</emphasis> (ECR, <phrase role="URL"><link xl:href="https://aws.amazon.com/ecr/">aws.amazon.com/ecr/</link></phrase>)
se connecte à d&#8217;autres services comme <emphasis>Amazon CodeDeploy</emphasis> pour déclencher
des mises à jour d&#8217;infrastructure à chaque nouvelle image Docker.</simpara>
</note>
</section>
<section xml:id="deploy.ci">
<title>En paramétrant un logiciel d&#8217;intégration continue</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>intégration continue</secondary>
</indexterm>
<indexterm>
<primary>intégration continue</primary>
</indexterm></simpara>
<simpara>L&#8217;utilisation d&#8217;un logiciel d&#8217;intégration continue est la manière la plus
flexible d&#8217;automatiser tout type de déploiement.</simpara>
<simpara>L&#8217;intégration continue vise à vérifier si des régressions se sont glissées
dans notre code.
L&#8217;idée est de livrer régulièrement du code pour détecter les erreurs au plus tôt.<?asciidoc-br?>
Les services d&#8217;intégration continue automatisent cette pratique.
Ils s&#8217;intègrent avec d&#8217;autres services pour prévisualiser les branches,
compiler la documentation mais aussi pour déployer des artefacts sur d&#8217;autres
plates-formes&#160;: <link xl:href="../chapter-05/index.xml#publish">registre&#160;<literal>npm</literal></link>,
GitHub Pages, Heroku ou même <link linkend="hosting.lambda">Amazon Lambda</link>.</simpara>
<simpara>Le logiciel Jenkins (<phrase role="URL"><link xl:href="https://jenkins.io">jenkins.io</link></phrase>) s&#8217;installe sur notre propre
infrastructure tandis que des services en ligne comme
Circle&#160;CI (<phrase role="URL"><link xl:href="https://circleci.com">circleci.com</link></phrase>), Travis&#160;CI (<phrase role="URL"><link xl:href="https://travis-ci.com">travis-ci.com</link></phrase>)
et CodeShip (<phrase role="URL"><link xl:href="https://codeship.com">codeship.com</link></phrase>) mettent à disposition leur
infrastructure gratuitement pour les projets <emphasis>open&#160;source</emphasis>.
GitLab (<phrase role="URL"><link xl:href="https://www.gitlab.com">www.gitlab.com</link></phrase>) combine l&#8217;hébergement de dépôts Git
et l&#8217;intégration continue.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Windows</phrase> Service AppVeyor</title>
<simpara>J&#8217;utilise AppVeyor (<phrase role="URL"><link xl:href="https://appveyor.com">appveyor.com</link></phrase>) en complément d&#8217;un autre
service d&#8217;intégration continue quand il s&#8217;agit de tester
la <emphasis role="strong">compatibilité du code avec Windows</emphasis>
– ce qui est le cas des exemples de cet ouvrage.</simpara>
</tip>
<simpara>J&#8217;ai une préférence pour GitLab lorsque le projet y est hébergé.
Le reste du temps, j&#8217;utilise Travis&#160;CI car j&#8217;aime la clarté du fichier de configuration,
l&#8217;exhaustivité de la documentation et la qualité des échanges avec le service
d&#8217;assistance technique.</simpara>
<simpara>Le fichier suivant est un exemple de configuration pour Travis&#160;CI.
Il se place à la racine d&#8217;un projet à tester et s&#8217;écrit avec la syntaxe&#160;YAML&#160;:</simpara>
<formalpara>
<title>.travis.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">language: node_js
node_js: v10

script: npm test

deploy:
  provider: npm
  on:
    tags: true
  email: "$NPM_EMAIL"
  api-key: "$NPM_TOKEN"</programlisting>
</para>
</formalpara>
<simpara>Cet exemple est structuré en trois parties&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">configuration de l&#8217;environnement</emphasis>&#160;– en l&#8217;occurrence Node&#160;v10&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">commande de test</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">configuration du déploiement</emphasis> en cas de succès.</simpara>
</listitem>
</itemizedlist>
<simpara>Ici, le but est <link xl:href="../chapter-05/index.xml#publish">déployer le code sur le registre&#160;<literal>npm</literal></link>
quand les tests passent lors de la création d&#8217;un tag Git.
Les variables d&#8217;environnement <literal>$NPM_EMAIL</literal> et <literal>$NPM_TOKEN</literal> se règlent de
manière sécurisée sur l&#8217;écran de configuration du projet.
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm>
<indexterm>
<primary>variable</primary><secondary>d&#8217;environnement</secondary>
</indexterm>
<indexterm>
<primary>d&#8217;environnement</primary>
</indexterm></simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> .travis.yml</title>
<simpara>Une documentation adaptée aux projets Node est disponible à l&#8217;adresse suivante&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/">docs.travis-ci.com/user/languages/javascript-with-nodejs/</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<figure>
<title>Écran de configuration des variables d&#8217;environnement sécurisées.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/travisci-secrets.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>travisci secrets</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;exemple suivant illustre l&#8217;utilisation de
l'<link linkend="deploy.cli">outil en ligne de commande</link>&#160;<literal>now</literal> dès qu&#8217;un nouveau
<emphasis>commit</emphasis> est poussé sur la branche <literal>master</literal> et que les tests passent au vert&#160;:</simpara>
<formalpara>
<title>.travis.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">language: node_js
node_js: v10

before_deploy: npm install --global now

deploy:
  provider: script
  script: now --token $NOW_TOKEN
  on:
    branch: master</programlisting>
</para>
</formalpara>
<simpara>Les informations d&#8217;exécution des tests sont consignées au même titre que le statut
du déploiement.</simpara>
<figure>
<title>Écran illustrant le déploiement automatique d&#8217;une application Node avec la commande&#160;now.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/travisci-build.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>travisci build</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section xml:id="hosting">
<title>Choisir son hébergement</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>hébergement (voir hébergement)</secondary>
</indexterm>
<indexterm>
<primary>hébergement (voir hébergement)</primary>
</indexterm>
<indexterm>
<primary>hébergement</primary>
</indexterm></simpara>
<simpara>Nous allons nous intéresser aux différentes possibilités d&#8217;hébergement
d&#8217;applications&#160;Node.</simpara>
<simpara>Côté tarifs, il en existe des gratuites sous certaines conditions,
d&#8217;autres se paient à l&#8217;heure et d&#8217;autres à l&#8217;année.
Certaines offres sont figées, d&#8217;autres permettent d&#8217;ajouter des machines,
voire de changer la puissance en cours de route.</simpara>
<section xml:id="hosting.paas">
<title>Plate-forme de services (Platform as a Service, PaaS)</title>
<simpara><indexterm>
<primary>hébergement</primary><secondary>PaaS (Platform as a Service)</secondary>
</indexterm>
<indexterm>
<primary>PaaS (Platform as a Service)</primary>
</indexterm></simpara>
<simpara>Les plates-formes de services <emphasis role="strong">automatisent la configuration et le déploiement</emphasis>
de nos applications Node, mais également Ruby, Python et PHP, entre autres.
Elles se spécialisent dans des déploiements rapides, une allocation des
ressources flexible, à la demande et en un&#160;clic.</simpara>
<simpara>C&#8217;est le <emphasis role="strong">moyen le plus facile de déployer une application Node</emphasis>, surtout si
on utilise déjà Git pour versionner son code.</simpara>
<simpara>Leur philosophie est de <emphasis role="strong">tout penser en termes de ressources modulaires</emphasis>.
On paie pour une certaine capacité de CPU et de RAM, à la minute ou à l&#8217;heure.
Ces capacités s&#8217;augmentent ou se réduisent en quelques clics et sans changer
une seule ligne de code dans notre application.</simpara>
<simpara>Une application se déploie avec un <link linkend="deploy.cli">outil en ligne de commande</link> ou
avec <link linkend="deploy.git"><literal>git push</literal></link>.
Et nous pouvons l&#8217;automatiser avec une <link linkend="deploy.recipe">recette de déploiement</link>
et de l'<link linkend="deploy.ci">intégration continue</link>.
<indexterm>
<primary>déploiement</primary><secondary>outil en ligne de commande</secondary>
</indexterm>
<indexterm>
<primary>outil en ligne de commande</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>Git</secondary>
</indexterm>
<indexterm>
<primary>Git</primary>
</indexterm></simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sélection de fournisseurs PaaS</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">Déploiement</entry>
<entry align="left" valign="top">Add-ons</entry>
<entry align="left" valign="top">Gratuité</entry>
<entry align="left" valign="top">Tarif</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://zeit.co">zeit.co</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>cli</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>3&#160;apps</simpara></entry>
<entry align="left" valign="top"><simpara>15&#160;$/mois/10 apps</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://clever-cloud.com">clever-cloud.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Git</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>crédit&#160;20&#160;€</simpara></entry>
<entry align="left" valign="top"><simpara>5&#160;€/mois/app</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://gandi.net/hosting/simple">gandi.net/hosting/simple</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>cli/git/SSH</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>10&#160;jours</simpara></entry>
<entry align="left" valign="top"><simpara>5&#160;€/mois/app</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://scalingo.com">scalingo.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Git/GitHub</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>30&#160;jours</simpara></entry>
<entry align="left" valign="top"><simpara>7&#160;€/mois/app</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://heroku.com">heroku.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>cli/Git/GitHub/Dropbox</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>1&#160;000&#160;heures/mois</simpara></entry>
<entry align="left" valign="top"><simpara>7&#160;$/mois/app</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>La startup californienne Zeit (<phrase role="URL"><link xl:href="https://zeit.co">zeit.co</link></phrase>) édite le service
<emphasis>now</emphasis> (<phrase role="URL"><link xl:href="https://zeit.co/now">zeit.co/now</link></phrase>), qui est focalisé sur l&#8217;hébergement de
sites statiques, d&#8217;applications Node et de conteneurs Docker.
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>now</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>now</secondary>
</indexterm>
<indexterm>
<primary>now</primary>
</indexterm></simpara>
<simpara>Sa particularité est de créer une <emphasis role="strong">nouvelle instance d&#8217;application par déploiement</emphasis>.
On ne modifie donc jamais un déploiement déjà existant.
On parle alors de <emphasis role="strong">déploiement immuable</emphasis>.</simpara>
<simpara>C&#8217;est un service que j&#8217;apprécie pour sa simplicité.
C&#8217;est probablement le plus pratique à utiliser pour déployer votre première application,
si vous n&#8217;utilisez pas Git ou si l&#8217;application n&#8217;utilise pas de base de données.</simpara>
<simpara><emphasis>Heroku</emphasis> (<phrase role="URL"><link xl:href="https://heroku.com">heroku.com</link></phrase>) est une autre alternative plus complète,
toujours pour démarrer en douceur et sans sortir la carte bleue.
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>Heroku</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>Heroku</secondary>
</indexterm>
<indexterm>
<primary>Heroku</primary>
</indexterm>
<indexterm>
<primary>Heroku</primary>
</indexterm>
Des modules optionnels couvrent nos besoins en bases de données comme
MySQL, MariaDB, Redis ou PostgreSQL.
D&#8217;autres services gèrent l&#8217;envoi de courriels,
l&#8217;indexation de contenus, le monitoring, les logs, etc.
En majorité, ils offrent un petit espace de stockage gratuit pour tester le produit.</simpara>
<figure>
<title>Ensemble de ressources complémentaires à une application Node hébergée sur Heroku</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/heroku-addons.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>heroku addons</phrase></textobject>
</mediaobject>
</figure>
<simpara>S&#8217;il est facile de déployer sur ces infrastructures et de gérer les ressources
allouées à nos applications, à l&#8217;inverse la facture peut vite devenir salée
à mesure qu&#8217;on augmente leur puissance.
Ce coût est tout relatif&#160;: il est sûrement inférieur à celui de notre temps
passé à gérer les machines si on devait tout faire à la&#160;main.</simpara>
</section>
<section xml:id="hosting.shared">
<title>Hébergement mutualisé</title>
<simpara><indexterm>
<primary>hébergement</primary><secondary>mutualisé</secondary>
</indexterm>
<indexterm>
<primary>mutualisé</primary>
</indexterm></simpara>
<simpara>Les hébergements mutualisés ont l&#8217;avantage d&#8217;être <emphasis role="strong">bon marché et sans entretien</emphasis>.
Cette formule est un excellent compromis prix/services.
Elle demande un peu plus d&#8217;efforts que les <link linkend="hosting.paas">plates-formes de services</link>
car tout le travail d&#8217;automatisation repose sur nos épaules, si on le souhaite.</simpara>
<simpara>Ce modèle est adapté pour l&#8217;hébergement de fichiers statiques ou des sites web
construits avec des langages de scripts comme Python ou PHP.
Rares sont ceux qui ont adapté leur fonctionnement au modèle applicatif de&#160;Node.</simpara>
<simpara>Alwaysdata (<phrase role="URL"><link xl:href="https://alwaysdata.com">alwaysdata.com</link></phrase>) fait exception à la règle.
Ce service d&#8217;hébergement indépendant dispose d&#8217;une formule gratuite avec 100&#160;Mo
d&#8217;espace disque pour démarrer.</simpara>
<simpara>Le <link linkend="deploy">déploiement</link> de nos applications se fait via
<link linkend="deploy.sftp">SSH ou SFTP</link>, en <link linkend="deploy.clone">utilisant Git</link>,
avec un <link linkend="deploy.ci">service d&#8217;intégration continue</link> ou bien en
<link linkend="deploy.recipe">utilisant une recette</link>.
<indexterm>
<primary>déploiement</primary><secondary>SSH</secondary>
</indexterm>
<indexterm>
<primary>SSH</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>Git</secondary>
</indexterm>
<indexterm>
<primary>Git</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>intégration continue</secondary>
</indexterm>
<indexterm>
<primary>intégration continue</primary>
</indexterm></simpara>
<simpara>L&#8217;interface d&#8217;administration référence une section <emphasis role="strong">Sites</emphasis> dans la barre de
navigation, qui liste les différents sites de notre compte.
Si vous venez juste de créer le vôtre, un site a automatiquement été généré.
Son URL est déterminée à partir du <emphasis role="strong">nom d&#8217;utilisateur</emphasis> que vous avez choisi
lors de la phase d&#8217;inscription.</simpara>
<simpara>Un clic sur le bouton <guibutton>Modifier</guibutton> nous aidera à changer ses réglages&#160;:</simpara>
<figure>
<title>Liste de nos sites configurés chez alwaysdata</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/alwaysdata-site-list.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>alwaysdata site list</phrase></textobject>
</mediaobject>
</figure>
<simpara>Le nouvel écran mentionne les adresses auxquelles le site répond.
En basculant vers un compte payant, on a la possibilité d&#8217;affecter un ou
plusieurs domaine(s) ou sous-domaine(s) à ce même&#160;site.</simpara>
<figure>
<title>Écran de configuration d&#8217;un site chez alwaysdata.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/alwaysdata-site-informations.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>alwaysdata site informations</phrase></textobject>
</mediaobject>
</figure>
<simpara>Les réglages liés à Node se trouvent sous les adresses.
Le <phrase role="Menu">type</phrase> de site doit être changé en <literal>Node.js</literal> pour afficher
les champs de configuration qui nous intéressent.</simpara>
<simpara>La <phrase role="Menu">commande</phrase> se configure de la même manière
que l'<link xl:href="../chapter-04/index.xml#script">exécution d&#8217;un script Node</link>
(<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>).
On peut aussi faire appel au
<link xl:href="../chapter-05/index.xml#start">script <literal>npm start</literal></link> comme vu
au <link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>&#160;:</simpara>
<figure>
<title>Écran de configuration de Node.js pour un site chez alwaysdata.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/alwaysdata-site-configuration.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>alwaysdata site configuration</phrase></textobject>
</mediaobject>
</figure>
<simpara>La commande complète devrait apparaître dans la section <phrase role="Menu">Processus</phrase>
une fois la configuration sauvegardée.</simpara>
<figure>
<title>Liste des processus liés à nos sites chez alwaysdata</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/alwaysdata-process-list.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>alwaysdata process list</phrase></textobject>
</mediaobject>
</figure>
<simpara>En cas de doute, un bouton <guibutton>Redémarrer</guibutton> est affiché à côté du bouton
<guibutton>Modifier</guibutton> dans la liste des sites.
L&#8217;application sera alors interrompue et relancée.
Cette opération est nécessaire pour que l&#8217;application prenne en compte
les changements après une mise à jour ou un plantage.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Configuration</phrase> Une application Node par&#160;site</title>
<simpara>Alwaysdata nous permet d&#8217;associer un seul processus à un seul&#160;site.</simpara>
<simpara>Pour rendre une application Node accessible sur Internet, il faudra
créer un nouveau site et lui associer un autre nom de domaine,
ou un sous-domaine.</simpara>
</note>
<tip>
<title><phrase role="RemarquePreTitre">Aide</phrase> Forum d&#8217;entraide</title>
<simpara>L&#8217;équipe et la communauté alwaysdata (<phrase role="URL"><link xl:href="https://forum.alwaysdata.com">forum.alwaysdata.com</link></phrase>) sont
sympathiques et à l&#8217;écoute.
C&#8217;est un endroit idéal pour chercher des informations et poser des questions
pour mieux comprendre ce qui empêche votre application de fonctionner
sur leurs services.</simpara>
</tip>
</section>
<section xml:id="hosting.cloud">
<title>Serveur virtualisé, dédié ou&#160;cloud</title>
<simpara><indexterm>
<primary>hébergement</primary><secondary>serveur dédié</secondary>
</indexterm>
<indexterm>
<primary>serveur dédié</primary>
</indexterm>
<indexterm>
<primary>hébergement</primary><secondary>cloud</secondary>
</indexterm>
<indexterm>
<primary>cloud</primary>
</indexterm>
<indexterm>
<primary>hébergement</primary><secondary>virtualisé (VPS)</secondary>
</indexterm>
<indexterm>
<primary>virtualisé (VPS)</primary>
</indexterm>
<indexterm>
<primary>hébergement</primary><secondary>machine virtuelle</secondary>
</indexterm>
<indexterm>
<primary>machine virtuelle</primary>
</indexterm></simpara>
<simpara>La location d&#8217;un serveur dédié revient à payer pour un ordinateur complet,
son entretien physique et son placement dans un <emphasis>datacenter</emphasis>&#160;– un immense
parc à ordinateurs connecté à un réseau haute&#160;capacité.</simpara>
<simpara>Les <emphasis>Virtual Private Servers</emphasis> (<emphasis>VPS</emphasis>) sont des machines virtuelles
(<emphasis>Virtual Machine</emphasis>,&#160;<emphasis>VM</emphasis>)&#160;: les ressources d&#8217;un serveur dédié sont
réparties en plusieurs unités indépendantes les unes des autres, les&#160;VM.</simpara>
<simpara>Les offres cloud sont une version <quote>élastique</quote> des&#160;VM&#160;: la puissance de calcul,
la bande&#160;passante et la mémoire allouées sont ajustables sans avoir à
changer de machine, sans avoir à tout réinstaller.
Ces ressources sont considérées comme étant <quote>à&#160;la demande</quote>&#160;: elles s&#8217;obtiennent
en quelques secondes et peuvent être mises en pause, réduites, augmentées ou
supprimées à tout moment.</simpara>
<simpara>Leur modèle de facturation s&#8217;adapte à la souplesse d&#8217;allocation des ressources&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>au mois&#160;: VPS, serveur virtualisé, serveur dédié&#160;;</simpara>
</listitem>
<listitem>
<simpara>à l&#8217;heure&#160;: serveur cloud&#160;;</simpara>
</listitem>
<listitem>
<simpara>à la (milli)seconde&#160;: <link linkend="hosting.lambda">fonction événementielle</link>.</simpara>
</listitem>
</itemizedlist>
<simpara>Les modes de déploiement adaptés sont <link linkend="deploy.clone">Git</link>
pour obtenir le code, l'<link linkend="deploy.docker">orchestration d&#8217;applications avec Docker</link>
en combinaison avec des <link linkend="deploy.recipe">recettes de déploiement</link> et
l'<link linkend="deploy.ci">intégration continue</link>.
<indexterm>
<primary>déploiement</primary><secondary>Git</secondary>
</indexterm>
<indexterm>
<primary>Git</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>Docker</secondary>
</indexterm>
<indexterm>
<primary>Docker</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>recette</secondary>
</indexterm>
<indexterm>
<primary>recette</primary>
</indexterm></simpara>
<simpara>L&#8217;offre de serveurs virtualisés et dédiés (VPS, VM) est adaptée à des
besoins constants et pour héberger plusieurs applications sur une même machine
– à coût constant.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sélection de fournisseurs de serveur virtualisé et dédié</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">Déploiement</entry>
<entry align="left" valign="top">Add-ons</entry>
<entry align="left" valign="top">Tarif horaire</entry>
<entry align="left" valign="top">Tarif mensuel</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://ovh.com/fr/vps/">ovh.com/fr/vps/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>SSH</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>4&#160;€/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://online.net/fr/serveur-dedie">online.net/fr/serveur-dedie</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>SSH, CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>14,5&#160;€/serveur</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://alwaysdata.com/fr/pricing/#vps">alwaysdata.com/fr/pricing/#vps</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>SSH, API</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>149&#160;€/VM</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>L&#8217;offre cloud est plus intéressante si vos besoins sont
singulièrement fluctuants&#160;– par exemple lorsqu&#8217;il y a besoin de doubler la CPU
pendant deux heures, à heure fixe ou en fonction de la charge, mais aussi quand il
s&#8217;agit d&#8217;ajouter dix serveurs d&#8217;un coup pour traiter un calcul gourmand.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sélection de fournisseurs de serveur cloud</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">Déploiement</entry>
<entry align="left" valign="top">Add-ons</entry>
<entry align="left" valign="top">Tarif horaire</entry>
<entry align="left" valign="top">Tarif mensuel</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://scaleway.com">scaleway.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, SSH, API</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>0,004&#160;€</simpara></entry>
<entry align="left" valign="top"><simpara>2,30&#160;€/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://linode.com">linode.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, Git, API, Web</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>0,0075&#160;$</simpara></entry>
<entry align="left" valign="top"><simpara>5,00&#160;$/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://gandi.net/hosting/iaas">gandi.net/hosting/iaas</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, Git</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>0,0081&#160;€</simpara></entry>
<entry align="left" valign="top"><simpara>6,00&#160;€/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://ovh.com/fr/public-cloud/">ovh.com/fr/public-cloud/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>SSH, API, Web</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>0,062&#160;€</simpara></entry>
<entry align="left" valign="top"><simpara>26,00&#160;€/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://digitalocean.com">digitalocean.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>0,007&#160;$</simpara></entry>
<entry align="left" valign="top"><simpara>5,00&#160;$/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://aws.amazon.com/fr/ec2/">aws.amazon.com/fr/ec2/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, API, SSH, Web</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>0,0132&#160;$</simpara></entry>
<entry align="left" valign="top"><simpara>9,67&#160;$/VM</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Avancé</phrase> HashiCorp Terraform</title>
<simpara>Le logiciel <emphasis>Terraform</emphasis> (<phrase role="URL"><link xl:href="https://terraform.io/">terraform.io/</link></phrase>) a pour intention
de documenter une infrastructure (serveurs, DNS, stockage, etc.) sous forme
d&#8217;un fichier de configuration&#160;– versionnable avec&#160;Git.</simpara>
<simpara>C&#8217;est un outil idéal pour automatiser le déploiement d&#8217;une infrastructure de zéro,
mais aussi pour la faire évoluer d&#8217;une version à une autre.
Nous pouvons ainsi créer une architecture combinant plusieurs fournisseurs
sans gérer la complexité et la non-interopérabilité de leurs&#160;API.</simpara>
</tip>
</section>
<section xml:id="hosting.lambda">
<title>Fonction événementielle (Serverless, Lambda)</title>
<simpara><indexterm>
<primary>fonction</primary><secondary>éphémère (lambda)</secondary>
</indexterm>
<indexterm>
<primary>éphémère (lambda)</primary>
</indexterm>
<indexterm>
<primary>hébergement</primary><secondary>fonction éphémère</secondary>
</indexterm>
<indexterm>
<primary>fonction éphémère</primary>
</indexterm></simpara>
<simpara>La fonction événementielle est l&#8217;évolution ultime des offres cloud.
Au lieu de payer une machine ou une VM à l&#8217;heure,
<emphasis role="strong">nous payons pour exécuter du code à la milliseconde</emphasis>.
Ce code se déclenche en réaction à un événement se produisant ailleurs
sur l&#8217;infrastructure&#160;: une requête HTTP entrante, un nouveau fichier ou encore
un appel de l&#8217;API de l&#8217;hébergeur.</simpara>
<simpara>C&#8217;est le moyen le plus économique pour
<emphasis role="strong">exécuter du code à tout instant sans payer le temps d&#8217;inactivité d&#8217;une machine</emphasis>.
On pourrait comparer ce modèle à celui de la téléphonie mobile lorsqu&#8217;on a à choisir
entre un forfait (coût fixe même si on ne consomme pas tout) et un paiement à la carte
(coût dépendant de la consommation).</simpara>
<simpara>Les applications destinées à être exécutées comme fonctions événementielles
ont une architecture un peu différente.
Au lieu de démarrer un serveur web basé sur le
<link xl:href="../chapter-04/index.xml#http">module <literal>http</literal></link>, nous exposons
une <emphasis role="strong">fonction qui retourne un résultat de manière asynchrone</emphasis>&#160;:
<indexterm>
<primary>module</primary><secondary>http</secondary>
</indexterm>
<indexterm>
<primary>http</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>https</secondary>
</indexterm>
<indexterm>
<primary>https</primary>
</indexterm></simpara>
<formalpara>
<title>webtask.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const getPokemonName = require('pokemon-random-name');

module.exports = (context, send) =&gt; {     <co xml:id="CO156-1"/>
  return send(null, getPokemonName());
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO156-1">
<para>Le paramètre <literal>context</literal> contient des informations à propos de la requête entrante&#160;– paramètres, corps du message, etc.</para>
</callout>
</calloutlist>
<simpara>Ce code est très similaire à ce que nous pourrions écrire lors de l&#8217;événement
<literal>server.on('request')</literal> du <link xl:href="../chapter-04/index.xml#http">module&#160;<literal>http</literal></link>.</simpara>
<simpara>Voyons cela en contexte dans l&#8217;interface web du service Webtask
(<phrase role="URL"><link xl:href="https://webtask.io/make">webtask.io/make</link></phrase>)&#160;:</simpara>
<figure>
<title>Exemple de fonction événementielle et de son historique d&#8217;exécutions avec le service Webtask</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/webtask-make.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>webtask make</phrase></textobject>
</mediaobject>
</figure>
<simpara>Un nom de Pokémon est affiché lorsque nous accédons à l&#8217;URL indiquée en bas
de l&#8217;écran.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sélection de fournisseurs</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">Déploiement</entry>
<entry align="left" valign="top">Gratuité</entry>
<entry align="left" valign="top">Tarif des requêtes</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://aws.amazon.com/lambda">aws.amazon.com/lambda</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Web, CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>1&#160;M&#160;requêtes/mois</simpara></entry>
<entry align="left" valign="top"><simpara>0,2&#160;$/million</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://webtask.io">webtask.io</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Web, GitHub, CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>1&#160;requête/seconde</simpara></entry>
<entry align="left" valign="top"><simpara>sur devis</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://cloud.google.com/functions/">cloud.google.com/functions/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Web, GitHub, CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>2&#160;M&#160;equêtes/mois</simpara></entry>
<entry align="left" valign="top"><simpara>0,4&#160;$/million</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://zeit.co/now">zeit.co/now</link></phrase> + <literal>micro</literal></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>3&#160;apps</simpara></entry>
<entry align="left" valign="top"><simpara>15&#160;$/mois</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Chaque fournisseur de fonction événementielle a sa propre vision des paramètres
qui nous sont donnés, mais leurs fonctionnements restent très proches.</simpara>
<simpara>Je trouve que Webtask est le service avec la plus faible courbe d&#8217;apprentissage.
Son interface y est pour beaucoup.</simpara>
<simpara>Le service <emphasis>now</emphasis> est intéressant à plus d&#8217;un titre.
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary><tertiary>now</tertiary>
</indexterm>
<indexterm>
<primary>service en ligne</primary><secondary>now</secondary>
</indexterm>
<indexterm>
<primary>now</primary>
</indexterm>
<indexterm>
<primary>hébergement</primary><secondary>now</secondary>
</indexterm>
<indexterm>
<primary>now</primary>
</indexterm>
Il déploie un <link linkend="deploy.cli">outil en ligne de commande minimaliste</link>,
y compris des <link linkend="deploy.docker">conteneurs Docker</link>.
Il se transforme en fonction événementielle avec l&#8217;aide du
<link xl:href="../chapter-05/index.xml#modules">module&#160;<literal>npm</literal></link>
<emphasis>micro</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/micro">npmjs.com/micro</link></phrase>).</simpara>
<simpara>Le service Amazon Lambda représente une marche d&#8217;apprentissage un peu plus importante.
C&#8217;est un service important de par l&#8217;outillage et la documentation disponibles
à son sujet.
Le service est complet, surtout une fois couplé avec le service
<emphasis>Amazon API Gateway</emphasis>.
<indexterm>
<primary>hébergement</primary><secondary>AWS</secondary>
</indexterm>
<indexterm>
<primary>AWS</primary>
</indexterm>
<indexterm>
<primary>AWS (Amazon Web Services)</primary>
</indexterm></simpara>
<tip>
<title><phrase role="RemarquePreTitre">Avancé</phrase> Amazon API Gateway</title>
<simpara>Les Lambda d&#8217;Amazon ne sont pas accessibles depuis Internet par défaut.</simpara>
<simpara>Pour ce faire, il faut les relier au service  et associer
chaque route à une Lambda.
Le service se charge de transformer le résultat
– une chaîne de caractères, un tableau ou un objet ECMAScript&#160;–
en une réponse&#160;HTTP.</simpara>
</tip>
<note>
<title><phrase role="RemarquePreTitre">Définition</phrase> Serverless</title>
<simpara><indexterm>
<primary>hébergement</primary><secondary>fonction éphémère</secondary>
</indexterm>
<indexterm>
<primary>fonction éphémère</primary>
</indexterm>
Ce type d&#8217;infrastructure a été nommé <emphasis>serverless</emphasis> suite à une organisation
du marché pour proposer des alternatives aux Lambda d&#8217;Amazon.</simpara>
<simpara>Quand on entend le mot <emphasis>serverless</emphasis>&#160;– littéralement, sans serveur&#160;– il faut comprendre
<quote>sans serveur à gérer soi-même</quote>.
L&#8217;hébergeur dispose quand même de machines pour exécuter le code.
Leurs ressources sont mutualisées au maximum.</simpara>
</note>
</section>
</section>
<section xml:id="améliorer_la_portabilité_applicative">
<title>Améliorer la portabilité applicative</title>
<simpara>Le fonctionnement d&#8217;une application Node risque d&#8217;être affecté suite à son
déploiement en ligne.</simpara>
<simpara>Cette section a pour but de mettre en lumière des
<emphasis role="strong">points importants qui contribuent à la portabilité de l&#8217;application</emphasis>
– c&#8217;est-à-dire son bon fonctionnement une fois installée autre part
que sur un ordinateur de développement, indépendamment du service
d&#8217;hébergement retenu.</simpara>
<section xml:id="node.version">
<title>Utiliser la bonne version de&#160;Node</title>
<simpara><indexterm>
<primary>mise à jour de Node.js</primary>
</indexterm></simpara>
<simpara>Les <link linkend="hosting.paas">plates-formes de services</link> et certains
<link linkend="deploy.ci">services d&#8217;intégration continue</link> utilisent deux mécanismes
pour déterminer notre préférence quant à la version de Node à utiliser&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>le fichier <literal>.nvmrc</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>la valeur <literal>engines.node</literal> du fichier <literal>package.json</literal>.
<indexterm>
<primary>package.json</primary><secondary>engines</secondary>
</indexterm>
<indexterm>
<primary>engines</primary>
</indexterm>
<indexterm>
<primary>nvm</primary>
</indexterm></simpara>
</listitem>
</itemizedlist>
<simpara>Dans les deux cas, cela revient à préciser la version de Node
pour chacun de nos projets.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Conseil</phrase> Une version de Node par application</title>
<simpara>Je trouve qu&#8217;il est plus facile d&#8217;adapter la version de Node au cas par cas
au lieu de m&#8217;imposer une seule version pour tout le code que j&#8217;écris.</simpara>
<simpara>C&#8217;est très utile quand je reprends le code après plusieurs mois d&#8217;inactivité.</simpara>
</tip>
<simpara>Si vous avez décidé d&#8217;utiliser <link xl:href="../chapter-02/index.xml#nvm">nvm</link>
(<link xl:href="../chapter-02/index.xml">chapitre&#160;2</link>) ou si vous utilisez un service
compatible, sachez que cet outil sait s&#8217;adapter à la version
de Node précisée dans le fichier <literal>.nvmrc</literal>.</simpara>
<simpara>Un fichier <literal>.nvmrc</literal> ressemble à ceci&#160;:
<indexterm>
<primary>nvm</primary><secondary>.nvmrc (fichier de configuration)</secondary>
</indexterm>
<indexterm>
<primary>.nvmrc (fichier de configuration)</primary>
</indexterm></simpara>
<formalpara>
<title>.nvmrc</title>
<para>
<screen>v10</screen>
</para>
</formalpara>
<simpara>Avec cette valeur, cela revient au même de faire
<literal>nvm install v10</literal> et <literal>nvm install</literal>.
<indexterm>
<primary>installation</primary><secondary>nvm</secondary>
</indexterm>
<indexterm>
<primary>nvm</primary>
</indexterm>
La commande <literal>nvm use</literal> lit également la version contenue dans <literal>.nvmrc</literal>
et bascule automatiquement vers celle-ci&#160;:</simpara>
<screen>$ nvm install
$ nvm use
$ node --version</screen>
<simpara>Les <link linkend="hosting.paas">plates-formes de services</link> qui ne se basent pas sur <literal>nvm</literal>
regardent en général dans le fichier <literal>package.json</literal>&#160;:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "name": "my-app",
  "engines": {
    "node": "10.x.x"
  }
}</programlisting>
<simpara>Cette notation signifie <quote>la version la plus récente de Node v10</quote>.
<indexterm>
<primary>version sémantique</primary>
</indexterm></simpara>
<simpara>Enfin, la dernière version de Node est utilisée si cette information
ne peut pas être déterminée avec les deux mécanismes précédemment cités.</simpara>
</section>
<section xml:id="port">
<title>L&#8217;application tourne mais elle est injoignable</title>
<simpara><indexterm>
<primary>erreur</primary><secondary>application injoignable (timeout)</secondary>
</indexterm>
<indexterm>
<primary>application injoignable (timeout)</primary>
</indexterm></simpara>
<simpara>Il est nécessaire de renseigner un <emphasis>port</emphasis> lorsqu&#8217;on démarre un serveur
avec le <link xl:href="../chapter-04/index.xml#http">module <literal>http</literal></link>
(cf. <link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>).
Pourtant, nous allons faire face à un <quote>problème</quote> si le code suivant est déployé
sur une <link linkend="hosting.paas">plate-forme de services</link>.</simpara>
<formalpara>
<title>server-port.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const server = require('http').createServer();

server.listen(8000, () =&gt; console.log('localhost:8000'));</programlisting>
</para>
</formalpara>
<simpara>Le déploiement est considéré comme réussi, mais l&#8217;application est injoignable.
En effet, les plates-formes de services choisissent ce port pour nous
et l&#8217;associent à l&#8217;URL de notre application
– <phrase role="URL">monapplication.heroku.com</phrase> par exemple.</simpara>
<simpara>Le port est exposé au travers d&#8217;une
<link xl:href="../chapter-04/index.xml#process.env">variable d&#8217;environnement</link>
(<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>).
Par convention, c&#8217;est la variable <literal>PORT</literal> qui est utilisée.
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.env</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.env</secondary>
</indexterm>
<indexterm>
<primary>process.env</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>start</secondary>
</indexterm>
<indexterm>
<primary>start</primary>
</indexterm></simpara>
<simpara>Nous n&#8217;avons qu&#8217;à adapter le script précédent de cette manière&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>server-port-dynamic.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const server = require('http').createServer();
const {PORT=8000} = process.env;  <co xml:id="CO157-1"/>

server.listen(PORT, () =&gt; console.log(`localhost:${PORT}`));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO157-1">
<para>Extrait la valeur de la variable d&#8217;environnement <literal>process.env.PORT</literal>.</para>
</callout>
</calloutlist>
<simpara>La variable d&#8217;environnement <literal>PORT</literal> sera utilisée si elle existe et, sinon,
le port <literal>8000</literal> sera la valeur par défaut&#160;:</simpara>
<screen>$ node server-port-dynamic.js             <co xml:id="CO158-1"/>
$ <emphasis role="marked">PORT=4000</emphasis> node server-port-dynamic.js   <co xml:id="CO158-2"/></screen>
<calloutlist>
<callout arearefs="CO158-1">
<para>Affiche <literal>localhost:8000</literal>.</para>
</callout>
<callout arearefs="CO158-2">
<para>Affiche <literal>localhost:4000</literal>.</para>
</callout>
</calloutlist>
<simpara>C&#8217;est un premier pas pour s&#8217;affranchir des
<link linkend="configuration">éléments de configuration écrits en dur</link>.</simpara>
</section>
<section xml:id="configuration">
<title>S&#8217;affranchir des chemins et configurations écrits <quote>en dur</quote></title>
<simpara><indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.env</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.env</secondary>
</indexterm>
<indexterm>
<primary>process.env</primary>
</indexterm>
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm></simpara>
<simpara>La <link linkend="port">configuration du port</link> de l&#8217;application n&#8217;est pas le seul
élément contextuel à changer entre notre ordinateur et un autre
– que ce soit celui d&#8217;une personne contribuant au projet,
au <link linkend="deploy.ci">service d&#8217;intégration continue</link> ou au serveur d&#8217;hébergement.</simpara>
<simpara>Les <link xl:href="../chapter-04/index.xml#process.env">variables d&#8217;environnement</link>
sont à privilégier pour configurer nos applications avec souplesse.
Elles s&#8217;appliquent aux&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">URL</emphasis> d&#8217;accès aux bases de données, à des API distantes&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">clés d&#8217;API</emphasis> pour utiliser des services externes&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">réglages</emphasis> influençant le comportement de l&#8217;application&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">chemins d&#8217;accès</emphasis> vers des fichiers ou répertoires (stockage, cache)&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">environnements d&#8217;exécution</emphasis> (développement, test, production).</simpara>
</listitem>
</itemizedlist>
<simpara>L&#8217;accès à une base de données est un parfait exemple.
Les nom d&#8217;utilisateur, mot de passe et adresse du serveur
peuvent d&#8217;ailleurs se combiner en une seule variable composée sous forme&#160;d&#8217;URL.</simpara>
<simpara>Par exemple, si vous avez connaissance des identifiants et de l&#8217;adresse d&#8217;une
base de données MySQL ou MariaDB, composez l&#8217;URL de configuration comme suit&#160;:</simpara>
<screen>$ MYSQL_URL=mysql://user:password@server/database \
  node sql-connect.js</screen>
<formalpara>
<title>sql-connect.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const mysql = require('mysql2/promise');
const url = process.env.MYSQL_URL;

mysql.createConnection(url).then((connection) =&gt; {  <co xml:id="CO159-1"/>
  console.log('Connexion réussie :-)');             <co xml:id="CO159-2"/>
  connection.end();                                 <co xml:id="CO159-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO159-1">
<para>Connexion à la base de données en utilisant la variable d&#8217;environnement <literal>MYSQL_URL</literal>.</para>
</callout>
<callout arearefs="CO159-2">
<para>Affiche <literal>Connexion réussie&#160;:-)</literal> en cas de succès de connexion à la base de données.</para>
</callout>
<callout arearefs="CO159-3">
<para>Clôture de la connexion&#160;– sinon, le script ne se terminerait pas sans avoir recours à&#160;<keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>.</para>
</callout>
</calloutlist>
<simpara>Le script d&#8217;exemple devrait avoir affiché la liste des tables contenues
dans cette base de données ou un message d&#8217;erreur le cas échéant.</simpara>
<simpara>La documentation du <link xl:href="../chapter-05/index.xml#modules">module&#160;<literal>npm</literal></link>
<emphasis>mysql2</emphasis> (<phrase role="URL"><link xl:href="http://npmjs.com/mysql2">npmjs.com/mysql2</link></phrase>) détaille les différentes fonctions
utilisables pour interagir avec les bases de données compatibles.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Créer une base de données MySQL avec Docker</title>
<simpara><indexterm>
<primary>Docker</primary>
</indexterm>
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm>
Docker est un outil utile pour créer une base de données en
une ligne de commande et ce, sans avoir à installer MySQL sur notre ordinateur.</simpara>
<screen>$ docker run -ti --rm -e MYSQL_ROOT_PASSWORD=demo \
  -p 3306:3306 mysql:5</screen>
<simpara>Vous pourrez ainsi utiliser l&#8217;URL <literal>mysql://root:demo@localhost/mysql</literal>
comme variable d&#8217;environnement <literal>MYSQL_URL</literal> avec
le script d&#8217;exemple <literal>sql-connect.js</literal></simpara>
</tip>
<simpara>Certaines variables d&#8217;environnement sont tellement spécifiques à chaque usage
qu&#8217;elles doivent être obligatoirement configurées&#160;– identifiants, URL de la
base de données, etc.
Je trouve pratique de proposer une valeur par défaut pour les autres&#160;– le port
de l&#8217;application ou d&#8217;autres éléments plus <quote>esthétiques</quote>.</simpara>
<simpara>Enfin, j&#8217;ai aussi pris l&#8217;habitude de documenter les variables d&#8217;environnement
dans le fichier <literal>README.md</literal> à la racine de chaque projet.
Nous pouvons ainsi avoir une vue d&#8217;ensemble de la complexité de configuration
en un rapide coup d&#8217;œil&#160;– et cela nous évite de fouiller dans le code applicatif.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Optimisation</phrase> NODE_ENV=production</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>NODE_ENV</secondary>
</indexterm>
<indexterm>
<primary>NODE_ENV</primary>
</indexterm>
Certains <link xl:href="../chapter-05/index.xml#modules">modules&#160;<literal>npm</literal></link> comme <emphasis>Express</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/express">npmjs.com/express</link></phrase>) lisent la valeur de <literal>process.env.NODE_ENV</literal>.
Ils s&#8217;en servent pour procéder à des optimisations et masquer des informations
sensibles dans un contexte de production
– l&#8217;environnement qui fait face à nos utilisateurs.</simpara>
<screen>$ NODE_ENV=production node app.js</screen>
</tip>
</section>
<section xml:id="data-persistence">
<title>Faire persister les fichiers en dehors de notre application</title>
<simpara>Les fichiers écrits par notre application devraient être sauvegardés en dehors
de son arborescence de fichiers.</simpara>
<simpara>Prenons cet exemple d&#8217;arborescence&#160;:</simpara>
<screen>└── app
    ├── images
    └── uploads
        └── images</screen>
<simpara>Les images sont stockées à deux endroits&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>app/images</literal>&#160;: images statiques affichées par notre application web&#160;– on les versionne avec&#160;Git&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>app/uploads/images</literal>&#160;: fichiers enregistrés sur le disque par l&#8217;intermédiaire
de notre application&#160;– on ne les versionne pas avec&#160;Git.</simpara>
</listitem>
</itemizedlist>
<simpara>Un inconvénient se présente à nous&#160;: tout est perdu si nous supprimons
le répertoire <literal>app</literal> pour réinstaller l&#8217;application de zéro.
Je conseille donc d'<emphasis role="strong">écrire tout nouveau fichier dans un répertoire indépendant</emphasis>.
L&#8217;arborescence se transformerait comme suit&#160;:</simpara>
<screen>├── app
│   └── images
└── uploads
    └── images</screen>
<tip>
<title><phrase role="RemarquePreTitre">Rappel</phrase> Configurer le chemin avec une variable d&#8217;environnement</title>
<simpara>Le chemin d&#8217;accès devient flexible dès lors que nous le rendons configurable
avec une variable d&#8217;environnement.</simpara>
<screen>$ UPLOAD_DIR=/uploads npm start</screen>
</tip>
<simpara>Cette précaution s&#8217;avère encore plus utile
dès lors que nous utilisons une <link linkend="hosting.paas">plate-forme de services</link>
ou lorsque nous démarrons une nouvelle <link linkend="hosting.cloud">machine virtuelle</link>.
<indexterm>
<primary>hébergement</primary><secondary>cloud</secondary>
</indexterm>
<indexterm>
<primary>cloud</primary>
</indexterm>
<indexterm>
<primary>hébergement</primary><secondary>PaaS (Platform as a Service)</secondary>
</indexterm>
<indexterm>
<primary>PaaS (Platform as a Service)</primary>
</indexterm>
<emphasis role="strong">Chaque nouveau déploiement remet le système de fichiers à&#160;zéro</emphasis>.</simpara>
<simpara>Une solution complémentaire s&#8217;offre à nous lorsqu&#8217;il devient compliqué
de partager un même stockage de fichiers entre plusieurs machines ou&#160;VM&#160;:
c&#8217;est le <emphasis role="strong">stockage d&#8217;objets</emphasis>.</simpara>
<simpara>Le stockage d&#8217;objets est une solution de stockage élastique où la facturation
est basée sur la quantité des données stockées et téléchargées.
Nous accédons aux ressources stockées et à leur contenu avec des requêtes HTTP.
Les fichiers sont ainsi disponibles à tout moment, sans limite et
pour tous nos contextes applicatifs.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Amazon&#160;S3</title>
<simpara><indexterm>
<primary>AWS (Amazon Web Services)</primary>
</indexterm>
<indexterm>
<primary>hébergement</primary><secondary>AWS</secondary>
</indexterm>
<indexterm>
<primary>AWS</primary>
</indexterm>
Amazon S3 est le premier service à avoir rendu populaire le stockage d&#8217;objets
en 2006.
C&#8217;était la première fois que nous pouvions stocker des fichiers de manière infinie,
sans limitation de taille.</simpara>
<simpara>Son interface d&#8217;accès est même devenue un standard <emphasis>de&#160;facto</emphasis>&#160;: il est
utilisé par la plupart des concurrents afin de pouvoir passer d&#8217;un fournisseur
à un autre sans avoir à changer grand-chose à ses applications.</simpara>
</note>
<table frame="all" rowsep="1" colsep="1">
<title>Services de stockage d&#8217;objets compatibles avec l&#8217;API Amazon&#160;S3</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">Emplacement(s) du stockage</entry>
<entry align="left" valign="top">Tarif mensuel</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://aws.amazon.com/s3/">aws.amazon.com/s3/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Paris, Europe, Monde</simpara></entry>
<entry align="left" valign="top"><simpara>0,024&#160;$/Go</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://ovh.com/fr/public-cloud/storage/">ovh.com/fr/public-cloud/storage/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>France</simpara></entry>
<entry align="left" valign="top"><simpara>0,01&#160;€/Go</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://cloud.google.com/storage/">cloud.google.com/storage/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Europe, Monde</simpara></entry>
<entry align="left" valign="top"><simpara>0,026&#160;$/Go</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://minio.io">minio.io</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Flexible</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="database-migration">
<title>Versionner les schémas de base de données</title>
<simpara>Le contenu et la structure d&#8217;une application risquent de changer selon qu&#8217;elle tourne
sur notre ordinateur ou sur notre hébergement.
Nous pourrions reporter les changements de structure à la main mais c&#8217;est
source d&#8217;erreurs&#160;: difficile à reproduire et difficile à intégrer dans le
<link linkend="deploy">processus de déploiement</link>.
<indexterm>
<primary>déploiement</primary>
</indexterm></simpara>
<simpara>L&#8217;idéal est de synchroniser la structure de nos bases de données.
Ou plutôt, l&#8217;idéal est de <emphasis role="strong">reproduire les changements de structure</emphasis>.</simpara>
<simpara>L&#8217;exemple suivant illustre la création d&#8217;un nouveau champ.</simpara>
<formalpara>
<title>db-migration-step.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

module.exports = {
  up (database) {                                  <co xml:id="CO160-1"/>
    return database.addColumn('fromages', 'aoc', { <co xml:id="CO160-2"/>
      type: 'boolean',                             <co xml:id="CO160-3"/>
      defaultValue: false,
    });
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO160-1">
<para>Fonction exécutée lors de la migration.</para>
</callout>
<callout arearefs="CO160-2">
<para>Nous ajoutons un champ <literal>aoc</literal> dans la table <literal>fromages</literal>.</para>
</callout>
<callout arearefs="CO160-3">
<para>Ce champ est de type <emphasis>booléen</emphasis> avec <literal>false</literal> comme valeur par défaut.</para>
</callout>
</calloutlist>
<simpara>Ce fichier représente une <emphasis>étape de migration</emphasis>.
L&#8217;idée est de créer une nouvelle étape pour chaque changement de structure
et de les jouer au prochain déploiement.</simpara>
<simpara>Cet exemple de migration se base sur le module&#160;<literal>npm</literal> <emphasis>db-migrate</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/db-migrate">npmjs.com/db-migrate</link></phrase>).
Il se connecte à la base de données de notre choix, charge la liste des
migrations et exécute celles qui n&#8217;ont pas encore été jouées.</simpara>
<simpara>Les migrations ne s&#8217;utilisent pas que pour changer la structure de la base de données,
mais aussi pour <emphasis role="strong">la créer</emphasis>&#160;:</simpara>
<formalpara>
<title>db-migration-init.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

module.exports = {
  up (database) {
    return database.createTable('fromages', { <co xml:id="CO161-1"/>
      columns: {
        id: {                                 <co xml:id="CO161-2"/>
          type: 'int',
          primaryKey: true,
          autoIncrement: true
        },
        name: {                               <co xml:id="CO161-3"/>
          type: 'string'
        }
      }
    });
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO161-1">
<para>Création d&#8217;une nouvelle table <literal>fromages</literal> avec deux colonnes.</para>
</callout>
<callout arearefs="CO161-2">
<para>La première colonne se nomme <literal>id</literal>&#160;– elle est numérique et s&#8217;auto-incrémente à chaque nouvel enregistrement.</para>
</callout>
<callout arearefs="CO161-3">
<para>La seconde colonne se nomme <literal>name</literal>&#160;– c&#8217;est une chaîne de caractères.</para>
</callout>
</calloutlist>
<simpara>Si nous mettons ces deux exemples bout à bout, nous sommes alors en mesure
de créer une table puis d&#8217;y appliquer un changement en ajoutant une nouvelle
colonne.</simpara>
<simpara>Ainsi, nous sommes en mesure de répliquer les changements de structures sur d&#8217;autres ordinateurs
et <emphasis role="strong">reproduire l&#8217;évolution du schéma de la base de données en partant de zéro</emphasis>.
Nous avons rejoué toutes les migrations sur notre outil d&#8217;intégration
continue pour nous assurer de leur robustesse et revenir en arrière si nécessaire.</simpara>
</section>
</section>
<section xml:id="startup">
<title>Démarrer automatiquement une application</title>
<simpara><indexterm>
<primary>npm</primary><secondary>start</secondary>
</indexterm>
<indexterm>
<primary>start</primary>
</indexterm></simpara>
<simpara>Jusqu&#8217;à présent, nous avons démarré les scripts de cet ouvrage
avec l&#8217;exécutable <literal>node</literal> ou avec la commande <literal>npm start</literal>.
C&#8217;est un processus manuel qui nécessite de conserver un onglet ouvert
dans notre terminal pour maintenir l&#8217;application en fonctionnement.</simpara>
<simpara>Cette section explore des mécanismes pour <emphasis role="strong">détacher le processus du terminal</emphasis>
et pour <emphasis role="strong">lancer l&#8217;application au démarrage ou redémarrage d&#8217;un ordinateur</emphasis>.</simpara>
<section xml:id="lhébergeur_sen_occupe_à_notre_place">
<title>L&#8217;hébergeur s&#8217;en occupe à notre place</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary>
</indexterm>
<indexterm>
<primary>service en ligne</primary>
</indexterm></simpara>
<simpara>Les <link linkend="hosting.paas">plates-formes de service</link> automatisent le démarrage de
l&#8217;application.
Elles exécutent la <link xl:href="../chapter-05/index.xml#start">commande <literal>npm start</literal></link>
dès que le déploiement est terminé.</simpara>
<simpara>C&#8217;est tout.</simpara>
</section>
<section xml:id="process-manager">
<title>Avec un gestionnaire de processus</title>
<simpara><indexterm>
<primary>gestionnaire de processus</primary>
</indexterm></simpara>
<simpara>Un gestionnaire de processus a deux utilités&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">détacher un processus</emphasis> de notre terminal&#160;– si on le ferme, l&#8217;application tourne toujours&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">gérer plusieurs processus par application</emphasis>&#160;– un frontal web et l&#8217;admin par exemple.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>pm2</emphasis> (<phrase role="URL"><link xl:href="https://pm2.keymetrics.io">pm2.keymetrics.io</link></phrase>) est un gestionnaire de processus
disponible en tant que <link xl:href="../chapter-05/index.xml#modules">module&#160;<literal>npm</literal></link>
(<phrase role="URL"><link xl:href="https://npmjs.com/pm2">npmjs.com/pm2</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>pm2</secondary>
</indexterm>
<indexterm>
<primary>pm2</primary>
</indexterm>
Il fonctionne sous Linux, Windows et macOS.</simpara>
<simpara>La commande suivante démarre un script et le place aussitôt en tâche de fond&#160;:</simpara>
<screen>$ pm2 start app.js</screen>
<figure>
<title>Exemple de démarrage et d&#8217;affichage de l&#8217;état d&#8217;une application Node avec pm2</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/pm2-start.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>pm2 start</phrase></textobject>
</mediaobject>
</figure>
<simpara>Cette même application s&#8217;arrête avec la commande <literal>pm2 stop</literal> et
se relance pour prendre en compte des changements de code avec <literal>pm2 restart</literal>.</simpara>
<simpara>Les gestionnaires de processus facilitent l&#8217;intégration
d&#8217;une application en tant que <link linkend="system-service">service système</link>
(section suivante).
C&#8217;est mon choix de prédilection pour ne pas avoir à apprendre un nouveau
fichier de configuration.</simpara>
<simpara>La commande suivante nous guide dans la configuration de notre système
d&#8217;exploitation&#160;:</simpara>
<screen>$ pm2 startup</screen>
<simpara>Celle-ci sauvegarde les applications démarrées avec le gestionnaire de processus.
Elles seront restaurées au prochain redémarrage de l&#8217;ordinateur&#160;:</simpara>
<screen>$ pm2 save</screen>
<simpara>On peut aussi revenir en arrière et décider de désactiver le démarrage
automatique de nos applications&#160;:</simpara>
<screen>$ pm2 unstartup</screen>
<note>
<title><phrase role="RemarquePreTitre">Windows</phrase> Configurer&#160;pm2</title>
<simpara>La commande <literal>pm2 startup</literal> pose problème sous Windows.
Je recommande d&#8217;utiliser le module&#160;<literal>npm</literal> <emphasis>pm2-windows-service</emphasis>
(<phrase role="URL"><link xl:href="https://www.npmjs.com/package/pm2-windows-service">www.npmjs.com/package/pm2-windows-service</link></phrase>) pour simplifier
cette procédure.</simpara>
</note>
</section>
<section xml:id="system-service">
<title>En créant un service système</title>
<simpara><indexterm>
<primary>système d&#8217;exploitation</primary><secondary>service système</secondary>
</indexterm>
<indexterm>
<primary>service système</primary>
</indexterm>
<indexterm>
<primary>système d&#8217;exploitation</primary><secondary>service système</secondary><tertiary>systemd</tertiary>
</indexterm>
<indexterm>
<primary>service système</primary><secondary>systemd</secondary>
</indexterm>
<indexterm>
<primary>systemd</primary>
</indexterm>
<indexterm>
<primary>système d&#8217;exploitation</primary><secondary>service système</secondary><tertiary>upstart</tertiary>
</indexterm>
<indexterm>
<primary>service système</primary><secondary>upstart</secondary>
</indexterm>
<indexterm>
<primary>upstart</primary>
</indexterm>
<indexterm>
<primary>système d&#8217;exploitation</primary><secondary>service système</secondary><tertiary>launchd</tertiary>
</indexterm>
<indexterm>
<primary>service système</primary><secondary>launchd</secondary>
</indexterm>
<indexterm>
<primary>launchd</primary>
</indexterm></simpara>
<simpara>Tous les systèmes d&#8217;exploitation ont un mécanisme pour
démarrer des applications en fonction de certains critères&#160;:
quand le réseau ou une connexion Internet est disponible,
lorsqu&#8217;une session utilisateur s&#8217;est ouverte
ou même quand un autre logiciel est actif.</simpara>
<simpara>Systemd, Upstart et launchd sont des gestionnaires de services système parmi d&#8217;autres.
Ils se configurent avec des fichiers écrits dans des formats différents.</simpara>
<simpara>Voici un exemple de fichier de configuration pour <emphasis>systemd</emphasis>
(<phrase role="URL"><link xl:href="https://doc.ubuntu-fr.org/systemd">doc.ubuntu-fr.org/systemd</link></phrase>).
C&#8217;est le gestionnaire de services des distributions Linux Ubuntu, Debian, Fedora et CentOS.</simpara>
<formalpara>
<title>systemd/nodebook.d/app.conf</title>
<para>
<screen>[Unit]
Description="Application Node.js"
After=NetworkManager.service            <co xml:id="CO162-1"/>

[Service]
Restart=on-failure                      <co xml:id="CO162-2"/>
DefaultStartLimitBurst=5
StartLimitIntervalSec=120
User=nobody                             <co xml:id="CO162-3"/>

Environment="NODE_ENV=production"
WorkingDirectory=/usr/local/node-app    <co xml:id="CO162-4"/>
ExecStart=/usr/bin/npm start            <co xml:id="CO162-5"/></screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO162-1">
<para>L&#8217;application démarrera dès que l&#8217;interface réseau sera opérationnelle.</para>
</callout>
<callout arearefs="CO162-2">
<para>L&#8217;application sera relancée en cas de plantage&#160;– maximum 5 fois dans un délai de 120 secondes.</para>
</callout>
<callout arearefs="CO162-3">
<para>Le processus sera démarré au nom de l&#8217;utilisateur système <literal>nobody</literal>.</para>
</callout>
<callout arearefs="CO162-4">
<para>C&#8217;est comme si nous nous placions dans <literal>/usr/local/node-app</literal> avant de lancer l&#8217;application&#160;– c&#8217;est la valeur qu&#8217;on retrouve avec <literal>process.cwd()</literal>.</para>
</callout>
<callout arearefs="CO162-5">
<para>Commande à exécuter pour démarrer l&#8217;application.</para>
</callout>
</calloutlist>
<simpara>Le service associé au fichier de configuration précédent peut être démarré
manuellement comme suit&#160;:</simpara>
<screen># Cf. /etc/systemd/<emphasis role="marked">nodebook</emphasis>.d/app.conf
$ sudo systemctl start <emphasis role="marked">nodebook</emphasis>.service</screen>
<simpara>Les commandes <literal>systemctl stop</literal> et <literal>systemctl restart</literal>
arrêtent et relancent un service.</simpara>
<simpara>Dans tous les cas, le service sera lancé automatiquement au prochain
démarrage du système d&#8217;exploitation.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> Et&#160;pour Windows ?</title>
<simpara>Le gestionnaire de services Windows est compliqué à utiliser.
Je recommande le module npm <emphasis>node-windows</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/node-windows">npmjs.com/node-windows</link></phrase>).</simpara>
</tip>
</section>
<section xml:id="application-manager">
<title>Avec un serveur d&#8217;applications&#160;web</title>
<simpara><indexterm>
<primary>serveur d&#8217;application</primary>
</indexterm></simpara>
<simpara>Un serveur d&#8217;applications web est un logiciel informatique
qui a deux objectifs&#160;: <emphasis role="strong">être toujours disponible</emphasis>
et <emphasis role="strong">répartir le trafic HTTP</emphasis> vers des fichiers et des applications web.
C&#8217;est une sorte de parapluie optimisé et résistant qui se met au-devant
de nos applications.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Pourquoi utiliser un serveur d&#8217;applications ?</title>
<simpara>Les serveurs d&#8217;applications sont excellents pour gérer la charge des requêtes,
se protéger de failles de sécurité HTTP et être performants dans le
traitement des fichiers statiques.</simpara>
<simpara>Leur capacité à redémarrer une application Node en cas de plantage ou de
nouveau déploiement nous enlève une épine du pied.
Certains ont même des facultés de <emphasis>répartition de charge</emphasis> (<emphasis>load balancing</emphasis>)&#160;:
plusieurs instances de la même application tournent alors en parallèle
– une par CPU.
Le trafic est réparti vers l&#8217;instance qui a le plus de CPU disponible.</simpara>
</note>
<simpara><emphasis role="strong">Phusion Passenger</emphasis> (<phrase role="URL"><link xl:href="https://phusionpassenger.com/">phusionpassenger.com/</link></phrase>) est un
serveur d&#8217;applications web open source, léger et performant.
<indexterm>
<primary>serveur d&#8217;application</primary><secondary>Phusion Passenger</secondary>
</indexterm>
<indexterm>
<primary>Phusion Passenger</primary>
</indexterm>
Il est compatible avec des applications Ruby, Node et Python.
Il s&#8217;installe de manière autonome ou en complément des serveurs nginx
(<phrase role="URL"><link xl:href="https://nginx.org">nginx.org</link></phrase>) et Apache&#160;httpd (<phrase role="URL"><link xl:href="https://httpd.apache.org">httpd.apache.org</link></phrase>).
<indexterm>
<primary>serveur d&#8217;application</primary><secondary>nginx</secondary>
</indexterm>
<indexterm>
<primary>nginx</primary>
</indexterm>
<indexterm>
<primary>serveur d&#8217;application</primary><secondary>Apache httpd</secondary>
</indexterm>
<indexterm>
<primary>Apache httpd</primary>
</indexterm></simpara>
<simpara>Regardons ensemble à quoi ressemble un fichier de configuration nginx
minimaliste&#160;:</simpara>
<formalpara>
<title>nginx/static.conf</title>
<para>
<programlisting language="nginx" linenumbering="unnumbered">server {
  listen 80 default_server;
  server_name _;

  root /var/www;       <co xml:id="CO163-1"/>
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO163-1">
<para>Répertoire racine où nginx va chercher les fichiers.</para>
</callout>
</calloutlist>
<simpara>Si nginx est lancé sur notre ordinateur avec ce fichier de configuration
et si le fichier <literal>image.jpg</literal> est placé dans le répertoire <literal>/var/www</literal>,
alors nous pourrons y accéder dans un navigateur web
sur <literal><link xl:href="http://localhost/image.jpg">localhost/image.jpg</link></literal>.</simpara>
<simpara>Transformons maintenant ce fichier de configuration
après avoir installé le module <emphasis>Phusion Passenger</emphasis> pour <emphasis>nginx</emphasis>
(<phrase role="URL"><link xl:href="https://phusionpassenger.com/library/install/nginx/">phusionpassenger.com/library/install/nginx/</link></phrase>)&#160;:</simpara>
<formalpara>
<title>nginx/phusionwebapp.conf</title>
<para>
<programlisting language="nginx" linenumbering="unnumbered">server {
  listen 80 default_server;
  server_name _;
  root /var/www;

  passenger_enabled on;                             <co xml:id="CO164-1"/>
  passenger_app_type node;                          <co xml:id="CO164-2"/>
  passenger_app_root /var/apps/my-app;              <co xml:id="CO164-3"/>
  passenger_startup_file app.js;                    <co xml:id="CO164-4"/>
  passenger_document_root /var/apps/my-app/public;  <co xml:id="CO164-5"/>
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO164-1">
<para>Activation du module <emphasis>Phusion Passenger</emphasis> pour <emphasis>nginx</emphasis>.</para>
</callout>
<callout arearefs="CO164-2">
<para>Nous indiquons à <emphasis>Phusion Passenger</emphasis> qu&#8217;il s&#8217;agit d&#8217;une application Node.</para>
</callout>
<callout arearefs="CO164-3">
<para>L&#8217;application se trouve dans le répertoire <literal>/var/apps/my-app</literal>.</para>
</callout>
<callout arearefs="CO164-4">
<para>Le script à démarrer est <literal>app.js</literal>&#160;– c&#8217;est-à-dire <literal>/var/apps/my-app/app.js</literal>.</para>
</callout>
<callout arearefs="CO164-5">
<para>Emplacement où <emphasis>Phusion Passenger</emphasis> ira chercher les fichiers statiques.</para>
</callout>
</calloutlist>
<simpara><emphasis>Phusion Passenger</emphasis> démarre l&#8217;application Node pour nous.
Il la maintient en vie en cas de plantage.
Son comportement se configure finement à l&#8217;aide de directives dont la liste
intégrale se trouve sur
<phrase role="URL"><link xl:href="http://phusionpassenger.com/library/config/nginx/reference/">phusionpassenger.com/library/config/nginx/reference/</link></phrase>.</simpara>
</section>
</section>
<section xml:id="monitoring">
<title>À quoi penser après la mise en ligne ?</title>
<simpara>De la programmation au déploiement, nous sommes toujours en mesure
de savoir quand quelque chose ne va pas&#160;: les <emphasis role="strong">erreurs se produisent sous nos&#160;yeux</emphasis>.</simpara>
<simpara>Les problèmes commencent à <emphasis role="strong">échapper à notre attention dès la mise en ligne</emphasis>.
Regardons ensemble ce que nous pouvons faire pour intervenir au bon moment.</simpara>
<section xml:id="uptime">
<title>L&#8217;application a planté</title>
<simpara><indexterm>
<primary>erreur</primary><secondary>plantage applicatif</secondary>
</indexterm>
<indexterm>
<primary>plantage applicatif</primary>
</indexterm>
<indexterm>
<primary>hébergement</primary><secondary>surveillance applicative</secondary>
</indexterm>
<indexterm>
<primary>surveillance applicative</primary>
</indexterm></simpara>
<simpara>Que se passe-t-il lorsqu&#8217;une application plante en plein milieu du week-end&#160;?
<emphasis>Rien</emphasis>.
Nous n&#8217;en savons rien tant que nous n&#8217;allons pas sur l&#8217;application en question.
L&#8217;action la plus simple à mettre en œuvre est de <emphasis role="strong">recevoir une alerte</emphasis>
par courriel ou par&#160;SMS.</simpara>
<simpara><emphasis>Pingdom</emphasis> (<phrase role="URL"><link xl:href="https://www.pingdom.com/free">www.pingdom.com/free</link></phrase>) répond exactement à ce besoin.
Il est gratuit pour un site web et payant au-delà.</simpara>
<figure>
<title>Écran de configuration des alertes de sites web avec Pingdom.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/pingdom-uptime.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>pingdom uptime</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis>Uptime Robot</emphasis> (<phrase role="URL"><link xl:href="https://uptimerobot.com">uptimerobot.com</link></phrase>) est un service similaire.
Il offre en plus un flux RSS d&#8217;alertes et une intégration avec Slack.</simpara>
</section>
<section xml:id="exceptions">
<title>S&#8217;informer des erreurs applicatives</title>
<simpara><indexterm>
<primary>hébergement</primary><secondary>alerte applicative</secondary>
</indexterm>
<indexterm>
<primary>alerte applicative</primary>
</indexterm>
<indexterm>
<primary>erreur</primary><secondary>recevoir une alerte par e-mail</secondary>
</indexterm>
<indexterm>
<primary>recevoir une alerte par e-mail</primary>
</indexterm></simpara>
<simpara>Lorsque nous prenons connaissance d&#8217;un plantage applicatif, comment déterminer
ce qui l&#8217;a causé&#160;?</simpara>
<figure>
<title>Écran affiché par Heroku lorsque l&#8217;application a planté et ne répond&#160;plus.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/heroku-app-error.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>heroku app error</phrase></textobject>
</mediaobject>
</figure>
<simpara>S&#8217;il s&#8217;agit d&#8217;une application personnelle ou sans enjeu,
nous pouvons nous contenter de reproduire le problème localement.
Dans le cas d&#8217;une application professionnelle,
nous aurons besoin de plus de précisions, rapidement.</simpara>
<simpara><emphasis>Sentry</emphasis> (<phrase role="URL"><link xl:href="https://sentry.io">sentry.io</link></phrase>) est un service en ligne qui s&#8217;intègre
dans notre code comme une sonde.
Une fois placée, la sonde transmet les erreurs vers la plate-forme <emphasis>Sentry</emphasis>.
Cette dernière affiche les erreurs connues sous forme de tableau de bord&#160;–
leur nature, combien de fois elles se répètent.
Elle nous envoie également une notification par courriel avec une indication
de sévérité, pour que nous puissions réagir plus ou moins rapidement.</simpara>
<figure>
<title>Écran d&#8217;affichage d&#8217;une erreur analysée par&#160;Sentry.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/sentry-error.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>sentry error</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;inclusion d&#8217;une sonde basique revient à insérer deux lignes dans notre code&#160;:
<indexterm>
<primary>module npm</primary><secondary>raven</secondary>
</indexterm>
<indexterm>
<primary>raven</primary>
</indexterm></simpara>
<formalpara>
<title>sentry.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const sentry = require('raven');                  <co xml:id="CO165-1"/>
sentry.config(process.env.SENTRY_DSN).install();  <co xml:id="CO165-2"/>

const express = require('express');
const app = express();

test;                                             <co xml:id="CO165-3"/>

app.get('/', (request, response) =&gt; response.send('OK!'));
app.listen(process.env.PORT || 4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO165-1">
<para><emphasis>raven</emphasis> est le nom du module&#160;<literal>npm</literal> édité par <emphasis>Sentry</emphasis> pour collecter les erreurs.</para>
</callout>
<callout arearefs="CO165-2">
<para>Configuration du client <emphasis>Sentry</emphasis>&#160;– il collectera et enverra les erreurs auprès de la plate-forme.</para>
</callout>
<callout arearefs="CO165-3">
<para>Cette ligne est la source de notre erreur&#160;– la variable n&#8217;est pas définie.</para>
</callout>
</calloutlist>
<simpara><emphasis>Sentry</emphasis> nous communique une clé d&#8217;API pour chaque projet à instrumenter.
Quand vous obtenez la vôtre, modifiez la ligne de commande suivante afin
de provoquer l&#8217;erreur, de recevoir le courriel d&#8217;alerte et de la visualiser
en détail sur le tableau de bord&#160;:
<indexterm>
<primary>variable d&#8217;environnement</primary>
</indexterm></simpara>
<screen>$ SENTRY_DSN=https://0c...@sentry.io/1201870 node sentry.js</screen>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Configurer Sentry</title>
<simpara>Un guide complet (en anglais) documente comment aller plus loin
dans l&#8217;utilisation de <emphasis>Sentry</emphasis>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://docs.sentry.io/clients/node/">docs.sentry.io/clients/node/</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara>Le service <emphasis>New&#160;Relic</emphasis> (<phrase role="URL"><link xl:href="https://newrelic.com/nodejs">newrelic.com/nodejs</link></phrase>)
est une alternative à <emphasis>Sentry</emphasis>.
Il mesure également les performances et les sources de ralentissement.
Il s&#8217;installe gratuitement et en quelques clics sur la
<link linkend="hosting.paas">plate-forme de services</link> Heroku.
Il devient payant à partir d&#8217;un certain volume de requêtes.</simpara>
</section>
<section xml:id="security.node">
<title>Notre version de Node fait l&#8217;objet d&#8217;une faille de sécurité</title>
<simpara><indexterm>
<primary>sécurité</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary>
</indexterm>
<indexterm>
<primary>mise à jour de Node.js</primary><secondary>sécurité</secondary>
</indexterm>
<indexterm>
<primary>sécurité</primary>
</indexterm></simpara>
<simpara>Certaines versions de Node sortent pour apporter de nouvelles fonctionnalités
ou pour corriger des bogues.
D&#8217;autres sont publiées pour corriger des failles de sécurité.
Ces <emphasis role="strong">failles sont critiques pour nos applications</emphasis>.</simpara>
<simpara>Lorsqu&#8217;une faille est exploitée, la personne à l&#8217;origine de l&#8217;attaque
peut ralentir, faire planter ou extraire des informations confidentielles
de notre application.
En cas de faille critique, l&#8217;attaquant·e risque aussi de gagner un accès
à l&#8217;ordinateur et aux bases de données hébergeant l&#8217;application.</simpara>
<simpara>Solution&#160;: <emphasis role="strong">redéployer nos applications</emphasis> avec une version de Node plus récente.</simpara>
<simpara>Je vous encourage à recevoir des alertes par courriel ou en
vous abonnant au fil&#160;RSS pour être prevenu·e au bon moment.</simpara>
<note>
<title>Courriel</title>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://groups.google.com/group/nodejs-sec">groups.google.com/group/nodejs-sec</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<note>
<title>Fil&#160;RSS</title>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/en/feed/vulnerability.xml">nodejs.org/en/feed/vulnerability.xml</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<figure>
<title>Exemple d&#8217;alerte de sécurité envoyée par courriel</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/node-security-bulletin.png"/>
</imageobject>
<textobject><phrase>node security bulletin</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="security.npm">
<title>Un des modules&#160;npm fait l&#8217;objet d&#8217;une faille de sécurité</title>
<simpara><indexterm>
<primary>npm</primary><secondary>module</secondary>
</indexterm>
<indexterm>
<primary>module</primary>
</indexterm>
<indexterm>
<primary>sécurité</primary><secondary>module npm</secondary>
</indexterm>
<indexterm>
<primary>module npm</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>sécurité des dépendances</secondary>
</indexterm>
<indexterm>
<primary>sécurité des dépendances</primary>
</indexterm></simpara>
<simpara>Les modules&#160;<literal>npm</literal> aussi risquent d&#8217;être affectés par des failles de sécurité.</simpara>
<simpara>Les conséquences de leur exploitation sont similaires à celles des failles de Node&#160;:
les personnes à l&#8217;origine des attaques peuvent saturer le serveur et
paralyser l&#8217;application.
Elles sont aussi en mesure de subtiliser des informations confidentielles
stockées en base de données ou saisies par les usagers.</simpara>
<simpara><emphasis>Snyk</emphasis> (<phrase role="URL"><link xl:href="https://snyk.io">snyk.io</link></phrase>) est un service de sécurité gratuit pour les
projets open source.
Il scanne les vulnérabilités de nos dépendances et sous-dépendances
Il nous alerte sur la sévérité des failles décelées dans nos projets.</simpara>
<simpara>Ces failles sont classées en trois niveaux&#160;: dangereuses, modérées et superficielles.
Mieux vaut mettre à jour les dépendances affectées par une faille dangereuse
le plus rapidement possible.</simpara>
<simpara>Ce n&#8217;est pas grave si nous ne mettons pas à jour un vieux module&#160;<literal>npm</literal>.
En revanche, cela peut avoir un impact négatif si cette vieille version est
affectée par une faille.</simpara>
<simpara>La capture d&#8217;écran suivante illustre une vulnérabilité décelée dans le
module&#160;<literal>npm</literal> <emphasis>restify</emphasis> dans sa version&#160;4.</simpara>
<figure>
<title>Tableau de bord des dépendances vulnérables avec&#160;Snyk</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/snyk-dashboard.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>snyk dashboard</phrase></textobject>
</mediaobject>
</figure>
<figure>
<title>Affichage d&#8217;une vulnérabilité et d&#8217;un chemin de résolution avec&#160;Snyk</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/snyk-vulnerability.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>snyk vulnerability</phrase></textobject>
</mediaobject>
</figure>
<simpara>La correction du problème implique de passer à la version&#160;5.
Cette action nous demandera sûrement d&#8217;adapter notre code car nous changeons
de version majeure.
Ces migrations sont souvent documentées par les auteurs des modules.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Intégrations&#160;npm, Heroku, etc.</title>
<simpara>Snyk s&#8217;intègre à d&#8217;autres services que GitHub&#160;: GitLab, Heroku, BitBucket, etc.</simpara>
<simpara>Les applications au code source privé peuvent être vérifiées gratuitement
avec l&#8217;API de Snyk ou son application en ligne de commandes.</simpara>
</tip>
<note>
<title>Base de données</title>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://snyk.io/vuln/?type=npm">snyk.io/vuln/?type=npm</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<note>
<title>Fil&#160;RSS</title>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://snyk.io/vuln/feed.xml?type=npm">snyk.io/vuln/feed.xml?type=npm</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara>Nous avons parlé de la commande <literal>npm audit</literal> dans
le <link xl:href="../chapter-05/index.xml#audit">chapitre&#160;5</link>.
<indexterm>
<primary>npm</primary><secondary>audit</secondary>
</indexterm>
<indexterm>
<primary>audit</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>audit</secondary><tertiary>fix</tertiary>
</indexterm>
<indexterm>
<primary>audit</primary><secondary>fix</secondary>
</indexterm>
<indexterm>
<primary>fix</primary>
</indexterm>
Elle dispose d&#8217;une option pour mettre à jour automatiquement
les dépendances dangereuses&#160;: <literal>npm audit fix</literal>.</simpara>
<screen>$ npm audit fix
&gt; fixed 20 of 21 vulnerabilities in 1867 scanned packages
&gt;   1 vulnerability required manual review and could not be updated</screen>
<simpara>Rester à l&#8217;écoute des vulnérabilités en combinaison de l&#8217;utilisation
de Snyk ou de <literal>npm audit fix</literal> suffit à prendre des mesures de correction
efficaces sans avoir à trop s&#8217;y connaître.</simpara>
<simpara>La lecture des rapports de vulnérabilité est un bon moyen de comprendre
comment ces exploits fonctionnent et comment penser nos applications
pour éviter d&#8217;exposer une surface d&#8217;attaque minimale.</simpara>
</section>
</section>
<section xml:id="conclusion_6">
<title>Conclusion</title>
<simpara>Nous avons désormais <emphasis role="strong">toutes les clés pour partager notre code</emphasis> et le
résultat de son exécution de manière publique.</simpara>
<simpara>Nous avons appris à <emphasis role="strong">choisir un hébergement et un mode de déploiement</emphasis>
adapté à notre temps disponible ainsi qu&#8217;à nos envies.
Nous sommes en mesure d&#8217;aller vite ou de prendre le temps de configurer
une machine pour des besoins très précis.</simpara>
<simpara>La <emphasis role="strong">configuration d&#8217;une application</emphasis> avec des variables d&#8217;environnement
est une des clés pour automatiser le déploiement.</simpara>
<simpara>L'<emphasis role="strong">automatisation du démarrage</emphasis> d&#8217;une application demande d&#8217;investir du temps
pour être à l&#8217;aise.
Ce temps est utile car le principe s&#8217;applique à d&#8217;autres langages
et ouvre la porte de la maîtrise de l&#8217;hébergement applicatif,
quand les <link linkend="hosting.paas">plates-formes de service</link> commencent à nous
coûter trop&#160;cher.</simpara>
</section>
</chapter>
<chapter xml:id="créer_une_applicationweb">
<title>Créer une application&#160;web</title>
<simpara>Nous allons apprendre à composer et à tester une application web créée de toutes
pièces ou avec l&#8217;aide du framework Express.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Composer son application web</simpara>
</listitem>
<listitem>
<simpara>Organiser une application avec le framework Express</simpara>
</listitem>
<listitem>
<simpara>Vers un code réutilisable et testable</simpara>
</listitem>
<listitem>
<simpara>Pour aller plus loin</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Le modèle d&#8217;application web de Node se rapproche de celui de Ruby et diffère
de l&#8217;univers PHP.</simpara>
<simpara>Nous allons mieux comprendre le mécanisme de requête et de réponse HTTP en
créant une application web module par module, fonctionnalité par fonctionnalité.</simpara>
<simpara>Dans un second temps, nous organiserons notre code avec le framework Express.
Nous verrons en quoi notre application gagne en clarté, comment générer du HTML
de façon dynamique avec des informations issues d&#8217;une base de données.</simpara>
<simpara>Nous consoliderons notre savoir en organisant notre code de sorte à le
rendre plus résilient et testable&#160;– chose que nous apprendrons à faire pas à pas.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node&#160;v10</emphasis>
et <emphasis role="strong">npm&#160;v6</emphasis>.
Ce sont les versions stables recommandées en&#160;2019.</simpara>
</note>
<simpara>Une application web est une <emphasis role="strong">construction applicative qui est à l&#8217;écoute</emphasis>
de connexions réseau initiées par un client&#160;– un navigateur, un automate, etc.
Elle est structurée autour de la lecture d&#8217;une requête entrante (lecture)
et de l&#8217;émission d&#8217;une réponse sortante (écriture).
Chaque <emphasis role="strong">requête porte en elle une intention</emphasis> (un chemin d&#8217;accès, une préférence
de format, des éléments d&#8217;identification) et implique une réponse en retour
(des données et des éléments pour les contextualiser).</simpara>
<simpara>L&#8217;ingénierie d&#8217;une application web consiste à comprendre les requêtes entrantes
et à construire une réponse appropriée à chaque fois, le plus rapidement possible.</simpara>
<simpara>Ce chapitre s&#8217;inscrit dans la continuité de la découverte du
<link xl:href="../chapter-04/index.xml#http">module <literal>http</literal></link>
(<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>).
<indexterm>
<primary>module</primary><secondary>http</secondary>
</indexterm>
<indexterm>
<primary>http</primary>
</indexterm></simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> En-têtes&#160;HTTP</title>
<simpara><indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary>
</indexterm>
<indexterm>
<primary>en-tête</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>documentation</primary><secondary>protocole HTTP</secondary>
</indexterm>
<indexterm>
<primary>protocole HTTP</primary>
</indexterm>
Ce chapitre fait souvent référence à des en-têtes HTTP.
La documentation <emphasis>MDN&#160;web&#160;docs</emphasis>
les liste tous, avec le détail de leurs valeurs possibles&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://developer.mozilla.org/fr/docs/Web/HTTP/Headers">developer.mozilla.org/fr/docs/Web/HTTP/Headers</link></phrase></simpara>
</listitem>
</itemizedlist>
<simpara>C&#8217;est un onglet intéressant à ouvrir en parallèle de cette lecture
– je l&#8217;ai ouvert en permanence pour écrire ce chapitre.</simpara>
</note>
<section xml:id="webapp">
<title>Composer son application&#160;web</title>
<simpara><indexterm>
<primary>application web</primary>
</indexterm></simpara>
<simpara>Dans cette première section, nous allons nous focaliser sur la construction
d&#8217;une application web avec une approche modulaire.
Nous partirons du concept de requête et de réponse.
Petit à petit, nous allons greffer des modules pour comprendre et
donner du sens à leurs contenus respectifs.</simpara>
<simpara>Le <emphasis>protocole HTTP</emphasis> est le dialecte informatique utilisé et compris pour exprimer
les requêtes (émises par un client) et les réponses (émises par un serveur).
<indexterm>
<primary>HTTP</primary>
</indexterm>
Les navigateurs web sont des clients tandis que notre application Node est un serveur.</simpara>
<simpara>Le logiciel <emphasis>curl</emphasis> (<phrase role="URL"><link xl:href="https://curl.haxx.se">curl.haxx.se</link></phrase>) est un client en ligne de commandes.
Il est souvent installé par défaut sur les distributions Linux, sur macOS et
à partir de Windows&#160;7&#160;– via le terminal <emphasis>PowerShell</emphasis>.</simpara>
<simpara>Utilisons <emphasis>curl</emphasis> pour observer le contenu d&#8217;une requête et de sa réponse.
<indexterm>
<primary>curl</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>requête</secondary>
</indexterm>
<indexterm>
<primary>requête</primary>
</indexterm></simpara>
<formalpara>
<title>Exemple de requête HTTP vers le site <phrase role="URL">perdu.com</phrase></title>
<para>
<screen>$ curl -v http://perdu.com  <co xml:id="CO166-1"/>
GET / HTTP/1.1              <co xml:id="CO166-2"/>
Host: perdu.com             <co xml:id="CO166-3"/>
User-Agent: curl/7.54.0
Accept: */*</screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO166-1">
<para>Exécution de la requête.</para>
</callout>
<callout arearefs="CO166-2">
<para>Expression de la méthode, du chemin d&#8217;accès demandé et du protocole de discussion employé&#160;– ici, HTTP dans sa version&#160;<literal>1.1</literal>.</para>
</callout>
<callout arearefs="CO166-3">
<para>En-tête de requête.</para>
</callout>
</calloutlist>
<simpara>Un en-tête est exprimé sous la forme <literal>Clé: Valeur</literal>.
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary>
</indexterm>
<indexterm>
<primary>en-tête</primary>
</indexterm>
Chacun précise un élément de contexte.
Certains influencent plus que d&#8217;autres la réponse du serveur, si
celui-ci les comprend.</simpara>
<simpara>Voyons maintenant la réponse&#160;:
<indexterm>
<primary>HTTP</primary><secondary>réponse</secondary>
</indexterm>
<indexterm>
<primary>réponse</primary>
</indexterm></simpara>
<formalpara>
<title>Exemple de réponse HTTP transmise en retour</title>
<para>
<screen>HTTP/1.1 200 OK                                       <co xml:id="CO167-1"/>
Date: Thu, 28 Jun 2018 19:02:27 GMT                   <co xml:id="CO167-2"/>
Server: Apache
Last-Modified: Thu, 02 Jun 2016 06:01:08 GMT
ETag: "cc-5344555136fe9"
Accept-Ranges: bytes
Content-Length: 204
Vary: Accept-Encoding
Content-Type: text/html                               <co xml:id="CO167-3"/>

&amp;lt;html&gt;&amp;lt;head&gt;&amp;lt;title&gt;Vous Etes Perdu ?&amp;lt;/title&gt; …&amp;lt;/html&gt; <co xml:id="CO167-4"/></screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO167-1">
<para>Expression du statut de la réponse avec un code numérique et une version intelligible.</para>
</callout>
<callout arearefs="CO167-2">
<para>En-tête de réponse.</para>
</callout>
<callout arearefs="CO167-3">
<para>En-tête de réponse&#160;– celle-ci indique au client comment interpréter le corps du message.</para>
</callout>
<callout arearefs="CO167-4">
<para>Corps du message.</para>
</callout>
</calloutlist>
<simpara>La réponse dispose elle aussi d&#8217;en-têtes.
Cette fois, ils guident le client dans son interprétation du résultat.
Le corps du message est séparé par une ligne vide.
C&#8217;est la partie visible de la réponse dans un navigateur web, le contenu
qui s&#8217;affiche sous nos&#160;yeux.</simpara>
<simpara>Dans la prochaine section, nous visualiserons ces mêmes informations
à partir d&#8217;un serveur HTTP que nous allons créer par nous-même.
Nous retracerons plus en détail l&#8217;odyssée d&#8217;une requête HTTP dans la section
<quote><link linkend="http">Comprendre le modèle HTTP</link></quote>, en fin de chapitre.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal></title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-07
$ cd $(nodebook dir chapter-07)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les instructions d&#8217;installation pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<section xml:id="server">
<title>Démarrer un serveur&#160;HTTP</title>
<simpara><indexterm>
<primary>application web</primary><secondary>serveur HTTP</secondary>
</indexterm>
<indexterm>
<primary>serveur HTTP</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>démarrer un serveur</secondary>
</indexterm>
<indexterm>
<primary>démarrer un serveur</primary>
</indexterm></simpara>
<simpara>Nous l&#8217;avons dit&#160;: une requête HTTP envoyée vers un hôte reçoit une réponse.
Cet hôte doit au préalable avoir installé et démarré un serveur HTTP qui
écoute ces demandes.</simpara>
<simpara>Le script d&#8217;exemple <literal>server/start.js</literal> répond à ce besoin.
Une fois démarré, il est joignable à l&#8217;adresse <literal><link xl:href="http://localhost:4000">localhost:4000</link></literal>.
Il affichera alors les en-têtes des requêtes et de leurs réponses&#160;:
<indexterm>
<primary>module</primary><secondary>http</secondary><tertiary>http.createServer()</tertiary>
</indexterm>
<indexterm>
<primary>http</primary><secondary>http.createServer()</secondary>
</indexterm>
<indexterm>
<primary>http.createServer()</primary>
</indexterm></simpara>
<screen>$ node server/start.js</screen>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10 interactive--endpoint">
<title>server/start.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');

const server = createServer();

server.on('request', (request, response) =&gt; {
  response.setHeader('Content-Type', 'text/html');  <co xml:id="CO168-1"/>
  response.end('&lt;h1&gt;Hello World&lt;/h1&gt;');

  console.log(request.headers);                     <co xml:id="CO168-2"/>
  console.log(response.getHeaders());               <co xml:id="CO168-3"/>
});

server.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO168-1">
<para>Comme nous retournons du HTML au client, nous explicitons le type de contenu de la réponse.</para>
</callout>
<callout arearefs="CO168-2">
<para>Affiche les en-têtes de la requête reçue par le serveur&#160;– le contenu varie selon le client utilisé.</para>
</callout>
<callout arearefs="CO168-3">
<para>Affiche les en-têtes de la réponse&#160;– en l&#8217;occurrence <literal>{ 'content-type': 'text/html' }</literal>.
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Content-Type</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Content-Type</secondary>
</indexterm>
<indexterm>
<primary>Content-Type</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Nous avons composé les fondations minimales pour créer une application web
en mesure d&#8217;accepter des requêtes et de répondre quelque chose
d&#8217;arbitraire certes mais compréhensible par un navigateur web.</simpara>
<simpara><emphasis role="strong">Pourquoi avoir démarré le serveur sur le port&#160;4000</emphasis> dans l&#8217;exemple précédent&#160;?
<indexterm>
<primary>application web</primary><secondary>port d&#8217;écoute</secondary>
</indexterm>
<indexterm>
<primary>port d&#8217;écoute</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>port réseau</secondary>
</indexterm>
<indexterm>
<primary>port réseau</primary>
</indexterm>
C&#8217;est un choix arbitraire de ma part&#160;: nous pouvons démarrer un serveur HTTP
sur n&#8217;importe quel port tant qu&#8217;il est libre et supérieur ou égal à&#160;1000.
Quand on cherche à se connecter à une adresse comme <phrase role="URL"><link xl:href="http://localhost">localhost</link></phrase> (HTTP)
et <phrase role="URL"><link xl:href="https://localhost">localhost</link></phrase> (HTTPS), la valeur du port vaut implicitement 80
et&#160;443, respectivement.</simpara>
<simpara>Le module&#160;<literal>npm</literal> <emphasis>get-port</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/get-port">npmjs.com/get-port</link></phrase>) retourne
un numéro de port parmi ceux disponibles sur le système d&#8217;exploitation.
<indexterm>
<primary>module npm</primary><secondary>get-port</secondary>
</indexterm>
<indexterm>
<primary>get-port</primary>
</indexterm></simpara>
<screen>$ node server/port.js
http://localhost:51765</screen>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>server/port.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const getPort = require('get-port');
const server = createServer();

getPort({ port: 4000 }).then(port =&gt; {      <co xml:id="CO169-1"/>
  console.log(`http://localhost:${port}`);  <co xml:id="CO169-2"/>
  server.listen(port);                      <co xml:id="CO169-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO169-1">
<para>Exprime une préférence pour retourner le port 4000 s&#8217;il est disponible.</para>
</callout>
<callout arearefs="CO169-2">
<para>Affiche <literal><link xl:href="http://localhost:4000">localhost:4000</link></literal> si le port est disponible&#160;; sinon, un autre nombre.</para>
</callout>
<callout arearefs="CO169-3">
<para>Le serveur se met à l&#8217;écoute sur ce port.</para>
</callout>
</calloutlist>
<simpara>Pour vous en rendre compte, démarrez le script <literal>server/start.js</literal> pour utiliser
le port 4000 et démarrez ensuite <literal>server/port.js</literal>.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Performance</phrase> Programme de longue durée</title>
<simpara>Une application web est un programme qui tourne en continu, pendant des heures
et des journées entières.</simpara>
<simpara>Chaque requête entrante occupe 1&#160;Ko de mémoire&#160;– davantage si nous
recevons des données de formulaire ou une pièce&#160;jointe.
Une application web peut en recevoir plusieurs centaines à plusieurs milliers
par seconde, selon la popularité du service.</simpara>
</note>
</section>
<section xml:id="path">
<title>Répondre à un chemin (routing)</title>
<simpara><indexterm>
<primary>application web</primary><secondary>chemin d&#8217;accès (routing)</secondary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès (routing)</primary>
</indexterm></simpara>
<simpara>Nous avons vu qu&#8217;une URL est un identifiant qui se décompose en plusieurs
parties grâce au <link xl:href="../chapter-04/index.xml#url">module <literal>url</literal></link>
(<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>).
<indexterm>
<primary>module</primary><secondary>url</secondary>
</indexterm>
<indexterm>
<primary>url</primary>
</indexterm>
Une d&#8217;elles est le <emphasis>chemin d&#8217;accès</emphasis> à une ressource.<?asciidoc-br?>
Par exemple, le chemin de l&#8217;URL <phrase role="URL"><link xl:href="http://localhost:4000/coucou">localhost:4000/coucou</link></phrase> est <literal>/coucou</literal>.</simpara>
<screen>$ node path/request-url.js</screen>
<formalpara>
<title>path/request-url.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const server = createServer().listen(4000);

server.on('request', (request, response) =&gt; {
  if (request.url === '/') {                        <co xml:id="CO170-1"/>
    response.end('&lt;a href="/hello"&gt;clique-moi&lt;/a&gt;');
  }
  else if (request.url === '/coucou') {             <co xml:id="CO170-2"/>
    response.end('&lt;a href="/"&gt;coucou !&lt;/a&gt;');
  }
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO170-1">
<para>Affiche un message spécifique au chemin&#160;<literal>/</literal>.</para>
</callout>
<callout arearefs="CO170-2">
<para>Affiche un autre message spécifique au chemin <literal>/coucou</literal>.</para>
</callout>
</calloutlist>
<simpara>Les deux seules ressources mises à disposition sur <phrase role="URL"><link xl:href="http://localhost:4000">localhost:4000</link></phrase>
sont accessibles avec les chemins&#160;<literal>/</literal> et <literal>/coucou</literal>.
Aucun autre chemin n&#8217;aboutira.</simpara>
<simpara>C&#8217;est d&#8217;ailleurs un problème puisque, en réalité, nous n&#8217;envoyons pas de réponse
pour un chemin inconnu.
Et c&#8217;est à nous de gérer ce cas de figure&#160;:</simpara>
<screen>$ node path/404.js</screen>
<formalpara>
<title>path/404.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const server = createServer().listen(4000);

server.on('request', (request, response) =&gt; {
  if (request.url === '/') {                        <co xml:id="CO171-1"/>
    response.end('&lt;a href="/hello"&gt;clique-moi&lt;/a&gt;');
  }
  else {
    response.statusCode = 404;                      <co xml:id="CO171-2"/>
    response.end('&lt;h1&gt;Page introuvable&lt;/h1&gt;');      <co xml:id="CO171-3"/>
  }
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO171-1">
<para>Seul le chemin&#160;<literal>/</literal> est disponible dans l&#8217;application.</para>
</callout>
<callout arearefs="CO171-2">
<para>Le code HTTP de la réponse est réglé sur&#160;<literal>404</literal>.</para>
</callout>
<callout arearefs="CO171-3">
<para>Une requête vers une page introuvable peut quand même recevoir du contenu.</para>
</callout>
</calloutlist>
<simpara>La prise en compte d&#8217;une ressource inconnue de notre application fait émerger
un nouveau concept&#160;: le <emphasis>statut de la réponse</emphasis>.
<indexterm>
<primary>HTTP</primary><secondary>code de réponse</secondary>
</indexterm>
<indexterm>
<primary>code de réponse</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>code de réponse</secondary><tertiary>404</tertiary>
</indexterm>
<indexterm>
<primary>code de réponse</primary><secondary>404</secondary>
</indexterm>
<indexterm>
<primary>404</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>code de réponse</secondary><tertiary>200</tertiary>
</indexterm>
<indexterm>
<primary>code de réponse</primary><secondary>200</secondary>
</indexterm>
<indexterm>
<primary>200</primary>
</indexterm>
Ce statut est un code numérique qui donne des indications sur la ressource retournée.
Dans ce cas de figure, le statut&#160;<literal>404</literal> de la réponse indique au client de
ne pas considérer le contenu comme celui qui était demandé.<?asciidoc-br?>
Par défaut et sauf mention contraire, le statut est&#160;<literal>200</literal>.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Principaux codes HTTP et leur signification</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="14.2857*"/>
<colspec colname="col_2" colwidth="28.5714*"/>
<colspec colname="col_3" colwidth="57.1429*"/>
<thead>
<row>
<entry align="left" valign="top">Code</entry>
<entry align="left" valign="top">Raison</entry>
<entry align="left" valign="top">Explication</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>200</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>OK</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource demandée est retournée en réponse.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>301</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Moved Permanently</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource demandée a été déplacée.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>304</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Not Modified</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource n&#8217;a pas été modifiée depuis la dernière&#160;fois.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>400</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Bad Request</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La requête est incomplète ou incompréhensible par le serveur.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>401</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Unauthorized</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource n&#8217;est accessible que sur preuve d&#8217;identification.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>403</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Forbidden</literal></simpara></entry>
<entry align="left" valign="top"><simpara>L&#8217;accès à la ressource est interdit.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>404</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Not Found</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource n&#8217;existe&#160;pas.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>500</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Internal Server Error</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le serveur distant est en erreur.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>HTTP</primary><secondary>code de réponse</secondary><tertiary>3xx</tertiary>
</indexterm>
<indexterm>
<primary>code de réponse</primary><secondary>3xx</secondary>
</indexterm>
<indexterm>
<primary>3xx</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>code de réponse</secondary><tertiary>4xx</tertiary>
</indexterm>
<indexterm>
<primary>code de réponse</primary><secondary>4xx</secondary>
</indexterm>
<indexterm>
<primary>4xx</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>code de réponse</secondary><tertiary>5xx</tertiary>
</indexterm>
<indexterm>
<primary>code de réponse</primary><secondary>5xx</secondary>
</indexterm>
<indexterm>
<primary>5xx</primary>
</indexterm></simpara>
<simpara>Les statuts HTTP sont importants dans la création d&#8217;applications web.
Leur code permet de vérifier que le client et le serveur se sont bien compris.<?asciidoc-br?>
Si une page d&#8217;erreur est affichée avec un statut&#160;<literal>200</literal>, le client sera dans
l&#8217;impossibilité de deviner qu&#8217;il ne s&#8217;agit pas du contenu attendu.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>D&#8217;autres codes HTTP utiles à connaître</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="16.6666*"/>
<colspec colname="col_3" colwidth="66.6668*"/>
<thead>
<row>
<entry align="left" valign="top">Code</entry>
<entry align="left" valign="top">Raison</entry>
<entry align="left" valign="top">Explication</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>201</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Created</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource demandée a été créée.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>202</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Accepted</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La demande a été acceptée et la ressource sera disponible ultérieurement.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>204</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>No Content</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource demandée n&#8217;a pas de contenu.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>302</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Found</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource demandée est temporairement disponible à une autre adresse.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>503</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Service Unavailable</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le serveur distant répond qu&#8217;il n&#8217;est pas disponible pour l&#8217;instant.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>HTTP</primary><secondary>code de réponse</secondary><tertiary>2xx</tertiary>
</indexterm>
<indexterm>
<primary>code de réponse</primary><secondary>2xx</secondary>
</indexterm>
<indexterm>
<primary>2xx</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>code de réponse</secondary><tertiary>3xx</tertiary>
</indexterm>
<indexterm>
<primary>code de réponse</primary><secondary>3xx</secondary>
</indexterm>
<indexterm>
<primary>3xx</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>code de réponse</secondary><tertiary>5xx</tertiary>
</indexterm>
<indexterm>
<primary>code de réponse</primary><secondary>5xx</secondary>
</indexterm>
<indexterm>
<primary>5xx</primary>
</indexterm></simpara>
<simpara>Une application web devient vite compliquée à gérer si nous devons lister
tous les chemins possibles.
C&#8217;est à ce moment qu&#8217;entre en jeu le <emphasis>routing</emphasis>, une technique pour décrire
des chemins d&#8217;accès au lieu de s&#8217;embourber dans une longue liste de <literal>if &#8230;&#8203; else</literal>.
<indexterm>
<primary>instruction</primary><secondary>if &#8230;&#8203; else</secondary>
</indexterm>
<indexterm>
<primary>if &#8230;&#8203; else</primary>
</indexterm></simpara>
<simpara>Nous utilisons le module&#160;<literal>npm</literal> <emphasis>find-my-way</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/find-my-way">npmjs.com/find-my-way</link></phrase>)
pour transformer l&#8217;exemple <literal>path/request-url.js</literal>
en quelque chose de plus modulaire&#160;:
<indexterm>
<primary>module npm</primary><secondary>find-my-way</secondary>
</indexterm>
<indexterm>
<primary>find-my-way</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>chemin d&#8217;accès (routing)</secondary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès (routing)</primary>
</indexterm></simpara>
<screen>$ node path/routes.js</screen>
<formalpara>
<title>path/routes.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const router = require('find-my-way')();                <co xml:id="CO172-1"/>

router.get('/', (request, response) =&gt; {                <co xml:id="CO172-2"/>
  response.end('&lt;a href="/coucou"&gt;clique-moi&lt;/a&gt;');
});

router.get('/coucou', (request, response) =&gt; {          <co xml:id="CO172-3"/>
  response.end('&lt;a href="/"&gt;retour&lt;/a&gt;');
});

const server = createServer().listen(4000)
  .on('request', (req, res) =&gt; router.lookup(req, res));<co xml:id="CO172-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO172-1">
<para>Création de la table de routage.</para>
</callout>
<callout arearefs="CO172-2">
<para>Définition de la réponse du chemin d&#8217;accès&#160;<literal>/</literal>.</para>
</callout>
<callout arearefs="CO172-3">
<para>Définition de la réponse du chemin d&#8217;accès <literal>/coucou</literal>.</para>
</callout>
<callout arearefs="CO172-4">
<para>Intégration du routeur aux requêtes entrantes du serveur&#160;HTTP.</para>
</callout>
</calloutlist>
<simpara>Les routeurs commencent à vraiment nous faire gagner du temps
lorsqu&#8217;il s&#8217;agit d&#8217;extraire des informations utiles depuis le chemin et
de les gérer dynamiquement&#160;:</simpara>
<screen>$ node path/route-params.js</screen>
<formalpara>
<title>path/route-params.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const router = require('find-my-way')();

router.get('/hello/:word', (req, response, params) =&gt; { <co xml:id="CO173-1"/>
  response.end(`&lt;p&gt;hello ${params.word}&lt;/p&gt;`);          <co xml:id="CO173-2"/>
});

const server = createServer().listen(4000)
  .on('request', (req, res) =&gt; router.lookup(req, res));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO173-1">
<para>Création d&#8217;une route paramétrée&#160;– le symbole <literal>:word</literal> est accessible dans le troisième argument, en tant que <literal>params.word</literal>.</para>
</callout>
<callout arearefs="CO173-2">
<para>Affiche une phrase composée avec le paramètre de notre route.
<indexterm>
<primary>application web</primary><secondary>chemin d&#8217;accès (routing)</secondary><tertiary>symbole</tertiary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès (routing)</primary><secondary>symbole</secondary>
</indexterm>
<indexterm>
<primary>symbole</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Dirigez-vous vers <phrase role="URL"><link xl:href="http://localhost:4000/hello/word">localhost:4000/hello/word</link></phrase> pour voir le résultat s&#8217;afficher.
Changez le dernier segment du chemin pour observer le changement.</simpara>
<simpara>Ce mécanisme est utile pour relier un identifiant à un enregistrement précis
en base de données, par exemple.
Il se complète avec les <link linkend="argument">arguments d&#8217;URL</link> pour véhiculer des
éléments optionnels&#160;– nous y reviendrons plus loin.
<indexterm>
<primary>application web</primary><secondary>chemin d&#8217;accès (routing)</secondary><tertiary>argument</tertiary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès (routing)</primary><secondary>argument</secondary>
</indexterm>
<indexterm>
<primary>argument</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>url</secondary><tertiary>argument</tertiary>
</indexterm>
<indexterm>
<primary>url</primary><secondary>argument</secondary>
</indexterm>
<indexterm>
<primary>argument</primary>
</indexterm></simpara>
<caution>
<title><phrase role="RemarquePreTitre">Sécurité</phrase> Filtrer les données entrantes</title>
<simpara><indexterm>
<primary>sécurité</primary><secondary>url</secondary>
</indexterm>
<indexterm>
<primary>url</primary>
</indexterm>
C&#8217;est le moment de rappeler que <emphasis role="strong">toute information saisie par l&#8217;utilisateur</emphasis>
doit être filtrée et nettoyée avant d&#8217;être utilisée.
L&#8217;exemple <literal>path/route-params.js</literal> n&#8217;est pas sécurisé&#160;; vous vous en rendrez
compte en visitant <phrase role="URL"><link xl:href="http://localhost:4000/hello/&lt;script&gt;alert(h4ck)&lt;%2Fscript&gt;">localhost:4000/hello/&lt;script&gt;alert(h4ck)&lt;%2Fscript&gt;</link></phrase>.<?asciidoc-br?>
Ce type de failles s&#8217;exploite pour faire fuiter des données confidentielles.</simpara>
<simpara>Nous verrons tous ces aspects plus en détail dans la section
<quote><link linkend="security">Protéger l&#8217;application</link></quote>.</simpara>
</caution>
<simpara>Enfin, les routeurs contextualisent les actions à effectuer vis-à-vis d&#8217;une
ressource grâce au <emphasis>verbe HTTP</emphasis>.
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary>
</indexterm>
<indexterm>
<primary>verbe</primary>
</indexterm>
Ce dernier communique une intention&#160;– récupération, mise à jour, suppression.
Le routeur organise notre code pour déclencher une action adaptée
à la méthode employée&#160;:</simpara>
<screen>$ node path/method.js</screen>
<formalpara>
<title>path/method.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const router = require('find-my-way')();

router.get('/', (request, response) =&gt; {          <co xml:id="CO174-1"/>
  response.end('Bienvenue');
});

router.head('/', (request, response) =&gt; {         <co xml:id="CO174-2"/>
  response.writeHead(200, {                       <co xml:id="CO174-3"/>
    'X-Jobs': 'https://jobs.humancoders.com'      <co xml:id="CO174-4"/>
  });
  response.end('Invisible');                      <co xml:id="CO174-5"/>
});

const server = createServer().listen(4000)
  .on('request', (req, res) =&gt; router.lookup(req, res));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO174-1">
<para>Définition du chemin d&#8217;accès&#160;<literal>/</literal>&#160;– verbe <literal>GET</literal> (récupération).</para>
</callout>
<callout arearefs="CO174-2">
<para>Définition du chemin d&#8217;accès&#160;<literal>/</literal>&#160;– verbe <literal>HEAD</literal> cette fois.</para>
</callout>
<callout arearefs="CO174-3">
<para>La méthode <literal>response.writeHead</literal> est un moyen de définir le statut en même temps que les en-têtes de réponse.</para>
</callout>
<callout arearefs="CO174-4">
<para>Définition d&#8217;un en-tête personnalisé&#160;– le préfixe <literal>X-</literal> indique qu&#8217;il n&#8217;est pas lié au standard&#160;HTTP.</para>
</callout>
<callout arearefs="CO174-5">
<para>Écriture du corps du message&#160;– nous verrons qu&#8217;il est ignoré et n&#8217;est pas transmis au client.
<indexterm>
<primary>HTTP</primary><secondary>requête</secondary>
</indexterm>
<indexterm>
<primary>requête</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>GET</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>GET</secondary>
</indexterm>
<indexterm>
<primary>GET</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>HEAD</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>HEAD</secondary>
</indexterm>
<indexterm>
<primary>HEAD</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Les navigateurs web affichent seulement notre route <literal>GET</literal> car c&#8217;est
leur fonctionnement par défaut.
Ils comprennent le verbe <literal>POST</literal> pour <link linkend="upload">téléverser des fichiers</link> ou
<link linkend="post">transmettre des formulaires</link>.<?asciidoc-br?>
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>POST</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>POST</secondary>
</indexterm>
<indexterm>
<primary>POST</primary>
</indexterm>
<indexterm>
<primary>curl</primary>
</indexterm>
Tournons-nous à nouveau vers le programme <literal>curl</literal> pour observer les différences
entre les réponses nos deux verbes HTTP <literal>GET</literal> et&#160;<literal>HEAD</literal>&#160;:</simpara>
<screen>$ curl http://localhost:4000
Bienvenue
$ curl <emphasis role="marked">--head</emphasis> http://localhost:4000
HTTP/1.1 200 OK
<emphasis role="marked">X-Jobs: https://jobs.humancoders.com</emphasis>
Date: Sun, 01 Jul 2018 15:43:56 GMT
Connection: keep-alive</screen>
<simpara>L&#8217;utilisation de <literal>HEAD</literal> renvoie uniquement les en-têtes de réponse et nous
économise la <link linkend="templating">génération d&#8217;un gabarit</link>.
D&#8217;un point de vue client, le verbe <literal>HEAD</literal> aide à inspecter des ressources
sans avoir à télécharger le contenu&#160;– ce sont autant de kilo ou mégaoctets
économisés.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Principaux verbes HTTP et leur utilisation</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<thead>
<row>
<entry align="left" valign="top">Verbe</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>GET</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Récupération d&#8217;une ressource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>HEAD</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Récupération d&#8217;une ressource – seulement les en-têtes.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>POST</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Création d&#8217;une ressource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>PUT</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Mise à jour d&#8217;une ressource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>PATCH</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Mise à jour partielle d&#8217;une ressource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>DELETE</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Demande de suppression d&#8217;une ressource.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>DELETE</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>DELETE</secondary>
</indexterm>
<indexterm>
<primary>DELETE</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>PATCH</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>PATCH</secondary>
</indexterm>
<indexterm>
<primary>PATCH</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>PUT</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>PUT</secondary>
</indexterm>
<indexterm>
<primary>PUT</primary>
</indexterm></simpara>
<simpara>La responsabilité de comprendre ces verbes revient à notre application.
C&#8217;est donc à nous de leur associer une action pour les prendre en charge.</simpara>
</section>
<section xml:id="static">
<title>Répondre avec des fichiers statiques</title>
<simpara><indexterm>
<primary>application web</primary><secondary>fichier statique</secondary>
</indexterm>
<indexterm>
<primary>fichier statique</primary>
</indexterm></simpara>
<simpara>Les <link linkend="path">chemins d&#8217;accès</link> s&#8217;associent aussi à des fichiers statiques.
Ainsi, à une URL correspond un fichier placé sur notre disque dur.
J&#8217;ai placé trois fichiers de différentes natures (texte, image, PDF) pour
illustrer les exemples de cette section.</simpara>
<screen>$ tree -a static/files
static/files
├── .eslintrc.yaml
├── doc.pdf
└── screenshot.jpg</screen>
<simpara>Nous allons commencer par mettre à disposition un seul fichier, quel que soit
le chemin demandé&#160;:</simpara>
<screen>$ node static/stream.js</screen>
<formalpara>
<title>static/stream.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const {createReadStream} = require('fs');
const {join} = require('path');

const server = createServer().listen(4000);

server.on('request', (requet, response) =&gt; {
  const filepath = join(__dirname, 'files', 'doc.pdf'); <co xml:id="CO175-1"/>
  createReadStream(filepath).pipe(response);            <co xml:id="CO175-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO175-1">
<para>Nous constituons un chemin d&#8217;accès avec <literal>path.join()</literal> (<link xl:href="../chapter-04/index.xml#path">chapitre&#160;4</link>, module&#160;<literal>path</literal>).</para>
</callout>
<callout arearefs="CO175-2">
<para>Nous créons un flux de lecture vers ce fichier (<link xl:href="../chapter-04/index.xml#stream">chapitre&#160;4</link>, module <literal>stream</literal>) et nous le redirigeons vers la réponse.
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.join()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.join()</secondary>
</indexterm>
<indexterm>
<primary>path.join()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>stream</secondary>
</indexterm>
<indexterm>
<primary>stream</primary>
</indexterm>
<indexterm>
<primary>flux de données</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>fs</secondary><tertiary>fs.createReadStream()</tertiary>
</indexterm>
<indexterm>
<primary>fs</primary><secondary>fs.createReadStream()</secondary>
</indexterm>
<indexterm>
<primary>fs.createReadStream()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Ce que cet exemple nous apprend,
c&#8217;est que l'<emphasis role="strong">objet de réponse est aussi un flux d&#8217;écriture</emphasis>.
<indexterm>
<primary>module</primary><secondary>stream</secondary><tertiary>stream.writeableStream</tertiary>
</indexterm>
<indexterm>
<primary>stream</primary><secondary>stream.writeableStream</secondary>
</indexterm>
<indexterm>
<primary>stream.writeableStream</primary>
</indexterm>
Peu importe le volume du fichier, l&#8217;envoi se régulera en fonction de la capacité
de téléchargement du client et en consommant le minimum de mémoire possible.
La lecture sera interrompue si le client annule le téléchargement.</simpara>
<simpara>Nous pouvons à présent étendre ce savoir nouvellement acquis en
<link linkend="path">routant un chemin d&#8217;accès</link> vers le répertoire qui contient nos fichiers.
<indexterm>
<primary>application web</primary><secondary>chemin d&#8217;accès (routing)</secondary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès (routing)</primary>
</indexterm></simpara>
<screen>$ node static/routes.js</screen>
<formalpara>
<title>static/routes.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const {createReadStream} = require('fs');
const {join} = require('path');
const router = require('find-my-way')();

const staticFiles = (request, response, params) =&gt; {
  const filename = join(__dirname, 'files', params.file);<co xml:id="CO176-1"/>
  createReadStream(filename).pipe(response);
};

router.get('/files/:file', staticFiles);                 <co xml:id="CO176-2"/>
router.head('/files/:file', staticFiles);

const server = createServer().listen(4000)
  .on('request', (req, res) =&gt; router.lookup(req, res));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO176-2">
<para>Création d&#8217;une route paramétrée qui répond avec la fonction&#160;<literal>staticFiles</literal>.</para>
</callout>
<callout arearefs="CO176-1">
<para>Composition dynamique du chemin d&#8217;accès au fichier.</para>
</callout>
</calloutlist>
<simpara>Si nous accédons à <phrase role="URL"><link xl:href="http://localhost:4000/files/doc.pdf">localhost:4000/files/doc.pdf</link></phrase> et <phrase role="URL"><link xl:href="http://localhost:4000/files/screenshot.jpg">localhost:4000/files/screenshot.jpg</link></phrase>,
nous verrons les deux documents s&#8217;afficher dans notre navigateur.
Il reste cependant un problème&#160;: l&#8217;accès à un chemin inconnu fait planter l&#8217;application.</simpara>
<simpara>Nous constatons que notre approche est un peu trop naïve en regardant les en-têtes
de réponse d&#8217;un peu plus&#160;près&#160;:</simpara>
<screen>$ curl --head 'http://localhost:4000/files/doc.pdf' <co xml:id="CO177-1"/>
HTTP/1.1 200 OK
Date: Mon, 02 Jul 2018 15:47:33 GMT
Connection: keep-alive</screen>
<calloutlist>
<callout arearefs="CO177-1">
<para>C&#8217;est pour exécuter cette commande que j&#8217;ai ajouté l&#8217;écoute de la méthode&#160;<literal>HEAD</literal>.
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>HEAD</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>HEAD</secondary>
</indexterm>
<indexterm>
<primary>HEAD</primary>
</indexterm>
En fait, nous gagnerions à documenter la ressource en transmettant
des en-têtes supplémentaires.
La question est&#160;: lesquels&#160;?</para>
</callout>
</calloutlist>
<caution>
<title><phrase role="RemarquePreTitre">Sécurité</phrase> Filtrer les données entrantes</title>
<simpara><indexterm>
<primary>sécurité</primary><secondary>chemin d&#8217;accès</secondary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès</primary>
</indexterm>
<emphasis role="strong">Toute information saisie par l&#8217;utilisateur</emphasis> doit être filtrée et nettoyée avant
d&#8217;être utilisée.
L&#8217;exemple <literal>static/routes.js</literal> n&#8217;est pas sécurisé&#160;; vous vous rendrez
compte en visitant <phrase role="URL"><link xl:href="http://localhost:4000/files/..%2F..%2Fhello.js">localhost:4000/files/..%2F..%2Fhello.js</link></phrase> que ce chemin
permet de remonter jusqu&#8217;à un fichier situé hors du répertoire <literal>static/files</literal>.<?asciidoc-br?>
Ce type de faille s&#8217;exploite pour accéder aux données confidentielles de notre
système d&#8217;exploitation.</simpara>
<simpara>Nous verrons tous ces aspects plus en détail dans la section
<quote><link linkend="security">Protéger l&#8217;application</link></quote>.</simpara>
</caution>
<simpara>Nous allons nous baser sur le module&#160;<literal>npm</literal> <emphasis>send</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/send">npmjs.com/send</link></phrase>)
pour améliorer l&#8217;exemple précédent et constater par nous-même quels
en-têtes sont utiles.
<indexterm>
<primary>module npm</primary><secondary>send</secondary>
</indexterm>
<indexterm>
<primary>send</primary>
</indexterm></simpara>
<screen>$ node static/send.js</screen>
<formalpara>
<title>static/send.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const {join} = require('path');
const send = require('send');
const router = require('find-my-way')();

const staticFiles = (request, response, params) =&gt; {
  const pathname = params['*'];               <co xml:id="CO178-1"/>
  const filename = join(__dirname, 'files', pathname);

  send(request, filename).pipe(response);     <co xml:id="CO178-2"/>
};

router.get('/files/*', staticFiles);          <co xml:id="CO178-3"/>
router.head('/files/*', staticFiles);

const server = createServer().listen(4000)
  .on('request', (req, res) =&gt; router.lookup(req, res));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO178-3">
<para>En utilisant la syntaxe&#160;<literal>*</literal>, le routeur accepte une arborescence de chemins&#160;– <literal>doc.pdf</literal> tout comme <literal>un/long/chemin.pdf</literal>.</para>
</callout>
<callout arearefs="CO178-1">
<para>L&#8217;arborescence se récupère avec un paramètre du même&#160;nom&#160;–&#160;<literal>*</literal>.</para>
</callout>
<callout arearefs="CO178-2">
<para>Le module <emphasis>send</emphasis> prend en charge la suite de la transmission.</para>
</callout>
</calloutlist>
<simpara>Nous n&#8217;avons pas apporté de grands bouleversements, si ce n&#8217;est que les
fichiers inexistants ne font plus planter l&#8217;application
et que les en-têtes de réponses sont plus fournis qu&#8217;avant&#160;:</simpara>
<screen>$ curl --head 'http://localhost:4000/files/doc.pdf'
HTTP/1.1 200 OK
Accept-Ranges: bytes
Cache-Control: public, max-age=0
Last-Modified: Tue, 12 Jun 2018 08:02:40 GMT
ETag: W/"10c5d-163f304b0d2"
Content-Type: application/pdf
Content-Length: 68701
Date: Mon, 02 Jul 2018 15:52:18 GMT
Connection: keep-alive</screen>
<simpara>Parmi les en-têtes les plus importants, nous trouvons <literal>Content-Type</literal>,
<literal>Content-Length</literal> et <literal>Last-Modified</literal>.
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Content-Type</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Content-Type</secondary>
</indexterm>
<indexterm>
<primary>Content-Type</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Content-Length</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Content-Length</secondary>
</indexterm>
<indexterm>
<primary>Content-Length</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Last-Modified</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Last-Modified</secondary>
</indexterm>
<indexterm>
<primary>Last-Modified</primary>
</indexterm>
Ils aident le client à interpréter ou représenter le contenu de manière optimale,
à informer de la taille du contenu (utile à l&#8217;animation de la barre de
téléchargement du navigateur web) et à distinguer l&#8217;ancienneté du fichier.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>En-têtes de réponse utiles pour transmettre des fichiers</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="75*"/>
<thead>
<row>
<entry align="left" valign="top">En-tête</entry>
<entry align="left" valign="top">Utilité</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>Content-Type</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Explicite la nature du contenu mis à disposition.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Content-Disposition</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Indique si le contenu doit être affiché dans le client ou téléchargé sous un nom particulier.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Cache-Control</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Active ou désactive la mise en cache de ce fichier par le client.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Last-Modified</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Indique la date de dernière modification du contenu.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Content-Length</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Indique la longueur (en octets) du contenu.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Content-Encoding</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Indique le mode de compression utilisé pour transmettre les données.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Accept-Ranges</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Indique la possibilité ou non de reprendre un téléchargement ou d&#8217;en choisir un segment avec l&#8217;en-tête de requête <literal>Range</literal>.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Cache-Control</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Cache-Control</secondary>
</indexterm>
<indexterm>
<primary>Cache-Control</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Cache-Disposition</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Cache-Disposition</secondary>
</indexterm>
<indexterm>
<primary>Cache-Disposition</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Accept-Ranges</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Accept-Ranges</secondary>
</indexterm>
<indexterm>
<primary>Accept-Ranges</primary>
</indexterm></simpara>
<tip>
<title><phrase role="RemarquePreTitre">Performance</phrase> Utiliser Apache ou nginx en production</title>
<simpara><indexterm>
<primary>nginx</primary>
</indexterm>
<indexterm>
<primary>Apache httpd</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>fichier statique</secondary>
</indexterm>
<indexterm>
<primary>fichier statique</primary>
</indexterm>
Si Node s&#8217;en sort bien pour envoyer des fichiers vers le client,
les serveurs web Apache et nginx sont encore plus performants à ce niveau.
C&#8217;est quelque chose à considérer si votre application sert principalement
des fichiers statiques.</simpara>
<simpara>Lisez le <link xl:href="../chapter-06/index.xml">chapitre&#160;6</link> pour apprendre à
configurer Node derrière un autre serveur&#160;web.</simpara>
</tip>
</section>
<section xml:id="arguments">
<title>Réagir aux arguments&#160;d&#8217;URL</title>
<simpara><indexterm>
<primary>module</primary><secondary>url</secondary>
</indexterm>
<indexterm>
<primary>url</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>argument d&#8217;URL</secondary>
</indexterm>
<indexterm>
<primary>argument d&#8217;URL</primary>
</indexterm></simpara>
<simpara>Les arguments d&#8217;une URL servent à <emphasis role="strong">affiner le contexte d&#8217;affichage</emphasis> d&#8217;une
ressource donnée.
Ces options servent par exemple à paginer du contenu ou spécifier une dimension,
un filtre d&#8217;affichage ou encore une expression de recherche.
En clair, elles servent à influencer la représentation d&#8217;une ressource
ou information.</simpara>
<simpara>Par défaut, les arguments sont représentés de manière textuelle avec
le chemin d&#8217;accès, dans l&#8217;attribut <literal>request.url</literal>&#160;:</simpara>
<screen>$ node arguments/intro.js</screen>
<formalpara>
<title>arguments/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const server = createServer().listen(4000);

server.on('request', (request, response) =&gt; {
  response.end(request.url);      <co xml:id="CO179-1"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO179-1">
<para>La page demandée affiche l&#8217;attribut de requête <literal>url</literal>.</para>
</callout>
</calloutlist>
<simpara>Nous voyons s&#8217;afficher <literal>/test?cle=valeur&amp;option</literal> en nous rendant à l&#8217;adresse
<phrase role="URL"><link xl:href="http://localhost:4000/test?cle=valeur&amp;option">localhost:4000/test?cle=valeur&amp;option</link></phrase>.
Ce n&#8217;est pas utilisable en l&#8217;état.</simpara>
<simpara>Le <link xl:href="../chapter-04/index.xml#url">module <literal>url</literal></link>
(<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>) entre en jeu.
En plus de déstructurer une URL entière, il sait aussi décomposer les options
et les transformer en un objet utilisable côté&#160;Node&#160;:
<indexterm>
<primary>module</primary><secondary>url</secondary><tertiary>url.parse()</tertiary>
</indexterm>
<indexterm>
<primary>url</primary><secondary>url.parse()</secondary>
</indexterm>
<indexterm>
<primary>url.parse()</primary>
</indexterm></simpara>
<screen>$ node arguments/parse.js</screen>
<formalpara>
<title>arguments/parse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const {parse} = require('url');
const server = createServer().listen(4000);

server.on('request', (request, response) =&gt; {
  const {search, query} = parse(request.url, true); <co xml:id="CO180-1"/>

  response.write(`${search}\n\n`);                  <co xml:id="CO180-2"/>
  response.write(JSON.stringify(query));            <co xml:id="CO180-3"/>
  response.end();
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO180-1">
<para>Le deuxième argument de la fonction <literal>url.parse()</literal> décompose les arguments, disponibles dans l&#8217;attribut <literal>query</literal> de l&#8217;objet retourné.</para>
</callout>
<callout arearefs="CO180-2">
<para>L&#8217;attribut <literal>search</literal> correspond aux arguments, sous forme textuelle.</para>
</callout>
<callout arearefs="CO180-3">
<para>L&#8217;attribut <literal>query</literal> est un objet&#160;– ici, transformé pour être affiché dans la page sous forme de texte.</para>
</callout>
</calloutlist>
<simpara>Cette fois, nous voyons s&#8217;afficher <literal>{"cle": "valeur", "option": ""}</literal> dans notre
navigateur lorsque nous nous rendons sur <phrase role="URL"><link xl:href="http://localhost:4000/test?cle=valeur&amp;option">localhost:4000/test?cle=valeur&amp;option</link></phrase>.
C&#8217;est tout ce qu&#8217;il nous fallait pour l&#8217;utiliser dans notre application.</simpara>
<screen>$ node arguments/format.js</screen>
<formalpara>
<title>arguments/format.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const {parse} = require('url');
const {format} = require('date-fns');
const server = createServer().listen(4000);

server.on('request', (request, response) =&gt; {
  const {query} = parse(request.url, true);
  const text = format(new Date(), 'YYYY-MM-DD');

  if (query.format === 'svg') {                     <co xml:id="CO181-1"/>
    response.setHeader('Content-Type', 'text/html');<co xml:id="CO181-2"/>
    response.end(`&lt;svg viewBox="0 0 200 100"&gt;
      &lt;text x="0" y="50"&gt;${text}&lt;/text&gt;
    &lt;/svg&gt;`);
  }
  else {
    response.end(text);                             <co xml:id="CO181-3"/>
  }
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO181-1">
<para>Nous rentrons dans ce bloc en présence de l&#8217;argument d&#8217;URL <literal>format=svg</literal>.</para>
</callout>
<callout arearefs="CO181-2">
<para>L&#8217;en-tête <literal>Content-Type</literal> fait que le contenu est interprété (et affiché) comme du HTML&#160;– en retirant cette ligne, le document sera alors téléchargé.</para>
</callout>
<callout arearefs="CO181-3">
<para>Sinon, le reste du temps, nous affichons la date telle quelle, en tant que texte.
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Content-Type</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Content-Type</secondary>
</indexterm>
<indexterm>
<primary>Content-Type</primary>
</indexterm>
Les deux URL <phrase role="URL"><link xl:href="http://localhost:4000/date?format=svg">localhost:4000/date?format=svg</link></phrase> et <phrase role="URL"><link xl:href="http://localhost:4000/date">localhost:4000/date</link></phrase> font
référence à une même ressource, mais l&#8217;affichage s&#8217;adapte au contexte.</para>
</callout>
</calloutlist>
<table frame="all" rowsep="1" colsep="1">
<title>Exemples d&#8217;arguments et leurs représentations en structure ECMAScript</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Argument</entry>
<entry align="left" valign="top">Représentation</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>?cle=valeur</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>{cle: "valeur"}</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>?cle</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>{cle: ""}</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>?cle[]=1&amp;cle[]=2</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>{cle: [1,2]}</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Performance</phrase> Module npm parseurl</title>
<simpara><indexterm>
<primary>module npm</primary><secondary>parseurl</secondary>
</indexterm>
<indexterm>
<primary>parseurl</primary>
</indexterm>
Si vous êtes à la recherche de performance, le module&#160;<literal>npm</literal> <emphasis>parseurl</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/parseurl">npmjs.com/parseurl</link></phrase>) retourne les mêmes résultats
tout en étant jusqu&#8217;à 10&#160;fois plus rapide que le module natif de&#160;Node.</simpara>
</tip>
</section>
<section xml:id="post">
<title>Recevoir des données de formulaire&#160;(POST)</title>
<simpara><indexterm>
<primary>application web</primary><secondary>formulaire</secondary>
</indexterm>
<indexterm>
<primary>formulaire</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>POST</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>POST</secondary>
</indexterm>
<indexterm>
<primary>POST</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>PUT</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>PUT</secondary>
</indexterm>
<indexterm>
<primary>PUT</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>PATCH</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>PATCH</secondary>
</indexterm>
<indexterm>
<primary>PATCH</primary>
</indexterm></simpara>
<simpara>Lorsque nous ne précisons pas la méthode employée, les outils et logiciels
utilisent par défaut la méthode&#160;<literal>GET</literal>.
Elle est associée à une récupération de données sans transmettre autre chose
que des en-têtes et un chemin d&#8217;accès.</simpara>
<simpara>Il y a des cas où nous avons besoin d&#8217;envoyer des données, pour les stocker
ou pour demander à créer un enregistrement.
Dans ce cas, nous utilisons la méthode <literal>POST</literal> et nous transmettons les informations
d&#8217;une manière différente.</simpara>
<simpara>Le serveur suivant affichera deux choses à chaque requête reçue&#160;: l&#8217;en-tête
<literal>Content-Type</literal> et le corps du message transmis par la requête.</simpara>
<screen>$ node post/server.js</screen>
<simpara>La commande <literal>curl</literal> règle le nom et la valeur d&#8217;un champ de formulaire
avec l&#8217;option&#160;<literal>-d</literal>.
<indexterm>
<primary>curl</primary>
</indexterm>
Nous pouvons ainsi transmettre des données avec la méthode <literal>POST</literal> à notre
serveur&#160;:</simpara>
<screen>$ curl -XPOST -d 'fromage=cabécou' -d 'remember_me=1' \
  http://localhost:4000</screen>
<simpara>C&#8217;est vraiment l&#8217;équivalent d&#8217;un classique formulaire&#160;HTML.</simpara>
<figure>
<title>Représentation d&#8217;un formulaire HTML qui envoie les mêmes informations que la commande <literal>curl</literal> précédente</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/send-data.png"/>
</imageobject>
<textobject><phrase>send data</phrase></textobject>
</mediaobject>
</figure>
<formalpara>
<title>post/index.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;meta charset="utf-8"&gt;
&lt;form action="http://localhost:4000" method="POST"&gt; <co xml:id="CO182-1"/>
&lt;label&gt;fromage=
  &lt;input name="fromage" type="text" value="cabécou"&gt;
&lt;/label&gt;

&lt;label&gt;remember_me=
  &lt;input name="remember_me" type="checkbox" value="1" checked&gt;
&lt;/label&gt;

&lt;button type="submit"&gt;Transmettre&lt;/button&gt;
&lt;/form&gt;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO182-1">
<para>Nous retrouvons l&#8217;indication de la méthode&#160;<literal>POST</literal>.</para>
</callout>
</calloutlist>
<simpara>Lorsque la page HTML est ouverte dans un navigateur et qu&#8217;on appuie sur le bouton
<guibutton>Transmettre</guibutton>, les mêmes informations qu&#8217;avec la commande <literal>curl</literal> s&#8217;affichent.</simpara>
<simpara>Il se trouve que Node aussi sait envoyer des informations de formulaire
avec le <link xl:href="../chapter-04/index.xml#http">module <literal>http</literal></link>
(<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>).
<indexterm>
<primary>module</primary><secondary>http</secondary>
</indexterm>
<indexterm>
<primary>http</primary>
</indexterm></simpara>
<screen>$ node post/send.js</screen>
<formalpara>
<title>post/send.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {stringify} = require('querystring');
const {request} = require('http');

const data = { fromage: 'cabécou', 'remember_me': 1 }; <co xml:id="CO183-1"/>

const options = {
  hostname: 'localhost',
  port: 4000,
  method: 'POST',                                      <co xml:id="CO183-2"/>
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded'<co xml:id="CO183-3"/>
  }
};

request(options).end(stringify(data));                 <co xml:id="CO183-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO183-1">
<para>Création de la structure des données à transmettre.</para>
</callout>
<callout arearefs="CO183-2">
<para>Indication de la méthode&#160;<literal>POST</literal>.</para>
</callout>
<callout arearefs="CO183-3">
<para>Cet en-tête caractérise la manière d&#8217;organiser les données de formulaire&#160;– personnellement, je n&#8217;arrive jamais à retenir cette valeur et je la copie/colle toujours depuis Stack Overflow ou une documentation technique.</para>
</callout>
<callout arearefs="CO183-4">
<para>Les données sont sérialisées sous forme d&#8217;une chaîne de caractères, identique à ce que ferait un navigateur avec les données d&#8217;un formulaire.</para>
</callout>
</calloutlist>
<simpara>Nous retrouvons l&#8217;en-tête <literal>Content-Type</literal> dans l&#8217;affichage du script <literal>post/server.js</literal>.
Le contenu du message envoyé ressemble beaucoup à des arguments d&#8217;URL
encodés avec <link linkend="encode-uri">encodeURIComponent()</link>.
<indexterm>
<primary>encodeURIComponent()</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>formulaire</secondary><tertiary>encodage</tertiary>
</indexterm>
<indexterm>
<primary>formulaire</primary><secondary>encodage</secondary>
</indexterm>
<indexterm>
<primary>encodage</primary>
</indexterm></simpara>
<formalpara>
<title>Extrait d&#8217;affichage d&#8217;un message reçu par <literal>post/server.js</literal></title>
<para>
<screen>application/x-www-form-urlencoded
fromage=cab%C3%A9cou&amp;remember_me=1</screen>
</para>
</formalpara>
<simpara>Comme dans les sections précédentes, nous devons <emphasis>décoder</emphasis> une chaîne de
caractères pour en extraire sa signification et en faire quelque chose
en ECMAScript.</simpara>
<simpara>Nous pourrions utiliser la fonction <literal>parse()</literal> du module Node <literal>querystring</literal>
pour décoder le contenu de cette chaîne, mais nous allons plutôt faire appel
au module&#160;<literal>npm</literal> <emphasis>co-body</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/co-body">npmjs.com/co-body</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>co-body</secondary>
</indexterm>
<indexterm>
<primary>co-body</primary>
</indexterm>
Ce module décode plusieurs types de requêtes <literal>POST</literal>, illustrés dans d&#8217;autres
exemples de cette même section.
<indexterm>
<primary>HTTP</primary><secondary>verbe</secondary><tertiary>POST</tertiary>
</indexterm>
<indexterm>
<primary>verbe</primary><secondary>POST</secondary>
</indexterm>
<indexterm>
<primary>POST</primary>
</indexterm></simpara>
<screen>$ node post/server-parse.js</screen>
<formalpara>
<title>post/server-parse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const parse = require('co-body');

const onRequest = (request, response) =&gt; {
  parse(request)                                    <co xml:id="CO184-1"/>
    .then(body =&gt; {
      console.log(request.headers['content-type']);
      console.log(body);                            <co xml:id="CO184-2"/>
    })
    .catch(error =&gt; console.error(error.message))   <co xml:id="CO184-3"/>
    .finally(() =&gt; response.end());
};

createServer(onRequest).listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO184-1">
<para>Le module <emphasis>co-body</emphasis> transforme une requête HTTP en un objet utilisable dans&#160;Node.</para>
</callout>
<callout arearefs="CO184-2">
<para>Le contenu de la variable ressemblera à quelque chose comme <literal>{fromage: 'cabécou', remember_me: '1'}</literal>.</para>
</callout>
<callout arearefs="CO184-3">
<para>Une erreur s&#8217;affichera en cas de problème pour décoder le corps de la requête entrante.</para>
</callout>
</calloutlist>
<simpara>Il nous suffit d&#8217;exécuter à nouveau le script <literal>post/send.js</literal> pour observer
la différence et constater que nous pouvons désormais interpréter les données
d&#8217;un formulaire.</simpara>
<simpara>Le fichier <literal>post/send.js</literal> se simplifie si on utilise le module&#160;<literal>npm</literal> <emphasis>superagent</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/superagent">npmjs.com/superagent</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>superagent</secondary>
</indexterm>
<indexterm>
<primary>superagent</primary>
</indexterm>
Je le trouve simple d&#8217;utilisation et il fonctionne avec des promesses,
des formulaires et les <link linkend="upload">téléversements de fichiers</link>.
<indexterm>
<primary>application web</primary><secondary>téléversement de fichier (upload)</secondary>
</indexterm>
<indexterm>
<primary>téléversement de fichier (upload)</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>formulaire</secondary><tertiary>pièce-jointe</tertiary>
</indexterm>
<indexterm>
<primary>formulaire</primary><secondary>pièce-jointe</secondary>
</indexterm>
<indexterm>
<primary>pièce-jointe</primary>
</indexterm></simpara>
<screen>$ node post/send-data.js</screen>
<formalpara>
<title>post/send-data.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {post} = require('superagent');

post('http://localhost:4000')                 <co xml:id="CO185-1"/>
  .send('fromage=cabécou')                    <co xml:id="CO185-2"/>
  .send('remember_me=1')
  .catch(error =&gt; console.log(error.message));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO185-1">
<para>URL de la ressource vers laquelle poster les informations.</para>
</callout>
<callout arearefs="CO185-2">
<para>La définition d&#8217;un champ de formulaire s&#8217;effectue à l&#8217;aide de la méthode <literal>send()</literal> et d&#8217;une valeur ayant la forme d&#8217;une chaîne de caractères.</para>
</callout>
</calloutlist>
<simpara>À ce stade-là, nous avons fait le nécessaire pour interpréter le contenu d&#8217;un
formulaire sans pièce&#160;jointe.
Notre serveur est même prêt à recevoir des données transmises en dehors d&#8217;un
formulaire, au format&#160;JSON&#160;:
<indexterm>
<primary>JSON</primary>
</indexterm></simpara>
<screen>$ node post/send-json.js</screen>
<formalpara>
<title>post/send-json.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {post} = require('superagent');

post('http://localhost:4000')
  .send({                         <co xml:id="CO186-1"/>
    fromage: 'cabécou',
    remember_me: 1
  })
  .catch(error =&gt; console.log(error.message));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO186-1">
<para>L&#8217;utilisation d&#8217;un objet ECMAScript suffit au module <emphasis>superagent</emphasis> pour transmettre les données au format&#160;JSON.</para>
</callout>
</calloutlist>
<simpara>Nous constatons que la valeur de l&#8217;en-tête <literal>Content-Type</literal> change pour devenir
<literal>application/json</literal>.
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Content-Type</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Content-Type</secondary>
</indexterm>
<indexterm>
<primary>Content-Type</primary>
</indexterm>
Là aussi, le module <emphasis>co-body</emphasis> nous est utile, car il s&#8217;adapte au type des données
entrantes et les décode de manière transparente.</simpara>
<simpara>Il existe un dernier type d&#8217;encodage de données que nous pouvons nous
attendre à recevoir.
Ce sont les formulaires dits <emphasis>multipart</emphasis>.
<indexterm>
<primary>application web</primary><secondary>formulaire</secondary><tertiary>encodage multipart</tertiary>
</indexterm>
<indexterm>
<primary>formulaire</primary><secondary>encodage multipart</secondary>
</indexterm>
<indexterm>
<primary>encodage multipart</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>formulaire</secondary><tertiary>pièce-jointe</tertiary>
</indexterm>
<indexterm>
<primary>formulaire</primary><secondary>pièce-jointe</secondary>
</indexterm>
<indexterm>
<primary>pièce-jointe</primary>
</indexterm></simpara>
<screen>$ node post/send-multipart.js</screen>
<formalpara>
<title>post/send-multipart.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {post} = require('superagent')

post('http://localhost:4000')
  .field('fromage', 'cabécou')                <co xml:id="CO187-1"/>
  .field('remember_me', 1)
  .catch(error =&gt; console.log(error.message));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO187-1">
<para>Le module <emphasis>superagent</emphasis> utilise la méthode <literal>field()</literal> pour définir la valeur d&#8217;un champ <emphasis>multipart</emphasis>.
<indexterm>
<primary>module npm</primary><secondary>superagent</secondary>
</indexterm>
<indexterm>
<primary>superagent</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Le serveur va pourtant afficher une erreur du type&#160;:</simpara>
<screen>Unsupported content-type: multipart/form-data;
  boundary=--------------------------070345340228095473881249</screen>
<simpara>Ce type d&#8217;encodage de données est plus complexe à gérer.
Il va nous falloir passer à une autre stratégie, incontournable
pour gérer le <link linkend="upload">téléversement de fichiers</link>.</simpara>
</section>
<section xml:id="upload">
<title>Téléverser des fichiers</title>
<simpara><indexterm>
<primary>application web</primary><secondary>téléversement de fichier (upload)</secondary>
</indexterm>
<indexterm>
<primary>téléversement de fichier (upload)</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>formulaire</secondary><tertiary>pièce-jointe</tertiary>
</indexterm>
<indexterm>
<primary>formulaire</primary><secondary>pièce-jointe</secondary>
</indexterm>
<indexterm>
<primary>pièce-jointe</primary>
</indexterm></simpara>
<simpara>Le téléversement de fichier implique un peu plus de travail qu&#8217;un <link linkend="post">simple formulaire</link>
car la structure des données envoyées diffère mais aussi, surtout,
parce que la réception et la gestion des fichiers demandent encore plus
d&#8217;attention.</simpara>
<simpara>Voyons par nous-même à quoi ressemble une requête qui contient une pièce&#160;jointe.</simpara>
<screen>$ node upload/server.js</screen>
<formalpara>
<title>upload/server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const getStream = require('get-stream');

const onRequest = (request, response) =&gt; {
  getStream(request).then(body =&gt; {
    console.log(request.headers['content-type']);
    console.log(body);
    response.end();
  });
};

createServer(onRequest).listen(4000);</programlisting>
</para>
</formalpara>
<simpara>Ce serveur affiche le contenu d&#8217;une requête entrante.
La requête suivante illustre le téléversement d&#8217;un fichier avec le programme <literal>curl</literal>.
<indexterm>
<primary>curl</primary>
</indexterm>
Notez que, cette fois-ci, nous utilisons l&#8217;option&#160;<literal>-F</literal> et que la valeur
est préfixée avec le caractère&#160;<literal>@</literal>, suivi du chemin d&#8217;accès au fichier en question.</simpara>
<screen>$ curl -XPOST -F 'hello=<emphasis role="marked">@upload/hello.txt</emphasis>' \
    http://localhost:4000</screen>
<simpara>Cette commande est équivalente à l&#8217;envoi du formulaire HTML suivant&#160;:</simpara>
<figure>
<title>Représentation d&#8217;un formulaire HTML qui téléverse un fichier</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/send-file.png"/>
</imageobject>
<textobject><phrase>send file</phrase></textobject>
</mediaobject>
</figure>
<formalpara>
<title>upload/index.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;meta charset="utf-8"&gt;
&lt;form action="http://localhost:4000" method="POST"
  enctype="multipart/form-data"&gt;    <co xml:id="CO188-1"/>

&lt;label&gt;hello=
  &lt;input name="hello" type="file"&gt;  <co xml:id="CO188-2"/>
&lt;/label&gt;

&lt;button type="submit"&gt;Transmettre&lt;/button&gt;
&lt;/form&gt;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO188-1">
<para>Nous retrouvons l&#8217;encodage <literal>multipart/form-data</literal> dans l&#8217;attribut <literal>enctype</literal>.</para>
</callout>
<callout arearefs="CO188-2">
<para>Un fichier se téléverse avec un champ de type <literal>file</literal>.</para>
</callout>
</calloutlist>
<simpara>La structure du corps de message d&#8217;une requête <literal>multipart/form-data</literal> envoyée
avec la commande <literal>curl</literal> ou un formulaire HTML ressemble ce qui suit&#160;:</simpara>
<screen>multipart/form-data; boundary=-----1acfa07ebbd71d3c <co xml:id="CO189-1"/>

-----1acfa07ebbd71d3c                               <co xml:id="CO189-2"/>
Content-Disposition: form-data; name="hello";
  filename="hello.txt"                              <co xml:id="CO189-3"/>
Content-Type: text/plain                            <co xml:id="CO189-4"/>

Hello World

-----1acfa07ebbd71d3c----                           <co xml:id="CO189-5"/></screen>
<calloutlist>
<callout arearefs="CO189-1">
<para>Contenu de l&#8217;en-tête <literal>Content-Type</literal>&#160;– l&#8217;attribut <literal>boundary</literal> précise le motif de délimitation des différents champs.</para>
</callout>
<callout arearefs="CO189-2">
<para>Ouverture des informations du premier champ.</para>
</callout>
<callout arearefs="CO189-3">
<para>Les attributs <literal>name</literal> et <literal>filename</literal> définissent respectivement le nom du champ de formulaire et celui du fichier en question.</para>
</callout>
<callout arearefs="CO189-4">
<para>L&#8217;attribut <literal>Content-Type</literal> concerne le fichier et aide à comprendre comment interpréter son contenu&#160;– ici, du texte brut.</para>
</callout>
<callout arearefs="CO189-5">
<para>Fermeture des informations du premier champ.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Courriels et pièces&#160;jointes</title>
<simpara><indexterm>
<primary>application web</primary><secondary>envoyer un email</secondary>
</indexterm>
<indexterm>
<primary>envoyer un email</primary>
</indexterm>
Les courriels utilisent aussi l&#8217;encodage <literal>multipart/form-data</literal> pour joindre
des fichiers à un message.
Si vous savez encoder ou décoder des fichiers pour le&#160;Web, vous savez scripter
l&#8217;ajout de pièces&#160;jointes pour les courriels.</simpara>
</tip>
<simpara>Il nous faudrait écrire davantage que 20&#160;lignes de code si nous devions
nous-même interpréter un contenu de requête qui contient des pièces&#160;jointes.
C&#8217;est suffisamment compliqué à programmer de manière robuste pour que le module
<emphasis>co-body</emphasis> vu dans la <link linkend="post">section précédente</link> ne s&#8217;en charge pas et recommande
le module <emphasis>formidable</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/formidable">npmjs.com/formidable</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>formidable</secondary>
</indexterm>
<indexterm>
<primary>formidable</primary>
</indexterm>
C&#8217;est exactement ce que nous allons faire pour outiller un nouveau serveur.</simpara>
<screen>$ node upload/server-parse.js</screen>
<formalpara>
<title>upload/server-parse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const formidable = require('formidable');

const onRequest = (request, response) =&gt; {
  const form = new formidable.IncomingForm();
  form.parse(request, (error, fields, files) =&gt; { <co xml:id="CO190-1"/>
    const testFile = files.hello;                 <co xml:id="CO190-2"/>

    console.log(testFile.type);                   <co xml:id="CO190-3"/>
    console.log(testFile.name);                   <co xml:id="CO190-4"/>
    console.log(testFile.size);                   <co xml:id="CO190-5"/>
    console.log(testFile.path);                   <co xml:id="CO190-6"/>
    response.end();
  });
};

createServer(onRequest).listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO190-1">
<para>Le module <emphasis>formidable</emphasis> différencie les données et les fichiers.</para>
</callout>
<callout arearefs="CO190-2">
<para>Nous accédons aux informations d&#8217;un fichier au travers d&#8217;une clé, identique à celle de son champ <literal>name</literal> dans le formulaire.</para>
</callout>
<callout arearefs="CO190-3">
<para>Affiche <literal>text/plain</literal>&#160;– la valeur du <literal>Content-Type</literal> du fichier.</para>
</callout>
<callout arearefs="CO190-4">
<para>Affiche <literal>hello.txt</literal>&#160;– c&#8217;est le nom du fichier tel qu&#8217;il était nommé sur le poste client.</para>
</callout>
<callout arearefs="CO190-5">
<para>Affiche&#160;<literal>12</literal>&#160;– c&#8217;est le poids total du fichier.</para>
</callout>
<callout arearefs="CO190-6">
<para>Affiche un chemin d&#8217;accès vers l&#8217;emplacement de stockage temporaire du fichier téléversé.</para>
</callout>
</calloutlist>
<simpara>Nous sommes en mesure de recevoir des pièces&#160;jointes depuis un formulaire.
Le <link xl:href="../chapter-04/index.xml#fs">module&#160;<literal>fs</literal></link> (<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>)
propose le nécessaire pour déplacer le fichier ailleurs sur le système ou
pour en lire le contenu et le stocker ailleurs&#160;– sur un service de stockage distant
(Amazon&#160;S3, par exemple).
<indexterm>
<primary>module</primary><secondary>fs</secondary>
</indexterm>
<indexterm>
<primary>fs</primary>
</indexterm></simpara>
<caution>
<title><phrase role="RemarquePreTitre">Sécurité</phrase> Un fichier texte n&#8217;a de texte que le nom</title>
<simpara><indexterm>
<primary>sécurité</primary><secondary>type de fichier</secondary>
</indexterm>
<indexterm>
<primary>type de fichier</primary>
</indexterm>
Comme pour toute donnée transmise par un utilisateur ou une utilisatrice,
nous devons rester vigilant·e sur le contenu des fichiers pour
éviter des attaques mal intentionnées.</simpara>
<simpara>Un fichier texte qui contient du JavaScript pourrait être exécuté comme un
script sur le poste client et ainsi servir à subtiliser des données privées
ou aider quelqu&#8217;un à usurper une identité sur le service.</simpara>
</caution>
<simpara>Je recommande deux approches à appliquer avant même de faire quoi que ce soit
avec une pièce&#160;jointe fraîchement téléversée&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>S&#8217;il s&#8217;agit d&#8217;un <emphasis role="strong">fichier texte</emphasis>&#160;: filtrer le contenu du fichier en retirant
tout ce qui ressemble à du code arbitraire et filtrer le contenu à l&#8217;affichage
pour retirer tout balisage HTML (voir section <quote><link linkend="security">Protéger son application</link></quote>).</simpara>
</listitem>
<listitem>
<simpara>S&#8217;il s&#8217;agit d&#8217;un <emphasis role="strong">fichier binaire</emphasis> (image, vidéo, PDF)&#160;: utiliser un antivirus
en ligne de commande pour scanner le contenu&#160;– <emphasis>ClamAV</emphasis> (<phrase role="URL"><link xl:href="https://www.clamav.net">www.clamav.net</link></phrase>)
est un excellent antivirus open source.
<indexterm>
<primary>sécurité</primary><secondary>anti-virus</secondary>
</indexterm>
<indexterm>
<primary>anti-virus</primary>
</indexterm></simpara>
</listitem>
</itemizedlist>
<simpara>Ces opérations risquent de prendre du temps&#160;– de quelques secondes à plusieurs
minutes dans le cas de fichiers volumineux.
Au lieu de faire attendre l&#8217;utilisateur devant son écran, je recommande
de faire appel à un <link linkend="job-queue">mécanisme de file d&#8217;attente</link> pour traiter
l&#8217;effort indépendamment, en fonction des capacités de calcul disponibles.
<indexterm>
<primary>application web</primary><secondary>traitement asynchrone (file d&#8217;attente)</secondary>
</indexterm>
<indexterm>
<primary>traitement asynchrone (file d&#8217;attente)</primary>
</indexterm></simpara>
<simpara>Enfin, quand vous avez fini d&#8217;utiliser la pièce&#160;jointe&#160;– ou si vous ne l&#8217;utilisez pas&#160;–
pensez aussi à la <emphasis role="strong">supprimer du répertoire temporaire</emphasis>.
Le disque dur du serveur pourrait manquer d&#8217;espace si plusieurs fichiers volumineux
étaient déposés en peu de temps.</simpara>
</section>
<section xml:id="cookies">
<title>Garder un lien avec les cookies</title>
<simpara><indexterm>
<primary>application web</primary><secondary>cookie</secondary>
</indexterm>
<indexterm>
<primary>cookie</primary>
</indexterm></simpara>
<simpara>Un cookie est une information partagée entre un client et un serveur pour
une durée limitée dans le temps.
Le client transmet les cookies au serveur afin que ce dernier contextualise
la demande&#160;– un identifiant utilisateur, des préférences ou autre.
Un cookie créé par le domaine <literal>example.com</literal> est envoyé seulement lors d&#8217;une
visite à <literal>example.com</literal>&#160;– sous-domaines inclus.</simpara>
<simpara>Ce mécanisme est aujourd&#8217;hui tristement célèbre pour son détournement
par les industries de la publicité, du marketing et de la revente de données.</simpara>
<screen>$ node cookies/set-cookie.js</screen>
<formalpara>
<title>cookies/set-cookie.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const server = createServer().listen(4000);

server.on('request', (request, response) =&gt; {
  response.setHeader('Set-Cookie', 'compteur=1'); <co xml:id="CO191-1"/>
  response.end();
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO191-1">
<para>L&#8217;en-tête de réponse <literal>Set-Cookie</literal> crée/modifie la valeur d&#8217;un cookie chez le client&#160;– ici, le cookie <literal>compteur</literal> est créé avec la valeur&#160;<literal>1</literal>.
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Set-Cookie</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Set-Cookie</secondary>
</indexterm>
<indexterm>
<primary>Set-Cookie</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Nous pouvons observer la création du cookie en nous rendant sur <phrase role="URL"><link xl:href="http://localhost:4000">localhost:4000</link></phrase>
avec un navigateur, puis en ouvrant les outils de développement.</simpara>
<figure>
<title>Visualisation des cookies avec les outils de développement du navigateur Firefox</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cookies-browser.png"/>
</imageobject>
<textobject><phrase>cookies browser</phrase></textobject>
</mediaobject>
</figure>
<simpara>Les cookies sont transmis du client au serveur <emphasis role="strong">à chaque requête</emphasis>.</simpara>
<screen>$ node cookies/read.js</screen>
<formalpara>
<title>cookies/read.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const server = createServer().listen(4000);

server.on('request', (request, response) =&gt; {
  const cookie = request.headers.cookie;  <co xml:id="CO192-1"/>

  response.end(`Contenu : ${cookie}`);    <co xml:id="CO192-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO192-1">
<para>Les cookies se lisent en inspectant l&#8217;en-tête de requête <literal>Cookie</literal>.</para>
</callout>
<callout arearefs="CO192-2">
<para>Affiche <literal>Contenu&#160;: compteur=1</literal>.
intexterm:[HTTP, en-tête, Cookie]
intexterm:[application web, cookie]</para>
</callout>
</calloutlist>
<simpara>Nous avons récupéré la valeur de l&#8217;en-tête contenant le cookie.
Nous devons faire un effort supplémentaire pour transformer cette valeur textuelle
en une structure ECMAScript qui fait sens pour notre application.</simpara>
<simpara>Nous allons nous aider pour cela du module&#160;<literal>npm</literal> <emphasis>cookie</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/cookie">npmjs.com/cookie</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>cookie</secondary>
</indexterm>
<indexterm>
<primary>cookie</primary>
</indexterm>
Il sait interpréter le contenu d&#8217;un en-tête HTTP et il sait également faire
l&#8217;inverse, transformer une structure ECMAScript vers du texte utilisable
dans l&#8217;en-tête de réponse <literal>Set-Cookie</literal>.
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Set-Cookie</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Set-Cookie</secondary>
</indexterm>
<indexterm>
<primary>Set-Cookie</primary>
</indexterm></simpara>
<screen>$ node cookies/parse.js</screen>
<formalpara>
<title>cookies/parse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const {parse} = require('cookie');
const server = createServer().listen(4000);

server.on('request', (request, response) =&gt; {
  const cookies = parse(request.headers.cookie);  <co xml:id="CO193-1"/>

  response.end(JSON.stringify(cookies));          <co xml:id="CO193-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO193-1">
<para>Nous passons l&#8217;intégralité de l&#8217;en-tête de requête <literal>Cookie</literal> à la fonction <literal>cookie.parse</literal>.</para>
</callout>
<callout arearefs="CO193-2">
<para>Affiche <literal>{"compteur":"1"}</literal>.
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Cookie</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Cookie</secondary>
</indexterm>
<indexterm>
<primary>Cookie</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>cookie</secondary>
</indexterm>
<indexterm>
<primary>cookie</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>La méthode <literal>response.setHeader()</literal> accepte un tableau pour créer plusieurs
cookies en même temps&#160;:
<indexterm>
<primary>module</primary><secondary>http</secondary><tertiary>IncomingResponse</tertiary>
</indexterm>
<indexterm>
<primary>http</primary><secondary>IncomingResponse</secondary>
</indexterm>
<indexterm>
<primary>IncomingResponse</primary>
</indexterm></simpara>
<screen>$ node cookies/set-multiple.js</screen>
<formalpara>
<title>cookies/set-multiple.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const {parse, serialize} = require('cookie');
const server = createServer().listen(4000);

server.on('request', (request, response) =&gt; {
  const {compteur} = parse(request.headers.cookie);
  const compteur2 = Number(compteur) + 1;

  response.setHeader('Set-Cookie', [                    <co xml:id="CO194-1"/>
    'language=fr; Max-Age: 9000000',                    <co xml:id="CO194-2"/>
    'is_admin=1; Path=/admin; HttpOnly',                <co xml:id="CO194-3"/>
    serialize('compteur', compteur2, {httpOnly: true}), <co xml:id="CO194-4"/>
    //`compteur=${compteur2}; HttpOnly`                 <co xml:id="CO194-5"/>
  ]);

  response.end();
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO194-1">
<para>Nous créons plusieurs cookies en passant un tableau de valeurs à la méthode <literal>response.setHeader()</literal>.</para>
</callout>
<callout arearefs="CO194-2">
<para>Crée un cookie dont la durée est limitée à 9&#160;millions de secondes (~104&#160;jours).</para>
</callout>
<callout arearefs="CO194-3">
<para>Crée un cookie visible pour le chemin d&#8217;accès <literal>/path</literal> (et les sous-chemins)&#160;– la deuxième directive empêche les scripts clients d&#8217;en lire ou modifier la valeur.</para>
</callout>
<callout arearefs="CO194-4">
<para>L&#8217;utilisation de <literal>cookie.serialize()</literal> est une autre manière de créer des cookies en construisant un objet ECMAScript au lieu d&#8217;une chaîne de caractères.</para>
</callout>
<callout arearefs="CO194-5">
<para>La ligne précédente équivaut à l&#8217;écriture de cette ligne.</para>
</callout>
</calloutlist>
<simpara>Cet exemple est aussi l&#8217;occasion de compléter les cookies avec
des directives, qui modifient leur durée de vie et leur visibilité.</simpara>
<simpara>Cela s&#8217;observe en lançant à nouveau le script <literal>cookies/parse.js</literal>&#160;:</simpara>
<screen>$ node cookies/parse.js</screen>
<simpara>L&#8217;accès à <phrase role="URL"><link xl:href="http://localhost:4000">localhost:4000</link></phrase> affiche quelque chose comme <literal>{"compteur":"1","language":"fr"}</literal>
tandis que <phrase role="URL"><link xl:href="http://localhost:4000/admin">localhost:4000/admin</link></phrase> affiche un cookie supplémentaire&#160;–
<literal>{"is_admin":"1","compteur":"1","language":"fr"}</literal>.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Directives complémentaires à la valeur d&#8217;un cookie</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<thead>
<row>
<entry align="left" valign="top">Directive</entry>
<entry align="left" valign="top">Explication</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>Max-Age</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Durée de vie du cookie en secondes.<?asciidoc-br?>
Si le nombre est inférieur ou égal à zéro, le cookie est supprimé.<?asciidoc-br?>
Si cette valeur n&#8217;est pas précisée, le cookie est supprimé à la fin de la session.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Domain</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Spécifie le domaine ou les sous-domaines applicables au cookie.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Path</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Contraint le cookie à ce répertoire et tous ses sous-répertoires.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Secure</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le cookie est envoyé seulement si le document est demandé via&#160;HTTPS.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>HttpOnly</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le cookie ne peut pas être lu ou modifié côté client, via la variable <literal>document.cookie</literal>.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Set-Cookie</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Set-Cookie</secondary>
</indexterm>
<indexterm>
<primary>Set-Cookie</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Cookie</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Cookie</secondary>
</indexterm>
<indexterm>
<primary>Cookie</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>cookie</secondary>
</indexterm>
<indexterm>
<primary>cookie</primary>
</indexterm></simpara>
<simpara>Nous savons maintenant garder le lien avec nos utilisateurs.
Nous utiliserons d&#8217;ailleurs les cookies pour <link linkend="sessions">maintenir une session</link>
avec un framework&#160;web.
<indexterm>
<primary>application web</primary><secondary>session utilisateur</secondary>
</indexterm>
<indexterm>
<primary>session utilisateur</primary>
</indexterm></simpara>
</section>
<section xml:id="templating">
<title>Structurer l&#8217;affichage avec les gabarits de présentation</title>
<simpara><indexterm>
<primary>application web</primary><secondary>gabarit de présentation (template)</secondary>
</indexterm>
<indexterm>
<primary>gabarit de présentation (template)</primary>
</indexterm></simpara>
<simpara>Les gabarits de présentation (ou <emphasis>templates</emphasis>) répondent à deux problèmes&#160;:
séparer le code applicatif (le fond) de la présentation (la forme) et aussi
structurer la complexité visuelle avec des composants réutilisables.</simpara>
<simpara>Nous allons nous pencher sur le module <emphasis>nunjucks</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/nunjucks">npmjs.com/nunjucks</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>nunjucks</secondary>
</indexterm>
<indexterm>
<primary>nunjucks</primary>
</indexterm>
Je l&#8217;apprécie pour son élégance et pour son caractère extensible.
Il existe d'<link linkend="templating-engines">autres modules de présentation</link> bien sûr
et je vous invite à choisir celui qui vous parle le plus,
quitte à en changer par la suite.</simpara>
<simpara>J&#8217;attends plusieurs choses d&#8217;un système de gabarits&#160;: itérer facilement
sur des collections (tableaux, objets), appliquer des filtres, inclure des
portions de présentation et imbriquer ma page dans un modèle de présentation
– une sorte de décoration qui contient des choses que je veux garder hors du gabarit
(comme le menu principal ou les balises <literal>&lt;meta&gt;</literal>).</simpara>
<simpara>Dans la suite de cette section, nous allons créer une présentation à partir
d&#8217;une liste de modules&#160;<literal>npm</literal> contenue dans un fichier&#160;JSON.
L&#8217;image suivante illustre très bien ce que nous cherchons à atteindre.</simpara>
<figure>
<title>Exemple de présentation qui met en scène des données dynamiques et des composants&#160;HTML</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/template.png" contentwidth="70%"/>
</imageobject>
<textobject><phrase>template</phrase></textobject>
</mediaobject>
</figure>
<formalpara>
<title>templating/server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {createServer} = require('http');
const {dependencies} = require('./package.json');
const njk = require('nunjucks').configure(__dirname);   <co xml:id="CO195-1"/>

const onRequest = (request, response) =&gt; {
  const html = njk.render('list.njk', {                 <co xml:id="CO195-2"/>
    title: 'Liste des dépendances',
    dependencies
  });

  response.end(html);                                   <co xml:id="CO195-3"/>
};

createServer(onRequest).listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO195-1">
<para>Nous configurons le module <emphasis>nunjucks</emphasis> pour qu&#8217;il cherche les gabarits dans le même répertoire que le script de l&#8217;application.</para>
</callout>
<callout arearefs="CO195-2">
<para>La méthode <literal>render()</literal> prend le contenu du fichier <literal>list.njk</literal> ainsi que les variables passées en argument pour compiler du&#160;HTML.</para>
</callout>
<callout arearefs="CO195-3">
<para>Ce HTML est envoyé en réponse pour être interprété par un navigateur&#160;web.</para>
</callout>
</calloutlist>
<simpara>Dans cet exemple, nous répondons la même chose, peu importe le chemin demandé
au serveur.
Nous pourrions tout à fait ajouter un <link linkend="path">routeur</link> afin de répondre avec
un gabarit différent pour chacune des routes.
Nous verrons aussi dans la section <quote><link linkend="express">Organiser une application</link></quote>
qu&#8217;un des buts des <emphasis>frameworks</emphasis> est d&#8217;apporter ce genre de cohérence.</simpara>
<simpara>Côté serveur, nous prenons une structure qui ne change pas (le gabarit)
et nous la combinons avec une structure qui change (les données) pour générer
un rendu HTML adapté au client à l&#8217;origine de la requête.</simpara>
<formalpara>
<title>templating/list.njk</title>
<para>
<programlisting language="html" linenumbering="unnumbered">{% extends "layout.njk" %}                      <co xml:id="CO196-1"/>

{% block content %}                             <co xml:id="CO196-2"/>
&lt;p&gt;
  Il y a {{ dependencies | length }} modules    <co xml:id="CO196-3"/>
  dans le fichier &lt;code&gt;package.json&lt;/code&gt;.
&lt;/p&gt;

&lt;ul&gt;
  {% for pkg,version in dependencies %}         <co xml:id="CO196-4"/>
  &lt;li&gt;&lt;code&gt;{{ pkg }}@{{ version }}&lt;/code&gt;&lt;/li&gt; <co xml:id="CO196-5"/>
  {% endfor %}
&lt;/ul&gt;
{% endblock %}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO196-1">
<para>Nous indiquons à <emphasis>nunjuck</emphasis> d&#8217;envelopper ce gabarit avec la structure décrite dans <literal>layout.njk</literal>.</para>
</callout>
<callout arearefs="CO196-2">
<para>Début de la déclaration d&#8217;un bloc nommé <literal>content</literal>.</para>
</callout>
<callout arearefs="CO196-3">
<para>L&#8217;objet <literal>dependencies</literal> (qui est passé en paramètre au gabarit) est affiché après avoir été filtré avec la fonction native <emphasis>nunjucks</emphasis> <literal>length</literal>.</para>
</callout>
<callout arearefs="CO196-4">
<para>La boucle&#160;<literal>for</literal> répète le bloc de gabarit pour chaque élément de la collection&#160;– à la manière des méthodes <literal>map()</literal> et <literal>forEach</literal> des <link xl:href="../chapter-03/index.xml#array">tableaux ECMAScript</link>.</para>
</callout>
<callout arearefs="CO196-5">
<para>Les valeurs de&#160;<literal>pkg</literal> et de <literal>version</literal> changent à chaque itération.</para>
</callout>
</calloutlist>
<simpara>Le gabarit se concentre sur la <emphasis role="strong">transformation de données</emphasis>.
Il faut au préalable avoir réuni et structuré les données nécessaires à l&#8217;affichage.
Nous avons la possibilité de fragmenter notre code de sorte que chaque
gabarit contienne uniquement ce qui dépend de sa responsabilité.</simpara>
<simpara>Nous retrouvons ces principes de fonctionnement dans d&#8217;autres langages, à quelques
variations&#160;près.</simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Fonctionnement des expressions nunjucks</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>{%&#160;&#8230;&#8203;&#160;%}</literal></simpara>
</entry>
<entry>
<simpara>Expression <emphasis>nunjucks</emphasis> qui marque le début ou la fin d&#8217;un bloc.
Ce dernier contient une expression dont le contenu est affiché, inclus ou répété
selon certaines conditions.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>{{&#160;variable&#160;}}</literal></simpara>
</entry>
<entry>
<simpara>Affichage de la valeur d&#8217;une variable sous forme d&#8217;une chaîne de caractères.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>{{&#160;variable&#160;|&#160;filtre&#160;}}</literal></simpara>
</entry>
<entry>
<simpara>Affichage de la valeur d&#8217;une variable après application d&#8217;un filtre de transformation.
Ce dernier n&#8217;est autre qu&#8217;une fonction ECMAScript intégrée au mécanisme de <emphasis>nunjucks</emphasis>.
Nous pouvons accumuler les filtres pour transformer la valeur jusqu&#8217;à obtenir
le résultat attendu.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Intéressons-nous maintenant au gabarit parent, <literal>layout.njk</literal>&#160;:</simpara>
<formalpara>
<title>templating/layout.njk</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html lang="fr"&gt;
  &lt;meta charset="utf-8"&gt;
  &lt;head&gt;
    &lt;title&gt;{{ title }}&lt;/title&gt;        <co xml:id="CO197-1"/>
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;{{ title }}&lt;/h1&gt;

    {% block content %}{% endblock %} <co xml:id="CO197-2"/>
  &lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO197-1">
<para>La variable <literal>title</literal> est un argument passé au gabarit dans <literal>templating/server.js</literal>.</para>
</callout>
<callout arearefs="CO197-2">
<para>Le bloc <literal>content</literal> défini dans le fichier <literal>list.njk</literal> est injecté à cet endroit du gabarit.</para>
</callout>
</calloutlist>
<simpara>Ce gabarit sert de <quote>décoration</quote>, en englobant puis injectant son contenu de
manière précise et contrôlée.
Nous sommes en mesure de hiérarchiser l&#8217;organisation de la présentation et de
choisir comment imbriquer les gabarits entre eux.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Gabarit et API</title>
<simpara>La documentation complète des fonctions de gabarit se trouve sur
<phrase role="URL"><link xl:href="https://mozilla.github.io/nunjucks/templating.html">mozilla.github.io/nunjucks/templating.html</link></phrase>.
La section <phrase role="Menu">API</phrase> vous aidera à ajuster son intégration à
votre application&#160;Node.</simpara>
</note>
<table xml:id="templating-engines" frame="all" rowsep="1" colsep="1">
<title>Sélection de moteurs de gabarits et dans quelle situation les utiliser</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="14.2857*"/>
<colspec colname="col_2" colwidth="28.5714*"/>
<colspec colname="col_3" colwidth="57.1429*"/>
<thead>
<row>
<entry align="left" valign="top">Module</entry>
<entry align="left" valign="top">Adresse</entry>
<entry align="left" valign="top">Pourquoi l&#8217;utiliser ?</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>ejs</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/ejs">npmjs.com/ejs</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Pour écrire ses gabarits avec ECMAScript.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>handlebars</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/handlebars">npmjs.com/handlebars</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Performant, éprouvé et large catalogue de filtres prêts à l&#8217;emploi.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>nunjucks</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/nunjucks">npmjs.com/nunjucks</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Mécanisme élégant de blocs, de filtres et d&#8217;héritage de gabarit.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>pug</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/pug">npmjs.com/pug</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Écriture très concise des balises avec un système d&#8217;indentation.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>react</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/react">npmjs.com/react</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Pour réutiliser les mêmes composants que le <emphasis>front-end</emphasis>.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>application web</primary><secondary>gabarit de présentation (template)</secondary><tertiary>liste de syntaxe</tertiary>
</indexterm>
<indexterm>
<primary>gabarit de présentation (template)</primary><secondary>liste de syntaxe</secondary>
</indexterm>
<indexterm>
<primary>liste de syntaxe</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>ejs</secondary>
</indexterm>
<indexterm>
<primary>ejs</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>handlebars</secondary>
</indexterm>
<indexterm>
<primary>handlebars</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>nunjucks</secondary>
</indexterm>
<indexterm>
<primary>nunjucks</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>pug</secondary>
</indexterm>
<indexterm>
<primary>pug</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>react</secondary>
</indexterm>
<indexterm>
<primary>react</primary>
</indexterm></simpara>
<simpara>Nous détaillons des <link xl:href="../appendix-a/index.xml#templating">exemples de rendu de gabarit</link>
en <link xl:href="../appendix-a/index.xml">annexe&#160;A</link>.</simpara>
</section>
<section xml:id="dev">
<title>Pendant le développement : relancer le serveur automatiquement</title>
<simpara><indexterm>
<primary>application web</primary><secondary>pratique de développement</secondary>
</indexterm>
<indexterm>
<primary>pratique de développement</primary>
</indexterm></simpara>
<simpara>Vous avez modifié un des exemples de ce chapitre pendant qu&#8217;il était en
cours d&#8217;exécution et vous avez remarqué que résultat ne changeait pas&#160;?</simpara>
<simpara>C&#8217;est normal&#160;: la version du code utilisée par Node est celle qui a été évaluée
au lancement du script.
Les <emphasis role="strong">changements sont pris en compte manuellement, à la prochaine exécution</emphasis>,
c&#8217;est-à-dire après avoir stoppé et lancé à nouveau le script.</simpara>
<simpara>Le module&#160;<literal>npm</literal> exécutable <emphasis>nodemon</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/nodemon">npmjs.com/nodemon</link></phrase>)
relance automatiquement une commande dès qu&#8217;il détecte un changement
dans le répertoire courant.
<indexterm>
<primary>module npm</primary><secondary>nodemon</secondary>
</indexterm>
<indexterm>
<primary>nodemon</primary>
</indexterm></simpara>
<screen>$ nodemon cookies/parse.js
# au lieu de "node cookies/parse.js"</screen>
<simpara>La commande précédente relance <literal>cookies/parse.js</literal> si ce fichier change,
si un fichier dans le répertoire <literal>cookies/</literal> évolue, mais aussi si un fichier
dans les répertoires voisins au répertoire <literal>cookies/</literal> est modifié.</simpara>
<simpara>L&#8217;option <literal>--watch</literal> restreint ou élargit le champ d&#8217;observation.
La commande suivante relance le serveur seulement si un fichier JavaScript
est modifié dans le répertoire <literal>cookies/</literal>&#160;:</simpara>
<screen>$ nodemon --watch cookies cookies/parse.js</screen>
<simpara>L&#8217;option <literal>--ext</literal> filtre les fichiers observés en fonction de leur type.
La commande suivante relance le serveur si un fichier JavaScript, CSS ou HTML
est modifié dans le répertoire courant&#160;:</simpara>
<screen>$ nodemon --ext js,css,html cookies/parse.js</screen>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Installation globale ou installation locale ?</title>
<simpara><indexterm>
<primary>npm</primary><secondary>install</secondary>
</indexterm>
<indexterm>
<primary>install</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>install --global</secondary>
</indexterm>
<indexterm>
<primary>install --global</primary>
</indexterm>
Vous n&#8217;êtes pas sûr·e de la meilleure manière d&#8217;installer et d&#8217;utiliser
le module <emphasis>nodemon</emphasis>&#160;?
Je vous invite à relire la section
<quote><link xl:href="../chapter-05/index.xml#install.global">Exécutable système</link></quote>
du <link xl:href="../chapter-05/index.xml">chapitre&#160;5</link> consacré à&#160;<literal>npm</literal>.</simpara>
</note>
</section>
</section>
<section xml:id="express">
<title>Organiser une application avec le framework Express</title>
<simpara><indexterm>
<primary>application web</primary><secondary>framework express</secondary>
</indexterm>
<indexterm>
<primary>framework express</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>framework de développement</secondary>
</indexterm>
<indexterm>
<primary>framework de développement</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>express</secondary>
</indexterm>
<indexterm>
<primary>express</primary>
</indexterm></simpara>
<simpara>La section précédente a détaillé un ensemble de fonctionnalités individuelles
qui permettent à la fois de mieux comprendre comment fonctionne HTTP, mais aussi
comment constituer des briques d&#8217;une application web avec&#160;Node.</simpara>
<simpara>Les <emphasis>frameworks applicatifs web</emphasis> sont des outils qui proposent de créer une
cohérence dans l&#8217;organisation de ces fonctionnalités, de sorte que nos
efforts se concentrent plus sur l&#8217;écriture du code et moins sur la création du cadre.</simpara>
<simpara>Dans cette section, je vous propose d&#8217;appliquer ces connaissances au framework
<emphasis>Express</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/express">npmjs.com/express</link></phrase>).
C&#8217;est un outil flexible et bien documenté, un choix de prédilection pour commencer.</simpara>
<simpara>Vous pouvez vous en tenir à ce framework ou bien évoluer ou compléter son utilisation
avec <emphasis>fastify</emphasis> (plus récent et plus rapide), <emphasis>restify</emphasis> (orienté <link linkend="api">API&#160;REST</link>),
<emphasis>koa</emphasis> (asynchrone et plus rapide) ou encore <emphasis>hapi</emphasis> (plus structuré et plus complexe).
<indexterm>
<primary>module npm</primary><secondary>fastify</secondary>
</indexterm>
<indexterm>
<primary>fastify</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>restify</secondary>
</indexterm>
<indexterm>
<primary>restify</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>koa</secondary>
</indexterm>
<indexterm>
<primary>koa</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>hapi</secondary>
</indexterm>
<indexterm>
<primary>hapi</primary>
</indexterm></simpara>
<simpara>J&#8217;ai une préférence pour les outils qui ne font pas trop de choix à notre place,
bien documentés et, si possible, qui travaillent autour du
<link xl:href="../chapter-04/index.xml#http">module&#160;<literal>http</literal></link>&#160;– cela conserve une certaine
clarté autour des concepts que nous manipulons.
<indexterm>
<primary>module</primary><secondary>http</secondary>
</indexterm>
<indexterm>
<primary>http</primary>
</indexterm></simpara>
<section xml:id="setup">
<title>Configuration du framework</title>
<simpara><indexterm>
<primary>application web</primary><secondary>framework express</secondary><tertiary>configuration</tertiary>
</indexterm>
<indexterm>
<primary>framework express</primary><secondary>configuration</secondary>
</indexterm>
<indexterm>
<primary>configuration</primary>
</indexterm></simpara>
<simpara>La configuration initiale d'<emphasis>Express</emphasis> définit un serveur&#160;HTTP&#160;– à la manière
de ce que nous faisions avec <literal>http.createServer()</literal>&#160;– et retourne
un <link linkend="paths">routeur</link> pour attacher des comportements à des chemins d&#8217;accès.
<indexterm>
<primary>module</primary><secondary>http</secondary><tertiary>http.createServer()</tertiary>
</indexterm>
<indexterm>
<primary>http</primary><secondary>http.createServer()</secondary>
</indexterm>
<indexterm>
<primary>http.createServer()</primary>
</indexterm></simpara>
<screen>$ node framework/setup.js</screen>
<formalpara>
<title>framework/setup.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const app = require('express')();                 <co xml:id="CO198-1"/>

app.get('/', (request, response) =&gt; {             <co xml:id="CO198-2"/>
  response.send('&lt;a href="/login"&gt;connexion&lt;/a&gt;');<co xml:id="CO198-3"/>
});

app.get('/login', (request, response) =&gt; {
  response.send('&lt;p&gt;En travaux&lt;/p&gt;');
});

app.listen(4000);                                 <co xml:id="CO198-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO198-1">
<para>Création de l&#8217;application Express.</para>
</callout>
<callout arearefs="CO198-2">
<para>Déclaration d&#8217;une <link linkend="paths">route</link> pour la page d&#8217;accueil.</para>
</callout>
<callout arearefs="CO198-3">
<para>La méthode <literal>response.send()</literal> est un raccourci qui combine et configure <literal>response.write()</literal>, <literal>response.statusCode</literal> et de <literal>response.end()</literal>.</para>
</callout>
<callout arearefs="CO198-4">
<para>Branchement du serveur HTTP sur l&#8217;interface réseau du système d&#8217;exploitation.</para>
</callout>
</calloutlist>
<simpara>C&#8217;est vraiment très proche de ce que nous avons déjà appris
à faire dans les sections <quote><link linkend="server">Démarrer un serveur HTTP</link></quote> et
<quote><link linkend="paths">Répondre à un chemin</link></quote>.
<indexterm>
<primary>application web</primary><secondary>serveur HTTP</secondary>
</indexterm>
<indexterm>
<primary>serveur HTTP</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>chemin d&#8217;accès (routing)</secondary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès (routing)</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>démarrer un serveur</secondary>
</indexterm>
<indexterm>
<primary>démarrer un serveur</primary>
</indexterm></simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Quelles méthodes et pour quoi faire ?</title>
<simpara><indexterm>
<primary>documentation</primary><secondary>framework express</secondary>
</indexterm>
<indexterm>
<primary>framework express</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>framework express</secondary><tertiary>documentation</tertiary>
</indexterm>
<indexterm>
<primary>framework express</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
La documentation d&#8217;Express est le meilleur endroit pour savoir quoi faire
avec les différents objets du module.
Sa lecture vous aidera à mieux suivre cette section car vous comprendrez
d&#8217;où sortent les méthodes utilisées.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Express</emphasis>&#160;: <phrase role="URL"><link xl:href="https://expressjs.com/fr/4x/api.html#express">expressjs.com/fr/4x/api.html#express</link></phrase></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Application</emphasis>&#160;: <phrase role="URL"><link xl:href="https://expressjs.com/fr/4x/api.html#app">expressjs.com/fr/4x/api.html#app</link></phrase></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Requête</emphasis>&#160;: <phrase role="URL"><link xl:href="https://expressjs.com/fr/4x/api.html#req">expressjs.com/fr/4x/api.html#req</link></phrase></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Réponse</emphasis>&#160;: <phrase role="URL"><link xl:href="https://expressjs.com/fr/4x/api.html#res">expressjs.com/fr/4x/api.html#res</link></phrase></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Routeur</emphasis>&#160;: <phrase role="URL"><link xl:href="https://expressjs.com/fr/4x/api.html#routeur">expressjs.com/fr/4x/api.html#routeur</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="middleware">
<title>Greffer des extensions (middlewares)</title>
<simpara><indexterm>
<primary>application web</primary><secondary>framework express</secondary><tertiary>middleware</tertiary>
</indexterm>
<indexterm>
<primary>framework express</primary><secondary>middleware</secondary>
</indexterm>
<indexterm>
<primary>middleware</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>framework express</secondary><tertiary>extension</tertiary>
</indexterm>
<indexterm>
<primary>framework express</primary><secondary>extension</secondary>
</indexterm>
<indexterm>
<primary>extension</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>modularité</secondary>
</indexterm>
<indexterm>
<primary>modularité</primary>
</indexterm></simpara>
<simpara>Un des premiers éléments différenciant est le <emphasis role="strong">branchement d&#8217;extensions</emphasis>.
Une fois configurées, ces extensions s&#8217;appliquent à chaque requête entrante.
Elles ajoutent des capacités de compréhension de la requête
(<link linkend="post">parser des données de formulaire</link> par exemple), de modifier la réponse
ou de <link linkend="views">connecter des gabarits de présentation</link>.
<indexterm>
<primary>application</primary><secondary>formulaire</secondary>
</indexterm>
<indexterm>
<primary>formulaire</primary>
</indexterm>
<indexterm>
<primary>application</primary><secondary>gabarit de présentation (templating)</secondary>
</indexterm>
<indexterm>
<primary>gabarit de présentation (templating)</primary>
</indexterm></simpara>
<simpara>Chaque couche de transformation est appelée un middleware&#160;– une fonction
intermédiaire entre la requête et la réponse.</simpara>
<screen>$ node framework/middleware.js</screen>
<formalpara>
<title>framework/middleware.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const app = require('express')();
const {random} = require('pokemon');

app.use((request, response, next) =&gt; {            <co xml:id="CO199-1"/>
  response.locals.pokemon = random();             <co xml:id="CO199-2"/>
  next();                                         <co xml:id="CO199-3"/>
});

app.get('/', (request, response) =&gt; {
  const {pokemon} = response.locals;              <co xml:id="CO199-4"/>
  response.send(`Pokémon aléatoire : ${pokemon}`);<co xml:id="CO199-5"/>
});

app.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO199-1">
<para>Un middleware se branche avec la méthode <literal>app.use()</literal>.</para>
</callout>
<callout arearefs="CO199-2">
<para>L&#8217;objet <literal>response.locals</literal> passe des données jusqu&#8217;à la route&#160;– qui sont effacées une fois la réponse envoyée.</para>
</callout>
<callout arearefs="CO199-3">
<para>La fonction <literal>next()</literal> passe la main au prochain middleware.</para>
</callout>
<callout arearefs="CO199-4">
<para>Nous récupérons l&#8217;objet <literal>response.locals.pokemon</literal> créé par notre middleware.</para>
</callout>
<callout arearefs="CO199-5">
<para>Affichage d&#8217;un message similaire à <literal>Pokémon aléatoire&#160;: Patrat</literal>.</para>
</callout>
</calloutlist>
<simpara>Un middleware n&#8217;est pas très différent d&#8217;une route&#160;: c&#8217;est une fonction
qui a accès à la requête et à la réponse HTTP.
Elle n&#8217;est pas forcément affectée à une méthode HTTP (<literal>app.get()</literal>, <literal>app.post()</literal>)
ni à un chemin d&#8217;accès.</simpara>
<simpara>Dans l&#8217;exemple suivant, nous allons connecter plusieurs middlewares grâce
aux modules&#160;<literal>npm</literal> <emphasis>helmet</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/helmet">npmjs.com/helmet</link></phrase>) et <emphasis>serve-static</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/serve-static">npmjs.com/serve-static</link></phrase>).
<indexterm>
<primary>application web</primary><secondary>sécurité</secondary>
</indexterm>
<indexterm>
<primary>sécurité</primary>
</indexterm>
<indexterm>
<primary>sécurité</primary><secondary>en-tête HTTP</secondary>
</indexterm>
<indexterm>
<primary>en-tête HTTP</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>helmet</secondary>
</indexterm>
<indexterm>
<primary>helmet</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>serve-static</secondary>
</indexterm>
<indexterm>
<primary>serve-static</primary>
</indexterm>
Ce dernier est une version embarquée de <link linkend="static">serve</link> par le module <emphasis>Express</emphasis>.</simpara>
<screen>$ node framework/middleware-multi.js</screen>
<formalpara>
<title>framework/middleware-multi.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const express = require('express');
const helmet = require('helmet');
const {join} = require('path');

const app = express();
const filepath = join(__dirname, '..', 'static', 'files');

app.use('/files', express.static(filepath));          <co xml:id="CO200-1"/>
app.use(helmet());                                    <co xml:id="CO200-2"/>

app.get('/', (request, response) =&gt; {
  response.send('&lt;img src="/files/screenshot.jpg"&gt;'); <co xml:id="CO200-3"/>
});

app.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO200-1">
<para>Nous branchons le middleware utilisé dans la section <link linkend="static">répondre avec des fichiers statiques</link> sur l&#8217;URL <literal>{serveUrl}/files</literal>.</para>
</callout>
<callout arearefs="CO200-2">
<para>Nous branchons les middlewares de <link linkend="security">sécurité</link> à notre application.</para>
</callout>
<callout arearefs="CO200-3">
<para>La racine de l&#8217;application affiche une image contenue dans un autre répertoire.</para>
</callout>
</calloutlist>
<simpara>Le mécanisme de middlewares est minimaliste, et pourtant, il nous permet de
brancher des modules dont le seul pré-requis est de comprendre les objets
de requête et de réponse HTTP.
<emphasis role="strong">Les middlewares relient tous les concepts</emphasis> évoqués dans la section
<quote><link linkend="webapp">Composer son application&#160;web</link></quote>.</simpara>
<formalpara>
<title>Extraits des en-têtes d&#8217;une réponse HTTP une fois le module helmet configuré</title>
<para>
<screen>$ curl --head http://localhost:4000
HTTP/1.1 200 OK
X-DNS-Prefetch-Control: off
X-Frame-Options: SAMEORIGIN
Strict-Transport-Security: max-age=15552000; includeSubDomains
X-Download-Options: noopen
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Content-Type: text/html; charset=utf-8
Content-Length: 33
ETag: W/"21-tmPtjMCysQ8MzbRDY67vN+isCos"
Date: Sun, 15 Jul 2018 17:12:48 GMT
Connection: keep-alive</screen>
</para>
</formalpara>
<simpara>Le module <emphasis>helmet</emphasis> agit seulement sur les en-têtes de réponse.
Nous verrons dans la section <quote><link linkend="security">Protéger nos applications</link></quote> quels
en-têtes sont essentiels à la sécurité et pourquoi.
<indexterm>
<primary>module npm</primary><secondary>helmet</secondary>
</indexterm>
<indexterm>
<primary>helmet</primary>
</indexterm></simpara>
<simpara>Enfin, notons une méthode alternative pour appliquer un middleware&#160;: au niveau
d&#8217;une route, au lieu de toutes les routes&#160;– avec <literal>app.use()</literal>.
Pour cela, nous allons transformer l&#8217;exemple <literal>framework/middleware.js</literal> et
l&#8217;appliquer à une seule route&#160;:</simpara>
<screen>$ node framework/middleware-function.js</screen>
<formalpara>
<title>framework/middleware-function.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const app = require('express')();
const {random} = require('pokemon');

const pokéMiddleware = (request, response, next) =&gt; {
  response.locals.pokemon = random();
  next();
};

const affichePoké = (request, response) =&gt; {        <co xml:id="CO201-1"/>
  const {pokemon} = response.locals;
  response.send(`Pokémon aléatoire : ${pokemon}`);
};

app.get('/', pokéMiddleware, affichePoké);          <co xml:id="CO201-2"/>
app.get('/rondoudou', affichePoké);                 <co xml:id="CO201-3"/>

app.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO201-1">
<para>Nous avons factorisé la route dans une fonction afin de la rendre réutilisable.</para>
</callout>
<callout arearefs="CO201-2">
<para>La route&#160;<literal>/</literal> reçoit d&#8217;abord le middleware, puis la fonction d&#8217;affichage.</para>
</callout>
<callout arearefs="CO201-3">
<para>La route <literal>/rondoudou</literal> reçoit uniquement la fonction d&#8217;affichage.</para>
</callout>
</calloutlist>
<simpara>Nous verrons que, même si la fonction d&#8217;affichage est identique, les routes
<literal><link xl:href="http://localhost:4000/">localhost:4000/</link></literal> et <literal><link xl:href="http://localhost:4000/rondoudou">localhost:4000/rondoudou</link></literal> produisent des résultats différents.
Cette dernière n&#8217;ayant pas reçu le middleware <literal>pokéMiddleware</literal>, sa variable
<literal>response.locals.pokemon</literal> n&#8217;a pas été définie et elle vaut donc <literal>undefined</literal>.</simpara>
</section>
<section xml:id="views">
<title>Brancher les gabarits de présentation</title>
<simpara><indexterm>
<primary>application web</primary><secondary>framework express</secondary><tertiary>gabarit de présentation</tertiary>
</indexterm>
<indexterm>
<primary>framework express</primary><secondary>gabarit de présentation</secondary>
</indexterm>
<indexterm>
<primary>gabarit de présentation</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>gabarit de présentation (template)</secondary>
</indexterm>
<indexterm>
<primary>gabarit de présentation (template)</primary>
</indexterm></simpara>
<simpara>La configuration des gabarits de présentation n&#8217;est pas très différente
de ce que nous avons vu dans la section <link linkend="templating">qui leur est consacrée</link>.</simpara>
<screen>$ node framework/templating.js</screen>
<formalpara>
<title>framework/templating.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const app = require('express')();
const njk = require('nunjucks').configure(__dirname);   <co xml:id="CO202-1"/>
njk.express(app);                                       <co xml:id="CO202-2"/>

app.get('/', (request, response) =&gt; {
  response.render('index.njk', { message: 'Coucou !' });<co xml:id="CO202-3"/>
});

app.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO202-1">
<para>Configuration de <emphasis>nunjucks</emphasis>, comme dans la section <quote><link linkend="templating">structurer l&#8217;affichage avec les gabarits de présentation</link></quote>.</para>
</callout>
<callout arearefs="CO202-2">
<para>Utilisation de la méthode <literal>express()</literal> pour laisser à <emphasis>nunjucks</emphasis> le travail de configuration d&#8217;Express.</para>
</callout>
<callout arearefs="CO202-3">
<para>Nous appelons la méthode <literal>response.render()</literal> au lieu de <literal>response.send()</literal>&#160;– elle charge le gabarit donné et lui passe un objet dont chaque clé devient une variable.</para>
</callout>
</calloutlist>
<simpara>Nous avons de la chance car <emphasis>nunjucks</emphasis> prend en charge toute la configuration
d'<emphasis>Express</emphasis> pour nous.
<indexterm>
<primary>module npm</primary><secondary>nunjucks</secondary>
</indexterm>
<indexterm>
<primary>nunjucks</primary>
</indexterm>
La seule différence avec les précédents exemples est l&#8217;utilisation de la
méthode <literal>response.render()</literal>.
Le premier effet que cela me fait est une sensation de légèreté&#160;– nous avons
le strict minimum à gérer pour que cela fonctionne.</simpara>
<simpara>En comparaison, voici comment <emphasis>Express</emphasis> se configure à la main&#160;:</simpara>
<screen>$ node framework/templating-manual.js</screen>
<formalpara>
<title>framework/templating-manual.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const app = require('express')();
const njk = require('nunjucks');

app.set('views', __dirname);                  <co xml:id="CO203-1"/>
app.engine('njk', (file, options, next) =&gt; {  <co xml:id="CO203-2"/>
  const html = njk.render(file, options);     <co xml:id="CO203-3"/>
  next(null, html);                           <co xml:id="CO203-4"/>
});

app.get('/', (request, response) =&gt; {
  response.render('index.njk', { message: 'Coucou !' });
});

app.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO203-1">
<para>On indique à <emphasis>Express</emphasis> de contextualiser le répertoire racine où se trouvent les gabarits.</para>
</callout>
<callout arearefs="CO203-2">
<para>Déclaration de la fonction de rendu pour les fichiers&#160;<literal>.njk</literal>&#160;– elle est lancée à chaque fois que <literal>response.render()</literal> est appelée avec un fichier&#160;<literal>.njk</literal>.</para>
</callout>
<callout arearefs="CO203-3">
<para>Rendu du fichier passé en paramètre.</para>
</callout>
<callout arearefs="CO203-4">
<para>Le HTML généré est passé à la fonction de rappel <literal>next()</literal>&#160;– le premier argument est utilisé pour transmettre une erreur, le second le résultat en cas de succès.</para>
</callout>
</calloutlist>
<simpara>Cette méthode demande davantage de travail.
Elle implique aussi d&#8217;être suffisamment familier·ère avec <emphasis>Express</emphasis> pour en
venir à créer cette fonction de rendu.</simpara>
<simpara>Au final, nous pourrions utiliser différents moteurs de gabarits si le besoin
se faisait ressentir, pour les exploiter à leur(s) avantage(s).
Leur intégration demande un effort minimum et retire tous les aspects de
présentation de la configuration du routeur.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Un module pour les présenter tous</title>
<simpara><indexterm>
<primary>module npm</primary><secondary>consolidate</secondary>
</indexterm>
<indexterm>
<primary>consolidate</primary>
</indexterm>
Le module&#160;<literal>npm</literal> <emphasis>consolidate</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/consolidate">npmjs.com/consolidate</link></phrase>)
gomme les différences de configuration pour plusieurs dizaines de moteurs
de gabarit.</simpara>
<simpara>Il vous sera utile si vous peinez à configurer <emphasis>Express</emphasis> avec votre
moteur de gabarits favori.</simpara>
</tip>
</section>
<section xml:id="frontend">
<title>Intégrer les ressources front-end (CSS, images, JavaScript)</title>
<simpara><indexterm>
<primary>application web</primary><secondary>ressource front-end</secondary>
</indexterm>
<indexterm>
<primary>ressource front-end</primary>
</indexterm>
<indexterm>
<primary>Sass</primary>
</indexterm>
<indexterm>
<primary>CSS</primary>
</indexterm></simpara>
<simpara>La gestion des ressources <emphasis>front-end</emphasis> ne demande pas à changer nos habitudes.
Les fichiers CSS, JavaScript et les images sont des fichiers statiques
à mettre à disposition via un <link linkend="middleware">middleware</link>.</simpara>
<screen>$ node framework/assets.js</screen>
<formalpara>
<title>framework/assets.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const express = require('express');
const app = express();
const {join} = require('path');

const files_dir = join(__dirname, '..', 'static', 'files');

app.use('/static', express.static(files_dir));          <co xml:id="CO204-1"/>

app.get('/', (request, response) =&gt; {
  response.write('&lt;img src="/static/screenshot.jpg"&gt;'); <co xml:id="CO204-2"/>
  response.end();
});

app.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO204-1">
<para>La méthode <literal>express.static()</literal> configure le module&#160;<literal>npm</literal> <emphasis>send</emphasis>.</para>
</callout>
<callout arearefs="CO204-2">
<para>Affichage d&#8217;une image dont la source <literal>screenshot.jpg</literal> est à la racine du répertoire virtuel <literal>/static</literal>.</para>
</callout>
</calloutlist>
<simpara>J&#8217;ai tendance à exposer les fichiers statiques depuis un répertoire virtuel dédié
– ici, <literal>/static</literal>.
Cela rend <emphasis role="strong">plus clairement identifiables</emphasis> et évite toute ambiguïté avec les
autres routes de l&#8217;application.
Cela a aussi l&#8217;avantage de dissocier les fichiers sources (Sass, Less, etc.)
des fichiers compilés.</simpara>
<simpara>Dans le <link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>, j&#8217;explique comment
<link xl:href="../chapter-05/index.xml#run-all">automatiser l&#8217;outillage projet</link>.
<indexterm>
<primary>npm</primary><secondary>run</secondary>
</indexterm>
<indexterm>
<primary>run</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>script npm</secondary>
</indexterm>
<indexterm>
<primary>script npm</primary>
</indexterm>
Ces connaissances s&#8217;appliquent dans notre cas de figure, sans distinction.<?asciidoc-br?>
L&#8217;extrait suivant de fichier <literal>package.json</literal> illustre l&#8217;organisation
des scripts pour démarrer le site en temps normal, pour générer les fichiers
compilés et pour le faire en continu dans un contexte de développement.</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "...": "...",
  "scripts": {
    "build": "npm-run-all 'build:*'",
    "build:css": "node-sass ./assets --output ./assets",
    "start": "node assets.js",
    "...": "...",
    "dev": "npm-run-all 'watch:*'",
    "watch:server": "nodemon assets.js",
    "watch:css": "npm run build:css -- --watch --source-map"
  }
}</programlisting>
</para>
</formalpara>
<simpara>La première partie est dédiée aux scripts dits <quote>de production</quote>&#160;:
<literal>npm run build</literal> génère les fichiers utiles quand le serveur tourne,
après avoir lancé <literal>npm start</literal>.</simpara>
<simpara>La seconde partie lance le serveur de développement et la construction
des fichiers Sass en continu avec l&#8217;option <literal>--watch</literal>.
L&#8217;option <literal>--source-map</literal> s&#8217;utilisent dans un contexte de développement pour
associer les lignes du fichier compilé aux fichiers sources.
Les doubles tirets&#160;(<literal>--</literal>) nous permettent de réutiliser le script
<literal>build:css</literal> en lui passant deux options supplémentaires.</simpara>
<simpara>Le middleware statique s&#8217;utilise aussi avec des fichiers.</simpara>
<screen>$ node framework/assets-file.js</screen>
<formalpara>
<title>framework/assets-file.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const express = require('express');
const app = express();
const {join} = require('path');

const files_dir = join(__dirname, '..', 'static', 'files');
const image_path = join(files_dir, 'screenshot.jpg');

app.use('/wikipedia.jpg', express.static(image_path));  <co xml:id="CO205-1"/>

app.get('/', (request, response) =&gt; {
  response.write('&lt;img src="/wikipedia.jpg"&gt;');         <co xml:id="CO205-2"/>
  response.end();
});

app.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO205-1">
<para>Nous définissions le fichier statique <literal>/wikipedia.jpg</literal> alors qu&#8217;il était initialement nommé <literal>screenshot.jpg</literal>.</para>
</callout>
<callout arearefs="CO205-2">
<para>Ce chemin d&#8217;accès affiche bien l&#8217;image attendue.</para>
</callout>
</calloutlist>
<simpara>Cette technique est utilisable pour exposer un seul fichier au lieu d&#8217;un répertoire entier.</simpara>
<simpara>Enfin, le module&#160;<literal>npm</literal> <emphasis>express-minify</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/express-minify">npmjs.com/express-minify</link></phrase>)
est à considérer pour profiter d&#8217;une mise en place rapide ou
pour prototyper quelque chose en attendant de mettre en place un outillage
plus robuste.</simpara>
<screen>$ node framework/minify.js</screen>
<formalpara>
<title>framework/minify.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const express = require('express');
const app = express();
const minify = require('express-minify');
const {join} = require('path');

express.static.mime.define({ 'text/x-scss': ['scss'] });<co xml:id="CO206-1"/>

app.use(minify());                                      <co xml:id="CO206-2"/>
app.use('/static', express.static(join(__dirname, 'assets')));

app.get('/', (request, response) =&gt; {
  response.write(
    '&lt;link rel="stylesheet" href="/static/main.scss"&gt;'  <co xml:id="CO206-3"/>
  );
  response.end('&lt;p&gt;Coucou !&lt;/p&gt;');
});

app.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO206-1">
<para>Le module <emphasis>express-minify</emphasis> transforme les fichiers Sass si leur en-tête de réponse <literal>Content-Type</literal> vaut <literal>text/x-scss</literal>&#160;– cette ligne affecte cet en-tête aux fichiers dont l&#8217;extension est&#160;<literal>.scss</literal>.</para>
</callout>
<callout arearefs="CO206-2">
<para>Ajout du module comme <link linkend="middleware">middleware</link>.</para>
</callout>
<callout arearefs="CO206-3">
<para>Le fichier <literal>main.scss</literal> sera converti en&#160;CSS.</para>
</callout>
</calloutlist>
<simpara>Si ce module permet de démarrer plus vite, sans avoir à se familiariser
avec les scripts&#160;<literal>npm</literal> ni même avec la commande <literal>node-sass</literal>,
je lui vois deux inconvénients majeurs&#160;: les <emphasis role="strong">erreurs sont difficiles à déceler</emphasis>
et elles risquent de se produire au cas où notre machine de développement est
significativement différente du serveur de production (compilateur,
installation manquée).
Cela représente aussi un <emphasis role="strong">gâchis de ressources</emphasis> dans la mesure où ces fichiers
ne changent plus une fois mis en ligne&#160;; cela ne justifie pas d&#8217;ajouter
du temps de compilation à la volée.</simpara>
<simpara>En clair, c&#8217;est pratique pour dépanner et pour démarrer.</simpara>
</section>
<section xml:id="database">
<title>Brancher une base de données</title>
<simpara><indexterm>
<primary>base de données</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>base de données (voir base de données)</secondary>
</indexterm>
<indexterm>
<primary>base de données (voir base de données)</primary>
</indexterm></simpara>
<simpara>L&#8217;utilisation d&#8217;une base de données sert à mémoriser des informations entre
deux redémarrages de notre application&#160;– sinon, ce qui est en mémoire
applicative disparaît.
Je vous recommande de lire la section <quote><xref linkend="database-choice"/></quote> pour éclairer votre choix.</simpara>
<screen>$ node framework/database.js</screen>
<formalpara>
<title>framework/database.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const app = require('express')();
const sqlite = require('sqlite');
const {join} = require('path');

sqlite.open(join(__dirname, 'db.sqlite')).then(db =&gt; {  <co xml:id="CO207-1"/>
  app.get('/', (req, res) =&gt; res.redirect('book/1'));

  app.get('/book/:id', (request, response) =&gt; {
    const {id} = request.params;
    db.get('SELECT * from books WHERE id = ?', id)      <co xml:id="CO207-2"/>
      .then(record =&gt; {                                 <co xml:id="CO207-3"/>
        record
          ? response.send(record)                       <co xml:id="CO207-4"/>
          : response.status(404).send('Livre inconnu');
      });
  });

  app.listen(4000);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO207-1">
<para>La connexion à la base de données est asynchrone&#160;– l&#8217;objet&#160;<literal>db</literal> qui permet d&#8217;exécuter des requêtes est renvoyé par la promesse.</para>
</callout>
<callout arearefs="CO207-2">
<para>Exécution d&#8217;une requête avec un paramètre issu du <link linkend="path">routage</link>&#160;– le champ&#160;<literal>:id</literal>.</para>
</callout>
<callout arearefs="CO207-3">
<para>Le résultat est fourni lors de la résolution de la promesse&#160;– il vaut <literal>undefined</literal> si aucun enregistrement n&#8217;a été trouvé.</para>
</callout>
<callout arearefs="CO207-4">
<para>Affichage de l&#8217;enregistrement côté client (sans mise en forme aucune).</para>
</callout>
</calloutlist>
<simpara>L&#8217;intégration d&#8217;une base de données se fait en deux temps&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>D&#8217;abord, on ouvre une connexion asynchrone.
Les connexions HTTP sont acceptées seulement si la connexion à la base réussit.</simpara>
</listitem>
<listitem>
<simpara>La réponse est renvoyée après avoir fait un aller-retour vers la base
afin d&#8217;en extraire un ou plusieurs résultat(s).</simpara>
</listitem>
</itemizedlist>
<caution>
<title><phrase role="RemarquePreTitre">Sécurité</phrase> Systématiser les emplacements de paramètre</title>
<simpara><indexterm>
<primary>base de donnée</primary><secondary>paramètre d&#8217;accès</secondary>
</indexterm>
<indexterm>
<primary>paramètre d&#8217;accès</primary>
</indexterm>
L&#8217;utilisation des <emphasis>emplacements de paramètre</emphasis> dans les requêtes SQL avec
le caractère&#160;<literal>?</literal> renforce la sécurité de notre application.</simpara>
<simpara>La valeur est filtrée pour éviter de déjouer le moteur de base de données en
le faisant planter ou en exposant davantage d&#8217;informations que prévues.</simpara>
</caution>
<simpara>Nous verrons dans la section <quote><xref linkend="modularity"/></quote> qu&#8217;un des enjeux est de rendre
le fichier de démarrage le plus fin possible.</simpara>
</section>
<section xml:id="sessions">
<title>Sessions utilisateurs</title>
<simpara><indexterm>
<primary>application web</primary><secondary>session utilisateur</secondary>
</indexterm>
<indexterm>
<primary>session utilisateur</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>cookie</secondary>
</indexterm>
<indexterm>
<primary>cookie</primary>
</indexterm></simpara>
<simpara>Nous avons appris à mémoriser des données et à les partager avec un serveur
grâce au mécanisme des <link linkend="cookies">cookies</link>.
Les sessions utilisateur centralisent cette mémoire du côté du serveur.
Elles se basent sur un <emphasis role="strong">cookie de session</emphasis> pour garder un lien.</simpara>
<simpara>Les sessions sont destinées à <emphasis role="strong">stocker des données temporaires</emphasis>, liées à une
personne.
Un utilisateur peut avoir plusieurs sessions&#160;– une par appareil par exemple.
Chaque session est propre à son environnement immédiat.
Elles sont pratiques pour mémoriser des informations liées à un état
(connecté·e, déconnecté·e, date de dernière activité).</simpara>
<simpara>Tout stockage qui serait permanent relève des <emphasis>préférences utilisateur</emphasis>.</simpara>
<simpara>L&#8217;extension <emphasis>express-session</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/express-session">npmjs.com/express-session</link></phrase>)
se charge de ce travail pour nous.
<indexterm>
<primary>module npm</primary><secondary>express-session</secondary>
</indexterm>
<indexterm>
<primary>express-session</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>framework express</secondary>
</indexterm>
<indexterm>
<primary>framework express</primary>
</indexterm>
Il ajoute un élément <literal>request.session</literal> qu&#8217;il mémorise et récupère à partir
d&#8217;un identifiant de session difficile à deviner.</simpara>
<screen>$ node framework/session.js</screen>
<formalpara>
<title>framework/session.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const app = require('express')();
const session = require('express-session');
const {random} = require('pokemon');

app.use(session({ secret: 'fromage' }));               <co xml:id="CO208-1"/>

app.get('/', (req, res) =&gt; {
  req.session.pokemon = random();                      <co xml:id="CO208-2"/>
  res.redirect('my-pokemon');
});

app.get('/my-pokemon', (request, response) =&gt; {
  const {pokemon} = request.session;
  response.send(`Mon Pokémon en session : ${pokemon}`);<co xml:id="CO208-3"/>
});

app.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO208-1">
<para>Configuration du middleware avec un secret qui rend moins prévisible le nom du <link linkend="cookies">cookie</link>.</para>
</callout>
<callout arearefs="CO208-2">
<para>Création d&#8217;une donnée de session nommée <literal>pokemon</literal>, de valeur aléatoire.</para>
</callout>
<callout arearefs="CO208-3">
<para>Affiche un message similaire à <literal>Mon Pokémon en session&#160;: Pikachu</literal>.</para>
</callout>
</calloutlist>
<simpara>La même valeur s&#8217;affiche si vous ouvrez un nouvel onglet dans le même navigateur
et en vous rendant sur <phrase role="URL"><link xl:href="http://localhost:4000/my-pokemon">localhost:4000/my-pokemon</link></phrase>.
Le serveur fait le lien entre votre identifiant de session (stocké en cookie)
et les valeurs associées (stockées en mémoire, pour l&#8217;instant) grâce à un identifiant
unique stocké dans le cookie de session.</simpara>
<simpara>Le middleware de session retrouve les informations associées à cet identifiant
depuis l&#8217;espace de stockage des données de sessions.</simpara>
<formalpara>
<title>Extrait des en-têtes de réponse à l&#8217;origine de la création du cookie de session</title>
<para>
<screen>$ curl -i -L http://localhost:4000
HTTP/1.1 302 Found
Location: my-pokemon
Content-Type: text/plain; charset=utf-8
Content-Length: 32
<emphasis role="marked">set-cookie</emphasis>: connect.sid=s%3AWfP...SRr5Q; Path=/; HttpOnly
Date: Tue, 17 Jul 2018 09:46:15 GMT</screen>
</para>
</formalpara>
<simpara>Le seul inconvénient à notre exemple est que, si nous stoppons puis relançons
le serveur, la page <phrase role="URL"><link xl:href="http://localhost:4000/my-pokemon">localhost:4000/my-pokemon</link></phrase> affiche
<literal>undefined</literal> comme nom de Pokémon.
C&#8217;est normal&#160;: le stockage par défaut étant en mémoire, les données de session
sont détruites dès que le processus Node s&#8217;interrompt.</simpara>
<simpara>Fort heureusement pour nous, ces données se stockent avec la
<link linkend="database-choice">base de données de notre choix</link>.
Nous allons utiliser le moteur de base de données <emphasis>SQLite</emphasis>
à l&#8217;aide du module <emphasis>connect-sqlite3</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/connect-sqlite3">npmjs.com/connect-sqlite3</link></phrase>)
pour illustrer la persistance des données de session.
<indexterm>
<primary>base de donnée</primary><secondary>SQLite</secondary>
</indexterm>
<indexterm>
<primary>SQLite</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>connect-sqlite3</secondary>
</indexterm>
<indexterm>
<primary>connect-sqlite3</primary>
</indexterm></simpara>
<screen>$ node framework/session-database.js</screen>
<formalpara>
<title>framework/session-database.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const app = require('express')();
const session = require('express-session');
const SQLiteStore = require('connect-sqlite3')(session);<co xml:id="CO209-1"/>
const {random} = require('pokemon');

app.use(session({
  secret: 'fromage',
  store: new SQLiteStore('./sessions')                  <co xml:id="CO209-2"/>
}));

app.get('/', (req, res) =&gt; {
  req.session.pokemon = random();                       <co xml:id="CO209-3"/>
  res.redirect('my-pokemon');
});

app.get('/my-pokemon', (request, response) =&gt; {
  const {pokemon} = request.session;
  response.send(`Mon Pokémon en session : ${pokemon}`);
});

app.listen(4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO209-1">
<para>Branchement du module de stockage au gestionnaire de sessions d'<emphasis>Express</emphasis>.</para>
</callout>
<callout arearefs="CO209-2">
<para>Configuration du connecteur de stockage et de l&#8217;emplacement du fichier qui contient les données des sessions.</para>
</callout>
<callout arearefs="CO209-3">
<para>L&#8217;écriture et la lecture des données de session est inchangée.</para>
</callout>
</calloutlist>
<simpara>Cette fois, si nous stoppons le serveur puis le relançons, le gestionnaire de
sessions affiche le nom de Pokémon associé à notre identifiant.
La persistance a fonctionné&#160;!</simpara>
</section>
<section xml:id="logs">
<title>Tracer les actions&#160;(logs)</title>
<simpara><indexterm>
<primary>application web</primary><secondary>journalisation (logging)</secondary>
</indexterm>
<indexterm>
<primary>journalisation (logging)</primary>
</indexterm></simpara>
<simpara>Consigner les actions (<emphasis>logging</emphasis> en anglais) est une pratique courante
en informatique pour créer une mémoire de l&#8217;activité d&#8217;une application.
Ces consignes aident à garder des traces de choses invisibles en surface,
d&#8217;événements sensibles ou critiques (envoi de mot de passe, création de compte)
afin de détecter des anomalies de fréquence.</simpara>
<simpara>C&#8217;est un endroit idéal pour répertorier les erreurs avec des indications qui
aideraient à reproduire le problème.
D&#8217;ailleurs, l&#8217;usage est de tenir un journal d&#8217;erreurs séparé du journal des
événements afin de retrouver plus facilement ces premières.
J&#8217;ai tendance à préférer l&#8217;installation d&#8217;une sonde (section
<quote><link xl:href="../chapter-06/index.xml#exceptions">S&#8217;informer des erreurs applicatives</link></quote>
du <link xl:href="../chapter-06/index.xml">chapitre&#160;6</link>).</simpara>
<simpara>C&#8217;est <emphasis role="strong">à nous de choisir la granularité des informations</emphasis> enregistrées.
Nous sommes responsables de l&#8217;anonymat de ces informations et de ne
rendre personnel que l&#8217;identifiant (numérique ou généré)
pour rattacher des informations à un utilisateur si c&#8217;est nécessaire
– dans le cas de transaction bancaire ou de renvoi de mot de passe par exemple.</simpara>
<caution>
<title><phrase role="RemarquePreTitre">Attention</phrase> Rotation de&#160;logs</title>
<simpara>Consigner des informations est bien jusqu&#8217;au moment où l&#8217;historique finit
par saturer le disque dur de la machine qui héberge l&#8217;application.</simpara>
<simpara>Sous Linux, le logiciel <emphasis>logrotate</emphasis> (<phrase role="URL"><link xl:href="https://doc.ubuntu-fr.org/logrotate">doc.ubuntu-fr.org/logrotate</link></phrase>)
est souvent installé par défaut.
Il indique au système quand tronquer le fichier d&#8217;historique&#160;–
tous les X&#160;mégaoctets, tous les X&#160;jours.</simpara>
</caution>
<simpara>Les modules&#160;<literal>npm</literal> pour consigner nos actions fonctionnent comme des
<literal>console.log()</literal> finement configurables&#160;: <emphasis>winston</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/winston">npmjs.com/winston</link></phrase>),
<emphasis>morgan</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/morgan">npmjs.com/morgan</link></phrase>) et <emphasis>bunyan</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/bunyan">npmjs.com/bunyan</link></phrase>)
sont à essayer, pour voir celui qui vous convient le mieux.
<indexterm>
<primary>module npm</primary><secondary>morgan</secondary>
</indexterm>
<indexterm>
<primary>morgan</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>bunyan</secondary>
</indexterm>
<indexterm>
<primary>bunyan</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>winston</secondary>
</indexterm>
<indexterm>
<primary>winston</primary>
</indexterm>
<indexterm>
<primary>Heroku</primary><secondary>journalisation</secondary>
</indexterm>
<indexterm>
<primary>journalisation</primary>
</indexterm></simpara>
<figure>
<title>Extrait de logs retournés par une application hébergée chez Heroku</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/heroku-logs.png"/>
</imageobject>
<textobject><phrase>heroku logs</phrase></textobject>
</mediaobject>
</figure>
<simpara>Les journaux de sortie se connectent à des logiciels comme <emphasis>rsyslog</emphasis>
(<phrase role="URL"><link xl:href="https://rsyslog.com">rsyslog.com</link></phrase>) ou à des services en ligne comme
<emphasis>Papertrail</emphasis> (<phrase role="URL"><link xl:href="https://papertrailapp.com">papertrailapp.com</link></phrase>), <emphasis>Logstash</emphasis>
(<phrase role="URL"><link xl:href="https://elastic.co/products/logstash">elastic.co/products/logstash</link></phrase>) et <emphasis>AWS&#160;CloudWatch</emphasis>
(<phrase role="URL"><link xl:href="https://aws.amazon.com/cloudwatch">aws.amazon.com/cloudwatch</link></phrase>).
Elles vous aident&#160;– ou vous demandent de travailler davantage&#160;– pour visualiser,
orchestrer et déclencher des actions quand des valeurs spécifiques sont rencontrées
dans les journaux.</simpara>
</section>
</section>
<section xml:id="modularity">
<title>Vers un code réutilisable et testable</title>
<simpara><indexterm>
<primary>application web</primary><secondary>modularité</secondary>
</indexterm>
<indexterm>
<primary>modularité</primary>
</indexterm></simpara>
<simpara>L&#8217;intention de cette section est de consolider les différents concepts
évoqués au cours de ce chapitre.
Nous avons composé pas à pas une application web jusqu&#8217;à l&#8217;organiser avec
le framework <emphasis>Express</emphasis>.
Maintenant, nous allons réorganiser les composants pour améliorer la
maintenance et la robustesse aux changements de nos applications&#160;web.</simpara>
<simpara>Notre but&#160;?
<emphasis role="strong">Diminuer la taille du script de lancement</emphasis>, rendre les composants indépendants
et préparer au mieux les données passées à nos gabarits pour faciliter
l&#8217;écriture de tests et favoriser l&#8217;automatisation du déploiement.</simpara>
<section xml:id="modulariser_le_code_des_routes">
<title>Modulariser le code des routes</title>
<simpara><indexterm>
<primary>application web</primary><secondary>modularité</secondary>
</indexterm>
<indexterm>
<primary>modularité</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>chemin d&#8217;accès (routing)</secondary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès (routing)</primary>
</indexterm></simpara>
<simpara>Le défi de lisibilité et de maintenance augmente au fur et à mesure que
le volume de code augmente.
C&#8217;est particulièrement vrai quand le nombre de lignes dépasse un seuil
psychologique dans un même fichier&#160;– je commence à saturer au-delà de 100&#160;lignes,
par exemple.
Ce phénomène se renforce quand plusieurs concepts s&#8217;entrecroisent visuellement.</simpara>
<simpara>La modularisation des routes et de notre application web va nous rendre la vie
plus confortable.
Nous ouvrons la porte à l&#8217;écriture de <link linkend="tests.unit">tests unitaires</link>, à un
déplacement plus aisé du code et à une quasi-disparition des variables globales.
Nous en profitons pour rendre nos intentions explicites, ce à quoi nous obligent
les réflexions de nommage de fichiers et de fonctions.
<indexterm>
<primary>npm</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm></simpara>
<screen>$ node modularity/01/server.js</screen>
<formalpara>
<title>modularity/01/server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const app = require('express')();
const dbPromise = require('./src/database.js'); <co xml:id="CO210-1"/>
const routes = require('./src/routes.js');      <co xml:id="CO210-2"/>

dbPromise.then(() =&gt; {
  app.get('/books/:id', routes.books);          <co xml:id="CO210-3"/>

  app.listen(4000);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO210-1">
<para>Nous déplaçons la configuration de et la connexion à la base de données dans son propre module.</para>
</callout>
<callout arearefs="CO210-2">
<para>Nous déplaçons aussi le code des routes.</para>
</callout>
<callout arearefs="CO210-3">
<para>Au premier coup d&#8217;œil, la route est une association de chemin et d&#8217;une fonction.</para>
</callout>
</calloutlist>
<simpara>Nous créons des modules qui retournent des fonctions ou des objets.
Nous connectons ensuite ces fonctions aux chemins d&#8217;accès du routeur.</simpara>
<simpara>Profitons du mécanisme de promesses pour que tout autre module
puisse réagir à l&#8217;aboutissement de la connexion&#160;:
<indexterm>
<primary>base de donnée</primary><secondary>connexion</secondary>
</indexterm>
<indexterm>
<primary>connexion</primary>
</indexterm></simpara>
<formalpara>
<title>modularity/01/src/database.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const sqlite = require('sqlite');
const {join} = require('path');

const db_dir = join(
  __dirname, '..', '..', '..', 'framework'              <co xml:id="CO211-1"/>
);

module.exports = sqlite.open(join(db_dir, 'db.sqlite'));<co xml:id="CO211-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO211-1">
<para>Nous réutilisons la base de données d&#8217;un exemple précédent.</para>
</callout>
<callout arearefs="CO211-2">
<para>La fonction <literal>sqlite.open()</literal> retourne une promesse résolue lorsque la connexion à la base est établie.</para>
</callout>
</calloutlist>
<simpara>Notons que nous exploitons le <link xl:href="../chapter-04/index.xml#require">mécanisme de cache</link>
des modules Node dans cette dernière ligne.
Chaque appel au fichier <literal>database.js</literal> retourne la même promesse.
Nous créons ainsi une seule connexion à la base de données même si nous chargeons
plusieurs fois ce module.</simpara>
<simpara>Je trouve agréable de regrouper ce genre de lignes de code dans un même fichier.
Les dépendances aux modules Node et&#160;<literal>npm</literal> deviennent vraiment claires.
Je suis moins dérangé par l&#8217;organisation visuelle du code&#160;– elle aurait ralenti
ma lecture du fichier <literal>server.js</literal> autrement.</simpara>
<formalpara>
<title>modularity/01/src/routes.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

module.exports.books = require('./routes/books.js');</programlisting>
</para>
</formalpara>
<simpara>Le fichier de routes a vocation à réexporter les fonctions de routage.
Je trouve que cette organisation sous forme de catalogue fait énormément
gagner en lisibilité lors de l&#8217;intégration avec le routeur.</simpara>
<simpara>Le dernier morceau est la route elle-même&#160;:</simpara>
<formalpara>
<title>modularity/01/src/routes/books.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const dbPromise = require('../database.js');          <co xml:id="CO212-1"/>

module.exports = (request, response) =&gt; {
  const {id} = request.params;
  dbPromise.then(db =&gt; {                              <co xml:id="CO212-2"/>
    db.get('SELECT * from books WHERE id = ?', id)
      .then(record =&gt; {
        if (!record) {
          return response.status(404).send('Livre inconnu');
        }

        response.send(record);
      });
  });
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO212-1">
<para>Récupération de la promesse de connexion à la base de données&#160;– déjà pré-configurée.</para>
</callout>
<callout arearefs="CO212-2">
<para>De fait, l&#8217;exécution d&#8217;une requête dépend de la résolution de la connexion.</para>
</callout>
</calloutlist>
<simpara>Le code de la route est quasi inchangé mais on voit à quel point elle prenait
de la place dans le code d&#8217;origine.
Ce déplacement révèle le positionnement du point d&#8217;attention et quels fichiers
sont amenés à changer au quotidien.
Peu importe l&#8217;organisation du vôtre, ce qui compte c&#8217;est que cette organisation
vous convienne, qu&#8217;elle soit communicable aux personnes qui utilisent ce code
et que nous puissions en suivre le fil logique.</simpara>
<simpara>Je vois toutefois apparaître une zone d&#8217;ombre&#160;: je ne suis pas satisfait
de la connexion à la base de données.
C&#8217;est la résolution de la promesse dans la route qui me fait dire ça&#160;; elle ne
semble pas à sa place.</simpara>
<simpara>Faisons une nouvelle itération pour ajuster ce code et tendre vers quelque
chose d&#8217;un peu plus explicite.</simpara>
<screen>$ node modularity/02/server.js</screen>
<formalpara>
<title>modularity/02/server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const app = require('express')();
const {dbPromise, routes} = require('./configure'); <co xml:id="CO213-1"/>

dbPromise.then((db) =&gt; {
  app.get('/books/:id', routes.books(db));          <co xml:id="CO213-2"/>

  app.listen(4000);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO213-1">
<para>Nous regroupons les éléments de configuration de l&#8217;application.</para>
</callout>
<callout arearefs="CO213-2">
<para>Nous passons les dépendances du module en argument&#160;– ici, l&#8217;objet de base de données.</para>
</callout>
</calloutlist>
<simpara>La grande différence ici est l&#8217;invocation d&#8217;une fonction pour définir la route.
C&#8217;est le moyen le plus propre pour transmettre une variable en enlevant la
dépendance au module <literal>database.js</literal> dans le script <literal>books.js</literal>&#160;:
<indexterm>
<primary>base de données</primary>
</indexterm></simpara>
<formalpara>
<title>modularity/02/src/routes/books.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

module.exports = (db) =&gt; {                          <co xml:id="CO214-1"/>
  return (request, response) =&gt; {                   <co xml:id="CO214-2"/>
    const {id} = request.params;

    db.get('SELECT * from books WHERE id = ?', id)
      .then(record =&gt; {
        if (!record) {
          return response.status(404).send('Livre inconnu');
        }

        response.send(record);
      });
  };
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO214-1">
<para>Cette fois, nous exportons une fonction qui accepte un objet de base de données en argument.</para>
</callout>
<callout arearefs="CO214-2">
<para>Le code exécuté par le routeur est la fonction qui est retournée&#160;ici.</para>
</callout>
</calloutlist>
<simpara>L&#8217;appel à la fonction <literal>require()</literal> a disparu.
La résolution de la promesse aussi.
Notre module est autonome tant qu&#8217;il reçoit un objet de base de données en
paramètres.
Cela le rend nettement plus lisible&#160;– le code est désormais uniquement lié
à la réception d&#8217;une requête HTTP et à l&#8217;établissement d&#8217;une réponse.
<indexterm>
<primary>application web</primary><secondary>serveur HTTP</secondary>
</indexterm>
<indexterm>
<primary>serveur HTTP</primary>
</indexterm></simpara>
<formalpara>
<title>modularity/02/configure.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const dbPromise = require('./src/database.js');
const routes = require('./src/routes.js');

module.exports = {dbPromise, routes};     <co xml:id="CO215-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO215-1">
<para>Nous utilisons la syntaxe raccourcie de création d&#8217;objets pour les exporter en une seule&#160;fois.</para>
</callout>
</calloutlist>
<simpara>Nous retrouvons le même mécanisme que celui rencontré dans le fichier <literal>routes.js</literal>.</simpara>
<simpara>Au final, le motif qui émerge est celui de
l'<emphasis role="strong">encapsulation de code dans des fonctions paramétrables</emphasis>.
Les paramètres sont les seuls points d&#8217;entrée.
Les arguments font office de contrat et les fichiers font office de regroupement
logique&#160;– de fonctions et d&#8217;objets.</simpara>
<simpara>Nous avons allégé le fichier <literal>server.js</literal> et rendu lisibles les points importants
de l&#8217;application&#160;: la connexion à la base de données, le rendu d&#8217;une route
et la configuration de l&#8217;application.
Ce travail va nous permettre de tester petit à petit les différents éléments
de l&#8217;application web, par ordre de criticité.</simpara>
</section>
<section xml:id="tests.unit">
<title>Un code testable est un code indépendant du framework</title>
<simpara><indexterm>
<primary>application web</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm></simpara>
<simpara>L&#8217;écriture de tests unitaires est influencée par et influence l&#8217;organisation
de notre code en unités réutilisables.
Ils accroissent la qualité, la confiance et la prédictibilité d&#8217;une éventuelle
mise en ligne.</simpara>
<simpara>Cette section se déroule dans la continuité de la précédente.
Nous allons préparer et mettre en place pas à pas un environnement de test
pour vérifier les intentions de notre&#160;code.</simpara>
<simpara>Les tests unitaires sont destinés à couvrir les différents cas de figure
des entrées et des sorties de nos fonctions.
Nous testons leurs réactions aux arguments pour vérifier que nous obtenons
le résultat attendu.
Je teste en priorité le code critique, partagé (en tant que bibliothèque) et
qui est au plus proche de l&#8217;interface utilisateur.</simpara>
<simpara>De quoi a-t-on besoin pour tester <literal>routes/books.js</literal>&#160;?
La fonction qui est exportée par le module dépend d&#8217;une connexion établie
à une base de données et de deux objets&#160;– la requête entrante et la réponse sortante.
Nous avons aussi besoin d&#8217;écrire des <emphasis>assertions</emphasis> et, dans un premier temps, nous
allons utiliser le module dédié de&#160;Node.</simpara>
<formalpara>
<title>testing/tests/initial.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const assert = require('assert').strict;
const configRoute = require('../src/routes/books.js');

assert.deepEqual(typeof configRoute, 'function'); <co xml:id="CO216-1"/>

/*
const db = require('../src/database.js');         <co xml:id="CO216-2"/>
const route = configRoute(db);
assert.deepEqual(route(request, response));
*/</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO216-1">
<para>C&#8217;est notre première assertion&#160;– l&#8217;élément retourné par <literal>routes/books.js</literal> est une fonction.</para>
</callout>
<callout arearefs="CO216-2">
<para>En commentaire&#160;: comment allons-nous nous connecter à la base de données&#160;?</para>
</callout>
</calloutlist>
<screen>$ node testing/tests/initial.js</screen>
<simpara>Le script n&#8217;affiche rien de particulier.
C&#8217;est normal, parce que le test s&#8217;est bien passé.
Une assertion lance une erreur si elle constate un résultat différent de l&#8217;attente.</simpara>
<simpara>Nous avons toutefois testé une évidence, que le module retourne une fonction.
Ce qui serait plus révélateur serait de tester l&#8217;invocation de cette fonction
pour vérifier qu&#8217;elle produit un résultat prédictible.</simpara>
<simpara>Modifions notre fichier de test pour établir une connexion à la base de données.
Nous avons une contrainte toutefois&#160;: nous devons utiliser une base dont
l&#8217;emplacement est différent de notre environnement de développement.
Le raisonnement est de pouvoir la recréer et la détruire sans craindre
de générer des effets secondaires, y compris si nous exécutons les tests
sur le serveur de production.</simpara>
<simpara>Pour ce faire, commençons par simplifier le fichier <literal>src/database.js</literal> en
supprimant tout chemin d&#8217;accès écrit en&#160;dur&#160;:
<indexterm>
<primary>base de données</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm>
<indexterm>
<primary>base de données</primary><secondary>automatisation</secondary>
</indexterm>
<indexterm>
<primary>automatisation</primary>
</indexterm></simpara>
<formalpara>
<title>testing/src/database.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const sqlite = require('sqlite');

const connect = (db_path) =&gt; sqlite.open(db_path);  <co xml:id="CO217-1"/>

module.exports = connect;                           <co xml:id="CO217-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO217-1">
<para>Le module n&#8217;a plus d&#8217;opinion sur l&#8217;emplacement de la base de données.</para>
</callout>
<callout arearefs="CO217-2">
<para>Le module exporte désormais une fonction à paramétrer lors de son exécution.</para>
</callout>
</calloutlist>
<simpara>Cela ouvre la voie pour nous connecter à une base de données différente
dans notre script de tests.</simpara>
<formalpara>
<title>testing/tests/with-db.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const assert = require('assert').strict;
const configRoute = require('../src/routes/books.js');
const database = require('../src/database.js');

// assert.deepEqual(typeof configRoute, 'function');<co xml:id="CO218-1"/>

database(':memory:').then(db =&gt; {                   <co xml:id="CO218-2"/>
  const route = configRoute(db);                    <co xml:id="CO218-3"/>
  assert.deepEqual(typeof route, 'function');       <co xml:id="CO218-4"/>
  /*
  assert.deepEqual(route(request, response));       <co xml:id="CO218-5"/>
  */
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO218-1">
<para>Nous pouvons nous passer de ce test puisque nous allons tester l&#8217;exécution de la fonction.</para>
</callout>
<callout arearefs="CO218-2">
<para>La valeur <literal>:memory:</literal> est une valeur spéciale de chemin d&#8217;accès pour <emphasis>SQLite</emphasis>&#160;– la base est créée en mémoire et disparaît à la fin de l&#8217;exécution du script.</para>
</callout>
<callout arearefs="CO218-3">
<para>Configuration de la route&#160;– comme nous le faisons dans le fichier <literal>configure.js</literal>.</para>
</callout>
<callout arearefs="CO218-4">
<para>La route configurée retourne bien une fonction, mais cela ne suffit pas à affirmer que son fonctionnement correspond à nos attentes.</para>
</callout>
<callout arearefs="CO218-5">
<para>En commentaire&#160;: comment tester le résultat de la route <emphasis>Express</emphasis>&#160;?</para>
</callout>
</calloutlist>
<simpara>Résultat&#160;: la connexion à la base de données réussit et nous sommes en mesure
de la transmettre à la fonction de paramétrage de la route.</simpara>
<simpara>Le chemin d&#8217;accès était exprimé de la manière suivante&#160;: <literal>/books/:id</literal>.
Autrement dit, la requête à la base de données dépend d&#8217;un objet <literal>request.params</literal>
dont la clé&#160;<literal>id</literal> vaut&#160;<literal>1</literal>.</simpara>
<simpara>C&#8217;est ce que nous allons passer à la fonction <literal>route</literal>.
Mais qu&#8217;en est-il de la réponse&#160;? Doit-on réécrire un objet qui reproduit
l&#8217;objet <literal>response</literal> d'<emphasis>Express</emphasis>&#160;?
Je déconseille cette option car elle nous oblige à écrire du code, faillible,
et donc à introduire des biais dans nos propres tests.</simpara>
<simpara>Les <emphasis>bibliothèques d&#8217;interception</emphasis> évitent ce cas de figure.
Elles se greffent à du code existant pour observer ses réactions, voire pour les
remplacer temporairement, le temps des tests.
J&#8217;ai l&#8217;habitude d&#8217;utiliser le module&#160;<literal>npm</literal> <emphasis>sinon.js</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/sinon">npmjs.com/sinon</link></phrase>,
<phrase role="URL"><link xl:href="https://sinonjs.org/">sinonjs.org/</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>sinon.js</secondary>
</indexterm>
<indexterm>
<primary>sinon.js</primary>
</indexterm>
Il propose tout le nécessaire, est bien documenté et fonctionne aussi bien
côté Node que côté navigateurs&#160;web.</simpara>
<formalpara>
<title>testing/tests/with-sinon.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const assert = require('assert').strict;
const configRoute = require('../src/routes/books.js');
const database = require('../src/database.js');
const sinon = require('sinon');
const {response} = require('express');            <co xml:id="CO219-1"/>

database(':memory:').then(db =&gt; {
  const route = configRoute(db);
  const sendFake = sinon.stub(response, 'send');  <co xml:id="CO219-2"/>

  return route({params: {id: 1}}, response).then(() =&gt; {
    assert.ok(sendFake.called);                   <co xml:id="CO219-3"/>
  })
})
.catch(error =&gt; {
  console.error(error.message);
  process.exit(1);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO219-1">
<para>Nous récupérons l&#8217;objet de réponse d'<emphasis>Express</emphasis>&#160;– je l&#8217;ai découvert en fouillant dans les objets exportés par le module.</para>
</callout>
<callout arearefs="CO219-2">
<para>Nous neutralisons la fonction <literal>response.send()</literal> avec un <emphasis>stub</emphasis> pour observer les données qui lui sont données en argument.</para>
</callout>
<callout arearefs="CO219-3">
<para>La propriété <literal>called</literal> d&#8217;un <emphasis>stub</emphasis> ou d&#8217;un espion passe à <literal>true</literal> si elle a été appelée.</para>
</callout>
</calloutlist>
<simpara>C&#8217;est une chance que le module <emphasis>Express</emphasis> expose directement un objet de réponse
sans avoir à attendre qu&#8217;une vraie requête HTTP atteigne notre serveur web.
Le <emphasis>stub</emphasis> neutralise son action&#160;– nous nous contentons d&#8217;observer
comment la fonction est appelée.
L&#8217;enjeu est de constater que la connexion à la base de données se passe bien,
que la requête retourne bien la ligne attendue et que ses valeurs soient
bien transmises en réponse.</simpara>
<simpara>Malheureusement pour nous&#160;: la base en mémoire n&#8217;a aucune donnée.
Le test échoue donc.
Notre nouvel objectif est de maintenir l&#8217;intention du test et de lui ajouter
les données nécessaires à son exécution.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Glossaire</phrase> Espions, stubs et mocks</title>
<simpara>Les espions, <emphasis>stubs</emphasis> et <emphasis>mocks</emphasis> couvrent trois aspects complémentaires.
Les <emphasis role="strong">espions enregistrent les appels</emphasis> à des attributs et à des fonctions
– le nombre de fois, quels arguments, quels résultats.
Les <emphasis role="strong"><emphasis>stubs</emphasis> interceptent les appels</emphasis> à des fonctions&#160;– vous pouvez même définir
les valeurs de retours ou de rappel en fonction des paramètres d&#8217;appel.
Les <emphasis role="strong"><emphasis>mocks</emphasis> interceptent les résultats</emphasis>&#160;– je n&#8217;en parle pas car notre
exemple ne s&#8217;y prête&#160;pas.</simpara>
</note>
<simpara>C&#8217;est la raison d&#8217;être des fichiers dits de <emphasis>fixtures</emphasis>.
Ces données peuplent une base de données d&#8217;enregistrements suffisamment
réalistes pour illustrer les différents cas de figure de notre application.
<indexterm>
<primary>base de données</primary><secondary>fixture</secondary>
</indexterm>
<indexterm>
<primary>fixture</primary>
</indexterm></simpara>
<formalpara>
<title>testing/tests/fixtures.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

module.exports = async (db) =&gt; {
  await db.run(`CREATE TABLE books
  (id INTEGER PRIMARY KEY, title VARCHAR, isbn VARCHAR);`);

  await db.run(`INSERT INTO books (title, isbn) VALUES
  ("Design Systems", "978-3945749586"),
  ("Sass pour les web designers", "977-2212141474"),
  ("Node.js", "978-2212139938");`);

  return db;
}</programlisting>
</para>
</formalpara>
<simpara>Ce cas est particulièrement adapté à la syntaxe
<link xl:href="../chapter-03/index.xml#async-await"><literal>async</literal>/<literal>await</literal></link>.
<indexterm>
<primary>promesse</primary><secondary>async et await</secondary>
</indexterm>
<indexterm>
<primary>async et await</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>await</secondary>
</indexterm>
<indexterm>
<primary>await</primary>
</indexterm>
<indexterm>
<primary>opérateur</primary><secondary>await</secondary>
</indexterm>
<indexterm>
<primary>await</primary>
</indexterm>
Ces promesses sont séquentielles et la syntaxe linéarise leur lecture.
Le même exemple sans <literal>async</literal>/<literal>await</literal> et juste avec les promesses est moins
digeste à&#160;lire.</simpara>
<simpara>Il ne nous reste plus qu&#8217;à appeler cette fonction de génération de données
depuis notre script de tests&#160;:
<indexterm>
<primary>module npm</primary><secondary>sinon.js</secondary>
</indexterm>
<indexterm>
<primary>sinon.js</primary>
</indexterm></simpara>
<formalpara>
<title>testing/tests/with-sinon-data.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">// ...
const loadFixtures = require('./fixtures.js');      <co xml:id="CO220-1"/>

database(':memory:')
  .then(db =&gt; loadFixtures(db))                     <co xml:id="CO220-2"/>
  .then(db =&gt; {
    const route = configRoute(db);
    const sendFake = sinon.stub(response, 'send');

    route({params: {id: 1}}, response).then(() =&gt; {
      assert.ok(sendFake.calledWith(sinon.match({   <co xml:id="CO220-3"/>
        'title': 'Design Systems'                   <co xml:id="CO220-4"/>
      })));
    })
  });</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO220-1">
<para>Chargement du module qui contient les requêtes SQL nécessaires à l&#8217;initialisation de la table et des données.</para>
</callout>
<callout arearefs="CO220-2">
<para>Les données sont chargées après la connexion à la base et avant l&#8217;exécution des tests.</para>
</callout>
<callout arearefs="CO220-3">
<para>Nous remplaçons l&#8217;appel à <literal>sendFake.called()</literal> par <literal>sendFake.calledWith()</literal> pour affirmer plus explicitement le résultat attendu.</para>
</callout>
<callout arearefs="CO220-4">
<para>Le module sinon propose un ensemble de fonctions de vérification (les <emphasis>matchers</emphasis>)&#160;– ici, nous vérifions que <literal>response.send()</literal> est appelée avec un objet, qui contient au moins une clé <literal>title</literal> dont la valeur est <literal>Design Systems</literal>.</para>
</callout>
</calloutlist>
<simpara>Le test est concluant&#160;!
Et nous n&#8217;avons plus de doute que la fonction <literal>response.send()</literal>
est bien appelée avec la valeur issue de la base de données.
Le module <emphasis>sinon</emphasis> a été d&#8217;une grande aide pour intercepter l&#8217;exécution de cette
fonction et pour nous faciliter son introspection, après&#160;coup.</simpara>
<simpara>Pour être exhaustifs, il nous faudrait maintenant tester le deuxième cas de figure,
celui où le paramètre&#160;<literal>id</literal> de l&#8217;URL fait référence à un enregistrement qui
n&#8217;existe pas en base de données pour générer une erreur&#160;404.</simpara>
<formalpara>
<title>testing/tests/with-sinon-full.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">// ...
database(':memory:')
  .then(db =&gt; loadFixtures(db))
  .then(db =&gt; {
    const route = configRoute(db);
    const sendFake = sinon.stub(response, 'send');
    const statusSpy = sinon.spy(response, 'status');  <co xml:id="CO221-1"/>

    route({params: {id: 1}}, response).then(() =&gt; {
      assert.ok(sendFake.called);
    });

    route({params: {id: 4}}, response).then(() =&gt; {   <co xml:id="CO221-2"/>
      assert.ok(statusSpy.calledWith(404));           <co xml:id="CO221-3"/>
      assert.ok(sendFake.calledWith('Livre inconnu'));<co xml:id="CO221-4"/>
    });
  });</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO221-1">
<para>Création d&#8217;un espion sur la méthode <literal>response.status()</literal> du module <emphasis>Express</emphasis>.</para>
</callout>
<callout arearefs="CO221-2">
<para>Création d&#8217;un deuxième cas de test, pour couvrir l&#8217;appel à un enregistrement inconnu en base de données.</para>
</callout>
<callout arearefs="CO221-3">
<para>La méthode <literal>calledWith()</literal> détermine si une fonction est appelée avec cette exacte valeur.</para>
</callout>
<callout arearefs="CO221-4">
<para>Cette méthode s&#8217;applique aussi aux <emphasis>stubs</emphasis>.</para>
</callout>
</calloutlist>
<simpara>Dans ce cas, nous avons eu recours à un <emphasis>espion</emphasis> pour observer la méthode
<literal>response.status()</literal> d&#8217;Express.
Nous avons procédé ainsi car nous n&#8217;avions pas à neutraliser son fonctionnement
mais seulement à observer la valeur de son argument.
Le fait qu&#8217;il soit de&#160;<literal>404</literal> prouve que la branche de code à l&#8217;intérieur de la
condition&#160;<literal>if</literal> a bien été visitée.</simpara>
<simpara>Je constate un problème dans cette écriture cependant.
L&#8217;espion et le <emphasis>stub</emphasis> sont créés une seule fois et partagés entre chaque test.
Cette pratique entraînera des effets de bord si nous ne prêtons pas attention
au déroulé des tests.
Ils devraient être remis à zéro entre chaque&#160;test.</simpara>
<simpara>Les <emphasis>suites de tests</emphasis> sont des outils qui renforcent la cohérence
et la structure, notamment pour automatiser l&#8217;exécution d&#8217;actions avant et après
des tests.
J&#8217;utilise le module&#160;<literal>npm</literal> <emphasis>mocha</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/mocha">npmjs.com/mocha</link></phrase>,
<phrase role="URL"><link xl:href="https://mochajs.org">mochajs.org</link></phrase>), par habitude, parce qu&#8217;il ne demande aucune
configuration et parce qu&#8217;il fait le travail à la fois côté Node et côté
navigateurs.
<indexterm>
<primary>module npm</primary><secondary>mocha</secondary>
</indexterm>
<indexterm>
<primary>mocha</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm></simpara>
<screen>$ ../node_modules/.bin/mocha testing/tests/with-mocha.js</screen>
<formalpara>
<title>testing/tests/with-mocha.js (modules)</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const assert = require('assert').strict;
const configRoute = require('../src/routes/books.js');
const database = require('../src/database.js');
const sinon = require('sinon');
const {response} = require('express');
const loadFixtures = require('./fixtures.js');
const {describe, before, afterEach} = require('mocha'); <co xml:id="CO222-1"/>
const {it:test} = require('mocha');                     <co xml:id="CO222-2"/>
// ...</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO222-1">
<para>Import des fonctions qui décrivent respectivement la suite de tests, l&#8217;exécution de code avant le démarrage de la suite et l&#8217;exécution de code après chaque&#160;test.</para>
</callout>
<callout arearefs="CO222-2">
<para>Import de la fonction de&#160;test.</para>
</callout>
</calloutlist>
<simpara>Notre script de test comporte désormais ce qu&#8217;on appelle une <emphasis>suite de tests</emphasis>,
c&#8217;est-à-dire, un <emphasis role="strong">ensemble de tests qui expriment nos attentes</emphasis> vis-à-vis
d&#8217;une fonctionnalité&#160;– ici, une route d&#8217;application&#160;web.</simpara>
<formalpara>
<title>testing/tests/with-mocha.js (configuration)</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">// ... (modules)
describe('routes/books.js', () =&gt; {                   <co xml:id="CO223-1"/>
  let db, route;

  before(async () =&gt; {                                <co xml:id="CO223-2"/>
    db = await database(':memory:');
    await loadFixtures(db);
    route = configRoute(db);
  });

  afterEach(() =&gt; sinon.restore());                   <co xml:id="CO223-3"/>
  // ...
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO223-1">
<para>Déclaration de la suite de tests&#160;– sa valeur reflète généralement le sujet des tests.</para>
</callout>
<callout arearefs="CO223-2">
<para>Avant le démarrage des tests, nous créons la base de données et configurons la route.</para>
</callout>
<callout arearefs="CO223-3">
<para>Après chaque test, nous remettons à zéro l&#8217;état de <emphasis>sinon</emphasis>&#160;– nos tests n&#8217;ont plus la possibilité de se parasiter entre&#160;eux.</para>
</callout>
</calloutlist>
<simpara>Ce découpage a le mérite de clarifier les différents temps de nos tests,
à savoir la préparation de l&#8217;environnement d&#8217;exécution, le nettoyage puis
l&#8217;exécution des&#160;tests.</simpara>
<formalpara>
<title>testing/tests/with-mocha.js (tests)</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">// ... (modules)
describe('routes/books.js', () =&gt; {                   <co xml:id="CO224-1"/>
  // ... (configuration)
  test('statut 200', () =&gt; {                          <co xml:id="CO224-2"/>
    const sendFake = sinon.stub(response, 'send');

    return route({params: {id: 1}}, response).then(() =&gt; {
      assert.ok(sendFake.calledWith(sinon.match({
        'title': 'Design Systems'
      })));
    });
  });

  test('statut 404', () =&gt; {                          <co xml:id="CO224-3"/>
    const sendFake = sinon.stub(response, 'send');
    const statusSpy = sinon.spy(response, 'status');

    return route({params: {id: 4}}, response).then(() =&gt; {
      assert.ok(statusSpy.calledWith(404));
      assert.ok(sendFake.calledWith('Livre inconnu'));
    });
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO224-1">
<para>La suite compte deux tests.</para>
</callout>
<callout arearefs="CO224-2">
<para>Premier test&#160;: se termine quand la promesse retournée par la fonction <literal>route()</literal> est résolue.</para>
</callout>
<callout arearefs="CO224-3">
<para>Deuxième test&#160;: cette fois, l&#8217;espion et le stub ne sont pas affectés par le précédent&#160;test.</para>
</callout>
</calloutlist>
<simpara>La suite de tests ne cherche pas à savoir comment nous testons notre code.
Son objectif est de capturer les messages d&#8217;erreur des assertions qui échouent
et de nous les communiquer en contexte.</simpara>
<figure>
<title>Exemple d&#8217;une suite de tests mocha qui se termine avec succès</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/tests-ok.png" contentwidth="66%"/>
</imageobject>
<textobject><phrase>tests ok</phrase></textobject>
</mediaobject>
</figure>
<caution>
<title><phrase role="RemarquePreTitre">Réflexion</phrase> Écriture optimiste</title>
<simpara>Nous avons l&#8217;habitude d&#8217;écrire des tests de manière optimiste.
Ce biais naturel fait que nous ne testons pas les cas
dont nous n&#8217;avons pas encore connaissance.</simpara>
<simpara>Trouver les cas de figure qui font échouer notre code est un vrai travail
de réflexion.</simpara>
</caution>
<simpara>L&#8217;approche <emphasis>Test Driven Development</emphasis> (<emphasis>TDD</emphasis>) est pilotée par les tests.
Dans ce contexte, nous écrivons les tests avant même d&#8217;avoir écrit notre code.
Cela nous force à réfléchir à l&#8217;intention et à concevoir
le code de manière à ce qu&#8217;il soit testable.
Qu&#8217;on adopte ou non cette méthode, nous gagnons en qualité en faisant échouer
les tests, juste pour nous assurer que ce n&#8217;est pas un bogue (oui ça arrive)
quand ils indiquent que tout est correct.</simpara>
<figure>
<title>Exemple d&#8217;une suite de tests mocha dont un test échoue</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/tests-ko.png" contentwidth="80%"/>
</imageobject>
<textobject><phrase>tests ko</phrase></textobject>
</mediaobject>
</figure>
<simpara>Maintenant que nos tests sont écrits, nous sommes en mesure de
<link linkend="deployment">déployer notre application</link> automatiquement, seulement
si leur exécution est réussie.</simpara>
</section>
<section xml:id="deployment">
<title>Déployer automatiquement</title>
<simpara><indexterm>
<primary>déploiement</primary><secondary>intégration continue</secondary>
</indexterm>
<indexterm>
<primary>intégration continue</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>intégration continue (voir déploiement)</secondary>
</indexterm>
<indexterm>
<primary>intégration continue (voir déploiement)</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm></simpara>
<simpara>Cette section continue à ajouter de l&#8217;automatisation
dans notre manière de fonctionner.
Elle n&#8217;est donc pas spécifique aux <emphasis>frameworks</emphasis> et est tout à fait valide
si vous vous constituez votre propre application, brique par brique.</simpara>
<simpara>Le déploiement automatique sert principalement à <emphasis role="strong">révéler les points de friction</emphasis>.
Si nous manquons de confiance dans le déploiement, c&#8217;est probablement qu&#8217;il
y a des nœuds à démêler.
L&#8217;automatisation du déploiement et la facilité de sa répétabilité nous aident
à gommer ces frictions petit à petit.
La pression de la mise en production se transforme en incitation au changement.</simpara>
<simpara>La fréquence des déploiements <emphasis role="strong">révèle les points de congestion</emphasis>.
Tout ce qui est trop lent à notre goût est un appel à gommer cette lenteur,
à trouver une autre approche pour finalement observer le résultat du déploiement
plus rapidement.</simpara>
<simpara>L&#8217;enjeu des livraisons automatisées est double&#160;: d&#8217;abord,
<emphasis role="strong">faciliter le transport du code vers le serveur de production</emphasis>
(en cas de bogue, le temps passé concerne seulement la résolution du problème et non
la livraison elle-même) et servir de <emphasis role="strong">documentation du processus de livraison</emphasis>.</simpara>
<simpara>Nous abordons plus en détail les différents mécanismes techniques
dans le <link xl:href="../chapter-06/index.xml">chapitre&#160;6</link>, que ce soit <quote>à la main</quote>,
avec des recettes de déploiement ou par le biais de notre service d&#8217;hébergement.</simpara>
</section>
</section>
<section xml:id="advanced">
<title>Pour aller plus loin</title>
<section xml:id="advanced.server">
<title>Pourquoi lancer un serveur ?</title>
<simpara><indexterm>
<primary>application web</primary><secondary>serveur HTTP</secondary>
</indexterm>
<indexterm>
<primary>serveur HTTP</primary>
</indexterm></simpara>
<simpara>Il y a des environnements où des logiciels comme Apache et Nginx intègrent
notre langage de programmation avec des modules&#160;: par exemple, PHP avec le <literal>mod_php</literal>
ou Perl avec le <literal>mod_cgi</literal>.
Les requêtes entrantes sont dirigées vers un script que le module interprète
et qui retourne une réponse, dynamiquement.</simpara>
<simpara>Le <emphasis role="strong">script PHP est interprété à chaque requête</emphasis> et toute cette représentation
est détruite une fois la réponse envoyée (mémoire, valeurs des variables, configuration).
Il faut recourir à un ensemble de modules additionnels pour optimiser ce gâchis
de ressources informatiques&#160;: cache d&#8217;interprétation, cache applicatif, cache de configuration.</simpara>
<simpara>Démarrer un serveur HTTP dans le langage de notre application nous éloigne de
ce modèle coûteux et nous rapproche d&#8217;un fonctionnement plus performant, organisé
autour des trois piliers suivants&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Node et Apache/Nginx fonctionnent ensemble</emphasis>&#160;– ils se relaient les requêtes
et les réponses car ils parlent le même protocole.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Le serveur Node est <quote>préchauffé</quote></emphasis>&#160;– une requête entrante trouve une application
déjà opérationnelle, déjà configurée, déjà connectée à une base de données
et prête à répondre.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Le code exécuté est spécifique à la requête</emphasis>&#160;– l&#8217;application reçoit chaque
requête de manière indépendante en ayant le minimum d&#8217;effort à faire pour
générer une réponse.</simpara>
</listitem>
</itemizedlist>
<simpara>Autrement dit, ce modèle réduit le temps de parcours entre une requête entrante
et une réponse sortante.
Cela a un effet significatif sur le temps d&#8217;apparition de l&#8217;icône de chargement
côté client.</simpara>
</section>
<section xml:id="http">
<title>Comprendre le modèle&#160;HTTP</title>
<simpara><indexterm>
<primary>HTTP</primary><secondary>modèle de fonctionnement</secondary>
</indexterm>
<indexterm>
<primary>modèle de fonctionnement</primary>
</indexterm></simpara>
<simpara>Deux éléments ressortent du modèle de fonctionnement du protocole HTTP&#160;:
<emphasis role="strong">tout est du texte</emphasis> (en-têtes et contenu) et <emphasis role="strong">chaque requête est indépendante</emphasis>.
Cela revient à dire que chaque requête emporte son contexte avec elle, toutes les
informations nécessaires à sa compréhension.</simpara>
<simpara>Que se passe-t-il lorsque notre navigateur web ou le programme <literal>curl</literal>
demande à accéder à <phrase role="URL"><link xl:href="http://example.com">example.com</link></phrase>&#160;?
<indexterm>
<primary>DNS</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>connexion entrante</secondary>
</indexterm>
<indexterm>
<primary>connexion entrante</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>requête</secondary>
</indexterm>
<indexterm>
<primary>requête</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>réponse</secondary>
</indexterm>
<indexterm>
<primary>réponse</primary>
</indexterm></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">Résolution de DNS</emphasis>&#160;: un des annuaires DNS est interrogé pour savoir quelle
adresse&#160;IP est associée au nom de domaine.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Établissement de la connexion</emphasis>&#160;: le client (nous) ouvre une connexion réseau
avec le serveur pour échanger des données.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Envoi de la requête HTTP</emphasis>&#160;: la requête contient des informations au format
texte (méthode, en-têtes, parfois un corps de message) pour que le serveur
s&#8217;adapte au mieux à notre demande.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Réception de la requête</emphasis>&#160;: le serveur interprète la demande
(est-ce qu&#8217;il la comprend&#160;?), cherche la ressource associée au chemin demandé.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Envoi de la réponse</emphasis>&#160;: le serveur répond avec des données au format texte
(statut, en-têtes, corps de message).</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Interprétation de la réponse</emphasis>&#160;: l&#8217;en-tête <literal>Content-Type</literal> aide le client à déterminer
comment afficher les informations - XML, HTML, JSON, CSS, vidéo etc&#160;– et si
le document contient d&#8217;autres ressources à aller récupérer.
<indexterm>
<primary>HTTP</primary><secondary>en-tête</secondary><tertiary>Content-Type</tertiary>
</indexterm>
<indexterm>
<primary>en-tête</primary><secondary>Content-Type</secondary>
</indexterm>
<indexterm>
<primary>Content-Type</primary>
</indexterm>
<indexterm>
<primary>curl</primary>
</indexterm></simpara>
</listitem>
</orderedlist>
<simpara>Dans le cas du programme <literal>curl</literal>, la réponse est affichée telle quelle, en texte.</simpara>
<simpara>Avec un navigateur en revanche, le HTML est interprété.
Le navigateur demande les ressources listées dans les différentes balises
(<literal>img</literal>, <literal>video</literal>, <literal>audio</literal>)&#160;; l&#8217;indicateur de chargement
s&#8217;arrête quand toutes les ressources ont été demandées et téléchargées.</simpara>
<figure>
<title>Cascade de requêtes HTTP suite à l&#8217;interprétation d&#8217;un document HTML par un navigateur</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/http-waterfall.png"/>
</imageobject>
<textobject><phrase>http waterfall</phrase></textobject>
</mediaobject>
</figure>
<simpara>Le nombre de requêtes et la taille des ressources affectent donc la vitesse de
chargement d&#8217;une page.
Plus il y en a, plus le client doit en demander et plus le serveur multiplie le
nombre de réponses.
Le temps de téléchargement augmente.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Technique</phrase> Les WebViews sur mobile</title>
<simpara>Les WebViews sont des composants proposés par les systèmes d&#8217;exploitation
pour embarquer du contenu HTML dans une application native.</simpara>
<simpara>Elles fonctionnent comme des navigateurs, sans les boutons de navigation.</simpara>
</note>
<simpara>Le module&#160;<literal>npm</literal> <emphasis>jshttp</emphasis> (<phrase role="URL"><link xl:href="https://github.com/jshttp">github.com/jshttp</link></phrase>) affiche les en-têtes
de réponse comme le programme <literal>curl</literal> le ferait et détaille le parcours réseau,
de la résolution du nom de domaine jusqu&#8217;au temps passé à négocier une transaction
sécurisée.
<indexterm>
<primary>module npm</primary><secondary>jshttp</secondary>
</indexterm>
<indexterm>
<primary>jshttp</primary>
</indexterm>
Nous comprenons ainsi mieux des temps qui sont rendus invisibles et sur lesquels nous
pouvons faire des efforts&#160;– réduire les temps de transfert ou le temps de réponse
de notre application par exemple.</simpara>
<figure>
<title>En-têtes de réponse et durée des différentes étapes de l&#8217;exécution d&#8217;une requête&#160;HTTP</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/httpstat.png"/>
</imageobject>
<textobject><phrase>httpstat</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="database-choice">
<title>Quel(s) moteur(s) de base(s) de données choisir ?</title>
<simpara><indexterm>
<primary>base de données</primary><secondary>liste de moteurs</secondary>
</indexterm>
<indexterm>
<primary>liste de moteurs</primary>
</indexterm></simpara>
<simpara>Quand je codais en PHP, nous parlions beaucoup de la pile technique <emphasis>LAMP</emphasis>
(Linux, Apache, MySQL et&#160;PHP).
C&#8217;était la combinaison <emphasis>de&#160;facto</emphasis> des différents projets.
MySQL était la base de données de choix tandis que les Pythonistes et Rubyistes
se focalisaient plutôt sur PostgreSQL.
<indexterm>
<primary>base de données</primary><secondary>MySQL</secondary>
</indexterm>
<indexterm>
<primary>MySQL</primary>
</indexterm>
<indexterm>
<primary>base de données</primary><secondary>PostgreSQL</secondary>
</indexterm>
<indexterm>
<primary>PostgreSQL</primary>
</indexterm>
<indexterm>
<primary>base de données</primary><secondary>MongoDB</secondary>
</indexterm>
<indexterm>
<primary>MongoDB</primary>
</indexterm></simpara>
<simpara>J&#8217;ai croisé beaucoup de développeurs et développeuses qui se lançaient dans
les bases de données dites <quote>documents</quote> comme MongoDB
<quote>parce que les données sont stockées en&#160;JSON et donc c&#8217;est un choix logique pour Node</quote>.</simpara>
<simpara>Je suis fortement en désaccord avec cette dernière affirmation et je pense que la bonne
base de données est celle qui tient la route par rapport à Node.
Le <emphasis role="strong">débit de données</emphasis> entre Node et la base compte davantage, ainsi que
la <emphasis role="strong">rapidité de la base à exécuter une requête</emphasis> et retourner des résultats
(certaines gèrent mieux que d&#8217;autres la concurrence d&#8217;accès ou les critères
de filtrage).
Le troisième critère est subjectif&#160;: c&#8217;est le <emphasis role="strong">confort d&#8217;utilisation</emphasis>&#160;;
PostgreSQL est peut-être plus rapide pour un cas d&#8217;usage précis, mais si vous
êtes plus à l&#8217;aise avec MariaDB ou MySQL, commencez avec la base qui vous parle
le plus&#160;– ou expérimentez et réservez-vous le droit de changer d&#8217;avis après
avoir joué avec un nombre représentatif de données.</simpara>
<simpara>Je choisis une base de données en fonction de plusieurs critères&#160;:
la rapidité de lecture, l&#8217;intégrité des données, la volumétrie acceptée avant
de devoir distribuer les données sur plusieurs machines et enfin,
des fonctionnalités spéciales (recherche géographique, type de champ particulier
comme le champ&#160;JSON de PostgreSQL).
<indexterm>
<primary>base de données</primary><secondary>stockage en mémoire</secondary>
</indexterm>
<indexterm>
<primary>stockage en mémoire</primary>
</indexterm>
<indexterm>
<primary>base de données</primary><secondary>stockage sur disque</secondary>
</indexterm>
<indexterm>
<primary>stockage sur disque</primary>
</indexterm>
<indexterm>
<primary>base de données</primary><secondary>stockage en ligne</secondary>
</indexterm>
<indexterm>
<primary>stockage en ligne</primary>
</indexterm>
<indexterm>
<primary>déploiement</primary><secondary>service en ligne</secondary>
</indexterm>
<indexterm>
<primary>service en ligne</primary>
</indexterm></simpara>
<variablelist>
<varlistentry>
<term>Stockage fichier</term>
<listitem>
<simpara>Nous pourrions tout à fait décider d&#8217;utiliser un fichier&#160;JSON ou CSV pour
lire et écrire des données.
C&#8217;est facile à mettre en œuvre, mais c&#8217;est la solution la plus lente à tout
point de vue&#160;: recherche comme écriture.
<indexterm>
<primary>JSON</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Stockage en mémoire</term>
<listitem>
<simpara>Redis et Memcached sont des gestionnaires très rapides en lecture et en écriture.
C&#8217;est idéal pour accéder fréquemment aux données et les modifier, avant
de les sauvegarder sur un stockage moins rapide mais plus sûr.
Ils sont généralement dits <quote>clé/valeur</quote> car nous cherchons un identifiant
donné pour récupérer un, voire plusieurs champ(s) associé(s).
<indexterm>
<primary>base de données</primary><secondary>Redis</secondary>
</indexterm>
<indexterm>
<primary>Redis</primary>
</indexterm>
<indexterm>
<primary>base de données</primary><secondary>Memcached</secondary>
</indexterm>
<indexterm>
<primary>Memcached</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Stockage sur disque</term>
<listitem>
<simpara>MySQL, MSSQL, PostgreSQL et MongoDB stockent leurs données sur disque,
dans des fichiers optimisés pour la recherche d&#8217;informations&#160;– les <emphasis>index</emphasis>.
Ces moteurs sont souvent rapides en lecture et plus lents en écriture&#160;– selon
le type de disque dur utilisé pour le stockage.
Certains sont contraints par des schémas (bases&#160;SQL) tandis que d&#8217;autres
ont une structure libre (MongoDB).<?asciidoc-br?>
En pratique, nous typons ou structurons les données d&#8217;une manière ou d&#8217;une autre,
a&#160;minima pour les manipuler de manière cohérente dans notre code.
Certaines bases SQL ont un type de champ&#160;JSON, en structure libre.
<indexterm>
<primary>base de données</primary><secondary>SQLite</secondary>
</indexterm>
<indexterm>
<primary>SQLite</primary>
</indexterm>
<indexterm>
<primary>base de données</primary><secondary>PostgreSQL</secondary>
</indexterm>
<indexterm>
<primary>PostgreSQL</primary>
</indexterm>
<indexterm>
<primary>base de données</primary><secondary>MSSQL</secondary>
</indexterm>
<indexterm>
<primary>MSSQL</primary>
</indexterm>
<indexterm>
<primary>base de données</primary><secondary>MongoDB</secondary>
</indexterm>
<indexterm>
<primary>MongoDB</primary>
</indexterm>
<indexterm>
<primary>base de données</primary><secondary>MySQL</secondary>
</indexterm>
<indexterm>
<primary>MySQL</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Stockage sur un service en ligne</term>
<listitem>
<simpara>Firebase, DynamoDB, Parse et Kinto sont des gestionnaires de bases de données
accessibles comme des services, avec des requêtes HTTP.
Les services d&#8217;hébergement gèrent la distribution des données et leur sauvegarde.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>J&#8217;utilise souvent SQLite pour prototyper quelque chose de rapide sur ma machine.
Je passe ensuite à MySQL ou PostsgreSQL selon le projet&#160;– je me sens autonome sur
le premier pour l&#8217;installation tandis que je préfère un service qui gère tout de
bout en bout avec le second.</simpara>
<simpara>Je peux être amené à indexer les données dans une base Elasticsearch
ou Algolia pour leur donner une autre structure, spécialement optimisée pour
la recherche&#160;: une lecture très rapide sur des critères variables.
Je le fais si un des aspects principaux du projet est de préserver des performances
élevées, qui ne soient pas ralenties par l&#8217;activité d&#8217;une base&#160;SQL.
<indexterm>
<primary>base de données</primary><secondary>Elasticsearch</secondary>
</indexterm>
<indexterm>
<primary>Elasticsearch</primary>
</indexterm></simpara>
<simpara>Je complète en général avec Redis pour gérer les <link linkend="job-queues">files d&#8217;attente</link>,
des données intermédiaires que je considère comme <quote>jetables</quote>.
<indexterm>
<primary>base de données</primary><secondary>Redis</secondary>
</indexterm>
<indexterm>
<primary>Redis</primary>
</indexterm>
<indexterm>
<primary>application web</primary><secondary>traitement asynchrone (file d&#8217;attente)</secondary>
</indexterm>
<indexterm>
<primary>traitement asynchrone (file d&#8217;attente)</primary>
</indexterm></simpara>
<simpara>S&#8217;il est plus simple de tout gérer avec un seul support de stockage, utiliser
<emphasis role="strong">plusieurs gestionnaires de bases de données</emphasis> dans une même application est quelque chose de tout
à fait encouragé pour profiter de leurs caractéristiques.</simpara>
</section>
<section xml:id="security">
<title>Protéger nos applications</title>
<simpara><indexterm>
<primary>application web</primary><secondary>sécurité</secondary>
</indexterm>
<indexterm>
<primary>sécurité</primary>
</indexterm>
<indexterm>
<primary>sécurité</primary>
</indexterm></simpara>
<simpara>Il faut prendre des mesures de précaution dès lors que nous utilisons des
données saisies par un utilisateur, c&#8217;est-à-dire
<emphasis role="strong">toute variable dont la valeur provient de l&#8217;extérieur</emphasis>.
Je pense à des données de formulaire, des paramètres d&#8217;URL, des chemins d&#8217;accès,
des fichiers téléversés mais aussi des scripts qui sont injectés dans la page,
volontairement ou via un logiciel vérolé installé sur leur ordinateur.</simpara>
<variablelist>
<varlistentry>
<term><phrase role="URL"><link xl:href="https://npmjs.com/helmet">npmjs.com/helmet</link></phrase></term>
<listitem>
<simpara>Déjoue les injections de scripts et d&#8217;iframes non&#160;sollicitées.
<indexterm>
<primary>module npm</primary><secondary>helmet</secondary>
</indexterm>
<indexterm>
<primary>helmet</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><phrase role="URL"><link xl:href="https://npmjs.com/safe-regex">npmjs.com/safe-regex</link></phrase></term>
<listitem>
<simpara>Filtre une expression régulière fournie ou composée avec une valeur fournie par un utilisateur.
Cela évite certains bogues qui surchargent la CPU ou qui déjouent les motifs des expressions.
<indexterm>
<primary>module npm</primary><secondary>safe-regex</secondary>
</indexterm>
<indexterm>
<primary>safe-regex</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><phrase role="URL"><link xl:href="https://npmjs.com/dompurify">npmjs.com/dompurify</link></phrase></term>
<term><phrase role="URL"><link xl:href="https://npmjs.com/xss">npmjs.com/xss</link></phrase></term>
<listitem>
<simpara>Nettoie le HTML d&#8217;attributs et de balises non&#160;sollicités.
Les injections de scripts et les événements malintentionnés de clics sont supprimés.
<indexterm>
<primary>DOM (Document Object Model)</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>dompurify</secondary>
</indexterm>
<indexterm>
<primary>dompurify</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>xss</secondary>
</indexterm>
<indexterm>
<primary>xss</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><phrase role="URL"><link xl:href="https://npmjs.com/sql-escape-string">npmjs.com/sql-escape-string</link></phrase></term>
<listitem>
<simpara>Nettoie une saisie utilisateur de tout caractère qui pourrait déjouer nos attentes
au sein d&#8217;une requête&#160;SQL.
<indexterm>
<primary>module npm</primary><secondary>sql-escape-string</secondary>
</indexterm>
<indexterm>
<primary>sql-escape-string</primary>
</indexterm></simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Outre les données arbitraires, il faut toujours s&#8217;assurer des <emphasis role="strong">permissions</emphasis>.
L&#8217;utilisateur a-t-il vraiment le droit d&#8217;être là ou il est&#160;?
Le volume du fichier téléversé est-il vraiment cohérent&#160;?</simpara>
<simpara>L&#8217;utilisation du <link xl:href="../chapter-03/index.xml#strict">mode strict</link> a l&#8217;avantage
de nous protéger de l&#8217;exploitation d&#8217;anciennes bizarreries d&#8217;ECMAScript.
Ce qui doit planter plante au lieu d&#8217;être passé sous silence.
<indexterm>
<primary>ECMAScript</primary><secondary>mode strict</secondary>
</indexterm>
<indexterm>
<primary>mode strict</primary>
</indexterm></simpara>
<simpara>Parfois, même les caractères autorisés suffisent à déjouer notre attention.
C&#8217;est le cas si une variable est utilisée pour composer un chemin avec
<literal>path.resolve()</literal> ou <literal>path.join()</literal> par exemple.
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.resolve()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.resolve()</secondary>
</indexterm>
<indexterm>
<primary>path.resolve()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.join()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.join()</secondary>
</indexterm>
<indexterm>
<primary>path.join()</primary>
</indexterm>
<indexterm>
<primary>sécurité</primary><secondary>chemin d&#8217;accès</secondary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès</primary>
</indexterm>
La saisie utilisateur crée un chemin de traverse qui permet d&#8217;aller exploiter
des données ailleurs sur l&#8217;ordinateur.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>path-traversal.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {resolve} = require('path');

const base_dir = __dirname;
const bad_user_input = '/etc/passwd';

const resolved = resolve(base_dir, bad_user_input);
console.log(resolved);                  <co xml:id="CO225-1"/>

if (resolved.indexOf(base_dir) !== 0) { <co xml:id="CO225-2"/>
  console.error(`${resolved} doit commencer par ${base_dir}`);
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO225-1">
<para>Affiche <literal>/etc/passwd</literal>&#160;– notre chemin de base a été complètement remplacé.</para>
</callout>
<callout arearefs="CO225-2">
<para>Affiche <literal>/.../chapter-07/examples</literal>&#160;– notre chemin de base a été complètement remplacé.</para>
</callout>
</calloutlist>
<simpara>Un moyen solide de vérifier que nous n&#8217;avons pas été dérouté·e en dehors
d&#8217;un répertoire racine&#160;– ici, <literal>base_dir</literal>&#160;– est de vérifier que le chemin final
débute bien par le chemin du répertoire racine.
<indexterm>
<primary>sécurité</primary><secondary>en-tête HTTP</secondary>
</indexterm>
<indexterm>
<primary>en-tête HTTP</primary>
</indexterm>
<indexterm>
<primary>HTTP</primary><secondary>sécurité</secondary>
</indexterm>
<indexterm>
<primary>sécurité</primary>
</indexterm></simpara>
<table frame="all" rowsep="1" colsep="1">
<title>En-têtes de réponse qui ont un impact sur la sécurité de navigation</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="66.6667*"/>
<thead>
<row>
<entry align="left" valign="top">En-tête</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>X-DNS-Prefetch-Control</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avec la valeur <literal>off</literal>, le navigateur ne va pas proactivement chercher les informations DNS des ressources contenues dans la page. Nos informations de navigation ne sont pas divulguées à notre&#160;insu.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>X-Frame-Options</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avec la valeur <literal>SAMEORIGIN</literal>, le navigateur autorise la création d'<literal>&lt;iframe&gt;</literal> seulement depuis le même domaine – les <literal>&lt;iframe&gt;</literal> tierces sont bloquées.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Strict-Transport-Security</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Lorsque l&#8217;option est activée, le navigateur accède par défaut à ce site en HTTPS au lieu de&#160;HTTP.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>X-Download-Options</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avec la valeur <literal>noopen</literal>, Internet Explorer télécharge un fichier au lieu de tenter de l&#8217;ouvrir dans le navigateur – cela risque d&#8217;être exploité pour pirater le navigateur par des fichiers malintentionnés.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>X-Content-Type-Options</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avec la valeur <literal>nosniff</literal>, les navigateurs bloquent les scripts et les styles qui n&#8217;ont respectivement pas l&#8217;en-tête <literal>Content-Type</literal> à <literal>application/javascript</literal> et <literal>text/css</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>X-XSS-Protection</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avec la valeur <literal>1; mode=block</literal>, les navigateurs interrompent le chargement d&#8217;une page s&#8217;ils détectent une exploitation malintentionnée de chargement de données ou de fichier.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Guide</phrase> Open Web Application Security Project (OWASP)</title>
<simpara><indexterm>
<primary>sécurité</primary>
</indexterm>
<indexterm>
<primary>OWASP (Open Web Application Security Project)</primary>
</indexterm>
L&#8217;organisme <emphasis>Open Web Application Security Project</emphasis> (<emphasis>OWASP</emphasis>) recueille et
diffuse nombre de critères de sécurité à connaître et vérifier pour déjouer
au mieux les attaques.</simpara>
<simpara>Il met à disposition un guide spécialisé pour Node à l&#8217;adresse suivante&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodegoat.herokuapp.com/tutorial">nodegoat.herokuapp.com/tutorial</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="lambda">
<title>Une application minimaliste avec les Lambda</title>
<simpara><indexterm>
<primary>application</primary><secondary>fonction éphémère (lambda)</secondary>
</indexterm>
<indexterm>
<primary>fonction éphémère (lambda)</primary>
</indexterm>
<indexterm>
<primary>hébergement</primary><secondary>fonction éphémère</secondary>
</indexterm>
<indexterm>
<primary>fonction éphémère</primary>
</indexterm>
<indexterm>
<primary>webhook</primary>
</indexterm></simpara>
<simpara>Le principe d&#8217;une application web est d&#8217;afficher un résultat à partir d&#8217;un
chemin d&#8217;accès et de rester allumée en permanence, sauf exception.
Les <emphasis>Lambda</emphasis> sont une approche minimaliste d&#8217;application web&#160;: il n&#8217;y a qu&#8217;une
seule route, c&#8217;est <emphasis role="strong">une seule fonction qui retourne un résultat</emphasis>.</simpara>
<simpara>L&#8217;application s&#8217;endort quand elle ne reçoit pas de trafic dans un laps de temps donné.
Elle est <quote>réveillée</quote> quand du trafic arrive.
La facturation se fait à l&#8217;échelle de la seconde et au nombre de requêtes entrantes.
Nous en parlons un peu plus en détails dans le <link xl:href="../chapter-06/index.xml">chapitre&#160;6</link>.</simpara>
<simpara>Ce mécanisme s&#8217;adapte à des résultats en réaction à un événement&#160;: <emphasis>webhook</emphasis>,
notification, erreur, etc.</simpara>
<simpara>Le module&#160;<literal>npm</literal> <emphasis>micro</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/micro">npmjs.com/micro</link></phrase>) est un serveur minimaliste
qui répond à ce principe de micro-application, prête à être mise en pause à
tout instant.
<indexterm>
<primary>module npm</primary><secondary>micro</secondary>
</indexterm>
<indexterm>
<primary>micro</primary>
</indexterm></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10 interactive--endpoint">
<title>micro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const micro = require('micro');
const {random} = require('pokemon');

const server = micro((req, res) =&gt; random()); <co xml:id="CO226-1"/>

server.listen(4000);                          <co xml:id="CO226-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO226-1">
<para>Nous avons accès à la requête et à la réponse, mais nous avons aussi la liberté de renvoyer un résultat à la fonction de rappel.</para>
</callout>
<callout arearefs="CO226-2">
<para>À la manière d&#8217;une <link linkend="server">application classique</link>, nous la démarrons sur le port HTTP de notre choix.</para>
</callout>
</calloutlist>
<simpara>Un service comme <emphasis>AWS&#160;Lambda</emphasis> (<phrase role="URL"><link xl:href="https://aws.amazon.com/lambda">aws.amazon.com/lambda</link></phrase>) pousse
le concept encore plus loin.
<indexterm>
<primary>AWS (Amazon Web Services)</primary>
</indexterm>
La fonction réagit à un événement interne (notification SQS, quelque chose lié
à notre infrastructure, déploiement) ou à un événement externe (via l&#8217;API
ou un autre service ouvert vers l&#8217;extérieur).
Elle n&#8217;est pas forcément exposée sur le&#160;Web.</simpara>
<formalpara>
<title>lambda.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const lambda = require('apex.js');
const {random} = require('pokemon');

module.exports = lambda(event =&gt; random()); <co xml:id="CO227-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO227-1">
<para>C&#8217;est tout ce qu&#8217;il faut pour qu&#8217;une <emphasis>Lambda</emphasis> retourne un résultat utilisable pour l&#8217;appelant.</para>
</callout>
</calloutlist>
<simpara>L&#8217;adaptabilité de ce mécanisme permet de créer une API complète en agrégeant
plusieurs <emphasis>Lambda</emphasis> derrière un <emphasis>portail d&#8217;API</emphasis> comme <emphasis>AWS&#160;API Gateway</emphasis>
(<phrase role="URL"><link xl:href="https://aws.amazon.com/api-gateway">aws.amazon.com/api-gateway</link></phrase>).
À une API et une ressource (chemin et méthode HTTP) est associée une ressource
AWS, dont les <emphasis>Lambda</emphasis> font partie.</simpara>
</section>
</section>
<section xml:id="conclusion_7">
<title>Conclusion</title>
<simpara>Nous avons vu qu&#8217;une <emphasis role="strong">application web est bâtie autour du protocole HTTP</emphasis>.
Elle passe son temps à interpréter le texte des requêtes entrantes et à produire
des réponses, elles aussi au format texte.
Ces données de sortie sont aussi bien issues des fichiers placés sur notre disque
que des pages HTML assemblées dynamiquement depuis une base de données.</simpara>
<simpara>Les frameworks structurent notre pensée et automatisent l&#8217;application de
vérifications et de transformations pour toutes les requêtes entrantes.
Une fois le concept maîtrisé, il devient plus facile d&#8217;en essayer de nouveaux
et d&#8217;utiliser celui qui nous plaît le plus.</simpara>
<simpara>Nous avons aussi constaté qu&#8217;une <emphasis role="strong">approche modulaire permet d&#8217;interchanger des modules</emphasis>
entre eux, mais aussi qu&#8217;elle amène naturellement à une structure adaptée aux
frameworks et à l&#8217;écriture de tests, indispensables pour améliorer la
confiance dans notre code et pour en automatiser les déploiements.</simpara>
<simpara>Le protocole HTTP est une pierre angulaire du Web tel que nous l&#8217;utilisons.
Le pratiquer avec Node est un bon moyen de le comprendre par la pratique.</simpara>
</section>
</chapter>
<chapter xml:id="créer_un_outil_en_ligne_de_commande">
<title>Créer un outil en ligne de commande</title>
<simpara>Créer un outil en ligne de commande est un savoir utile pour forger ses
propres outils, automatiser des actions et mieux s&#8217;intégrer au
système d&#8217;exploitation.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Créer un script exécutable.</simpara>
</listitem>
<listitem>
<simpara>Du script au programme interactif.</simpara>
</listitem>
<listitem>
<simpara>Vers un code réutilisable et testable.</simpara>
</listitem>
<listitem>
<simpara>Utilisation d’un framework d’application en ligne de commandes.</simpara>
</listitem>
<listitem>
<simpara>Gérer les chemins d&#8217;accès et les flux de données.</simpara>
</listitem>
<listitem>
<simpara>Rendre le programme indépendant de&#160;Node.</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Ce chapitre est une invitation à créer des applications au plus proche des
systèmes d&#8217;exploitation, là où Node excelle.</simpara>
<simpara>Nous apprendrons à passer d&#8217;un script Node ordinaire à un script qui
s&#8217;exécute comme un programme de notre système d&#8217;exploitation.</simpara>
<simpara>Nous compléterons ce programme en améliorant son expérience utilisateur
mais aussi en le rendant robuste grâce aux tests et à l&#8217;écriture d&#8217;une
documentation minimaliste, générée automatiquement.</simpara>
<simpara>Enfin, nous verrons aussi comment aller plus loin en organisation son code
comme dans une véritable application, avec une compréhension plus poussée
des chemins d&#8217;accès et des traitements en continu sur des flux de données.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node&#160;v10</emphasis>
et <emphasis role="strong">npm&#160;v6</emphasis>.
Ce sont les versions stables recommandées en&#160;2019.</simpara>
</note>
<simpara>Un script en ligne de commande revient souvent à une installation globale
d&#8217;un module&#160;<literal>npm</literal> (<literal>npm install --global &lt;module&gt;</literal>).
<indexterm>
<primary>npm</primary><secondary>install --global</secondary>
</indexterm>
<indexterm>
<primary>install --global</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary>
</indexterm>
Il prend aussi bien la forme d&#8217;un petit outil que d&#8217;une application complète.
Dans tous les cas, le terminal est l&#8217;interface d&#8217;affichage.
<indexterm>
<primary>terminal</primary>
</indexterm></simpara>
<simpara>Node est particulièrement adapté à la création d&#8217;outils en ligne de commande
grâce à son modèle de gestion mémoire et son processus unique.
Il doit toutefois partager la mémoire et les ressources de la machine avec
les autres programmes&#160;– à nous de faire le choix de la frugalité.</simpara>
<simpara>Ces codes nous servent à outiller nos projets, à créer des programmes autonomes,
des interfaces visuelles dans un terminal et à automatiser ce qui doit l&#8217;être.
Leur distribution sur le registre&#160;<literal>npm</literal>
(<link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>) en facilite l&#8217;accès et le partage,
surtout si vous les avez bien <link linkend="tests">testés et documentés</link>.</simpara>
<section xml:id="start">
<title>Créer un script exécutable</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>script exécutable</secondary>
</indexterm>
<indexterm>
<primary>script exécutable</primary>
</indexterm></simpara>
<simpara>La première étape est de rendre exécutable votre script Node.
Le système d&#8217;exploitation ne le percevra plus comme un simple fichier texte,
mais bel et bien comme un programme, au même titre que l&#8217;exécutable&#160;<literal>npm</literal>.</simpara>
<simpara>Nous allons apprendre ce cheminement ensemble, jusqu&#8217;à rendre notre
code distribuable sous forme d&#8217;un <link xl:href="../chapter-05/index.xml#modules">module&#160;<literal>npm</literal></link>
(<link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>).</simpara>
<section xml:id="script">
<title>Au départ, un simple script&#160;Node</title>
<simpara><indexterm>
<primary>Node.js</primary><secondary>script</secondary>
</indexterm>
<indexterm>
<primary>script</primary>
</indexterm></simpara>
<simpara>Ce dont nous avons besoin pour démarrer, c&#8217;est d&#8217;un script Node que nous
pouvons appeler depuis notre terminal.
Nous allons placer l&#8217;exemple suivant dans le répertoire <literal>bin</literal>
(pour <emphasis>binary</emphasis> en anglais, c&#8217;est-à-dire <emphasis>exécutable</emphasis>).
Cela n&#8217;a pas d&#8217;incidence technique, mais c&#8217;est une pratique courante au sein
de la communauté Node pour repérer plus facilement les exécutables
sans ambiguïté.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>bin/time.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const date = new Date();                    <co xml:id="CO228-1"/>
const hour = date.getHours();
const minutes = date.getMinutes();

console.log(`Il est ${hour}h${minutes}.`);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO228-1">
<para>Crée un objet qui représente la <link xl:href="../chapter-03/index.xml#date">date</link> courante (<link xl:href="../chapter-03/index.xml">chapitre&#160;3</link>).</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal></title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-08
$ cd $(nodebook dir chapter-08)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les instructions d&#8217;installation pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<simpara>L&#8217;exécution du script avec Node retourne la date et l&#8217;heure courante&#160;– selon
l&#8217;horloge de l&#8217;ordinateur qui exécute le&#160;code.</simpara>
<screen>$ node bin/time.js
Il est 13h42.</screen>
</section>
<section xml:id="permissions">
<title>Modifier les permissions du&#160;script</title>
<simpara><indexterm>
<primary>système d&#8217;exploitation</primary><secondary>permission</secondary>
</indexterm>
<indexterm>
<primary>permission</primary>
</indexterm>
<indexterm>
<primary>système d&#8217;exploitation</primary><secondary>fichier exécutable</secondary>
</indexterm>
<indexterm>
<primary>fichier exécutable</primary>
</indexterm></simpara>
<simpara>Les systèmes d&#8217;exploitation modernes distinguent les fichiers ordinaires
des fichiers exécutables.
L&#8217;appel à un fichier exécutable se fait sans avoir à connaître quoi que ce soit
d&#8217;autre que son emplacement.</simpara>
<simpara>Essayons d&#8217;exécuter le script précédent pour nous en rendre compte.
Pour ce faire, nous allons l&#8217;invoquer seulement avec son chemin
– ici, son chemin relatif&#160;:
<indexterm>
<primary>erreur</primary><secondary>permission denied (script exécutable)</secondary>
</indexterm>
<indexterm>
<primary>permission denied (script exécutable)</primary>
</indexterm></simpara>
<screen>$ ./bin/time.js
sh: permission denied: ./bin/time.js</screen>
<simpara>Le système refuse de l&#8217;exécuter car les permissions du fichier ne sont pas
adéquates.
Comme nous ne les connaissons pas, utilisons la commande&#160;<literal>ls</literal> ainsi que
l&#8217;option&#160;<literal>-l</literal> pour afficher ses informations détaillées&#160;:</simpara>
<screen>$ ls -l bin/time.js
<emphasis role="marked">-rw-r--r--</emphasis> oncletom  staff  175 Jun 14 13:47 bin/time.js</screen>
<simpara>Cet affichage détaille les permissions du fichier, l&#8217;utilisateur et le groupe
propriétaire, son poids et enfin la date de dernière modification.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Déchiffrer</phrase> Lire les permissions Unix</title>
<simpara><indexterm>
<primary>système d&#8217;exploitation</primary><secondary>permission de fichier Unix</secondary>
</indexterm>
<indexterm>
<primary>permission de fichier Unix</primary>
</indexterm>
<indexterm>
<primary>chmod</primary>
</indexterm>
Le premier caractère spécifie le type (fichier, répertoire, lien symbolique) et
ensuite, ce sont des blocs de trois caractères qui décrivent les permissions de
l&#8217;utilisateur propriétaire, du groupe propriétaire et du reste des utilisateurs
du système d&#8217;exploitation.</simpara>
<simpara>Chaque bloc affiche <literal>r</literal>&#160;s&#8217;il est lisible, <literal>w</literal>&#160;s&#8217;il est modifiable et
<literal>x</literal>&#160;s&#8217;il est exécutable&#160;– c&#8217;est ce dernier qui nous intéresse.</simpara>
</note>
<simpara>Nous allons rendre le fichier exécutable&#160;(<literal>+x</literal>) pour notre utilisateur&#160;(<literal>u</literal>)
grâce à la commande&#160;<literal>chmod</literal>.
Je préfère utiliser cette notation car elle évite des effets de bord&#160;:</simpara>
<screen>$ chmod u+x bin/time.js</screen>
<simpara>L&#8217;utilisation renouvelée de la commande&#160;<literal>ls</literal> confirme que la
permission <emphasis>exécutable</emphasis> du fichier a été attribuée à l&#8217;utilisateur propriétaire
du fichier&#160;:
<indexterm>
<primary>système d&#8217;exploitation</primary><secondary>fichier exécutable</secondary>
</indexterm>
<indexterm>
<primary>fichier exécutable</primary>
</indexterm></simpara>
<screen>$ ls -l bin/time.js
-rwxr--r-- oncletom  staff  175 Jun 14 13:47 bin/time.js</screen>
<simpara>Nous sommes accueillis avec un nouveau message d&#8217;erreur lorsque nous
tentons d&#8217;exécuter le fichier <literal>bin/time.js</literal>&#160;:</simpara>
<screen>$ ./bin/time.js
./bin/time.js: line 1: use strict: command not found
./bin/time.js: line 3: syntax error near unexpected token `('</screen>
<simpara>La bonne nouvelle, c&#8217;est que le fichier est exécutable.
Néanmoins, il semblerait que le système d&#8217;exploitation ait du mal
à l&#8217;interpréter.</simpara>
</section>
<section xml:id="shebang">
<title>Préciser le contexte d&#8217;exécution (shebang)</title>
<simpara><indexterm>
<primary>système d&#8217;exploitation</primary><secondary>fichier exécutable</secondary><tertiary>shebang (#!)</tertiary>
</indexterm>
<indexterm>
<primary>fichier exécutable</primary><secondary>shebang (#!)</secondary>
</indexterm>
<indexterm>
<primary>shebang (#!)</primary>
</indexterm>
<indexterm>
<primary>shebang (!#)</primary>
</indexterm></simpara>
<simpara>Donner les permissions d&#8217;exécution à un fichier ne suffit donc pas.
Nous avons perdu un élément contextuel en supprimant l&#8217;appel à <literal>node</literal>
dans l&#8217;exécution du script.</simpara>
<caution>
<title><phrase role="RemarquePreTitre">Interopérabilité</phrase> Un fonctionnement différent sous Windows</title>
<simpara>Ce mécanisme n&#8217;est pas compris par le système d&#8217;exploitation Windows.
Ce dernier utilise une surcouche qui serait trop longue à expliquer dans
cet ouvrage.</simpara>
<simpara>Je recommande cependant de conserver le contexte d&#8217;exécution sous Windows
car l&#8217;exécutable&#160;<literal>npm</literal> gère l&#8217;interopérabilité pour nous.
Nous verrons comment dans la <link linkend="package.json">section suivante</link>.</simpara>
</caution>
<simpara>Le caractère&#160;<literal>+<emphasis role="marked">+</literal> placé en début de ligne d&#8217;un script système signale une ligne
placée en commentaire.
C&#8217;est l&#8217;équivalent de&#160;<literal>+//+</literal> en ECMAScript.
Il existe un cas spécial&#160;: lorsque le caractère&#160;<literal>+</emphasis>+</literal> est suivi d&#8217;un&#160;<literal>!</literal>
<emphasis>et</emphasis> lorsqu&#8217;il s&#8217;agit de la première ligne d&#8217;un fichier.
Le contenu du commentaire est alors utilisé par le système d&#8217;exploitation
pour déterminer quel programme utiliser pour interpréter le script.
C&#8217;est ce qu&#8217;on appelle <emphasis>shebang</emphasis>.</simpara>
<simpara>Modifions le script de la section précédente pour ajouter le <emphasis>shebang</emphasis>&#160;:</simpara>
<formalpara>
<title>bin/time-sh.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">#!/usr/bin/env node   <co xml:id="CO229-1"/>

'use strict';

const date = new Date();
...</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO229-1">
<para>Le programme <literal>/usr/bin/env</literal> est exécuté avec un argument,&#160;<literal>node</literal>.</para>
</callout>
</calloutlist>
<simpara>Le programme <literal>/usr/bin/env</literal> crée un nouvel environnement d&#8217;exécution
et le reste du script est passé au programme référencé en argument&#160;– ici,&#160;<literal>node</literal>.
Ce nouvel environnement dure le temps de l&#8217;exécution du script.</simpara>
<screen>$ ./bin/time-sh.js
Il est 13h42.</screen>
<simpara>Le dernier effort à faire pour distribuer ce script exécutable de manière
interopérable est de le lier à un
<link xl:href="../chapter-05/index.xml#package.json">module&#160;<literal>npm</literal></link>.</simpara>
</section>
<section xml:id="package.json">
<title>Faire le lien avec un module&#160;npm</title>
<simpara><indexterm>
<primary>package.json</primary><secondary>main</secondary>
</indexterm>
<indexterm>
<primary>main</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>bin</secondary>
</indexterm>
<indexterm>
<primary>bin</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>name</secondary>
</indexterm>
<indexterm>
<primary>name</primary>
</indexterm></simpara>
<simpara>Nous avons vu dans le <link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>
que Node utilisait la valeur <literal>main</literal> du fichier <literal>package.json</literal> pour déterminer
quel script inclure en faisant <literal>require('&lt;module&gt;')</literal> ou <literal>import &lt;module&gt; from '&lt;module&gt;'</literal>.</simpara>
<simpara>Le champ <literal>bin</literal> est une transposition de <literal>main</literal> pour associer un script
exécutable à notre module&#160;<literal>npm</literal>&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "name": "nodebook.chapter-08",
  "bin": "examples/bin/time-sh.js",
  "...": "..."
}</programlisting>
</para>
</formalpara>
<simpara>Le moyen le plus simple pour tester l&#8217;intégration de l&#8217;exécutable
avec notre système d&#8217;exploitation est de
l'<link xl:href="../chapter-05/index.xml#install.global">installer globalement</link>.
L&#8217;exécutable&#160;<literal>npm</literal> sait aussi installer un module à partir
d&#8217;un chemin vers un répertoire contenant un fichier <literal>package.json</literal>&#160;:
<indexterm>
<primary>npm</primary><secondary>install --global</secondary>
</indexterm>
<indexterm>
<primary>install --global</primary>
</indexterm></simpara>
<screen>$ npm install --global .</screen>
<simpara>Par défaut, l&#8217;exécutable est disponible sous le nom du module en question,
déclaré dans le champ <literal>name</literal> du fichier <literal>package.json</literal>&#160;:</simpara>
<screen>$ nodebook.chapter-08
Il est 13h42.</screen>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Un autre nom ou plusieurs exécutables</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>nommage du script</secondary>
</indexterm>
<indexterm>
<primary>nommage du script</primary>
</indexterm>
<indexterm>
<primary>package.json</primary><secondary>bin</secondary>
</indexterm>
<indexterm>
<primary>bin</primary>
</indexterm>
Le champ&#160;<literal>bin</literal> s&#8217;écrit sous forme d&#8217;un objet si vous souhaitez utiliser
un autre nom que celui du module&#160;<literal>npm</literal>.
La clé correspond au nom de l&#8217;exécutable tel qu&#8217;il sera utilisable sur le
système, tandis que la valeur contient le chemin d&#8217;accès au script exécutable.
Plusieurs exécutables sont alors installés si nous renseignons plusieurs
clés et valeurs.</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "name": "nodebook.chapter-08",
  "bin": {
    "<emphasis role="marked">quelle-heure-est-il</emphasis>": "examples/bin/time-sh.js"
  }
}</programlisting>
</para>
</formalpara>
<simpara>L&#8217;installation de l&#8217;exécutable <literal>examples/bin/time-sh.js</literal> se fera sous le nom <literal>quelle-heure-est-il</literal>.</simpara>
</tip>
</section>
</section>
<section xml:id="interactive">
<title>Du script au programme interactif</title>
<simpara>Nous avons appris à transformer un script Node ordinaire en un script
exécutable et prêt à <link xl:href="../chapter-05/index.xml#publish">publier sur un registre&#160;<literal>npm</literal></link>
(<link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>).</simpara>
<simpara>Cette section se focalise sur l&#8217;enrichissement d&#8217;un tel script pour en faire
une application plus complète, interactive et robuste, de quoi se constituer
un outillage sur mesure, partageable avec le reste de notre équipe et de
l&#8217;écosystème de modules <literal>npm</literal>.</simpara>
<section xml:id="args">
<title>Utiliser des arguments et des options</title>
<simpara><indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>process.argv</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>process.argv</secondary>
</indexterm>
<indexterm>
<primary>process.argv</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>argument</secondary>
</indexterm>
<indexterm>
<primary>argument</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary>
</indexterm>
<indexterm>
<primary>option</primary>
</indexterm></simpara>
<simpara>Nous avons vu comment récupérer les arguments d&#8217;un script Node
en découvrant le <link xl:href="../chapter-04/index.xml#process">module <literal>process</literal></link>
au <link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>.
Pour rappel, la variable <literal>process.argv</literal> est un tableau qui contient tous
les arguments passés au script principal&#160;:</simpara>
<formalpara>
<title>options/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const args = process.argv.slice(2);
console.log(args);</programlisting>
</para>
</formalpara>
<simpara>Cela donne le résultat suivant quand nous lançons ce script dans un terminal&#160;:</simpara>
<screen>$ node options/intro.js --country FR --fast
[ '--country', 'FR', '--fast' ]</screen>
<simpara>Ce tableau est un peu <quote>léger</quote> car il se contente de retourner les arguments,
sans compréhension de la logique recherchée.
C&#8217;est à nous de dire que&#160;<literal>FR</literal> est une valeur associée à <literal>--country</literal>.</simpara>
<simpara>Dans le contexte des outils en ligne de commandes,
les arguments et les options sont des paramètres qui sont interprétés
par le programme pour contextualiser son action.
Ils fonctionnent un peu comme des arguments de
<link xl:href="../chapter-03/index.xml#function">fonction</link> et des paramètres&#160;d&#8217;URL.</simpara>
<simpara>L&#8217;enjeu des arguments et des options est de les
<emphasis role="strong">transformer en une structure de données</emphasis> afin de les passer en tant
que paramètres d&#8217;une fonction.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Représentation des arguments et des options dans un outil en ligne de commandes, une fonction et une&#160;URL</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top">Options</entry>
<entry align="left" valign="top">Arguments</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Fonction</simpara></entry>
<entry align="left" valign="top"><simpara><literal>prog({country: 'FR', 'fast': true})</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>prog('FR', 'fast')</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Ligne de commande</simpara></entry>
<entry align="left" valign="top"><simpara><literal>prog --country FR --fast</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>prog FR fast</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>URL</simpara></entry>
<entry align="left" valign="top"><simpara><literal>prog/?country=FR&amp;fast=true</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>prog/FR/fast</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>argument</secondary>
</indexterm>
<indexterm>
<primary>argument</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary>
</indexterm>
<indexterm>
<primary>option</primary>
</indexterm></simpara>
<simpara>Nous allons utiliser le module&#160;<literal>npm</literal> <emphasis>minimist</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/minimist">npmjs.com/minimist</link></phrase>)
dans les exemples suivants.
<indexterm>
<primary>module npm</primary><secondary>minimist</secondary>
</indexterm>
<indexterm>
<primary>minimist</primary>
</indexterm>
Il prend en charge la complexité de l&#8217;interprétation de <literal>process.argv</literal> et je
le trouve robuste, bien testé et minimaliste.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Au commencement était getopt</title>
<simpara><indexterm>
<primary>système d&#8217;exploitation</primary><secondary>Unix</secondary><tertiary>getopt</tertiary>
</indexterm>
<indexterm>
<primary>Unix</primary><secondary>getopt</secondary>
</indexterm>
<indexterm>
<primary>getopt</primary>
</indexterm>
<literal>getopt</literal> (<phrase role="URL"><link xl:href="https://linux.die.net/man/3/getopt">linux.die.net/man/3/getopt</link></phrase>) est le programme Linux
qui sert à l&#8217;analyse des arguments et des options.
Les modules&#160;<literal>npm</literal> se calquent sur son modèle de fonctionnement.</simpara>
</note>
<simpara xml:id="args.options">Commençons par les <emphasis role="strong">options</emphasis> et voyons ce que <emphasis>minimist</emphasis> affiche&#160;:
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary>
</indexterm>
<indexterm>
<primary>option</primary>
</indexterm></simpara>
<screen>$ node options/parse.js --country FR --fast
{ _: [], country: 'FR', fast: true }  <co xml:id="CO230-1"/></screen>
<calloutlist>
<callout arearefs="CO230-1">
<para>La valeur&#160;<literal>_</literal> contient les <link linkend="args.arguments">arguments</link> d&#8217;exécution&#160;– nous y reviendrons.</para>
</callout>
</calloutlist>
<simpara>Les options sont adaptées pour <emphasis role="strong">nommer des paramètres facultatifs</emphasis> dont
l&#8217;ordre n&#8217;a pas d&#8217;importance, sous forme d&#8217;un <quote>interrupteur</quote> dans le cas
d&#8217;un booléen ou d&#8217;une valeur&#160;– nombre ou chaîne de caractères, peu importe.</simpara>
<formalpara>
<title>options/parse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const parse = require('minimist');
const args = parse(process.argv.slice(2));
console.log(args);</programlisting>
</para>
</formalpara>
<simpara>Les options s&#8217;écrivent sous une <emphasis role="strong">forme raccourcie</emphasis> (<emphasis>alias</emphasis>).
Un alias réduit l&#8217;encombrement visuel et est signalé avec un seul tiret
(au lieu de deux pour leur forme complète)&#160;:
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary><tertiary>forme raccourcie</tertiary>
</indexterm>
<indexterm>
<primary>option</primary><secondary>forme raccourcie</secondary>
</indexterm>
<indexterm>
<primary>forme raccourcie</primary>
</indexterm></simpara>
<screen>$ node options/alias.js <emphasis role="marked">-c</emphasis> FR
{ _: [], c: 'FR', country: 'FR' }</screen>
<formalpara>
<title>options/alias.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const parse = require('minimist');
const alias = { 'c': 'country' }; <co xml:id="CO231-1"/>

const args = parse(process.argv.slice(2), { alias });
console.log(args);                <co xml:id="CO231-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO231-1">
<para>Définition de l&#8217;option&#160;<literal>-c</literal> en tant qu&#8217;alias de <literal>--country</literal>.</para>
</callout>
<callout arearefs="CO231-2">
<para>L&#8217;affichage représente à la fois la valeur de l&#8217;option et celle de l&#8217;alias.</para>
</callout>
</calloutlist>
<simpara>La lecture est rendue plus difficile pour celui ou celle qui n&#8217;a pas consulté
le manuel d&#8217;utilisation en détail&#160;– ce qui est souvent le cas, surtout
pour des personnes qui découvrent un nouveau logiciel.</simpara>
<simpara>J&#8217;ai tendance à utiliser les alias pour les options principales ou importantes.
Je privilégie la forme longue dans les exemples et dans la documentation,
afin d&#8217;augmenter les chances de compréhension.</simpara>
<simpara>Les <emphasis role="strong">valeurs par défaut</emphasis> simplifient le paramétrage en rendant certaines
valeurs implicites&#160;:
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary><tertiary>valeur par défaut</tertiary>
</indexterm>
<indexterm>
<primary>option</primary><secondary>valeur par défaut</secondary>
</indexterm>
<indexterm>
<primary>valeur par défaut</primary>
</indexterm></simpara>
<screen>$ node options/defaults.js --fast
{ _: [], country: 'FR', fast: true } <co xml:id="CO232-1"/></screen>
<calloutlist>
<callout arearefs="CO232-1">
<para>La clé <literal>country</literal> affiche une valeur alors que nous ne l&#8217;avons pas spécifiée dans la commande.</para>
</callout>
</calloutlist>
<simpara>L&#8217;enjeu réside donc dans l&#8217;utilisation des valeurs à bon escient, pour
que le programme fasse ce qui est attendu d&#8217;un point de vue utilisateur.
Le paramétrage est similaire à celui des <emphasis>alias</emphasis>.</simpara>
<formalpara>
<title>options/defaults.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const parse = require('minimist');
const options = {defaults: {country: 'FR'}};      <co xml:id="CO233-1"/>

const args = parse(process.argv.slice(2), options);
console.log(args);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO233-1">
<para>L&#8217;option <literal>--country</literal> aura&#160;<literal>FR</literal> comme valeur par défaut.</para>
</callout>
</calloutlist>
<simpara>Un autre concept utile est celui des <emphasis role="strong">types</emphasis>.
Nous définissons explicitement nos attentes sur ce que telle ou telle option
est censée recevoir&#160;:
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary><tertiary>type</tertiary>
</indexterm>
<indexterm>
<primary>option</primary><secondary>type</secondary>
</indexterm>
<indexterm>
<primary>type</primary>
</indexterm></simpara>
<screen>$ node options/types.js --country --fast furious  <co xml:id="CO234-1"/>
{ _: [ 'furious' ], fast: true, country: '' }
$ node options/types.js --country FR
{ _: [], fast: false, country: 'FR' }             <co xml:id="CO234-2"/></screen>
<calloutlist>
<callout arearefs="CO234-1">
<para>Omission de la valeur de <literal>--option</literal> et tentative d&#8217;affectation de valeur à l&#8217;option booléenne <literal>--fast</literal>.</para>
</callout>
<callout arearefs="CO234-2">
<para>Une option vaut implicitement <literal>false</literal> par défaut quand elle est typée comme booléenne.</para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent renforce nos attentes&#160;: l&#8217;option <literal>--country</literal> sans valeur
ne sera pas comprise comme un booléen et, au contraire, l&#8217;option booléenne <literal>--fast</literal>
n&#8217;accepte pas de valeur&#160;– cette dernière est interprétée
comme un <link linkend="args.arguments">argument</link>.</simpara>
<formalpara>
<title>options/types.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const argv = process.argv.slice(2);
const parse = require('minimist');
const string = ['country'];
const boolean = ['fast'];

console.log(parse(argv, { string, boolean }));</programlisting>
</para>
</formalpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Synthèse des différentes formes d&#8217;options</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>--country FR</literal></simpara>
<simpara><literal>-c FR</literal></simpara>
</entry>
<entry>
<simpara>Un nombre ou une chaîne de caractères.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>--country FR UK</literal></simpara>
<simpara><literal>--country FR --country UK</literal></simpara>
</entry>
<entry>
<simpara>Un ou plusieurs nombre(s) ou chaîne(s) de caractères.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>--fast</literal></simpara>
<simpara><literal>--no-fast</literal></simpara>
<simpara><literal>-f</literal></simpara>
</entry>
<entry>
<simpara>Un booléen dont la valeur vaut <literal>true</literal>.
La valeur vaut <literal>false</literal> quand l&#8217;option débute avec&#160;<literal>no-</literal>.
C&#8217;est utile quand nous avons besoin d&#8217;activer ou de désactiver quelque chose.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>--verbose --verbose</literal></simpara>
<simpara><literal>-vv</literal></simpara>
</entry>
<entry>
<simpara>Certaines bibliothèques utilisent la répétition d&#8217;un booléen comme un compteur.
Dans ce cas, la notation <literal>--verbose --verbose</literal> correspond à la valeur <literal>{verbose: 2}</literal>.
C&#8217;est utile pour gérer la gradation d&#8217;une option comme la loquacité de l&#8217;affichage
des <emphasis>logs</emphasis>.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara xml:id="args.arguments"><indexterm>
<primary>application en ligne de commande</primary><secondary>argument</secondary>
</indexterm>
<indexterm>
<primary>argument</primary>
</indexterm>
Les arguments sont adaptés à des situations où <emphasis role="strong">des valeurs sont obligatoires</emphasis>,
n&#8217;ont pas besoin d&#8217;être nommées et pour en accepter un nombre arbitraire.
Si les valeurs ne correspondent pas à une liste, le positionnement des arguments
est important car il détermine leur identification.
Les arguments se prêtent particulièrement bien à exprimer
une liste de fichiers ou d&#8217;identifiants.</simpara>
<screen>$ node options/parse.js Europe/London
{ _: [ 'Europe/London' ] }</screen>
<simpara>Le paramètre passé en argument est l&#8217;expression d&#8217;un fuseau horaire
selon l&#8217;organisme de standardisation <emphasis>IANA</emphasis> (<phrase role="URL"><link xl:href="https://www.iana.org/time-zones">www.iana.org/time-zones</link></phrase>).
Une liste de fuseaux se trouve sur <phrase role="URL"><link xl:href="https://time.is/time_zones">time.is/time_zones</link></phrase>.
L&#8217;idée est d&#8217;afficher l&#8217;heure courante selon le fuseau horaire donné en argument.
C&#8217;est un paramètre obligatoire qu&#8217;il n&#8217;est pas nécessaire de nommer&#160;:</simpara>
<screen>$ node options/timezone.js Europe/London
22:29
$ node options/timezone.js America/New_York
17:29
$ node options/timezone.js Indian/Antananarivo  <co xml:id="CO235-1"/>
17/6/2018, 00:36</screen>
<calloutlist>
<callout arearefs="CO235-1">
<para>Fuseau horaire de l&#8217;île de Madagascar.</para>
</callout>
</calloutlist>
<simpara>Nous pouvons travailler avec les fuseaux horaires sans module additionnel,
grâce à la fonctionnalité de
<link xl:href="../chapter-03/index.xml#intl.datetimeformat">formatage internationalisé</link>
(<link xl:href="../chapter-03/index.xml">chapitre&#160;3</link>)&#160;:</simpara>
<formalpara>
<title>options/timezone.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const parse = require('minimist');
const args = parse(process.argv.slice(2));
const [timezone] = args._;                          <co xml:id="CO236-1"/>

if (!timezone) {
  throw Error('Merci d\'indiquer un fuseau horaire :-)');
}

const options = {
  timeZone: timezone,
  hour: 'numeric', minute: 'numeric', hour12: false <co xml:id="CO236-2"/>
};

const text = new Date().toLocaleDateString('fr-FR', options);
console.log(text);                                  <co xml:id="CO236-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO236-1">
<para>Nous affectons à <literal>timezone</literal> la première valeur du tableau d&#8217;arguments.</para>
</callout>
<callout arearefs="CO236-2">
<para>Configuration des préférences d&#8217;affichage de l&#8217;heure.</para>
</callout>
<callout arearefs="CO236-3">
<para>Utilisation de la méthode <literal>toLocaleDateString()</literal> avec nos options pour afficher la date courante.
<indexterm>
<primary>date</primary><secondary>toLocaleDateString()</secondary>
</indexterm>
<indexterm>
<primary>toLocaleDateString()</primary>
</indexterm></para>
</callout>
</calloutlist>
<simpara>Cet exemple se transformerait de la manière suivante si nous souhaitions
étendre l&#8217;affichage de l&#8217;heure à autant de fuseaux horaires que voulus&#160;:</simpara>
<screen>$ node options/timezones.js Europe/London America/New_York
Europe/London : 22:29
America/New_York : 17:29</screen>
<formalpara>
<title>options/timezones.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const parse = require('minimist');
const args = parse(process.argv.slice(2));
const timezones = args._;

const output = timezones.map(timeZone =&gt; {              <co xml:id="CO237-1"/>
  const date = new Date().toLocaleDateString('fr-FR', {
    timeZone,
    hour: 'numeric', minute: 'numeric', hour12: false
  });
  return `${timeZone} : ${date}`;                       <co xml:id="CO237-2"/>
});

console.log(output.join('\n'));                         <co xml:id="CO237-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO237-1">
<para>Nous constituons un nouveau tableau en itérant sur chacun des arguments.</para>
</callout>
<callout arearefs="CO237-2">
<para>Valeur de retour utilisée dans le nouveau tableau <literal>output</literal> (<link xl:href="../chapter-03/index.xml#array">chapitre&#160;3</link>).</para>
</callout>
<callout arearefs="CO237-3">
<para>Le tableau est joint pour constituer une chaîne de caractères sur plusieurs lignes.</para>
</callout>
</calloutlist>
<simpara>Ce script accepte un nombre indéfini d&#8217;arguments et son temps d&#8217;exécution
dépendra de la longueur de cette liste.
Elle n&#8217;a d&#8217;ailleurs pas forcément à être connue à l&#8217;avance et les valeurs
s&#8217;obtiennent dynamiquement, en les listant depuis un fichier, par exemple&#160;:</simpara>
<formalpara>
<title>options/zones.txt</title>
<para>
<screen>Europe/London
America/New_York</screen>
</para>
</formalpara>
<simpara>Le contenu du fichier s&#8217;obtient d&#8217;une traite en bash avec l&#8217;utilisation combinée
de capture de valeur (<literal>$(&#160;)</literal>) et de l&#8217;opérateur de redirection&#160;<literal>&lt;</literal>&#160;:</simpara>
<screen>$ node options/timezones.js $(&lt; options/zones.txt)
Europe/London : 22:29
America/New_York : 17:29</screen>
<simpara>C&#8217;est minimal, mais le fichier doit être lu
dans son intégralité et copié entièrement dans la mémoire de Node avant d&#8217;en
faire quelque chose.
Une approche plus économique est d&#8217;utiliser les
<link xl:href="../chapter-04/index.xml#stream">flux de données</link> (<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>.
Nous y reviendrons <link linkend="streaming">plus loin</link>.
<indexterm>
<primary>flux de données</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>argument</secondary>
</indexterm>
<indexterm>
<primary>argument</primary>
</indexterm></simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Synthèse des différentes formes d&#8217;arguments</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>prog [argument1, …]</literal></simpara>
</entry>
<entry>
<simpara>L&#8217;ordre de placement étant important, les arguments facultatifs doivent
être placés à droite des arguments obligatoires.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>prog sous-commande [argument1, …]</literal></simpara>
</entry>
<entry>
<simpara>C&#8217;est un cas particulier pour découper un programme complet en plusieurs
domaines d&#8217;action.
Le premier argument est alors utilisé comme identifiant d&#8217;action,
avec ses propres arguments et options.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara xml:id="args.subcommand"><indexterm>
<primary>application en ligne de commande</primary><secondary>sous-commande</secondary>
</indexterm>
<indexterm>
<primary>sous-commande</primary>
</indexterm>
L&#8217;utilisation des sous-commandes est la bienvenue pour organiser des actions
de manière indépendante, là où les choses deviendraient implicites et chaotiques
avec les options.
C&#8217;est l&#8217;équivalent d&#8217;une <emphasis>route</emphasis> dans une
<link xl:href="../chapter-07/index.xml">application web</link> (<link xl:href="../chapter-07/index.xml">chapitre&#160;7</link>).
<indexterm>
<primary>application web</primary><secondary>chemin d&#8217;accès (routing)</secondary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès (routing)</primary>
</indexterm></simpara>
<simpara>Les commandes suivantes illustrent la génération de résultats aléatoires.
Leur nature varie en fonction de la sous-commande employée&#160;;</simpara>
<screen>$ node options/random.js number
51151
$ node options/random.js words 2
streamline THX</screen>
<simpara>Nous associons une fonction différente à chaque sous-commande pour
renforcer cette notion d&#8217;actions indépendantes mais qui partagent
les options et arguments du script.</simpara>
<formalpara>
<title>options/random.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {random} = require('faker/locale/fr');
const args = require('minimist')(process.argv.slice(2));
const [action, ...actionArgs] = args._;               <co xml:id="CO238-1"/>

const number = () =&gt; random.number();                 <co xml:id="CO238-2"/>
const words = (count=5) =&gt; random.words(count);       <co xml:id="CO238-3"/>
const log = (result) =&gt; console.log(result);

if (action === 'words')  log(words(...actionArgs));   <co xml:id="CO238-4"/>
if (action === 'number') log(number());</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO238-1">
<para>L&#8217;action est le premier argument&#160;; le reste est accumulé dans le tableau <literal>actionArgs</literal>.</para>
</callout>
<callout arearefs="CO238-2">
<para>Fonction qui retourne un nombre aléatoire.</para>
</callout>
<callout arearefs="CO238-3">
<para>Fonction qui retourne un nombre défini de mots&#160;– 5&#160;par défaut.</para>
</callout>
<callout arearefs="CO238-4">
<para>Chaque argument qui suit la sous-commande correspondra ainsi à un argument de la fonction <literal>words</literal>.</para>
</callout>
</calloutlist>
<simpara>L'<link xl:href="../chapter-05/index.xml">exécutable&#160;<literal>npm</literal></link> est un exemple d&#8217;application
qui repose sur des sous-commandes pour déterminer quelle action exécuter
– installer un module, lancer une recherche ou encore initialiser un projet, entre autres.</simpara>
<simpara>Des applications en ligne de commande plus complexes soulèvent de nouveaux
besoins pour éviter les effets de bord et pour faciliter la modularité de
notre code&#160;: la <emphasis role="strong">validation</emphasis> des paramètres, une gestion plus fine des
sous-commandes, ainsi que la <emphasis role="strong">génération automatique de la documentation</emphasis>.
Nous y reviendrons dans la section <quote><link linkend="application">Utilisation d&#8217;un framework</link></quote>.</simpara>
</section>
<section xml:id="colours">
<title>Améliorer la lisibilité grâce aux couleurs</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>affichage en couleur</secondary>
</indexterm>
<indexterm>
<primary>affichage en couleur</primary>
</indexterm></simpara>
<simpara>Les couleurs vont nous aider à faire ressortir, différencier et distinguer
des éléments au sein d&#8217;une interface monochrome.</simpara>
<figure>
<title>Exemple d&#8217;utilisation de couleurs (ici, en niveaux de gris) dans un terminal</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cli-colors.png" contentwidth="60%"/>
</imageobject>
<textobject><phrase>cli colors</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;alternance de texte coloré et monochrome a été créée à partir du
script suivant&#160;:</simpara>
<formalpara>
<title>colors/ansi.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

console.log('\x1B[31mHello\x1B[0m World');</programlisting>
</para>
</formalpara>
<simpara>Par défaut, tout caractère envoyé vers la console est affiché.
Un mécanisme de <emphasis role="strong">commandes</emphasis> s&#8217;active en envoyant un caractère invisible
suivi d&#8217;une série de symboles.
Ces commandes changent la couleur du texte, sa couleur de fond, l&#8217;emphase,
le soulignement et même la position du curseur.</simpara>
<note>
<title><phrase role="RemarquePreTitre">ANSI</phrase> Structure d&#8217;une commande d&#8217;échappement</title>
<simpara><indexterm>
<primary>ANSI (commande d&#8217;échappement)</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>position du curseur</secondary>
</indexterm>
<indexterm>
<primary>position du curseur</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>échappement de caractère</secondary>
</indexterm>
<indexterm>
<primary>échappement de caractère</primary>
</indexterm>
Le caractère d'<emphasis>échappement</emphasis> est un caractère invisible, ici représenté
en hexadécimal par&#160;<literal>\x1B</literal>.
Il existe sur nos claviers d&#8217;ordinateur&#160;: c&#8217;est la fameuse touche
<keycap>ECHAP</keycap> ou <keycap>ESC</keycap>&#160;!<?asciidoc-br?>
Une commande suit le caractère&#160;<literal>[</literal> jusqu&#8217;au caractère&#160;<literal>m</literal>.
Les commandes composées utilisent le caractère&#160;<literal>;</literal> comme séparateur.</simpara>
<simpara>Pour résumer, une commande a la forme <literal>&lt;ECHAP&gt;[&lt;commande&gt;m</literal> ou
<literal>&lt;ECHAP&gt;[&lt;commande;commande;&#8230;&#8203;&gt;m</literal>.</simpara>
<simpara>Pour en savoir plus à propos de cette syntaxe, je vous recommande la lecture de
la page Wikipédia suivante&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://en.wikipedia.org/wiki/ANSI_escape_code">en.wikipedia.org/wiki/ANSI_escape_code</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara>Les huit couleurs principales et les huit couleurs vives s&#8217;affichent dans
à peu près tous les terminaux.
Cela vaut aussi pour leur utilisation en couleur de&#160;fond.</simpara>
<figure>
<title>Affichage des huit couleurs principales et des huit couleurs&#160;vives (ici, en niveaux de gris)</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cli-colors-all.png" contentwidth="60%"/>
</imageobject>
<textobject><phrase>cli colors all</phrase></textobject>
</mediaobject>
</figure>
<formalpara>
<title>colors/all.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const colors = [30, 31, 32, 33, 34, 35, 36, 37];
const brightColors = [90, 91, 92, 93, 94, 95, 96, 97];

[...colors, ...brightColors].forEach(code =&gt; {
  const color = `\x1B[${code}m`;            <co xml:id="CO239-1"/>
  const bgColor = `\x1B[30;${code + 10}m`;  <co xml:id="CO239-2"/>
  const reset = '\x1B[0m';                  <co xml:id="CO239-3"/>

  console.log(`${color}Hello ${bgColor}World${reset}`);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO239-1">
<para>Couleur d&#8217;affichage du texte.</para>
</callout>
<callout arearefs="CO239-2">
<para>Couleur de fond du texte tandis que les caractères sont en noir (<literal>30</literal>).</para>
</callout>
<callout arearefs="CO239-3">
<para>Remise à zéro de tous les styles.</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Compatibilité</phrase> Combien de couleurs dans mon terminal ?</title>
<simpara>Les terminaux proposent un nombre limité de couleurs, au moins&#160;8, en majorité&#160;256
et parfois plusieurs millions selon le logiciel utilisé.
Le programme Linux et macOS <literal>tput</literal> fournit des informations à propos
du terminal, dont le nombre de couleurs&#160;:</simpara>
<screen>$ tput colors
256</screen>
</note>
<simpara>Un autre type de commande sélectionne dans une palette de 256&#160;couleurs
mais aussi dans la <emphasis>palette&#160;RGB</emphasis> (<emphasis>Red Green Blue</emphasis>, <emphasis>Rouge Vert Bleu</emphasis>).
Ces commandes débutent par <literal>[38;5</literal> et <literal>[38;2</literal>, respectivement&#160;:
<indexterm>
<primary>RGB</primary>
</indexterm></simpara>
<formalpara>
<title>colors/palette.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

console.log('\x1B[38;5;213mHello\x1B[0m World');      <co xml:id="CO240-1"/>

console.log('\x1B[38;2;255;69;0mHello\x1B[0m World'); <co xml:id="CO240-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO240-1">
<para>Utilisation de la palette 8&#160;bits (256&#160;couleurs) - <literal>213</literal>&#160;est un rose clair.</para>
</callout>
<callout arearefs="CO240-2">
<para>Utilisation de la palette RGB (millions de couleurs)&#160;– <literal>255,69,0</literal> correspond au orange.</para>
</callout>
</calloutlist>
<simpara>Le module&#160;<literal>npm</literal> <emphasis>chalk</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/chalk">npmjs.com/chalk</link></phrase>) facilite l&#8217;utilisation
des codes ANSI en leur donnant des libellés mémorisables, en gérant
la compatibilité du nombre des couleurs supportées par le terminal voire
en désactivant les couleurs si nécessaire.
<indexterm>
<primary>module npm</primary><secondary>chalk</secondary>
</indexterm>
<indexterm>
<primary>chalk</primary>
</indexterm></simpara>
<formalpara>
<title>colors/chalk.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {magentaBright, green, bgRed} = require('chalk');

console.log(`${magentaBright('Hello')} World`); <co xml:id="CO241-1"/>
console.log(`${green.italic('Hello')} World`);  <co xml:id="CO241-2"/>
console.log(`${bgRed('Hello')} World`);         <co xml:id="CO241-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO241-1">
<para>Utilisation de la couleur vive magenta.</para>
</callout>
<callout arearefs="CO241-2">
<para>Utilisation de la couleur verte et de l&#8217;italique.</para>
</callout>
<callout arearefs="CO241-3">
<para>Utilisation de la couleur de fond rouge.</para>
</callout>
</calloutlist>
<simpara>Le module s&#8217;utilise aussi comme modèle avec les guillemets obliques,
ce qui augmente encore plus la clarté d&#8217;affichage.</simpara>
<formalpara>
<title>colors/chalk-literal.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const chalk = require('chalk');

console.log(chalk`{magentaBright Hello} World`);
console.log(chalk`{green.italic Hello} World`);
console.log(chalk`{bgRed Hello} World`);

console.log(chalk`{rgb(255,69,0) Hello} World`);</programlisting>
</para>
</formalpara>
</section>
<section xml:id="prompt">
<title>Demander une série d&#8217;informations</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>proposer un choix</secondary>
</indexterm>
<indexterm>
<primary>proposer un choix</primary>
</indexterm></simpara>
<simpara>Les programmes interactifs demandent des informations de manière
guidée à la personne utilisant l&#8217;exécutable,
en plus des <link linkend="arguments">arguments et options</link>.
Poser une série de questions est une manière d&#8217;accompagner une personne
dans une décision, d&#8217;exposer des choix dynamiques et de réduire les erreurs
dans la création de fichiers, par exemple.</simpara>
<screen>$ node prompt/intro.js
Quel est ton nom ? Thomas
Coucou Thomas !</screen>
<simpara>Le module <literal>readline</literal> proposé par Node est peu connu.
Il sert à transformer les <link xl:href="../chapter-04/index.xml#process.std">flux d&#8217;entrée et de sortie</link>
(<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>.
<indexterm>
<primary>module</primary><secondary>readline</secondary>
</indexterm>
<indexterm>
<primary>readline</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stdin</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stdin</secondary>
</indexterm>
<indexterm>
<primary>stdin</primary>
</indexterm>
Le système de curseur sait mettre en pause, revenir en arrière et effacer tout
ou une partie d&#8217;une ligne, entre autres.
Ce module sait aussi poser des questions&#160;(!)&#160;:</simpara>
<formalpara>
<title>prompt/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const readline = require('readline');
const rl = readline.createInterface({             <co xml:id="CO242-1"/>
  input: process.stdin,
  output: process.stdout
});

rl.question('Quel est ton nom ? ', (answer) =&gt; {  <co xml:id="CO242-2"/>
  console.log(`Coucou ${answer} !`);

  rl.close();                                     <co xml:id="CO242-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO242-1">
<para>Création de l&#8217;interface qui s&#8217;intercale entre les flux d&#8217;entrée et de sortie&#160;– ici, l&#8217;entrée et la sortie standard.</para>
</callout>
<callout arearefs="CO242-2">
<para>La fonction de rappel est invoquée dès que l&#8217;utilisateur a saisi sa réponse.</para>
</callout>
<callout arearefs="CO242-3">
<para>La méthode <literal>close()</literal> stoppe l&#8217;interface et rend la main au script&#160;– sans cet appel le script tournerait indéfiniment.</para>
</callout>
</calloutlist>
<simpara>Nous allons utiliser le module&#160;<literal>npm</literal> <emphasis>inquirer</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/inquirer">npmjs.com/inquirer</link></phrase>)
dans la suite de cette section.
<indexterm>
<primary>module npm</primary><secondary>inquirer</secondary>
</indexterm>
<indexterm>
<primary>inquirer</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>readline</secondary>
</indexterm>
<indexterm>
<primary>readline</primary>
</indexterm>
Il se base sur <literal>readline</literal> et <emphasis role="strong">simplifie grandement l&#8217;interactivité</emphasis>&#160;:
question, liste à choix unique navigable au clavier, boîte à cocher,
confirmation, validation de réponse et exécution conditionnelle, si telle ou
telle question contient les valeurs qui nous intéressent, par exemple.</simpara>
<simpara>L&#8217;exemple précédent peut être réécrit de la sorte&#160;:</simpara>
<formalpara>
<title>prompt/question.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {prompt} = require('inquirer');

const questions = [
  { name: 'name', message : 'Quel est ton nom ?' }, <co xml:id="CO243-1"/>
];

prompt(questions).then(answers =&gt; {                 <co xml:id="CO243-2"/>
  console.log(`Coucou ${answers.name} !`);          <co xml:id="CO243-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO243-1">
<para>La question est créée avec l&#8217;identifiant <literal>name</literal>&#160;– cela facilite l&#8217;utilisation des réponses.</para>
</callout>
<callout arearefs="CO243-2">
<para>Les résultats sont retournés dans une <link xl:href="../chapter-04/index.xml#promise">promesse</link>&#160;– c&#8217;est plus élégant et pratique à gérer qu&#8217;une fonction de rappel.
<indexterm>
<primary>promesse</primary>
</indexterm></para>
</callout>
<callout arearefs="CO243-3">
<para>Les valeurs des réponses s&#8217;obtiennent grâce à leurs identifiants.</para>
</callout>
</calloutlist>
<simpara>Ce n&#8217;est pas beaucoup plus compliqué de poser plusieurs questions et de les
personnaliser avec les réponses aux précédentes questions&#160;:</simpara>
<screen>$ node prompt/questions.js
? Quel est ton nom ? Thomas
? Quel âge as-tu Thomas ? 35
Thomas, tu as 35 ans.</screen>
<formalpara>
<title>prompt/questions.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {prompt} = require('inquirer');

const questions = [
  { name: 'name', message : 'Quel est ton nom ?' },
  { name: 'age', message: (answers) =&gt; {            <co xml:id="CO244-1"/>
    return `Quel âge as-tu ${answers.name} ?`;      <co xml:id="CO244-2"/>
  }}
];

prompt(questions).then(answers =&gt; {
  console.log(`${answers.name}, tu as ${answers.age} ans.`);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO244-1">
<para>La valeur de <literal>message</literal> peut être une fonction à laquelle est passée l&#8217;intégralité des réponses aux questions précédentes.</para>
</callout>
<callout arearefs="CO244-2">
<para>La valeur d&#8217;une réponse s&#8217;obtient au travers de son identifiant.</para>
</callout>
</calloutlist>
<simpara>Dans cet exemple, rien ne nous empêchait de saisir autre chose qu&#8217;un nombre
dans la question de l&#8217;âge.
C&#8217;est gênant, mais cela se résout à l&#8217;aide de la propriété de configuration <literal>validate</literal>.</simpara>
<screen>$ node prompt/validate.js
? Devine le nombre secret (entre 1 et 100): trois
&gt;&gt; Ce n'est pas un nombre
? Devine le nombre secret (entre 1 et 100): 10
&gt;&gt; C'est plus petit.
? Devine le nombre secret (entre 1 et 100): 5
Bravo, la réponse est 5 !</screen>
<simpara>Cette fonction est appelée à chaque tentative de réponse.
La question est inlassablement posée tant que la fonction <literal>validate</literal> retourne
autre chose que le booléen <literal>true</literal>&#160;:</simpara>
<formalpara>
<title>prompt/validate.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {prompt} = require('inquirer');
const secret_number = Math.floor(Math.random() * 100);

const questions = [
  { name: 'Devine le nombre secret (entre 1 et 100)',
    validate: (input, answers) =&gt; {
      if (Number.isNaN(parseInt(input))) {    <co xml:id="CO245-1"/>
        return 'Ce n\'est pas un nombre';     <co xml:id="CO245-2"/>
      }
      if (input &gt; secret_number) {
        return 'C\'est plus petit.';
      }
      if (input &lt; secret_number) {
        return 'C\'est plus grand.';
      }
      return true;                            <co xml:id="CO245-3"/>
  }}
];

prompt(questions).then(answers =&gt; {
  console.log(`Bravo, la réponse est ${secret_number} !`);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO245-1">
<para>Nous nous assurons que la valeur saisie est assimilée à un nombre.</para>
</callout>
<callout arearefs="CO245-2">
<para>Sinon, nous retournons un texte utilisé comme message d&#8217;erreur.</para>
</callout>
<callout arearefs="CO245-3">
<para>Cette condition remplie, le module passera à la question suivante.</para>
</callout>
</calloutlist>
<simpara>Enfin, deux modes de liste sont proposés par le module <emphasis>inquirer</emphasis>&#160;: <literal>list</literal>
et <literal>checkbox</literal>.
<indexterm>
<primary>application en ligne de commande</primary><secondary>case à cocher</secondary>
</indexterm>
<indexterm>
<primary>case à cocher</primary>
</indexterm>
Dans le premier cas, nous naviguons au clavier pour sélectionner une seule réponse.
Dans le deuxième, nous naviguons au clavier et sélectionnons les choix
à l&#8217;aide de la touche <guibutton>Espace</guibutton>&#160;:</simpara>
<screen>$ node prompt/list.js
? Tu fais quoi lundi ?
  Je quitte mon job
❯ Je pars en vacances
  J'apprends Node.js</screen>
<formalpara>
<title>prompt/list.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {prompt} = require('inquirer');

prompt([
  { name: 'type',
    type: 'list',                     <co xml:id="CO246-1"/>
    message : 'Tu fais quoi lundi ?',
    choices: [                        <co xml:id="CO246-2"/>
      'Je quitte mon job',
      'Je pars en vacances',
      'J\'apprends Node.js'
    ]
  }
]);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO246-1">
<para>Le champ <literal>type</literal> sert à expliciter la nature de la question&#160;– l&#8217;interface utilisateur s&#8217;adapte.</para>
</callout>
<callout arearefs="CO246-2">
<para>Le champ <literal>choices</literal> contient la liste des choix proposés à l&#8217;écran.</para>
</callout>
</calloutlist>
<simpara>Le potentiel de combinaison de ces éléments est vraiment intéressant.
Nous pourrions créer des quiz, des interfaces de recherche ou faciliter
la création de fichiers de configuration sans avoir à mettre les mains dans le
cambouis.
Les choix mis à disposition dans l&#8217;interface se créent aussi dynamiquement,
à partir de données obtenues depuis une ressource distante&#160;–
ils n&#8217;est pas nécessaire de les écrire en dur dans le code.</simpara>
</section>
<section xml:id="progress">
<title>Informer de la progression</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>barre de progression</secondary>
</indexterm>
<indexterm>
<primary>barre de progression</primary>
</indexterm></simpara>
<simpara>Je trouve que <emphasis role="strong">transmettre un feedback est un élément différenciant</emphasis> dans la
conception d&#8217;une application&#160;– qu&#8217;elle soit utilisée sur le Web ou dans un
terminal.
Informer de la progression est un des moyens d&#8217;y parvenir.
La progression concerne aussi bien l&#8217;indication du <emphasis role="strong">franchissement d&#8217;étapes</emphasis>
que celle de <emphasis role="strong">pourcentage d&#8217;accomplissement</emphasis> d&#8217;une tâche.</simpara>
<screen>$ node progress/intro.js
(•··) Un-deux-trois
(••·) Un-deux-trois
(•••) Un-deux-trois ☀️</screen>
<simpara>Cette approche est une première tentative d&#8217;indiquer une progression à travers
deux mécanismes&#160;: le passage du vide au plein en utilisant un caractère qui
véhicule ce changement et l&#8217;utilisation d&#8217;un signal visuel pour informer de
l&#8217;accomplissement de la tâche.</simpara>
<formalpara>
<title>progress/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

let counter = 0;

const display = (count) =&gt; {
  const progress = '•'.repeat(count).padEnd(3, '·');  <co xml:id="CO247-1"/>
  const sun = count === 3 ? '☀️' : '';

  console.log(`(${progress}) Un-deux-trois ${sun}`);  <co xml:id="CO247-2"/>
}

setInterval(() =&gt; {
  counter++;
  display(counter);                   <co xml:id="CO247-3"/>

  if (counter === 3) process.exit(0);
}, 1000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO247-3">
<para>Cette fonction affiche la progression toutes les secondes.</para>
</callout>
<callout arearefs="CO247-1">
<para>La méthode <literal>padEnd()</literal> (<link xl:href="../chapter-03/index.xml">chapitre&#160;3</link>) complète la barre de progression jusqu&#8217;à atteindre le nombre souhaité de points.</para>
</callout>
<callout arearefs="CO247-2">
<para>Le message de progression est paramétré pour afficher les éléments nécessaires&#160;– l&#8217;émoji <quote>soleil</quote> s&#8217;affiche quand le compteur atteint&#160;<literal>3</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Performance</phrase> La vitesse est toute relative</title>
<simpara>Une action qui est instantanée sur notre ordinateur peut durer
plusieurs secondes sur un autre, du fait de ressources moindres ou d&#8217;un accès
réseau moins favorable par exemple.</simpara>
</tip>
<simpara>La seule chose qu&#8217;il manque à mon goût est d&#8217;avoir un réel sens de progression,
c&#8217;est-à-dire une actualisation du contenu qui informe de l&#8217;avancement.</simpara>
<simpara>Nous avons parlé des commandes ANSI pour <link linkend="colors">changer les couleurs</link>.
<indexterm>
<primary>ANSI (commande d&#8217;échappement)</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>position du curseur</secondary>
</indexterm>
<indexterm>
<primary>position du curseur</primary>
</indexterm>
Il se trouve que certaines de ces commandes contrôlent aussi la <emphasis role="strong">position du curseur</emphasis>.
Ainsi, au lieu d&#8217;écrire à la suite, nous pouvons revenir en arrière et même
effacer le contenu d&#8217;une ligne.</simpara>
<figure>
<title>Pendant et après la progression d&#8217;un script&#160;Node</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cli-dots.png"/>
</imageobject>
<textobject><phrase>cli dots</phrase></textobject>
</mediaobject>
</figure>
<simpara>Il n&#8217;y a pas beaucoup de code à changer dans l&#8217;exemple précédent pour y parvenir.</simpara>
<formalpara>
<title>progress/dots.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

let counter = 0;

const display = (count) =&gt; {
  const dots = '•'.repeat(count).padEnd(3, '·');
  const sun = count === 3 ? '☀️' : '';
  const cmd = counter !== 1 ? '\x1B[1F' : '';           <co xml:id="CO248-1"/>

  console.log(`${cmd}(${dots}) Un-deux-trois ${sun}`);  <co xml:id="CO248-2"/>
}

setInterval(() =&gt; {
  counter++;
  display(counter);

  if (counter === 3) process.exit(0);
}, 1000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO248-1">
<para>La séquence d&#8217;échappement&#160;<literal>\x1B</literal> suivie de la commande&#160;<literal>1F</literal> déplace le curseur d&#8217;une ligne vers le haut.</para>
</callout>
<callout arearefs="CO248-2">
<para>Cette séquence est ajoutée en début de ligne remonter d&#8217;une ligne avant d&#8217;écrire la suite des caractères.</para>
</callout>
</calloutlist>
<table frame="all" rowsep="1" colsep="1">
<title>Liste de commandes ANSI pour déplacer le curseur</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="75*"/>
<thead>
<row>
<entry align="left" valign="top">Commande</entry>
<entry align="left" valign="top">Effet</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>&lt;n&gt;E</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Descend le curseur de <literal>&lt;n&gt;</literal>&#160;lignes.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>&lt;n&gt;F</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Remonte le curseur de <literal>&lt;n&gt;</literal>&#160;lignes.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>&lt;n&gt;K</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Efface le contenu de la ligne, jusqu&#8217;à la fin si <literal>&lt;n&gt;</literal>&#160;vaut&#160;<literal>0</literal>, jusqu&#8217;au début si <literal>&lt;n&gt;</literal>&#160;vaut&#160;<literal>1</literal>, entièrement si <literal>&lt;n&gt;</literal>&#160;vaut&#160;<literal>2</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>&lt;n&gt;A</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Déplace le curseur de <literal>&lt;n&gt;</literal>&#160;cases vers le haut.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>&lt;n&gt;B</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Déplace le curseur de <literal>&lt;n&gt;</literal>&#160;cases vers le bas.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>&lt;n&gt;C</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Déplace le curseur de <literal>&lt;n&gt;</literal>&#160;cases vers la droite.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>&lt;n&gt;D</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Déplace le curseur de <literal>&lt;n&gt;</literal>&#160;cases vers la gauche.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>À partir de là, nous sommes libres d&#8217;écrire nos propres barres de progression,
des indicateurs d&#8217;activité et de ne garder à l&#8217;écran que les informations
reflétant l&#8217;état actuel de l&#8217;application.</simpara>
<simpara>Deux modules <literal>npm</literal> simplifient la vie quand on n&#8217;apprécie pas trop les commandes ANSI&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>ansi-escapes</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/ansi-escapes">npmjs.com/ansi-escapes</link></phrase>) est l&#8217;équivalent
de <emphasis>chalk</emphasis> mais pour déplacer le curseur.
<indexterm>
<primary>module npm</primary><secondary>ansi-escapes</secondary>
</indexterm>
<indexterm>
<primary>ansi-escapes</primary>
</indexterm>
L&#8217;utilisation de méthodes nommées remplace celle des commandes&#160;ANSI.</simpara>
</listitem>
<listitem>
<simpara><emphasis>progress-string</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/progress-string">npmjs.com/progress-string</link></phrase>) met
à disposition une base pour afficher des barres de progression
avec un minimum d&#8217;options.
<indexterm>
<primary>module npm</primary><secondary>progress-string</secondary>
</indexterm>
<indexterm>
<primary>progress-string</primary>
</indexterm></simpara>
</listitem>
</itemizedlist>
<simpara>Terminons cette section avec l&#8217;utilisation d&#8217;un indicateur d&#8217;activité
et une information de réussite ou non de notre action.
Nous nous aidons du module&#160;<literal>npm</literal> <emphasis>ora</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/ora">npmjs.com/ora</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>ora</secondary>
</indexterm>
<indexterm>
<primary>ora</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>animation de caractères</secondary>
</indexterm>
<indexterm>
<primary>animation de caractères</primary>
</indexterm>
Il est rapide à configurer et propose une palette intéressante d&#8217;animations.</simpara>
<figure>
<title>Pendant et après la progression avec le module&#160;ora</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cli-spinner.png"/>
</imageobject>
<textobject><phrase>cli spinner</phrase></textobject>
</mediaobject>
</figure>
<simpara>Nous nous retrouvons à enlever encore quelques lignes par rapport aux
exemples précédents&#160;:</simpara>
<formalpara>
<title>progress/spinner.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const ora = require('ora');
let counter = 0;
const progress = ora().start('Un-deux-trois…'); <co xml:id="CO249-1"/>

setInterval(() =&gt; {
  counter++;
  if (counter === 3) {
    progress.succeed('Un-deux-trois… Soleil !');<co xml:id="CO249-2"/>
    process.exit(0);
  }
}, 1000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO249-1">
<para>Crée et affiche un indicateur de progression animé.</para>
</callout>
<callout arearefs="CO249-2">
<para>Nous indiquons que la tâche est terminée&#160;– l&#8217;animation est remplacée par une marque de succès.</para>
</callout>
</calloutlist>
<simpara>Nous pouvons aussi tirer parti du fonctionnement du module <emphasis>ora</emphasis> en reproduisant
l&#8217;animation et en personnalisant le symbole de réussite.</simpara>
<figure>
<title>Pendant et&#160;après l&#8217;indicateur de progression personnalisé avec le module&#160;ora</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cli-spinner-custom.png"/>
</imageobject>
<textobject><phrase>cli spinner custom</phrase></textobject>
</mediaobject>
</figure>
<formalpara>
<title>progress/spinner-custom.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const ora = require('ora');
const progress = ora({
  color: 'yellow',
  spinner: {
    frames: ['···', '•··', '••·', '•••'], <co xml:id="CO250-1"/>
    interval: 1000                        <co xml:id="CO250-2"/>
  }
});

progress.start('Un-deux-trois…');
setTimeout(() =&gt; {
  progress.stopAndPersist({ symbol: '☀️', text: 'Soleil !' });
  process.exit(0);
}, 4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO250-1">
<para>Création d&#8217;une série d&#8217;éléments d&#8217;animation.</para>
</callout>
<callout arearefs="CO250-2">
<para>Nous passons d&#8217;un index à l&#8217;autre à la vitesse exprimée en millisecondes.</para>
</callout>
</calloutlist>
</section>
<section xml:id="tables">
<title>Afficher des informations sous forme de tableau</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>tableau d&#8217;informations</secondary>
</indexterm>
<indexterm>
<primary>tableau d&#8217;informations</primary>
</indexterm></simpara>
<simpara>L&#8217;affichage d&#8217;informations sous forme de tableau est idéal pour
le <emphasis role="strong">confort de lecture de listes</emphasis>.
Notre lecture gagne en qualité quand notre vision s&#8217;attend
à retrouver une structure prédictible.</simpara>
<screen>$ node table.js
╔═════════════════════════════╤════════════════╗
║ Titre                       │ ISBN           ║
╟─────────────────────────────┼────────────────╢
║ Node.js                     │ 978-2212139938 ║
╟─────────────────────────────┼────────────────╢
║ Sass pour les web designers │ 978-2212141474 ║
╟─────────────────────────────┼────────────────╢
║ Design Systems              │ 978-3945749586 ║
╚═════════════════════════════╧════════════════╝</screen>
<simpara>Cet exemple est généré à l&#8217;aide du module&#160;<literal>npm</literal> <emphasis>table</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/table">npmjs.com/table</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>table</secondary>
</indexterm>
<indexterm>
<primary>table</primary>
</indexterm>
Il s&#8217;utilise sans configuration pour démarrer.
Il a la capacité de tronquer et limiter la largeur des colonnes, mais aussi
de gérer l&#8217;alignement des contenus dans les cellules.</simpara>
<formalpara>
<title>table.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {table} = require('table');
const {bold, green:g} = require('chalk');

const data = [
  [bold('Titre'), bold('ISBN')],      <co xml:id="CO251-1"/>
  [g('Node.js'), '978-2212139938'],   <co xml:id="CO251-2"/>
  [g('Sass pour les web designers'), '978-2212141474'],
  [g('Design Systems'), '978-3945749586'],
];

console.log(table(data));             <co xml:id="CO251-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO251-1">
<para>L&#8217;en-tête du tableau se distingue grâce à un style différent&#160;– du texte en gras.</para>
</callout>
<callout arearefs="CO251-2">
<para>Chaque ligne du tableau est elle-même un tableau, à deux colonnes dans ce cas de figure.</para>
</callout>
<callout arearefs="CO251-3">
<para>L&#8217;affichage se fait sur un simple appel de fonction&#160;– <emphasis>table</emphasis> calcule la largeur des colonnes pour&#160;nous.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Utilisation des couleurs</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>affichage en couleur</secondary>
</indexterm>
<indexterm>
<primary>affichage en couleur</primary>
</indexterm>
La lecture de la section <quote><link linkend="colors">améliorer la lisibilité grâce aux couleurs</link></quote>
vous aidera à améliorer la lisibilité de vos tableaux.</simpara>
</tip>
<simpara>Il est à noter que le module <emphasis>table</emphasis> expose aussi une interface en flux, pour ajouter
des lignes au fur et à mesure&#160;– par exemple en cas de lecture continue
ou sur un <link linkend="streaming">fichier volumineux</link>.</simpara>
</section>
<section xml:id="update">
<title>Inviter à mettre à jour le module</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>invite de mise à jour</secondary>
</indexterm>
<indexterm>
<primary>invite de mise à jour</primary>
</indexterm>
<indexterm>
<primary>npm</primary><secondary>outdated</secondary>
</indexterm>
<indexterm>
<primary>outdated</primary>
</indexterm></simpara>
<simpara>L&#8217;inconvénient d'<link xl:href="../chapter-05/index.xml#install.global">installer un module exécutable</link>,
c&#8217;est la difficulté de savoir si une mise à jour intéressante a été publiée
(probablement parce que je ne pense pas à lancer la commande <literal>npm outdated --global</literal>).
Il existe toutefois des moyens de signaler aux personnes qui utilisent votre
exécutable qu&#8217;une version plus récente existe.</simpara>
<simpara>J&#8217;aime l&#8217;approche minimaliste du module&#160;<literal>npm</literal> <emphasis>update-check</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/update-check">npmjs.com/update-check</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>update-check</secondary>
</indexterm>
<indexterm>
<primary>update-check</primary>
</indexterm>
Il compare le numéro de version passé en paramètre avec celui de la dernière
version de ce même module, sur le registre&#160;<literal>npm</literal>.</simpara>
<screen>$ node update/intro.js
{ latest: '0.10.0', fromCache: false }</screen>
<simpara>Dans cet exemple, <emphasis>update-check</emphasis> interroge le registre&#160;<literal>npm</literal>
pour déterminer la version la plus récente de <emphasis>nodebook</emphasis>.
<indexterm>
<primary>module npm</primary><secondary>nodebook</secondary>
</indexterm>
<indexterm>
<primary>nodebook</primary>
</indexterm>
S&#8217;il estime que la version installée localement est plus
ancienne, il retourne un objet avec le numéro de version à installer.</simpara>
<formalpara>
<title>update/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const check = require('update-check');
const pkg = { name: 'nodebook', version: '0.8.0' }; <co xml:id="CO252-1"/>

check(pkg)                              <co xml:id="CO252-2"/>
  .then(update =&gt; console.log(update)); <co xml:id="CO252-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO252-1">
<para>Les champs <literal>name</literal> et <literal>version</literal> suffisent à accomplir la comparaison.</para>
</callout>
<callout arearefs="CO252-2">
<para>Démarrage de la comparaison.</para>
</callout>
<callout arearefs="CO252-3">
<para>Un objet est retourné en cas de version plus récente&#160;; sinon, c&#8217;est la valeur&#160;<literal>null</literal>.</para>
</callout>
</calloutlist>
<simpara>En temps normal, c&#8217;est-à-dire dans le cas d&#8217;un module dont nous sommes à l&#8217;origine
et que nous publions sur le registre&#160;<literal>npm</literal>, nous aurions tendance
à utiliser le contenu du fichier <literal>package.json</literal> en argument de la fonction <literal>check</literal>.</simpara>
<simpara>Maintenant, nous pouvons présenter une information
plus digeste et actionnable à la personne qui utilise notre module&#160;:
<indexterm>
<primary>npm</primary><secondary>install --global</secondary>
</indexterm>
<indexterm>
<primary>install --global</primary>
</indexterm></simpara>
<screen>$ node update/cli.js
nodebook@0.10.0 est dispo
Tape 'npm install --global nodebook'</screen>
<formalpara>
<title>update/cli.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const parse = require('minimist');
const check = require('update-check');
const pkg = { name: 'nodebook', version: '0.8.0' };

const logError = ({message}) =&gt; console.error(message);
const checkUpdate = (update) =&gt; {
  if (update) {
    const {name} = pkg;
    console.log(`${name}@${update.latest} est dispo`);
    console.log(`Tape 'npm install -g ${pkg.name}'`);
  }
};

check(pkg)
  .then(checkUpdate, logError)      <co xml:id="CO253-1"/>
  .then(() =&gt; {
    const args = parse(process.argv.slice(2));
    // ...                          <co xml:id="CO253-2"/>
  });</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO253-1">
<para>Nous vérifions et affichons la mise à jour si nécessaire&#160;; nous gérons aussi une erreur (par exemple, réseau indisponible ou registre&#160;HS).</para>
</callout>
<callout arearefs="CO253-2">
<para>Nous gérons ensuite le code de notre exécutable&#160;– <emphasis>parsing</emphasis> des arguments, gestion des actions, etc.</para>
</callout>
</calloutlist>
<simpara>Les utilisatrices et utilisateurs sont informés de la disponibilité d&#8217;une mise
à jour dès qu&#8217;elles se servenrt du module exécutable en question.
La décision d&#8217;actualiser leur appartient toutefois.</simpara>
</section>
</section>
<section xml:id="tests">
<title>Vers un code réutilisable et testable</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>modularité</secondary>
</indexterm>
<indexterm>
<primary>modularité</primary>
</indexterm></simpara>
<simpara>Nous avons appris comment transformer un script Node en un programme paramétrable,
clair et agréable à utiliser.
Cette section a pour but de renforcer la robustesse de notre code.
Nous allons tout d&#8217;abord séparer ce qui est réutilisable de l&#8217;interface en ligne
de commande pour progressivement tester notre code, puis l&#8217;exécutable lui-même.</simpara>
<simpara>Notre progression va s&#8217;effectuer en transformant l&#8217;exemple <literal>options/timezone.js</literal>
de la section <quote><link linkend="args">Utiliser des arguments et des options</link></quote>.
<indexterm>
<primary>application en ligne de commande</primary><secondary>argument</secondary>
</indexterm>
<indexterm>
<primary>argument</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary>
</indexterm>
<indexterm>
<primary>option</primary>
</indexterm></simpara>
<formalpara>
<title>options/timezone.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const parse = require('minimist');
const args = parse(process.argv.slice(2));
const [timezone] = args._;                          <co xml:id="CO254-1"/>

if (!timezone) {
  throw Error('Merci d\'indiquer un fuseau horaire :-)');
}

const options = {
  timeZone: timezone,
  hour: 'numeric', minute: 'numeric', hour12: false <co xml:id="CO254-2"/>
};

const text = new Date().toLocaleDateString('fr-FR', options);
console.log(text);                                  <co xml:id="CO254-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO254-1">
<para>Nous affectons à <literal>timezone</literal> la première valeur du tableau d’arguments.</para>
</callout>
<callout arearefs="CO254-2">
<para>Configuration des préférences d&#8217;affichage de l&#8217;heure.</para>
</callout>
<callout arearefs="CO254-3">
<para>Utilisation de la méthode <literal>toLocaleDateString()</literal> avec nos options pour afficher la date courante.</para>
</callout>
</calloutlist>
<section xml:id="interface">
<title>Modulariser le code du fichier exécutable</title>
<simpara><indexterm>
<primary>refactoring</primary>
</indexterm></simpara>
<simpara>Un programme qui accepte beaucoup d&#8217;options devient de plus en plus
compliqué à maintenir car il est difficile de tester tous les cas
de figure à la main.</simpara>
<simpara>Un programme exécutable robuste est un script qui contient le moins possible de code
spécifique à la gestion de la ligne de commandes.
Pour ce faire, nous allons séparer la logique d&#8217;exécution en la plaçant dans une
fonction, dans un autre module.</simpara>
<formalpara>
<title>testing/01/cli.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const getTime = require('./lib.js');
const args = require('minimist')(process.argv.slice(2));
const [timezone] = args._;

console.log(getTime(timezone));  <co xml:id="CO255-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO255-1">
<para>Tout le code a été modularisé sous forme d&#8217;une seule fonction.</para>
</callout>
</calloutlist>
<simpara>Nous avons opéré un changement&#160;: l&#8217;utilisation de <literal>console.log()</literal> pour l&#8217;affichage
des résultats revient du côté de l&#8217;exécutable.</simpara>
<simpara>Notre code est portable s&#8217;il retourne un résultat et en laissant la
responsabilité de l&#8217;affichage au code le plus proche de l&#8217;utilisateur
– c&#8217;est le cas ici avec la fonction <literal>getTime()</literal>.</simpara>
<formalpara>
<title>testing/01/lib.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

module.exports = (timezone) =&gt; {
  if (!timezone) {
    throw Error('Merci d\'indiquer un fuseau horaire :-)');
  }

  const options = {
    timeZone: timezone,
    hour: 'numeric', minute: 'numeric', hour12: false
  };

  return new Date().toLocaleDateString('fr-FR', options);
}</programlisting>
</para>
</formalpara>
<simpara>Cette écriture facilite l&#8217;écriture de tests.
Justement, parlons-en.</simpara>
</section>
<section xml:id="tests.interface">
<title>Tester le code partagé</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm></simpara>
<simpara>L&#8217;écriture de tests nous aide à découvrir qu&#8217;une modification produit un résultat
différent de celui attendu.
Les tests documentent aussi les cas à la marge de notre code.
En général, dès qu&#8217;il y a un <literal>if &#8230;&#8203; else</literal>, cela implique d&#8217;écrire au moins une
nouvelle assertion.
<indexterm>
<primary>instruction</primary><secondary>if &#8230;&#8203; else</secondary>
</indexterm>
<indexterm>
<primary>if &#8230;&#8203; else</primary>
</indexterm></simpara>
<note>
<title><phrase role="RemarquePreTitre">Glossaire</phrase> Test et assertion</title>
<simpara>Une assertion est l&#8217;expression d&#8217;une attente quant au fonctionnement de notre code.</simpara>
<simpara>Un test s&#8217;applique à une fonction et utilise une à plusieurs assertion(s) pour
couvrir le spectre de ses fonctionnalités.</simpara>
</note>
<simpara>Pour des besoins simples, j&#8217;utilise le module&#160;<literal>npm</literal> <emphasis>tape</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/tape">npmjs.com/tape</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>tape</secondary>
</indexterm>
<indexterm>
<primary>tape</primary>
</indexterm>
Il gère l&#8217;exécution des tests et il fournit quelques méthodes pour exprimer
nos attentes&#160;– les assertions.
<indexterm>
<primary>application en ligne de commande</primary><secondary>test</secondary><tertiary>assertion</tertiary>
</indexterm>
<indexterm>
<primary>test</primary><secondary>assertion</secondary>
</indexterm>
<indexterm>
<primary>assertion</primary>
</indexterm></simpara>
<screen>$ node testing/01/lib.test.js
TAP version 13
# getTime
ok 1 should be truthy
ok 2 should throw

1..2
# tests 2
# pass  2

# ok</screen>
<simpara>Dans ce cas précis, j&#8217;ai écrit deux assertions qui illustrent les différents
cas de figure représentés dans le fichier <literal>01/lib.js</literal>
– quand l&#8217;erreur est provoquée et quand le résultat est retourné&#160;:</simpara>
<formalpara>
<title>testing/01/lib.test.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const test = require('tape');
const getTime = require('./lib.js');

test('getTime', t =&gt; {                          <co xml:id="CO256-1"/>
  t.plan(2);                                    <co xml:id="CO256-2"/>

  t.ok(getTime('Europe/Paris'));                <co xml:id="CO256-3"/>
  t.throws(() =&gt; getTime(), /fuseau horaire/);  <co xml:id="CO256-4"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO256-1">
<para>Création d&#8217;un test&#160;– le paramètre&#160;<literal>t</literal> contient les méthodes d&#8217;assertion.</para>
</callout>
<callout arearefs="CO256-2">
<para>La méthode <literal>t.plan()</literal> spécifie le nombre d&#8217;assertions attendues&#160;– si ce nombre n&#8217;est pas atteint, <emphasis>tape</emphasis> considère qu&#8217;il y a un problème.</para>
</callout>
<callout arearefs="CO256-3">
<para>Assertion qui teste que la fonction <literal>getTime()</literal> retourne bien un résultat.</para>
</callout>
<callout arearefs="CO256-4">
<para>Assertion qui teste que la fonction <literal>getTime()</literal> provoque une erreur si aucun argument n&#8217;est passé.</para>
</callout>
</calloutlist>
<simpara>Nous sommes parés à toute éventualité, mais en y réfléchissant, le module <literal>cli.js</literal>
ne gère pas vraiment le cas où aucun argument n&#8217;est transmis.</simpara>
<screen>$ node testing/01/cli.js
/…/chapter-08/examples/testing/01/lib.js:5
    throw Error('Merci d\'indiquer un fuseau horaire :-)');
    ^

Error: Merci d'indiquer un fuseau horaire :-)
    at module.exports (/…/examples/testing/01/lib.js:5:11)
    at Object.&lt;anonymous&gt; (/…/examples/testing/01/cli.js:7:13)
    at Module._compile (internal/modules/cjs/loader.js:702:30)
    at Object.Module._extensions..js (…/cjs/loader.js:713:10)
    …</screen>
<simpara>Je trouve peu élégant d&#8217;être accueilli·e avec une trace d&#8217;erreur comme celle-ci.
L&#8217;erreur mériterait d&#8217;être présentée en contexte, celui de notre utilisation
et non celui des rouages internes de&#160;Node.</simpara>
</section>
<section xml:id="display">
<title>Présenter les messages en contexte</title>
<simpara>La présentation des messages de réussite et d&#8217;erreur nécessite d&#8217;être à l&#8217;écoute
des signaux envoyés par notre code afin de le restituer de manière adaptée.</simpara>
<screen>$ node testing/02/cli.js
Merci d'indiquer un fuseau horaire :-)</screen>
<simpara>Afin de parvenir à ce résultat, j&#8217;ai opté pour l&#8217;utilisation de
<link xl:href="../chapter-03/index.xml#promise">promesse</link> (<link xl:href="../chapter-03/index.xml">chapitre&#160;3</link>).
<indexterm>
<primary>promesse</primary>
</indexterm>
Je trouve cette méthode plus élégante car nous gérons le résultat et le message
d&#8217;erreur d&#8217;une manière visuellement similaire, mais séparée.</simpara>
<formalpara>
<title>testing/02/cli.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const getTime = require('./lib.js');
const args = require('minimist')(process.argv.slice(2));
const [timezone] = args._;

getTime(timezone)
  .then(time =&gt; console.log(time))  <co xml:id="CO257-1"/>
  .catch(error =&gt; {
    console.error(error.message);   <co xml:id="CO257-2"/>
    process.exit(1);                <co xml:id="CO257-3"/>
  });</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO257-1">
<para>Le résultat est affiché en cas de succès.</para>
</callout>
<callout arearefs="CO257-2">
<para>En cas d&#8217;erreur produite dans la fonction <literal>getTime()</literal>, nous affichons le message en question.</para>
</callout>
<callout arearefs="CO257-3">
<para>Nous arrêtons le programme avec un code d&#8217;erreur pour la signaler au niveau du système d&#8217;exploitation.</para>
</callout>
</calloutlist>
<simpara>Ce changement n&#8217;implique pas de bouleversement dans notre code.
L&#8217;appel à <literal>throw</literal> est remplacé par <literal>reject()</literal> et le <literal>return</literal> se transforme en <literal>resolve()</literal>.</simpara>
<formalpara>
<title>testing/02/lib.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

module.exports = (timezone) =&gt; {
  return new Promise((resolve, reject) =&gt; { <co xml:id="CO258-1"/>
    if (!timezone) {
      reject(Error('Merci d\'indiquer un fuseau horaire :-)'));
    }

    const options = {
      timeZone: timezone,
      hour: 'numeric', minute: 'numeric', hour12: false
    };

    resolve(new Date().toLocaleDateString('fr-FR', options));
  });
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO258-1">
<para>Nous englobons le contenu entier de la fonction dans une promesse&#160;– en cas de problème à un endroit imprévu, il sera remonté et pris en charge de la même manière que notre rejet explicite.</para>
</callout>
</calloutlist>
<simpara>Nous n&#8217;avons plus à modifier le fichier <literal>cli.js</literal> pour gérer de nouveaux messages
d&#8217;erreur.
Nous pourrions mieux gérer certains cas de figure, par exemple quand
un fuseau horaire inconnu est spécifié.</simpara>
<screen>$ node testing/02/cli.js Brexit/London
Unsupported time zone specified Brexit/London</screen>
</section>
<section xml:id="tests.cli">
<title>Tester l&#8217;exécutable</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>test</secondary>
</indexterm>
<indexterm>
<primary>test</primary>
</indexterm>
<indexterm>
<primary>Node.js</primary><secondary>script exécutable</secondary>
</indexterm>
<indexterm>
<primary>script exécutable</primary>
</indexterm></simpara>
<simpara>Tester l&#8217;exécutable est un moyen de vérifier que les câblages entre notre
exécutable et notre mode Node sont bien faits.
L&#8217;idée n&#8217;est pas de tester à nouveau les mêmes aspects du code, mais bel et
bien de nous assurer que les conditions d&#8217;utilisation du programme sont remplies.</simpara>
<screen>$ node testing/02/cli.test.js
TAP version 13
# cli w/o arg
ok 1 exit code matched
# cli w/ arg
ok 2 matched /\d{2}:\d{2}/
ok 3 exit code matched

1..3
# tests 3
# pass  3

# ok</screen>
<simpara>Nous avons à nouveau recours au module <emphasis>tape</emphasis>.
Cette fois-ci, nous l&#8217;accompagnons d&#8217;un autre module,
<emphasis>tape-spawn</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/tape-spawn">npmjs.com/tape-spawn</link></phrase>).
<indexterm>
<primary>module npm</primary><secondary>tape</secondary>
</indexterm>
<indexterm>
<primary>tape</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>tape-spawn</secondary>
</indexterm>
<indexterm>
<primary>tape-spawn</primary>
</indexterm>
Ce dernier intègre à <emphasis>tape</emphasis> le test de processus externes.
En l&#8217;occurrence ici, cela concerne nos exécutables en ligne de commandes.</simpara>
<formalpara>
<title>testing/02/cli.test.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const test = require('tape');
const spawn = require('tape-spawn');
const opts = {cwd: __dirname};

test('cli w/o arg', t =&gt; {
  const proc = spawn(t, './cli.js', opts);  <co xml:id="CO259-1"/>
  proc.exitCode(1);                         <co xml:id="CO259-2"/>
  proc.end();
});

test('cli w/ arg', t =&gt; {
  const proc = spawn(t, './cli.js Europe/Paris', opts);
  proc.exitCode(0);
  proc.stdout.match(/\d{2}:\d{2}/);         <co xml:id="CO259-3"/>
  proc.end();
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO259-1">
<para>Nous démarrons un nouveau processus&#160;– ici, nous spécifions que le chemin d&#8217;accès est relatif au répertoire du script de tests.</para>
</callout>
<callout arearefs="CO259-2">
<para>Nous testons le code de sortie du programme&#160;– c&#8217;est cohérent avec l&#8217;invocation de <literal>process.exit(1)</literal> dans <literal>cli.js</literal>.</para>
</callout>
<callout arearefs="CO259-3">
<para>En cas de réussite, nous avons bien une heure qui s&#8217;affiche dans la sortie standard.</para>
</callout>
</calloutlist>
<simpara>L&#8217;utilisation conjointe des tests unitaires et de ceux de l&#8217;exécutable
nous permet de gagner en confiance dans la robustesse de notre code,
de déceler de nouveaux cas à la marge et de nous rendre compte de certaines
incohérences d&#8217;interface utilisateur.</simpara>
</section>
<section xml:id="doc">
<title>Documenter notre programme</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary><tertiary>--help</tertiary>
</indexterm>
<indexterm>
<primary>option</primary><secondary>--help</secondary>
</indexterm>
<indexterm>
<primary>--help</primary>
</indexterm></simpara>
<simpara>La documentation d&#8217;un logiciel est aussi importante que son code.
C&#8217;est le premier élément qui donne une idée de la simplicité ou de
la complexité d&#8217;utilisation d&#8217;un logiciel, de ce qu&#8217;il est possible de faire avec
et des concepts qui s&#8217;y rapportent.</simpara>
<simpara>Le premier endroit où documenter son application est dans l&#8217;exécutable lui-même,
avec l&#8217;option <literal>--help</literal>&#160;– ou son raccourci&#160;<literal>-h</literal>.
C&#8217;est une convention pour afficher une aide synthétique, rapide d&#8217;accès
et facile à comprendre.</simpara>
<screen>$ node application/intro.js --help

Options:
  --help     Affiche de l'aide             [booléen]
  --version  Affiche le numéro de version  [booléen]
  --utc, -u                                [booléen]</screen>
<simpara>L&#8217;aide proposée ici est minimale et n&#8217;indique que trop peu l&#8217;intention du programme.
Nous n&#8217;avons aucune idée de l&#8217;effet de telle ou telle option,
du résultat qui va se produire ou encore des valeurs acceptées par le programme.</simpara>
<simpara>Une aide qui me rassure et m&#8217;informe ressemble plutôt à ce qui suit&#160;:</simpara>
<screen>$ node help/time.js --help
Affiche l'heure courante d'ici ou d'ailleurs.

Commandes:
  time.js timezones  Affiche les fuseaux horaires IANA.

Options:
  --version   Affiche le numéro de version            [booléen]
  --utc       Utilise le fuseau horaire universel.    [booléen]
  --timezone  Précise le fuseau horaire au format IANA.
  --help      Affiche de l'aide                       [booléen]

Exemples:
  time.js --utc                    Heure universelle.
  time.js --timezone=Europe/Lisbon Heure de Lisbonne.</screen>
<simpara>Elle véhicule l'<emphasis role="strong">intention du programme</emphasis>, des exemples qui précisent un concept
que je ne connais pas (fuseau horaire IANA) et j&#8217;y découvre même
l&#8217;existence d&#8217;une commande qui liste ces fameux fuseaux horaires.
Au premier coup d&#8217;œil, je ne décèle pas d&#8217;impasse et j&#8217;y vois plutôt une
invitation à essayer sans appréhension.</simpara>
<simpara>Cette aide a été générée automatiquement en utilisant le <link linkend="application">framework</link>
<emphasis>yargs</emphasis>&#160;– nous en parlerons dans la section suivante.
<indexterm>
<primary>module npm</primary><secondary>yargs</secondary>
</indexterm>
<indexterm>
<primary>yargs</primary>
</indexterm>
Ses méthodes <literal>.usage()</literal> et <literal>.example()</literal> ainsi que la propriété <literal>description</literal> de chaque
option suffisent à constituer un affichage clair et informatif.</simpara>
<formalpara>
<title>help/time.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const args = require('yargs')
  .usage('Affiche l\'heure courante d\'ici ou d\'ailleurs.')
  .example('$0 --utc', 'Heure universelle.')            <co xml:id="CO260-1"/>
  .example('$0 --timezone=Europe/Lisbon', 'Heure de Lisbonne.')
  .command('timezones', 'Affiche les fuseaux horaires IANA.')
  .option('utc', {
    type: 'boolean',                                    <co xml:id="CO260-2"/>
    description: 'Utilise le fuseau horaire universel.' <co xml:id="CO260-3"/>
  })
  .option('timezone', {
    description: 'Précise le fuseau horaire au format IANA.'
  })
  .locale('fr')
  .argv;

console.log(args);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO260-1">
<para>Documente un exemple d&#8217;utilisation et une description qui précisent l&#8217;intention.</para>
</callout>
<callout arearefs="CO260-2">
<para>Le type de l&#8217;option est rendu explicite lors de l&#8217;affichage de la documentation.</para>
</callout>
<callout arearefs="CO260-3">
<para>La description précise l&#8217;intention de l&#8217;option pour mieux comprendre son effet si elle est activée.</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Alternative</phrase> module&#160;npm help-version</title>
<simpara><indexterm>
<primary>module npm</primary><secondary>help-version</secondary>
</indexterm>
<indexterm>
<primary>help-version</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary><tertiary>--help</tertiary>
</indexterm>
<indexterm>
<primary>option</primary><secondary>--help</secondary>
</indexterm>
<indexterm>
<primary>--help</primary>
</indexterm>
Le module <emphasis>help-version</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/help-version">npmjs.com/help-version</link></phrase>) gère l&#8217;appel
à l&#8217;option <literal>--help</literal> et il est indépendant de tout autre module.</simpara>
<simpara>Le seul risque est d&#8217;avoir une documentation qui est désynchronisée du
fonctionnement du programme.</simpara>
</note>
<simpara>Un autre lieu courant pour documenter un projet est le <literal>README</literal>.
<indexterm>
<primary>README</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>documentation</secondary>
</indexterm>
<indexterm>
<primary>documentation</primary>
</indexterm>
C&#8217;est un fichier texte souvent affiché en premier sur la page d&#8217;accueil
d&#8217;un projet logiciel.
Sa mise en forme s&#8217;améliore avec l&#8217;utilisation d&#8217;une syntaxe de balisage léger
comme <emphasis>Markdown</emphasis>.</simpara>
<simpara>Ce type de fichier est très largement suffisant pour documenter un projet.
C&#8217;est l&#8217;équivalent de l&#8217;option <literal>--help</literal>, à l&#8217;échelle de l&#8217;application&#160;–
son intention générale, sa compatibilité de version avec Node, comment l&#8217;installer,
où poser des questions et peut-être même davantage d&#8217;exemples pour mieux comprendre
ce qui ne tiendrait pas dans l&#8217;option <literal>--help</literal>.</simpara>
<simpara>Je trouve que le <literal>README</literal> est un excellent endroit pour reporter
l&#8217;affichage de la commande <literal>--help</literal>.</simpara>
<figure>
<title>Présentation de la documentation d&#8217;un exécutable dans un&#160;README</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/documentation-readme.png"/>
</imageobject>
<textobject><phrase>documentation readme</phrase></textobject>
</mediaobject>
</figure>
<simpara>Nul besoin de faire compliqué pour véhiculer autant d&#8217;informations essentielles
avec un minimum d&#8217;efforts.
Démarrer un projet en écrivant cette documentation est un excellent moyen pour
travailler à la clarification de ses idées et pour commencer à imaginer la
forme que va prendre l'<link linkend="tests">écriture des&#160;tests</link>.</simpara>
</section>
</section>
<section xml:id="advanced">
<title>Pour aller plus loin</title>
<simpara>Dans les précédentes sections, nous avons vu des composantes essentielles
pour créer un programme exécutable clair et fonctionnel.
Cette dernière section va se focaliser sur des concepts qui structurent,
simplifient et rapprochent un exécutable en ligne de commande d&#8217;une application
web ou <emphasis>front-end</emphasis>.</simpara>
<section xml:id="application">
<title>Utilisation d&#8217;un framework d&#8217;application en ligne de commande</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>framework</secondary>
</indexterm>
<indexterm>
<primary>framework</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>yargs</secondary>
</indexterm>
<indexterm>
<primary>yargs</primary>
</indexterm></simpara>
<simpara>Une application en ligne de commande dont le nombre de lignes de code augmente
devient de <emphasis role="strong">plus en plus complexe à maintenir</emphasis>.
Potentiellement, l&#8217;expérience d&#8217;utilisation se dégrade aussi.
Il faut continuer à <emphasis role="strong">prendre soin de la cohérence des arguments</emphasis>, des options et
de valider que ce sont les valeurs attendues.
Cette complexité appelle aussi à afficher une aide à la demande ou de manière
contextuelle, par exemple au niveau de la sous-commande.</simpara>
<simpara>Des modules&#160;<literal>npm</literal> comme <emphasis>yargs</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/yargs">npmjs.com/yargs</link></phrase>) aident à
structurer la création d&#8217;applications en ligne de commande en intégrant
la majorité des fonctionnalités vues dans la section
<quote><link linkend="interactive">Du script au programme interactif</link></quote>.
La génération de l&#8217;aide, le <emphasis>parsing</emphasis> d&#8217;arguments et d&#8217;options et leur validation
sont connectés ensemble, de manière transparente.</simpara>
<simpara>Ce genre de module est intéressant à utiliser quand l&#8217;assemblage d&#8217;autres
modules indépendants rend le <link linkend="interface">programme trop fragile</link> et
<link linkend="tests">trop compliqué à tester</link>.</simpara>
<screen>$ node application/intro.js --help
Options:
  --version  Affiche le numéro de version      [booléen]
  --utc, -u                                    [booléen]
  --help     Affiche de l'aide                 [booléen]</screen>
<simpara>La commande d&#8217;aide est générée automatiquement à partir de la
définition d&#8217;arguments et d&#8217;options.</simpara>
<screen>$ node application/intro.js
{ _: [],
  version: false,
  utc: false,
  u: false,
  help: false,
  '$0': 'application/intro.js' }</screen>
<formalpara>
<title>application/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const yargs = require('yargs');
const args = yargs
  .option('utc', {    <co xml:id="CO261-1"/>
    alias: 'u',
    type: 'boolean',
  })
  .locale('fr')       <co xml:id="CO261-2"/>
  .argv;              <co xml:id="CO261-3"/>

console.log(args);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO261-1">
<para>Création de l&#8217;option <literal>--utc</literal> avec l&#8217;alias&#160;<literal>-u</literal>, de type booléen.</para>
</callout>
<callout arearefs="CO261-2">
<para>Les messages générés par l&#8217;application seront en français&#160;– sans cette option, la langue s&#8217;adapte à celle du système d&#8217;exploitation.</para>
</callout>
<callout arearefs="CO261-3">
<para>Applique les règles précédentes aux éléments contenus dans <literal>process.argv</literal> et retourne un résultat sous forme d&#8217;objet.</para>
</callout>
</calloutlist>
<simpara>Le mécanisme de coercition définit la règle de transformation d&#8217;une option
vers une autre représentation, plus pratique à utiliser.
C&#8217;est le cas des dates par exemple&#160;: nous les recevons sous forme de chaîne de
caractères alors qu&#8217;il serait plus facile de travailler avec des
<link xl:href="../chapter-03/index.xml#date">objets&#160;<literal>Date</literal></link>
(<link xl:href="../chapter-03/index.xml">chapitre&#160;3</link>).
<indexterm>
<primary>date</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary>
</indexterm>
<indexterm>
<primary>option</primary>
</indexterm></simpara>
<screen>$ node application/coerce.js --help
Options:
  --help     Affiche de l'aide               [booléen]
  --version  Affiche le numéro de version    [booléen]
  --date               [chaîne de caractère] [défaut: now]</screen>
<simpara>Par défaut, la date est calée sur l&#8217;instant présent&#160;:</simpara>
<screen>$ node application/coerce.js
2018-06-21T08:41:23.091Z</screen>
<simpara>Une date peut même être incomplète&#160;:</simpara>
<screen>$ node application/coerce.js --date 2018-03-24
2018-03-24T00:00:00.000Z</screen>
<formalpara>
<title>application/coerce.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const yargs = require('yargs');

const args = yargs
  .locale('fr')
  .option('date', {
    type: 'string',
    default: new Date(),              <co xml:id="CO262-1"/>
    defaultDescription: 'now',        <co xml:id="CO262-2"/>
    coerce: input =&gt; new Date(input)  <co xml:id="CO262-3"/>
  })
  .argv;

console.log(args.date.toISOString())</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO262-1">
<para>La valeur par défaut de l&#8217;option <literal>--date</literal> est un objet <literal>Date</literal>.</para>
</callout>
<callout arearefs="CO262-2">
<para>Ce réglage personnalise l&#8217;affichage de la valeur par défaut dans la zone d&#8217;aide&#160;– sans cela, la date complète serait affichée, ce qui est peu élégant et moins informatif.</para>
</callout>
<callout arearefs="CO262-3">
<para>Cette fonction s&#8217;assure que toute valeur passée en option est transformée en objet&#160;<literal>Date</literal>.</para>
</callout>
</calloutlist>
<simpara>Voici un autre exemple du mécanisme de coercition, cette fois-ci appliqué
à un chemin d&#8217;accès de fichier&#160;:</simpara>
<screen>$ node application/coerce-file.js --json-file ../package.json
{ name: 'nodebook.chapter-08',
  version: '1.0.0',
  ...
}</screen>
<simpara>Le chemin d&#8217;accès passé en option est intercepté par une fonction.
Elle le reçoit en argument et a la responsabilité d&#8217;en lire
le contenu et de le transformer en objet ECMAScript grâce à la fonction
<link xl:href="../chapter-03.index.xml#json"><literal>JSON.parse()</literal></link>
(<link xl:href="../chapter-03/index.xml">chapitre&#160;3</link>).
<indexterm>
<primary>JSON</primary><secondary>JSON.parse()</secondary>
</indexterm>
<indexterm>
<primary>JSON.parse()</primary>
</indexterm></simpara>
<formalpara>
<title>application/coerce-file.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const yargs = require('yargs');
const {readFileSync} = require('fs');

const parseJSON = (path) =&gt; JSON.parse(readFileSync(path));

const args = yargs
  .locale('fr')
  .option('json-file', {
    type: 'string',
    coerce: parseJSON,        <co xml:id="CO263-1"/>
  })
  .argv;

console.log(args.jsonFile);   <co xml:id="CO263-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO263-1">
<para>Notre fonction <literal>parseJSON()</literal> assure la transformation de l&#8217;argument <literal>--json-file</literal>.</para>
</callout>
<callout arearefs="CO263-2">
<para>C&#8217;est bien le contenu du fichier qui s&#8217;affiche et non la valeur passée au programme.</para>
</callout>
</calloutlist>
<caution>
<title><phrase role="RemarquePreTitre">Performance</phrase> Lire et écrire des fichiers</title>
<simpara><indexterm>
<primary>flux de données</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stdin</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stdin</secondary>
</indexterm>
<indexterm>
<primary>stdin</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>process</secondary><tertiary>stdout</tertiary>
</indexterm>
<indexterm>
<primary>process</primary><secondary>stdout</secondary>
</indexterm>
<indexterm>
<primary>stdout</primary>
</indexterm>
La lecture de fichiers dont la taille dépasse quelques centaines de kilo-octets
devient problématique sur des machines avec peu de ressources,
si vous souhaitez obtenir des résultats le plus tôt possible et si
vous avez d&#8217;autres impératifs de performance.</simpara>
<simpara>Je vous invite à lire la section <quote><link linkend="streaming">Utiliser les flux de données</link></quote>
pour en savoir plus.</simpara>
</caution>
<simpara>Cette pratique renforce une approche applicative modulaire.
L'<emphasis role="strong">interface absorbe</emphasis> les spécificités de la ligne de commandes.
L'<emphasis role="strong">application réagit aux paramètres</emphasis> sans avoir à se préoccuper du contexte,
que ce soit sur le Web ou dans un terminal.</simpara>
<simpara>Les frameworks d&#8217;application en ligne de commande facilitent
l&#8217;organisation et la définition de <link linkend="args.subcommand">sous-commandes</link>.
<indexterm>
<primary>application en ligne de commande</primary><secondary>sous-commande</secondary>
</indexterm>
<indexterm>
<primary>sous-commande</primary>
</indexterm></simpara>
<screen>$ node application/random.js --help
random.js [command]

Commandes:
  random.js words [count]  Des mots
  random.js number         Un nombre

Options:
  --help     Affiche de l'aide                [booléen]
  --version  Affiche le numéro de version     [booléen]</screen>
<simpara>C&#8217;est l&#8217;occasion d&#8217;adapter l&#8217;exemple utilisé dans la section
<quote><link linkend="args.subcommand">Utiliser des arguments et des options</link></quote>.
<indexterm>
<primary>application en ligne de commande</primary><secondary>argument</secondary>
</indexterm>
<indexterm>
<primary>argument</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>option</secondary>
</indexterm>
<indexterm>
<primary>option</primary>
</indexterm>
L&#8217;intention est de modifier le moins possible le code initial.</simpara>
<formalpara>
<title>application/random.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {random} = require('faker/locale/fr');
const yargs = require('yargs');

const number = () =&gt; random.number();
const words = (count=5) =&gt; random.words(count);

yargs
  .locale('fr')
  .command('words [count]', 'Des mots', {}, (args) =&gt; { <co xml:id="CO264-1"/>
    console.log(words(args.count));                     <co xml:id="CO264-2"/>
  })
  .command('number', 'Un nombre', {}, () =&gt; {
    console.log(number());
  })
  .argv;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO264-1">
<para>La commande <literal>words</literal> accepte un argument optionnel <literal>count</literal>.</para>
</callout>
<callout arearefs="CO264-2">
<para>Cette fonction est déclenchée quand la commande <literal>words</literal> est exécutée.</para>
</callout>
</calloutlist>
<simpara>Je trouve qu&#8217;il est plus facile d&#8217;exécuter une fonction avec les bons arguments
en utilisant ce mécanisme de sous-commandes.
Nous n&#8217;avons même pas eu à modifier la signature des fonctions <literal>words</literal> et <literal>number</literal>.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Syntaxe</phrase> Annotation des arguments dans une commande</title>
<simpara><indexterm>
<primary>module npm</primary><secondary>yargs</secondary>
</indexterm>
<indexterm>
<primary>yargs</primary>
</indexterm>
Certains frameworks comme <emphasis>yargs</emphasis> interprètent la commande que nous déclarons.
Lorsque c&#8217;est le cas, les arguments sont rangés dans un objet d&#8217;arguments nommés.
Les frameworks gèrent plusieurs cas de figure qui ont chacun leur notation.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="60*"/>
<thead>
<row>
<entry align="left" valign="top">Syntaxe</entry>
<entry align="left" valign="top">Type d&#8217;argument</entry>
<entry align="left" valign="top">Explication</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>cmd [arg1]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optionnel</simpara></entry>
<entry align="left" valign="top"><simpara>L&#8217;argument <literal>arg1</literal> n&#8217;est pas obligatoire.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>cmd &lt;arg1&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Obligatoire</simpara></entry>
<entry align="left" valign="top"><simpara>L&#8217;argument <literal>arg1</literal> est obligatoire.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>`cmd &lt;arg1</simpara></entry>
<entry align="left" valign="top"><simpara>arg2&gt;`</simpara></entry>
<entry align="left" valign="top"><simpara>Alias</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>L&#8217;argument est obligatoire et accepte deux informations différentes – un identifiant ou une adresse courriel par exemple.</simpara></entry>
<entry align="left" valign="top"><simpara><literal>cmd [&#8230;&#8203;args]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Tableau</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</note>
<simpara>Un résultat identique s&#8217;obtient en organisant les sous-commandes dans des fichiers
individuels et en indiquant à <emphasis>yargs</emphasis> dans quel répertoire les charger.</simpara>
<formalpara>
<title>application/random-dir.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const yargs = require('yargs');

yargs
  .locale('fr')
  .commandDir('./commands') <co xml:id="CO265-1"/>
  .argv;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO265-1">
<para>Déclaration du répertoire dans lequel nous avons rangé les sous-commandes.</para>
</callout>
</calloutlist>
<simpara>Nous ne déclarons plus les commandes sous forme d&#8217;un appel de fonction mais
en retournant un module Node.
Chacune de ses clés configure un aspect de la commande&#160;:</simpara>
<formalpara>
<title>application/commands/words.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {random} = require('faker/locale/fr');

module.exports = {
  command: 'words [count]',                      <co xml:id="CO266-1"/>
  desc: 'Génère des mots',                       <co xml:id="CO266-2"/>
  handler: (args) =&gt; {                           <co xml:id="CO266-3"/>
    console.log(random.words(args.count || 5));
  },
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO266-1">
<para>Arguments acceptés par la commande.</para>
</callout>
<callout arearefs="CO266-2">
<para>Description de la commande.</para>
</callout>
<callout arearefs="CO266-3">
<para>Fonction déclenchée lorsque la commande est exécutée.</para>
</callout>
</calloutlist>
</section>
<section xml:id="files">
<title>Stratégies pour gérer les chemins d&#8217;accès</title>
<simpara><indexterm>
<primary>application en ligne de commande</primary><secondary>chemin d&#8217;accès</secondary>
</indexterm>
<indexterm>
<primary>chemin d&#8217;accès</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>chemin relatif</secondary>
</indexterm>
<indexterm>
<primary>chemin relatif</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>chemin absolu</secondary>
</indexterm>
<indexterm>
<primary>chemin absolu</primary>
</indexterm></simpara>
<simpara>Il y a des cas où passer des chemins d&#8217;accès à des fichiers en <link linkend="args">arguments</link>
d&#8217;un exécutable ne suffit pas.
C&#8217;est le cas notamment quand on ne connaît pas la liste exacte des fichiers ou
lorsqu&#8217;elle est susceptible de changer.</simpara>
<screen>$ node files/intro.js ../package.json \
  "$(nodebook dir chapter-08 --root)/package-lock.json"

[ '…/chapter-08/package.json',
  '…/chapter-08/package-lock.json' ]</screen>
<simpara>Cet exemple illustre l&#8217;utilisation d&#8217;un chemin relatif et d&#8217;un
chemin absolu, tous deux normalisés en chemins absolus.
En procédant ainsi, nous rendons notre code indépendant de son
contexte d&#8217;exécution&#160;– ici, notre emplacement au sein du système de fichiers.</simpara>
<formalpara>
<title>files/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {resolve} = require('path');
const files = process.argv.slice(2);          <co xml:id="CO267-1"/>

const resolveFile = (file) =&gt; resolve(file);  <co xml:id="CO267-2"/>

console.log(files.map(resolveFile));          <co xml:id="CO267-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO267-1">
<para>La liste des fichiers correspond à tous les arguments du script.</para>
</callout>
<callout arearefs="CO267-2">
<para>Chaque chemin d&#8217;accès est transformé en chemin absolu.</para>
</callout>
<callout arearefs="CO267-3">
<para>La liste homogénéisée est affichée à l&#8217;écran.</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Repère</phrase> Chemin relatif, absolu ou __dirname ?</title>
<simpara><indexterm>
<primary>variable globale</primary><secondary>__dirname</secondary>
</indexterm>
<indexterm>
<primary>__dirname</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>chemin relatif</secondary>
</indexterm>
<indexterm>
<primary>chemin relatif</primary>
</indexterm>
<indexterm>
<primary>application en ligne de commande</primary><secondary>chemin absolu</secondary>
</indexterm>
<indexterm>
<primary>chemin absolu</primary>
</indexterm>
Les fichiers passés en argument peuvent être un mélange de chemins absolus
et de chemins relatifs, qui se normalisent avec la fonction <literal>path.resolve()</literal>.
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.resolve()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.resolve()</secondary>
</indexterm>
<indexterm>
<primary>path.resolve()</primary>
</indexterm>
<indexterm>
<primary>module</primary><secondary>path</secondary><tertiary>path.cwd()</tertiary>
</indexterm>
<indexterm>
<primary>path</primary><secondary>path.cwd()</secondary>
</indexterm>
<indexterm>
<primary>path.cwd()</primary>
</indexterm>
La base à considérer est le <emphasis>répertoire courant</emphasis>, là où le programme est exécuté,
c&#8217;est-à-dire la valeur de <literal>process.cwd()</literal>
(<link xl:href="../chapter-04/index.xml#path">chapitre&#160;4</link>).</simpara>
<simpara><literal>__dirname</literal> est une base à utiliser lorsqu&#8217;un chemin est relatif au code source.</simpara>
</note>
<simpara>La saisie des chemins se simplifie en utilisant deux mécanismes&#160;: l'<emphasis>expansion</emphasis>
et le <emphasis>globbing</emphasis>.
Le module&#160;<literal>npm</literal> <emphasis>glob</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/glob">npmjs.com/glob</link></phrase>) fait très bien ce travail,
mais nous allons nous baser sur <emphasis>globby</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/globby">npmjs.com/globby</link></phrase>) à la place.
<indexterm>
<primary>module npm</primary><secondary>glob</secondary>
</indexterm>
<indexterm>
<primary>glob</primary>
</indexterm>
<indexterm>
<primary>module npm</primary><secondary>globby</secondary>
</indexterm>
<indexterm>
<primary>globby</primary>
</indexterm>
Il gère les <link xl:href="../chapter-03/index.xml#promise">promesses</link> et je le trouve
plus simple d&#8217;utilisation.</simpara>
<screen>$ node files/glob.js '../package-*.json'
['…/chapter-08/package.json', '…/package-lock.json']</screen>
<simpara>Dans cet exemple, nous partons à la recherche de tous les fichiers préfixés
par <literal>package-</literal> et terminés par <literal>.json</literal>.
Cette intention est exprimée par un seul argument qui contient le caractère
de <emphasis>globbing</emphasis>&#160;(<literal>*</literal>).</simpara>
<formalpara>
<title>files/glob.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const glob = require('globby');
const {resolve} = require('path');
const patterns = process.argv.slice(2);

const resolveFiles = (files) =&gt; {
  return files.map(file =&gt; resolve(file));
};

glob(patterns)                                <co xml:id="CO268-1"/>
  .then(files =&gt; resolveFiles(files))         <co xml:id="CO268-2"/>
  .then(files =&gt; console.log(files));         <co xml:id="CO268-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO268-1">
<para>Le module <emphasis>globby</emphasis> accepte un ou plusieurs motif(s)&#160;– ici nous n&#8217;en utilisons qu&#8217;un.</para>
</callout>
<callout arearefs="CO268-2">
<para>Nous transformons les fichiers identifiés en chemins absolus.</para>
</callout>
<callout arearefs="CO268-3">
<para>Pour ensuite les afficher dans le terminal.</para>
</callout>
</calloutlist>
<simpara>L&#8217;expansion est caractérisée par l&#8217;utilisation des accolades.
Les valeurs sont séparées par des virgules, qui signifient <emphasis>ou</emphasis>.
Les deux syntaxes se combinent ici pour récupérer les fichiers suffixés par
<literal>.adoc</literal> ou par&#160;<literal>.html</literal>&#160;:</simpara>
<screen>$ node files/glob.js '../*.{adoc,html}'
['…/chapter-08/index.adoc']</screen>
<simpara>Enfin, l&#8217;utilisation de la double-étoile&#160;(<literal>**</literal>) signifie <emphasis>dans tous les répertoires</emphasis>.
Nous récupérons ainsi tous les fichiers&#160;<literal>.js</literal> contenus dans ce répertoire
et les sous-répertoires&#160;:</simpara>
<screen>$ node files/glob.js '**/*.js'
['…/chapter-08/examples/hello.js', …]</screen>
</section>
<section xml:id="streaming">
<title>Utiliser les flux de données (stdin, stdout et stderr)</title>
<simpara>Cette section complète notre découverte du
<link xl:href="../chapter-04/index.xml#stream">module <literal>stream</literal></link>
(<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>).
Mon intention est de vous aiguiller dans la conception d&#8217;applications
en ligne de commande qui acceptent des flux de données, en entrée
comme en sortie.
La ligne de commande se prête tout particulièrement au <emphasis>streaming</emphasis> et
nos applications gagnent à fonctionner longtemps en consommant le
moins de ressources possibles.</simpara>
<screen>$ cat blah.txt
blah blah
$ cat blah.txt | node streaming/intro.js
BLAH BLAH</screen>
<formalpara>
<title>streaming/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const getStdin = require('get-stdin');                <co xml:id="CO269-1"/>

const uppercase = (text) =&gt; text.toLocaleUpperCase();
const log = (text) =&gt; process.stdout.write(text);

getStdin().then(uppercase).then(log);                 <co xml:id="CO269-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO269-1">
<para>Le module&#160;<literal>npm</literal> <emphasis>get-stdin</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/get-stdin">npmjs.com/get-stdin</link></phrase>) est pratique pour un flux d&#8217;entrée à petit volume.</para>
</callout>
<callout arearefs="CO269-2">
<para>Il retourne une promesse quand il a terminé de lire le flux d&#8217;entrée.</para>
</callout>
</calloutlist>
<simpara>J&#8217;aime bien proposer une alternative à l&#8217;entrée standard, en utilisant
les <emphasis role="strong">arguments lorsqu&#8217;il y a un nombre indéfini d&#8217;éléments</emphasis> à lire.
Je trouve que cette proposition évite de renoncer à un outil
dans un contexte où il est impossible de configurer un flux d&#8217;entrée.</simpara>
<screen>$ cat blah.txt | node streaming/intro-fallback.js
BLAH BLAH
$ node streaming/intro-fallback.js $(&lt; blah.txt)
BLAH BLAH</screen>
<simpara>La stratégie consiste à utiliser l&#8217;entrée standard quand on détecte une absence
d&#8217;arguments et, sinon, d&#8217;utiliser ces derniers.</simpara>
<formalpara>
<title>streaming/intro-fallback.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const getStdin = require('get-stdin');
const input = process.argv.slice(2);      <co xml:id="CO270-1"/>

const uppercase = (text) =&gt; text.toLocaleUpperCase();
const log = (text) =&gt; process.stdout.write(text);

if (input.length === 0) {                 <co xml:id="CO270-2"/>
  getStdin().then(uppercase).then(log);
}
else {                                    <co xml:id="CO270-3"/>
  Promise.resolve(input.join(' ')).then(uppercase).then(log);
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO270-1">
<para>Nous récupérons les arguments du script.</para>
</callout>
<callout arearefs="CO270-2">
<para>Chaque mot (séparé par un espace) est considéré comme un argument&#160;– s&#8217;il n&#8217;y en a pas, nous pouvons utiliser l&#8217;entrée standard.</para>
</callout>
<callout arearefs="CO270-3">
<para>Sinon nous rassemblons les mots en une seule chaîne de caractères.</para>
</callout>
</calloutlist>
<simpara>Notons au passage l&#8217;utilisation de <literal>Promise.resolve()</literal>
(<link xl:href="../chapter-03/index.xml#promise">chapitre&#160;3</link>) pour transformer deux
sources de données de manière identique.</simpara>
<simpara>Les <link linkend="args.options">options</link> sont adaptées pour <emphasis role="strong">indiquer l&#8217;emplacement d&#8217;une ressource</emphasis>.
La méthode <literal>fs.createReadStream</literal> (<link xl:href="../chapter-04/index.xml#fs">chapitre&#160;4</link>)
lit les données d&#8217;une ressource de la même manière que nous consommons
l&#8217;entrée standard.</simpara>
<screen>$ node streaming/input.js --input blah.txt
BLAH BLAH</screen>
<formalpara>
<title>streaming/input.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const minimist = require('minimist');
const getStream = require('get-stream');    <co xml:id="CO271-1"/>
const {createReadStream} = require('fs');
const {input=''} = minimist(process.argv.slice(2));

const uppercase = (text) =&gt; text.toLocaleUpperCase();
const log = (text) =&gt; process.stdout.write(text);

if (input) {
  getStream(createReadStream(input))        <co xml:id="CO271-2"/>
    .then(uppercase).then(log);
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO271-1">
<para>Le module&#160;<literal>npm</literal> <emphasis>get-stream</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/get-stream">npmjs.com/get-stream</link></phrase>) est similaire à <emphasis>get-stdin</emphasis> et fonctionne avec tout flux de lecture.</para>
</callout>
<callout arearefs="CO271-2">
<para>Il résout une promesse dès qu&#8217;il a terminé de consommer le flux de lecture.</para>
</callout>
</calloutlist>
<simpara>Là aussi, je trouve intéressant de proposer une approche double, en acceptant
un chemin de fichier en option et son contenu via l&#8217;entrée standard&#160;:</simpara>
<screen>$ node streaming/input-fallback.js --input blah.txt
BLAH BLAH
$ cat blah.txt | node streaming/input-fallback.js
BLAH BLAH</screen>
<formalpara>
<title>streaming/input-fallback.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const minimist = require('minimist');
const through = require('through2');
const {createReadStream} = require('fs');
const {input=''} = minimist(process.argv.slice(2));

const uppercase = (text) =&gt; text.toLocaleUpperCase();
const transform = through(function(data) {  <co xml:id="CO272-1"/>
  this.push(uppercase(String(data)));       <co xml:id="CO272-2"/>
});

if (!input.length) {
  process.stdin.pipe(transform)             <co xml:id="CO272-3"/>
    .pipe(process.stdout);
}
else {
  createReadStream(input).pipe(transform)
    .pipe(process.stdout);
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO272-1">
<para>Le module&#160;<literal>npm</literal> <emphasis>through2</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/through2">npmjs.com/through2</link></phrase>) s&#8217;intègre à un flux en exécutant une fonction à chaque arrivée de données.</para>
</callout>
<callout arearefs="CO272-2">
<para>Nous transformons la chaîne de caractères entrante dans le flux de sortie.</para>
</callout>
<callout arearefs="CO272-3">
<para>Ce flux de sortie est lui-même redirigé vers la sortie standard du programme.</para>
</callout>
</calloutlist>
<simpara>Ce qui est intéressant avec cette approche est qu&#8217;elle nous apprend
à intervenir nous-même sur un flux sans avoir à en connaître les tenants et aboutissant.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> Spécifier l&#8217;entrée ou la sortie standard en tant qu&#8217;option</title>
<simpara>Certains programmes Linux utilisent le caractère&#160;<literal>-</literal> pour symboliser l&#8217;entrée
ou la sortie standard, selon l&#8217;intention de l&#8217;option.</simpara>
<screen>$ cat blah.txt | node streaming/input-fallback.js --input ##-##</screen>
<simpara>Cette notation est utile quand vous voulez rendre l&#8217;entrée standard
optionnelle et explicite.</simpara>
</tip>
<simpara>Le précédent exemple nous permet aussi de nous libérer des modules
<emphasis>get-stdin</emphasis> et <emphasis>get-stream</emphasis>.
Ces derniers obligent quand même à <emphasis>charger tout le contenu</emphasis> du flux entrant
en mémoire.
En travaillant directement sur les flux avec le module <emphasis>through2</emphasis>,
les transformations sont faites en temps réel, au fur et à mesure où les données
sont lues, bloc par&#160;bloc.</simpara>
<simpara>Nous sommes désormais en mesure de travailler avec des fichiers au même
titre qu&#8217;avec l&#8217;entrée et la sortie standards.</simpara>
<screen>$ cat blah.txt | node streaming/pipe-in.js
BLAH BLAH</screen>
<formalpara>
<title>streaming/pipe-in.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const minimist = require('minimist');
const through = require('through2');
const {createReadStream:read} = require('fs');
const {i:input} = minimist(process.argv.slice(2));

const source = input ? read(input) : process.stdin;   <co xml:id="CO273-1"/>
const uppercase = (text) =&gt; text.toLocaleUpperCase();

const transform = through(function(data) {
  this.push(uppercase(String(data)));
});

source.pipe(transform).pipe(process.stdout);          <co xml:id="CO273-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO273-1">
<para>La source de données provient soit du flux de lecture de fichier, soit de l&#8217;entrée standard.</para>
</callout>
<callout arearefs="CO273-2">
<para>Le travail sur le contenu est ainsi factorisé, avec un fonctionnement identique peu importe la source de données.</para>
</callout>
</calloutlist>
<simpara>L&#8217;utilisation d&#8217;un même concept pour lire et pour écrire des données
simplifie notre code tout en offrant des performances optimales.</simpara>
<simpara>Il ne reste plus grand-chose à faire pour appliquer cet effort à la sortie du
programme, pour écrire en continu dans un fichier ou bien vers la sortie standard.</simpara>
<screen>$ node streaming/pipe-out.js -i blah.txt
BLAH BLAH
$ node streaming/pipe-out.js -i blah.txt -o debug.txt
$ cat blah.txt | node streaming/pipe-out.js -o debug.txt</screen>
<formalpara>
<title>streaming/pipe-out.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const minimist = require('minimist');
const through = require('through2');
const {createReadStream:read} = require('fs');
const {createWriteStream:write} = require('fs');
const {i:input,o:output} = minimist(process.argv.slice(2));

const source = input ? read(input) : process.stdin;
const dest = output ? write(output) : process.stdout; <co xml:id="CO274-1"/>
const uppercase = (text) =&gt; text.toLocaleUpperCase();

const transform = through(function(data) {
  this.push(uppercase(String(data)));
});

source.pipe(transform).pipe(dest);                    <co xml:id="CO274-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO274-1">
<para>La destination des données est choisie par un mécanisme similaire à celui pour la source de données.</para>
</callout>
<callout arearefs="CO274-2">
<para>Le processus de traitement est désormais indifférent à la source et à la destination des données.</para>
</callout>
</calloutlist>
<simpara>En quelques exemples, nous sommes passé·e·s d&#8217;une utilisation potentiellement
énergivore à un traitement en continu, plus doux pour les ressources système
et intégrable à tous les outils en ligne de commande qui lisent depuis
l&#8217;entrée standard ou écrivent vers la sortie standard.</simpara>
</section>
<section xml:id="autocomplete">
<title>Activer l&#8217;autocomplétion des commandes</title>
<simpara>Faire en sorte que les options possibles s&#8217;affichent à l&#8217;écran sur une simple
pression de la touche <keycap>Tab</keycap> est la cerise sur le gâteau&#160;!
Cette technique facilite la découverte d&#8217;une application par tâtonnement.
Elle accélère et réduit le risque d&#8217;erreurs durant la saisie des commandes.</simpara>
<caution>
<title><phrase role="RemarquePreTitre">Compatibilité</phrase> Incertitudes de fonctionnement sous Windows</title>
<simpara>Cette section n&#8217;a pas été testée avec les systèmes d&#8217;exploitation Windows.
Les commandes référencées ci-après ne fonctionnent peut-être pas
sous ses systèmes.</simpara>
</caution>
<formalpara>
<title>Prérequis pour installer les exécutables de ce chapitre</title>
<para>
<screen>$ npm install --global $(nodebook dir chapter-08 --root)</screen>
</para>
</formalpara>
<simpara>Le mécanisme d&#8217;autocomplétion est fourni par l&#8217;environnement d&#8217;exécution
de notre terminal, le <emphasis>shell</emphasis>.
Sous Linux et macOS, il s&#8217;agit de <emphasis>bash</emphasis>, de <emphasis>zsh</emphasis> ou plus rarement, de <emphasis>fish</emphasis>.
Il <quote>suffit</quote> donc d&#8217;interconnecter notre programme exécutable pour qu&#8217;il fournisse
les résultats de complétion au mécanisme de notre <emphasis>shell</emphasis>.</simpara>
<screen>$ eval $(nodebook.ch08.autocomplete --completion) <co xml:id="CO275-1"/>
$ nodebook.ch08.autocomplete <keycap>Tab</keycap>
--help coucou</screen>
<calloutlist>
<callout arearefs="CO275-1">
<para>L&#8217;option <literal>--completion</literal> est une option spéciale comprise par le module&#160;<literal>npm</literal> utilisé dans cet exemple.</para>
</callout>
</calloutlist>
<simpara>Le mécanisme de complétion est fourni par le module&#160;<literal>npm</literal> <emphasis>omelette</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/omelette">npmjs.com/omelette</link></phrase>).
Il est totalement indépendant de notre outillage d'<link linkend="args">arguments et d&#8217;options</link>.
Je le trouve léger et rapide à prendre en main.</simpara>
<formalpara>
<title>autocomplete/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">#!/usr/bin/env node

'use strict';

const omelette = require('omelette');
const args = process.argv.slice(2);
const options = ['--help','coucou'];                    <co xml:id="CO276-1"/>

omelette`nodebook.ch08.autocomplete ${options}`.init(); <co xml:id="CO276-2"/>

console.log(args);                                      <co xml:id="CO276-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO276-2">
<para>Déclaration du nom de programme et des options et arguments à suggérer.</para>
</callout>
<callout arearefs="CO276-1">
<para>Ces deux options et arguments sont utilisés pour la complétion du programme.</para>
</callout>
<callout arearefs="CO276-3">
<para>Cette partie est atteinte seulement quand le programme est exécuté.</para>
</callout>
</calloutlist>
<simpara>L&#8217;autocomplétion peut aller jusqu&#8217;à suggérer les valeurs associées aux options
et arguments de notre programme.</simpara>
<screen>$ eval $(nodebook.ch08.omelette --completion)
$ nodebook.ch08.omelette <keycap>Tab</keycap>
--timezone now

$ nodebook.ch08.omelette --timezone<keycap>Tab</keycap><keycap>Tab</keycap>
Africa/Abidjan                  Asia/Almaty
Africa/Accra                    Asia/Amman
Africa/Addis_Ababa              Asia/Anadyr
…</screen>
<simpara>Pour cela, le module <emphasis>omelette</emphasis> accepte un arbre de déclarations afin de
comprendre quoi suggérer en fonction de ce qui a été précédemment saisi&#160;:</simpara>
<formalpara>
<title>autocomplete/omelette.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">#!/usr/bin/env node

'use strict';

const omelette = require('omelette');
const args = require('minimist')(process.argv.slice(2));
const timezones = require('tz-ids');

omelette('nodebook.ch08.omelette')
  .tree({                     <co xml:id="CO277-1"/>
    '--timezone': timezones,  <co xml:id="CO277-2"/>
    'now': []
  })
  .init();

console.log(args.timezone);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO277-1">
<para>L&#8217;arbre est un objet ECMAScript.</para>
</callout>
<callout arearefs="CO277-2">
<para>L&#8217;option <literal>--timezone</literal> suggère la liste complète des fuseaux horaires.</para>
</callout>
</calloutlist>
<simpara>C&#8217;est très pratique quand on ne sait pas par où commencer et quand on ne
connaît pas la liste exhaustive des propositions.</simpara>
<simpara>Nous avons parlé du module&#160;<literal>npm</literal> <emphasis>yargs</emphasis> dans la section sur
l'<link linkend="application">utilisation d&#8217;un framework</link>.
Il embarque un module d&#8217;autocomplétion.
Si vous utilisez déjà ce module, l&#8217;autocomplétion revient à ajouter une ligne
de code à notre programme.
Elle est un peu plus basique et demande plus de travail pour
arriver à la qualité des résultats du module <emphasis>omelette</emphasis>.</simpara>
<screen>$ eval $(nodebook.ch08.yargs completion)
$ nodebook.ch08.yargs -<keycap>Tab</keycap>
--help      --timezone  --version</screen>
<formalpara>
<title>autocomplete/yargs.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">#!/usr/bin/env node

'use strict';

require('yargs')
  .option('timezone', {
    type: 'string',
  })
  .completion()           <co xml:id="CO278-1"/>
  .argv;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO278-1">
<para>Cette méthode ajoute la compréhension de l&#8217;argument <literal>completion</literal> pour s&#8217;intégrer avec le <emphasis>shell</emphasis> de notre système d&#8217;exploitation.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Rendre l&#8217;autocomplétion permanente</title>
<simpara>Les commandes <literal>eval $(&#8230;&#8203;)</literal> des précédents exemples sont à consigner
dans le fichier de configuration de votre shell,
c&#8217;est-à-dire dans le fichier <literal>~/.bashrc</literal> pour <emphasis>bash</emphasis>, <literal>~/.zshrc</literal> pour <emphasis>zsh</emphasis>
et <literal>~/.config/fish/config.fish</literal> pour&#160;<emphasis>fish</emphasis>.</simpara>
</tip>
</section>
<section xml:id="packaging">
<title>Rendre le programme indépendant de&#160;Node</title>
<simpara>Nos programmes exécutables souffrent d&#8217;un défaut&#160;: ils imposent
l&#8217;installation préalable de Node pour fonctionner.
Ce n&#8217;est pas grave pour une machine de devéloppement ou sur une machine
de production car nous sommes à même de contrôler l&#8217;environnement d&#8217;exécution.</simpara>
<simpara>La première solution consiste à empaqueter notre application avec le module
npm <emphasis>pkg</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/pkg">npmjs.com/pkg</link></phrase>).
Cet exécutable embarque notre code, les dépendances npm du projet
et la version de Node de notre choix sous la forme d&#8217;un unique fichier exécutable.</simpara>
<screen>$ npm install --global pkg
$ pkg --targets latest-linux,latest-macos,latest-win ..
$ ./nodebook
Il est 22h49.</screen>
<simpara>Dans ce cas, nous avons empaqueté une même application à la fois pour les
systèmes d&#8217;exploitation Windows, Linux et macOS.
Nous pourrions faire de même pour des ordinateurs légers de type Raspberry&#160;Pi.</simpara>
<simpara>Une solution alternative consiste à utiliser le logiciel <emphasis>Docker</emphasis>
(<phrase role="URL"><link xl:href="https://docker.com/community-edition">docker.com/community-edition</link></phrase>).
Ce système crée une base d&#8217;environnement réutilisable (le conteneur) à partir
d&#8217;une recette d&#8217;installation (l&#8217;image).
Une même image applicative se réplique à l&#8217;infini, sans avoir
connaissance de notre système d&#8217;exploitation.</simpara>
<screen>$ docker build -t nodebook/chapter-08 ..
$ docker run -ti --rm nodebook/chapter-08
Bienvenue dans le chapitre 8 😊</screen>
<simpara>Une image se construit depuis un fichier <literal>Dockerfile</literal> avec la commande <literal>docker build</literal>.
Elle s&#8217;exécute sous forme d&#8217;un conteneur jetable avec la commande <literal>docker run</literal>.
La recette d&#8217;installation est une suite d&#8217;instructions jouées les unes à la suite
des autres&#160;:</simpara>
<formalpara>
<title>Dockerfile</title>
<para>
<programlisting language="dockerfile" linenumbering="unnumbered">FROM node:alpine

WORKDIR /nodebook
ADD ./package.json ./package-lock.json ./
RUN npm ci
ADD ./examples ./examples

CMD ["node", "examples/hello.js"]</programlisting>
</para>
</formalpara>
<simpara>Je recommande de doubler le fichier <literal>Dockerfile</literal> d&#8217;un fichier <literal>.dockerignore</literal>.
Il suit les mêmes règles de fonctionnement qu&#8217;un fichier <literal>.gitignore</literal>.
Il exclut une liste définie de fichiers du contexte d&#8217;exécution et d&#8217;une possible
copie vers l&#8217;image Docker.</simpara>
<formalpara>
<title>.dockerignore</title>
<para>
<screen>node_modules</screen>
</para>
</formalpara>
<simpara>Une fois construite, une image se distribue sous forme de fichier transférable,
sur le registre public <phrase role="URL"><link xl:href="https://hub.docker.com">hub.docker.com</link></phrase> ou sur tout autre
registre privé&#160;– dont ceux fournis par certains
<link xl:href="../chapter-06/index.xml#deploy.docker">hébergeurs cloud</link>
(<link xl:href="../chapter-06/index.xml">chapitre&#160;6</link>).</simpara>
<note>
<title><phrase role="RemarquePreTitre">Alternative</phrase> Windows sous Docker</title>
<simpara>Microsoft met à disposition des images de Windows Server pour Docker à l&#8217;adresse suivante&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://hub.docker.com/r/microsoft/windowsservercore/">hub.docker.com/r/microsoft/windowsservercore/</link></phrase>.</simpara>
</listitem>
</itemizedlist>
<simpara>Nous pouvons tester une application Node dans un environnement Windows
sans quitter notre système d&#8217;exploitation Linux ou macOS.</simpara>
</note>
</section>
</section>
<section xml:id="conclusion_8">
<title>Conclusion</title>
<simpara>L&#8217;écriture d&#8217;un exécutable en ligne de commande est un
<emphasis role="strong">exercice proche de celui d&#8217;une application web</emphasis> écrite avec&#160;Node.</simpara>
<simpara>Nous avons vu que l&#8217;enjeu majeur tient dans la <emphasis role="strong">modularisation du code applicatif</emphasis>
et dans la <emphasis role="strong">création d&#8217;une interface cohérente</emphasis>, informative et documentée.</simpara>
<simpara><link linkend="args"><emphasis role="strong">Les options et les arguments</emphasis></link> sont essentiels à maîtriser et
à <link linkend="doc">documenter</link> car ils servent de pierre angulaire pour créer un pont
avec les utilisateurs.</simpara>
<simpara>Ils deviennent encore plus puissants une fois combinés avec
la <link linkend="files">gestion des chemins d&#8217;accès</link> ainsi qu&#8217;avec
les <link linkend="streaming">flux d&#8217;entrée et de sortie</link>.</simpara>
</section>
</chapter>
<chapter xml:id="créer_une_application_front_end">
<title>Créer une application front-end</title>
<simpara>Node et l&#8217;écosystème&#160;<literal>npm</literal> sont devenus des acteurs majeurs de l&#8217;outillage
web <emphasis>front-end</emphasis> alors profitons-en pour partager du code entre client et serveur.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Polyfills et compatibilité ECMAScript</simpara>
</listitem>
<listitem>
<simpara>Importer des modules&#160;<literal>npm</literal> pour le&#160;Web</simpara>
</listitem>
<listitem>
<simpara>Créer du code modulaire, avec ou sans framework</simpara>
</listitem>
<listitem>
<simpara>Échanges de données en temps&#160;réel</simpara>
</listitem>
<listitem>
<simpara>Outillage utile au quotidien</simpara>
</listitem>
<listitem>
<simpara>Tester son code et la compatibilité avec les navigateurs web</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Avant l&#8217;apparition de Node, rare était l&#8217;outillage n&#8217;imposant pas une ou
plusieurs plates-formes de développement&#160;: <emphasis>YUICompressor</emphasis> et <emphasis>Google Closure Compiler</emphasis>
demandaient Java, <emphasis>sprockets</emphasis> demandait Ruby et <emphasis>pngquant</emphasis> reposait sur des
dépendances système comme <emphasis>libpng</emphasis>.</simpara>
<simpara>L&#8217;existence de Node et du registre <literal>npm</literal> a favorisé le développement d&#8217;un
écosystème orienté <emphasis>front-end</emphasis> plus simple à appréhender.
Cela s&#8217;étend de la découverte au téléchargement des bibliothèques tierces ainsi
qu&#8217;à la compilation, l&#8217;optimisation et l&#8217;exécution des tests des applications
web côté client.</simpara>
<simpara><emphasis role="strong">Cet écosystème rend l&#8217;écriture de code moderne normale</emphasis>&#160;; un code anticipant
les futurs standards d&#8217;ECMAScript et <emphasis>HTML5</emphasis>, sur les navigateurs actuels et anciens.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node&#160;v10</emphasis>
et <emphasis role="strong">npm&#160;v6</emphasis>.
Ce sont les versions stables recommandées en&#160;2019.</simpara>
</note>
<section xml:id="quel_rapport_entre_node_et_les_navigateursweb">
<title>Quel rapport entre Node et les navigateurs&#160;web ?</title>
<simpara>Ce chapitre peut sembler confus au premier abord.
Si Node s&#8217;exécute au niveau du système d&#8217;exploitation&#160;– <quote>côté serveur</quote>&#160;–,
en quoi est-il lié au développement <emphasis>front-end</emphasis>&#160;– <quote>côté client</quote>&#160;?
Est-ce parce que du code écrit pour Node peut aussi fonctionner dans un navigateur&#160;web&#160;?
Quid de l&#8217;utilisation de <literal>require('fs')</literal> pour accéder au système de fichiers&#160;?</simpara>
<simpara>La réponse courte est&#160;: nous n&#8217;exécutons pas Node dans un navigateur.</simpara>
<simpara>Et voici la réponse longue&#160;: <emphasis role="strong">Node est utilisé pour assembler du code</emphasis>, le <emphasis>transformer</emphasis>
et le rendre fonctionnel dans une paire de balises <literal>&lt;script&gt;&lt;/script&gt;</literal>.
Ce code peut aussi aussi bien être fourni par des bibliothèques tierces
installées via&#160;<literal>npm</literal> (<emphasis>jQuery</emphasis>, <emphasis>React</emphasis> ou <emphasis>d3</emphasis> par exemple) que par de
l&#8217;outillage (optimiseurs, suite de tests, orchestration de tâches) ou encore
par le code réutilisable de notre propre application&#160;web.</simpara>
<simpara>Il faut également bien comprendre qu&#8217;il y a plusieurs <quote>problèmes</quote> cachés sous
une même question&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Les navigateurs et Node utilisent différentes machines virtuelles JavaScript,
implémentant ECMAScript de façon plus ou moins complète.</simpara>
</listitem>
<listitem>
<simpara>Ils n&#8217;ont pas accès aux mêmes APIs&#160;– Node accède à <literal>fs</literal> et <literal>http</literal> tandis que
les navigateurs ont <literal>File</literal> et <literal>fetch</literal>/<literal>XmlHttpRequest</literal>.</simpara>
</listitem>
<listitem>
<simpara>Ils ne gèrent pas le chargement de modules de la même manière
(voir la section <quote><link linkend="managing-dependencies">Dépendences de développement</link></quote>).</simpara>
</listitem>
<listitem>
<simpara>L&#8217;implémentation même d&#8217;ECMAScript diffère selon les versions de Node
employées&#160;– un navigateur moderne et Node&#160;v10 comprennent
l&#8217;objet natif <literal>Promise</literal>, mais pas Node&#160;0.12.</simpara>
</listitem>
</itemizedlist>
<simpara>Ce processus n&#8217;est <emphasis>pas magique</emphasis> et nous verrons graduellement au cours des
prochaines sections comment tout ceci fonctionne.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal></title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-09
$ cd $(nodebook dir chapter-09)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les instructions d&#8217;installation pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
</section>
<section xml:id="écrire_dès_à_présent_le_code_dufutur">
<title>Écrire dès à présent le code du&#160;futur</title>
<simpara>Transformer du code ECMAScript a pendant longtemps été chose pénible.
Je pense par exemple à de la minification de code (pour réduire les temps de
transfert sur les antiques lignes ADSL&#160;128&#160;K) ou à de la conversion automatique
de code ECMAScript&#160;3 en ECMAScript&#160;5.
Cela nécessitait systématiquement l&#8217;utilisation d&#8217;un autre environnement
qu&#8217;ECMAScript lui-même: Rhino nécessitait Java, Spidermonkey nécessitait&#160;C&#43;&#43;
et Trident nécessitait un environnement Windows en plus de&#160;C&#43;&#43;.</simpara>
<simpara><emphasis>esprima</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/esprima">npmjs.com/esprima</link></phrase>) chamboule les règles du jeu en
décembre 2011&#160;: ce parseur ECMAScript&#160;– lui-même écrit en ECMAScript&#160;–
exporte une compréhension de code sous forme d&#8217;arbre syntaxique abstrait
(<emphasis>Abstract Syntax Tree</emphasis>, <emphasis>AST</emphasis>).
Cet arbre est lui-même analysable par de nouveaux outils&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>les <emphasis>source maps</emphasis> pour associer le code transformé au code d&#8217;origine,
notamment dans les outils de développement des navigateurs&#160;;</simpara>
</listitem>
<listitem>
<simpara>des minifieurs plus efficaces et ayant connaissance des portions de code exécutées&#160;;</simpara>
</listitem>
<listitem>
<simpara>des analyseurs de code pour informer le développeur d&#8217;erreurs de syntaxe,
de non-respect de styles de développement, etc.&#160;;</simpara>
</listitem>
<listitem>
<simpara>des convertisseurs de code pour passer d&#8217;ECMAScript vers CoffeeScript,
de modules CommonJS vers des modules ECMAScript, etc.</simpara>
</listitem>
</itemizedlist>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Annonce d&#8217;esprima</title>
<simpara>Aryia&#160;Hidayat présente esprima dans ce billet de blog&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://ariya.io/2011/12/introducing-esprima">ariya.io/2011/12/introducing-esprima</link></phrase></simpara>
</listitem>
</itemizedlist>
<simpara>Il y présente notamment des comparatifs de performances d&#8217;exécution sur
différentes machines virtuelles ECMAScript et face à d&#8217;autres parseurs.</simpara>
</tip>
<section xml:id="la_fin_de_lapproche_par_le_dénominateur_commun">
<title>La fin de l&#8217;approche par le dénominateur commun</title>
<simpara>Qui n&#8217;a pas déjà entamé un projet en posant la question à un client, en regardant
les statistiques de trafic ou en se posant une question à soi-même&#160;: quelles
sont les versions de navigateurs avec lesquelles notre site ou application web
doit être compatible&#160;?</simpara>
<simpara>La version de navigateur la plus ancienne ou la moins conforme aux standards
était celle qui donnait le&#160;<emphasis>la</emphasis>.
Cela voulait dire se priver de techniques modernes, standardisées ou en cours
de standardisation.
Cela signifiait des <emphasis>hacks</emphasis> dans ses CSS, dans son code ECMAScript et dans
ses ressources graphiques.</simpara>
</section>
<section xml:id="transpilation">
<title>Écrire au plus proche des standards</title>
<simpara>Fort heureusement, l&#8217;arrivée d'<emphasis>esprima</emphasis> change la donne et permet d&#8217;écrire un
code proche des standards qui résiste au temps.
Son existence facilite l'<emphasis role="strong">émergence d&#8217;outils automatisant les transformations de code</emphasis>
pour satisfaire nos besoins spécifiques.</simpara>
<simpara>Il y a plusieurs éléments à prendre en compte concernant la standardisation
de nouvelles versions d&#8217;ECMAScript et les évolutions de sa syntaxe&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>La cadence de standardisation a été revue pour devenir prédictible&#160;– une
volonté d&#8217;une fois par&#160;an.</simpara>
</listitem>
<listitem>
<simpara>Les fonctionnalités et éléments de syntaxe sont implémentés un par un, à des
vitesses différentes par les différents navigateurs.</simpara>
</listitem>
<listitem>
<simpara>Deux tiers de navigateurs fonctionnent sur des rythmes de mise à jour en cycle court
(de six à neuf semaines)&#160;– le tiers restant est cadencé à une seule mise à
jour par&#160;an.</simpara>
</listitem>
</itemizedlist>
<simpara>Il vaut mieux <emphasis role="strong">parier sur les standards comme stratégie à long terme</emphasis> si on tient
compte du temps de développement et du temps de maintenance d&#8217;une base de&#160;code.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Question</phrase> Standards, quels standards ?</title>
<simpara>Plusieurs organismes prennent part à la standardisation de langages et
d&#8217;API lorsque l&#8217;on touche aux navigateurs&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>HTML&#160;: <emphasis>WHATWG</emphasis> (<phrase role="URL"><link xl:href="https://html.spec.whatwg.org">html.spec.whatwg.org</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>API&#160;DOM&#160;: <emphasis>WHATWG</emphasis> (<phrase role="URL"><link xl:href="https://dom.spec.whatwg.org">dom.spec.whatwg.org</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>CSS&#160;: <emphasis>W3C</emphasis> (<phrase role="URL"><link xl:href="https://www.w3.org/standards/techs/css">www.w3.org/standards/techs/css</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>ECMAScript&#160;: <emphasis>TC39</emphasis> (<phrase role="URL"><link xl:href="https://github.com/tc39">github.com/tc39</link></phrase>)&#160;;</simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Lorsque nous écrivons du code, nous pouvons rencontrer trois cas de figure&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>élément de syntaxe non&#160;implémenté&#160;: transformer le code pour l&#8217;adapter aux
navigateurs cibles&#160;;</simpara>
</listitem>
<listitem>
<simpara>élément de syntaxe partiellement implémenté&#160;: utiliser l&#8217;implémentation native
des navigateurs et, à défaut, transformer le code pour l&#8217;adapter aux autres navigateurs&#160;;</simpara>
</listitem>
<listitem>
<simpara>élément de syntaxe totalement implémenté&#160;: utiliser l&#8217;implémentation native des navigateurs.</simpara>
</listitem>
</itemizedlist>
<simpara>Il arrive que certains éléments de syntaxe soient abandonnés pendant le
processus de standardisation&#160;– ou que leur implémentation change beaucoup
(on pensera à <literal>Object.observe()</literal>).</simpara>
<simpara>La question qui nous taraude est&#160;: comment transformer le code pour satisfaire
à la fois les navigateurs compatibles et les autres&#160;?
<emphasis>Babel</emphasis> (<phrase role="URL"><link xl:href="https://babeljs.io">babeljs.io</link></phrase>) est un outil de choix  pour parvenir à ses
fins d&#8217;écrire du code résistant au(x standards du) temps.</simpara>
<simpara>Ce module convertit de manière sélective toute syntaxe ECMAScript&#160;2015/2016/etc.
vers de l&#8217;ECMAScript&#160;5, compréhensible par les navigateurs modernes.
L&#8217;intérêt de sa sélectivité fait que l&#8217;on peut progressivement arrêter de
convertir les éléments de syntaxe couverts par 100&#160;% des navigateurs.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Traceur</title>
<simpara><emphasis>Traceur</emphasis> est un des premiers transpilateurs ECMAScript&#160;2015 vers
ECMAScript&#160;5 à avoir émergé dans l&#8217;écosystème&#160;Node.</simpara>
<simpara>Grâce à lui, il a été possible d&#8217;écrire des modules en ECMAScript&#160;2015
bien avant que la spécification ne soit entièrement terminée et donc on a pu
anticiper son apprentissage tout en mettant le langage à l&#8217;épreuve avant sa finalisation.</simpara>
</tip>
<simpara>L&#8217;exemple suivant illustre un code utilisant des éléments de syntaxe
d&#8217;ECMAScript&#160;2018.</simpara>
<formalpara>
<title>babel/es2018.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const a = {one: 1, two: 2};
const b = {three: 3, four: 4};

console.log({...a, ...b});      <co xml:id="CO279-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO279-1">
<para>Affiche <literal>{ one: 1, two: 2, three: 3, four: 4 }</literal> si le navigateur supporte l&#8217;opérateur <emphasis>spread</emphasis> sur les objets (<link xl:href="../chapter-03/index.xml#object.assign">chapitre&#160;3</link>).</para>
</callout>
</calloutlist>
<simpara>Ce code représente l&#8217;idéal de ce que l&#8217;on souhaite écrire.
Le seul obstacle consiste à traduire ce code pour l&#8217;ensemble des navigateurs
compatibles avec ECMAScript&#160;5.</simpara>
<simpara>Exécutons cette commande&#160;:</simpara>
<screen>$ npm run babel -- examples/babel/es2018.js</screen>
<simpara>La sortie a changé et renvoie un code totalement fonctionnel sur des navigateurs
ne prenant pas ECMAScript&#160;2018 en charge&#160;:</simpara>
<formalpara>
<title>babel/es2018-es5.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">"use strict";

function _objectSpread(target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var a = {one: 1, two: 2};
var b = {three: 3, four: 4};

console.log(_objectSpread({}, a, b));</programlisting>
</para>
</formalpara>
<simpara>Chaque fonctionnalité d&#8217;ECMAScript est transformée selon une règle personnalisable,
intégrée à <emphasis>Babel</emphasis> ou disponible sous forme d&#8217;un plug-in.
Les <emphasis>presets</emphasis> sont des modules&#160;<literal>npm</literal> qui regroupent les règles
de transformation selon un certaine logique.</simpara>
<simpara><emphasis>preset-env</emphasis> <phrase role="URL"><link xl:href="https://npmjs.com/babel-preset-env">npmjs.com/babel-preset-env</link></phrase> convertit
notre code dans une version compatible avec la majorité des navigateurs
supportés sur le marché.
Si vos besoins sont différents, sa configuration sait cibler des navigateurs
en fonction soit de leur version, soit de leur part de marché.</simpara>
<simpara>La configuration des presets et d&#8217;autres aspects de Babel se fait
dans un fichier nommé <literal>.babelrc</literal>.
L&#8217;exemple suivant configure Babel pour préserver les commentaires,
transformer la syntaxe JSX pour <link linkend="react"><emphasis>React</emphasis></link> et transformer pour les
dernières versions des navigateurs sur le marché&#160;:</simpara>
<formalpara>
<title>.babelrc</title>
<para>
<screen>{
  "comments": false,
  "presets": [
    "@babel/preset-react",
    "@babel/preset-env"
  ],
  "plugins": [
    "@babel/plugin-proposal-object-rest-spread"
  ]
}</screen>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Documentation de Babel</title>
<simpara>Toutes les options de configuration sont documentées sur le site officiel
de Babel&#160;: <phrase role="URL"><link xl:href="https://babeljs.io/docs/en/babel-core/#options">babeljs.io/docs/en/babel-core/#options</link></phrase>.</simpara>
<simpara>Une autre page explique où placer et quoi mettre dans les fichiers
<literal>.babelrc</literal>&#160;: <phrase role="URL"><link xl:href="https://babeljs.io/docs/en/config-files/">babeljs.io/docs/en/config-files/</link></phrase>.</simpara>
</tip>
</section>
<section xml:id="polyfills">
<title>Combler les manques avec des polyfills</title>
<simpara>Des outils comme Babel nous permettent d&#8217;écrire avec une syntaxe moderne qui
<emphasis role="strong">comblent les fonctionnalités manquantes</emphasis>&#160;– leur implémentation.</simpara>
<simpara>Un <emphasis>polyfill</emphasis> harmonise la présence d&#8217;une fonctionnalité au sein d&#8217;une variété de
navigateurs et d&#8217;environnements ECMAScript.
Cela se fera au prix de quelques kilo-octets de code à charger en plus
dans nos applications.
L&#8217;appel à un service de <emphasis>polyfill</emphasis> externe entraîne un léger ralentissement du
chargement de notre&#160;page.</simpara>
<simpara>Prenons le bloc de code suivant&#160;:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

Promise.resolve('ok');</programlisting>
<simpara>Comprenons que&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Cette syntaxe est valide dans toutes les versions d&#8217;ECMAScript
(Babel ne change rien à ce code).</simpara>
</listitem>
<listitem>
<simpara>L&#8217;objet global <literal>Promise</literal> existe dans un navigateur moderne.</simpara>
</listitem>
<listitem>
<simpara>L&#8217;objet global <literal>Promise</literal> n&#8217;existe pas dans <emphasis>Internet Explorer 11</emphasis>, entre autres.</simpara>
</listitem>
</itemizedlist>
<simpara>Ce code fonctionnerait donc sur un navigateur moderne mais pas dans <emphasis>IE11</emphasis>.
L&#8217;inclusion d&#8217;un <emphasis>polyfill</emphasis> de <literal>Promise</literal> résoudrait le problème.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Bonne pratique</phrase> Quand inclure les polyfills ?</title>
<simpara><emphasis role="strong">Un <emphasis>polyfill</emphasis> se charge toujours en premier</emphasis>.
On inclut tous les <emphasis>polyfills</emphasis> en une seule fois avant notre propre code.</simpara>
<simpara>Nous garantissons ainsi cohérence et stabilité de comportement au sein de
notre application, peu importe l&#8217;ordre d&#8217;exécution de nos scripts.</simpara>
</tip>
<simpara>Parlons maintenant des méthodes d&#8217;inclusion des <emphasis>polyfills</emphasis> pour mieux
comprendre comment procéder.</simpara>
<simpara>Le service <emphasis>polyfill.io</emphasis> est de loin la méthode la plus simple à utiliser.
Il suffit d&#8217;inclure un script dans toutes vos pages web et cet outil
détermine les <emphasis>polyfills</emphasis> à charger en fonction de la
compatibilité du navigateur&#160;:</simpara>
<formalpara>
<title>polyfill.io.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Example polyfill.io&lt;/title&gt;
    &lt;script src="https://cdn.polyfill.io/v2/polyfill.min.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script&gt;
      Promise.resolve('ok')
        .then(msg =&gt; console.log(msg));
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> polyfill.io</title>
<simpara>polyfill.io possède une documentation très complète qui aide à configurer
finement le service en fonction de nos besoins&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://qa.polyfill.io/v2/docs/">qa.polyfill.io/v2/docs/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Nous pouvons déduire deux règles de cet exemple&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Inclure les <emphasis>polyfills</emphasis> en tout premier.</simpara>
</listitem>
<listitem>
<simpara>Les inclure en dehors de notre code.</simpara>
</listitem>
</itemizedlist>
<simpara>La deuxième méthode est d&#8217;embarquer les <emphasis>polyfills</emphasis> dans notre base de code.
L&#8217;avantage est de maîtriser notre base de code et de ne pas dépendre d&#8217;un service externe.
L&#8217;inconvénient est que nous chargeons du code qui sera inutile dans les
navigateurs et environnements disposant déjà de ces fonctionnalités.</simpara>
<formalpara>
<title>polyfill-import.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Exemple polyfill custom&lt;/title&gt;
    &lt;script type="module"&gt;
      import 'es6-promise/auto';        <co xml:id="CO280-1"/>
      import 'core-js/fn/number/is-nan';<co xml:id="CO280-2"/>
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script&gt;
      Promise.resolve(Number.isNaN(NaN))
        .then(msg =&gt; console.log(msg));
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO280-1">
<para>Nous verrons <link linkend="modules">comment importer des modules</link> ci-après.</para>
</callout>
<callout arearefs="CO280-2">
<para>On importe un deuxième <emphasis>polyfill</emphasis>, celui de la méthode <literal>Number.isNaN</literal>.</para>
</callout>
</calloutlist>
<simpara>Le module <emphasis>npm</emphasis> <literal>core-js</literal> est une bibliothèque exhaustive de <emphasis>polyfills</emphasis>
pouvant être inclus un à un ou par versions d&#8217;ECMAScript.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> core-js</title>
<simpara>La documentation en ligne de <literal>core-js</literal> liste l&#8217;ensemble des <emphasis>polyfills</emphasis>
pris en charge, ainsi que des exemples d&#8217;utilisation.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/core-js">npmjs.com/core-js</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<caution>
<title><phrase role="RemarquePreTitre">Attention</phrase> Performance et duplication</title>
<simpara>Il faut veiller à ne pas alourdir inutilement une application.</simpara>
<simpara>Laissons la responsabilité de <emphasis>polyfiller</emphasis> aux utilisateurs de notre code&#160;;
particulièrement si celui-ci est redistribué en tant que module&#160;<literal>npm</literal> public.</simpara>
<simpara>Si plusieurs scripts nécessitent des <emphasis>polyfills</emphasis>, mieux vaut inclure ces
derniers en une&#160;fois&#160;:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;script src="polyfills.js"&gt;&lt;/script&gt;
&lt;script src="script-a.js"&gt;&lt;/script&gt;
&lt;script src="script-b.js"&gt;&lt;/script&gt;</programlisting>
</caution>
<simpara>Enfin, une dernière méthode est d&#8217;importer la fonction de <emphasis>polyfill</emphasis> sans
réécrire les objets globaux.
Cette pratique a l&#8217;avantage de ne pas entraîner d&#8217;effets secondaires et de
garantir le même comportement dans tous les navigateurs.
L&#8217;inconvénient est qu&#8217;on n&#8217;utilise pas la fonctionnalité native des navigateurs
lorsqu&#8217;elle est présente.
Nous nous retrouvons tributaires de la qualité d&#8217;implémentation du <emphasis>polyfill</emphasis>.</simpara>
<formalpara>
<title>polyfill-require.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import {Promise as PromisePolyfill} from 'es6-promise';

PromisePolyfill.resolve('ok').then(msg =&gt; console.log(msg));

console.log('Promise' in window);                <co xml:id="CO281-1"/>
console.log(PromisePolyfill === window.Promise); <co xml:id="CO281-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO281-1">
<para>Affiche <literal>true</literal> si le navigateur implémente l&#8217;API <emphasis>Promise</emphasis>&#160;– sinon affiche <literal>false</literal> et l&#8217;utilisation d&#8217;un <emphasis>polyfill</emphasis> prend tout son&#160;sens.</para>
</callout>
<callout arearefs="CO281-2">
<para>Affiche <literal>false</literal>, car le <emphasis>polyfill</emphasis> de <emphasis>Promise</emphasis> est une fonction strictement différente de <literal>window.Promise</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Guide</phrase> Bonnes pratiques constatées</title>
<simpara>De bons usages des <emphasis>polyfills</emphasis> ainsi que les risques liés à leur utilisation
sont compilés dans un guide édité par le&#160;W3C&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://w3ctag.github.io/polyfills/">w3ctag.github.io/polyfills/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
</section>
<section xml:id="modules">
<title>Importer des modules</title>
<simpara>Importer des modules est une pratique courante avec Node.
Elle l&#8217;est en revanche beaucoup moins dans l&#8217;univers du Web puisqu&#8217;il n&#8217;existait
rien de natif avant les <link linkend="modules-es2015">modules ECMAScript</link>.</simpara>
<simpara>Auparavant, on aura vu débarquer les modules AMD (<emphasis>Asynchronous Module Definition</emphasis>)
pour gérer les dépendances entre scripts.
Les bibliothèques Dojo, RequireJS et YUI ont popularisé ce motif de conception.
Un désir d&#8217;universalité a ensuite émergé avec la popularité croissante de Node,
conduisant aux modules&#160;UMD, conciliant AMD et CommonJS.</simpara>
<simpara>Les modules ECMAScript ont émergé de ce bouillonnement.</simpara>
<section xml:id="modules-script">
<title>La balise &lt;script&gt;</title>
<simpara>Rappelons-le, la méthode incontournable pour charger du code dans un navigateur
est l&#8217;utilisation de la base <literal>&lt;script&gt;</literal>.
Le chargement, l&#8217;évaluation et l&#8217;exécution du script bloquent le temps
nécessaire au rendu d&#8217;un document&#160;HTML.</simpara>
<formalpara>
<title>import/script.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;script src="global-dom-log.js"&gt;&lt;/script&gt;
&lt;script src="script.js"&gt;&lt;/script&gt;

&lt;div id="logs"&gt;&lt;/div&gt;</programlisting>
</para>
</formalpara>
<simpara>Les différents scripts partagent le même espace mémoire, permettant ainsi à
<literal>script.js</literal> d&#8217;avoir accès à la fonction <literal>log</literal> définie dans <literal>global-dom-log.js</literal>.</simpara>
<formalpara>
<title>import/global-dom-log.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const log = (message) =&gt; {
  const text = String(message).trim();

  document.querySelector('#logs').textContent = text;
};</programlisting>
</para>
</formalpara>
<formalpara>
<title>import/script.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">/* global log */
window.addEventListener('load', () =&gt; {
  log('OK');<co xml:id="CO282-1"/>
});

log('KO');  <co xml:id="CO282-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO282-2">
<para>Affiche une erreur car <literal>&lt;div id="logs"&gt;</literal> n&#8217;existe pas encore dans le document
à ce stade de l&#8217;exécution.</para>
</callout>
<callout arearefs="CO282-1">
<para>Cette ligne est exécutée une fois le document chargé&#160;– <literal>&lt;div id="logs"&gt;</literal>
contient désormais le texte&#160;<literal>OK</literal>.</para>
</callout>
</calloutlist>
<simpara>S&#8217;il est facile d&#8217;ajouter du code dans le navigateur, on constate plusieurs problèmes&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Partager du code entre scripts repose sur une attente explicite.</simpara>
</listitem>
<listitem>
<simpara>Le partage de variables entre scripts risque d&#8217;entraîner des collisions
(par exemple, deux variables du même nom définies dans des scripts différents).</simpara>
</listitem>
<listitem>
<simpara>Il n&#8217;y a pas de moyen évident de rendre des parties de code privées au sein de
chaque script.</simpara>
</listitem>
</itemizedlist>
<simpara>Le développement <emphasis>front-end</emphasis> basé sur de l&#8217;outillage Node va justement nous aider
à <emphasis role="strong">solidifier et renforcer la réutilisabilité de notre&#160;code</emphasis>.</simpara>
</section>
<section xml:id="modules-es2015">
<title>Les modules ECMAScript</title>
<simpara>Nous avons évoqué les <link xl:href="../chapter-03/index.xml#primitives">primitives ECMAScript&#160;2015</link> dans le chapitre&#160;3.
Les modules font partie des fonctionnalités tant attendues.</simpara>
<figure>
<title>Utilisation des modules ECMAScript dans un navigateur web (ici, Safari pour macOS)</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/module-import.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>module import</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;attribut <literal>type="module"</literal> sert à maintenir une compatibilité entre les scripts
classiques et les modules ECMAScript.
Ce mécanisme s&#8217;appuie sur plusieurs concepts importants&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Toute variable est privée sauf si elle est exportée avec l&#8217;opérateur <literal>export</literal>.</simpara>
</listitem>
<listitem>
<simpara>Les modules sont explicitement inclus avec l&#8217;opérateur <literal>import</literal>.</simpara>
</listitem>
<listitem>
<simpara>Les variables globales définies par l&#8217;utilisateur ne sont pas accessibles depuis un module.</simpara>
</listitem>
</itemizedlist>
<simpara>Retravaillons le document HTML de la section précédente&#160;:</simpara>
<formalpara>
<title>import/import.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;script&gt;const pro = 'test';&lt;/script&gt;
&lt;script type="module" src="script-import.js"&gt;&lt;/script&gt;

&lt;div id="logs"&gt;&lt;/div&gt;</programlisting>
</para>
</formalpara>
<simpara>Nous voulons maintenant (sa)voir si la variable&#160;<literal>pro</literal> définie avant l&#8217;inclusion
du module <literal>script-import.js</literal> est accessible.
Nous voulons également savoir si la syntaxe d&#8217;import de la fonction&#160;<literal>log</literal> fonctionne&#160;:</simpara>
<formalpara>
<title>import/script-import.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import {log} from './dom-log.js';

console.log(typeof pro);    <co xml:id="CO283-1"/>
console.log(typeof log);    <co xml:id="CO283-2"/>
console.log(typeof window); <co xml:id="CO283-3"/>

window.addEventListener('load', () =&gt; {
  log('OK');
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO283-1">
<para>Affiche <literal>undefined</literal>.</para>
</callout>
<callout arearefs="CO283-2">
<para>Affiche <literal>function</literal>.</para>
</callout>
<callout arearefs="CO283-3">
<para>Affiche <literal>object</literal>.</para>
</callout>
</calloutlist>
<simpara>De même que nous avons utilisé <literal>import</literal> pour importer de manière sélective une
fonction du module <literal>dom-log.js</literal>, l&#8217;opérateur <literal>export</literal> nous aide à exposer des
objets, fonctions et variables&#160;:</simpara>
<formalpara>
<title>import/dom-log.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">export function log(message, target = '#logs') {
  const text = String(message).trim();

  document.querySelector(target).textContent = text;
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="browserify">
<title>Importer des modules&#160;npm pour le&#160;Web</title>
<simpara>Qu&#8217;en est-il alors des modules&#160;<literal>npm</literal>&#160;?
Nous pouvons transpiler et importer du code.
Ce serait très utile si nous pouvions également importer du code tiers.
Cela nous éviterait de réinventer la roue, nous donnerait accès à du code bien testé
et trop coûteux à écrire nous-mêmes.</simpara>
<simpara>Nous avons vu comment <link xl:href="../chapter-05/index.xml#modules">charger des modules&#160;<literal>npm</literal></link>
dans le chapitre 5.
Intéressons-nous à leur utilisation dans le contexte d&#8217;une application <emphasis>front-end</emphasis>.
Pour cela, adaptons l&#8217;exemple de la section précédente&#160;:</simpara>
<formalpara>
<title>import/script-import-jquery.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import $ from 'jquery';

console.log($.fn.jquery);  <co xml:id="CO284-1"/>

$(document).ready(() =&gt; {
  $('#logs').text('OK');   <co xml:id="CO284-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO284-1">
<para><literal>$.fn.jquery</literal> contient le numéro de version de jQuery.</para>
</callout>
<callout arearefs="CO284-2">
<para>Substitut jQuery pour remplacer le texte dans <literal>&lt;div id="logs"&gt;</literal>.</para>
</callout>
</calloutlist>
<simpara>Le document HTML chargeant ce module est en tout point similaire au précédent exemple&#160;:</simpara>
<formalpara>
<title>import/import-jquery.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;script type="module" src="script-import-jquery.js"&gt;&lt;/script&gt;

&lt;div id="logs"&gt;&lt;/div&gt;</programlisting>
</para>
</formalpara>
<simpara>Le seul hic, c&#8217;est que <emphasis role="strong">cela ne fonctionne pas</emphasis>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Le navigateur ne peut pas savoir où se trouve la dépendance demandée.</simpara>
</listitem>
<listitem>
<simpara>Rien ne garantit que <literal>jquery</literal> expose son code en tant que module ECMAScript.</simpara>
</listitem>
<listitem>
<simpara>On n&#8217;a certainement pas envie d&#8217;exposer publiquement le répertoire <literal>node_modules</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>C&#8217;est alors qu&#8217;entre en jeu <emphasis>Browserify</emphasis>.
Il s&#8217;agit d&#8217;un outil générique de transformation de code.
Il peut être utilisé en ligne de commandes, via son API Node, mais aussi par
le biais de plug-in pour d&#8217;autres outils (comme Gulp ou Grunt).</simpara>
<simpara><emphasis>Browserify</emphasis> a été initialement créé pour transformer du code écrit pour Node en
code fonctionnel dans les navigateurs.
Il expose notamment un concept d&#8217;intégrations (les <emphasis>transforms</emphasis>) afin d&#8217;effectuer
des remplacements ligne à ligne.</simpara>
<simpara>Là où <emphasis>Babel</emphasis> cherche uniquement à traduire un langage vers un autre,
<emphasis>Browserify</emphasis> est le couteau suisse pour effectuer des remplacements majeurs dans le code&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>portage de la fonction <literal>require()</literal> et inclusion du code des modules sous-jacents&#160;;</simpara>
</listitem>
<listitem>
<simpara>suppression de code conditionnel&#160;;</simpara>
</listitem>
<listitem>
<simpara>remplacement d&#8217;API spécifiques à Node par des <emphasis>polyfills</emphasis> pour le&#160;Web&#160;;</simpara>
</listitem>
<listitem>
<simpara>extraction de&#160;CSS&#160;;</simpara>
</listitem>
<listitem>
<simpara>etc.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>Browserify</emphasis> est intéressant au sens où il nous apprend à nous constituer
notre outillage, pour nos propres besoins.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Guide</phrase> Utiliser Browserify</title>
<simpara><emphasis>Browserify</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/browserify">npmjs.com/browserify</link></phrase>) est un outil extrêmement
adaptable, modulaire et puissant.
Son apprentissage progressif peut faire de lui un allié de choix dans tous
vos projets Node et&#160;Web.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/substack/browserify-handbook">github.com/substack/browserify-handbook</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Revenons maintenant à notre code auquel il manque la compréhension des
modules&#160;<literal>npm</literal>.
Nous allons maintenant chercher à transformer le fichier <literal>script-import-jquery.js</literal>,
non seulement pour rendre la syntaxe <literal>import</literal> intelligible
(c&#8217;est le <link linkend="transpilation">rôle de Babel</link>), mais aussi pour faire le
lien avec les modules&#160;<literal>npm</literal>&#160;:</simpara>
<screen>$ npm run browserify -- \
  -t babelify \
  -e examples/import/script-import-jquery.js \
  -o examples/import/script-import-jquery-browserify.js</screen>
<simpara>Cette commande exécute trois choses&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>-t babelify</literal> indique d&#8217;utiliser une intégration Babel (un <emphasis>transform</emphasis>) pour
transformer la syntaxe ECMAScript&#160;2015.</simpara>
</listitem>
<listitem>
<simpara><literal>-e &#8230;&#8203;</literal> indique le script d&#8217;entrée à transformer.</simpara>
</listitem>
<listitem>
<simpara><literal>-o &#8230;&#8203;</literal> indique où stocker le script transformé.</simpara>
</listitem>
</itemizedlist>
<simpara>Il en résultera un fichier nommé <literal>script-import-jquery-browserify.js</literal> compatible
ECMAScript&#160;5 et qui inclut désormais le code source de jQuery.</simpara>
<simpara>Il ne nous reste plus qu&#8217;à charger le fichier transformé dans notre page web pour
voir le résultat&#160;:</simpara>
<formalpara>
<title>import/import-jquery-browserify.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;script src="script-import-jquery-browserify.js"&gt;&lt;/script&gt;

&lt;div id="logs"&gt;&lt;/div&gt;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="récapitulatif">
<title>Récapitulatif</title>
<simpara>En résumé, nous avons besoin de nous baser sur deux ou trois outils pour écrire
un code modulaire et compatible avec n&#8217;importe quel type de syntaxe&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Babel pour transformer la syntaxe&#160;;</simpara>
</listitem>
<listitem>
<simpara>des <emphasis>polyfills</emphasis> pour harmoniser les fonctionnalités&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis>browserify</emphasis> pour l&#8217;intégration avec les modules&#160;<literal>npm</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>Ceux-ci ont l&#8217;avantage d&#8217;être faciles à prendre en main, modulaires et évolutifs.
Nous pourrons aussi nous tourner vers d&#8217;autres outils de transformation de code
pour explorer d&#8217;autres horizons&#160;– et il en existe énormément&#160;: webpack, rollup,
broccoli, etc.</simpara>
</section>
</section>
<section xml:id="conception_modulaire">
<title>Conception modulaire</title>
<simpara>Un autre paradigme change avec la mise à disposition des modules et de
l&#8217;outillage&#160;: le code que l&#8217;on écrit dépend surtout d&#8217;ECMAScript et de
l&#8217;environnement dans lequel on l&#8217;exécute, à savoir Node ou un navigateur.</simpara>
<simpara>La section suivante s&#8217;intéresse à l&#8217;évolution de l&#8217;écriture du code, autrefois
dirigée par la structure du document HTML, vers un monde de
fonctions consommant des données, transformées pour un type d&#8217;affichage, que ce
soit HTML ou autre.</simpara>
<simpara>Nous illustrerons cette évolution au travers d&#8217;un exemple relativement simple&#160;:
une balise HTML affichant l&#8217;heure dont nous actualisons le contenu toutes les secondes.</simpara>
<figure>
<title>Résultat de l&#8217;exemple développé dans les sections suivantes</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/modules-time.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>modules time</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <emphasis>jQuery</emphasis></title>
<simpara>Les exemples suivants se basent sur l&#8217;utilisation de la bibliothèque <emphasis>jQuery</emphasis>
(<phrase role="URL"><link xl:href="https://api.jquery.com">api.jquery.com</link></phrase>).</simpara>
<simpara>Elle facilite la manipulation du DOM tout en gérant les incompatibilités des
différents navigateurs.
Son utilisation est devenue moins dominante du fait d&#8217;une nette amélioration de
la qualité de ces derniers.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="http://learn.jquery.com/using-jquery-core/">learn.jquery.com/using-jquery-core/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<section xml:id="le_syndrome_du_plug_in_jquery">
<title>Le syndrome du plug-in jQuery</title>
<simpara>Ce que j&#8217;appelle le <quote>syndrome du plug-in <emphasis>jQuery</emphasis></quote>, c&#8217;est une combinaison
des éléments suivants&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>création de code métier inutilisable en dehors de <emphasis>jQuery</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>mélange de la présentation des données et de l&#8217;organisation du code métier&#160;;</simpara>
</listitem>
<listitem>
<simpara>un code aveugle car éloigné de la structure HTML nécessaire à son fonctionnement&#160;;</simpara>
</listitem>
<listitem>
<simpara>fragilité du code en cas de changement de la structure HTML associée&#160;;</simpara>
</listitem>
<listitem>
<simpara>en général, un code difficilement testable&#160;– difficile de ne pas aboutir à une interface boguée.</simpara>
</listitem>
</itemizedlist>
<simpara>Voici un exemple de document HTML fragile et mélangeant tous les concepts en même temps.
Il est parfaitement valide, mais illustre un ensemble de pratiques courantes que
nous allons chercher à déconstruire.</simpara>
<formalpara>
<title>modules/jquery-plugin.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;body&gt;
  &lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;

  &lt;time datetime="" data-interval="1000"&gt;---&lt;/time&gt;

  &lt;script src="../../node_modules/jquery/dist/jquery.js"&gt;&lt;/script&gt;
  &lt;script src="jquery-plugin.js"&gt;&lt;/script&gt;
&lt;/body&gt;</programlisting>
</para>
</formalpara>
<simpara>Maintenant que la structure HTML est définie, nous devons écrire le
code affichant l&#8217;heure dans un élément HTML toutes les secondes.</simpara>
<formalpara>
<title>modules/jquery-plugin.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">/* global jQuery */

($ =&gt; {
  $.fn.displaySeconds = function displaySeconds() {
    this.each((i, dateElement) =&gt; {
      setInterval(() =&gt; {                  <co xml:id="CO285-1"/>
        const now = new Date();            <co xml:id="CO285-2"/>
        const seconds = now.getSeconds();

        $(dateElement)                     <co xml:id="CO285-3"/>
          .removeClass(seconds % 2 ? 'pair': 'impair')
          .addClass(seconds % 2 ? 'impair': 'pair')
          .attr('datetime', now.toISOString())
          .text(now.toLocaleTimeString());
      }, $(dateElement).data('interval')); <co xml:id="CO285-4"/>
    });

    return this;
  };

  $(document).ready(() =&gt; {      <co xml:id="CO285-5"/>
    $('time').displaySeconds();  <co xml:id="CO285-6"/>
  });
})(jQuery);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO285-1">
<para>Ce bloc de code est exécuté toutes les secondes.</para>
</callout>
<callout arearefs="CO285-2">
<para>La donnée de temps est obtenue chaque seconde par notre plug-in <emphasis>jQuery</emphasis>.</para>
</callout>
<callout arearefs="CO285-3">
<para>Certaines décisions métier sont mélangées avec l&#8217;affichage de la donnée temps.</para>
</callout>
<callout arearefs="CO285-4">
<para>L&#8217;intervalle est déterminé par la valeur de l&#8217;attribut <literal>data-interval</literal>.</para>
</callout>
<callout arearefs="CO285-5">
<para>Ce bloc de code est exécuté dès que le document HTML est prêt&#160;– toute sa structure HTML est disponible.</para>
</callout>
<callout arearefs="CO285-6">
<para>Le plug-in <emphasis>jQuery</emphasis> est appliqué à toutes les occurrences de <literal>&lt;time&gt;</literal> dans lequel il est exécuté.</para>
</callout>
</calloutlist>
<simpara>Certains motifs illustrés dans la section <quote><link linkend="modules">Importer des modules</link></quote>
refont surface&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Variables globales&#160;: que faire si <literal>jQuery</literal> n&#8217;existe pas&#160;?</simpara>
</listitem>
<listitem>
<simpara>Connaissance implicite du document&#160;: que faire si une personne tierce remplace
la balise <literal>&lt;time&gt;</literal> par une autre balise&#160;?</simpara>
</listitem>
<listitem>
<simpara>Code ECMAScript piloté par le document&#160;: que faire si une personne tierce
exprime l&#8217;intervalle en secondes et non en millisecondes&#160;?</simpara>
</listitem>
</itemizedlist>
<simpara>La faute n&#8217;est pas vraiment celle de <emphasis>jQuery</emphasis> mais plutôt la nôtre&#160;– enfin, la mienne.
Nous avons mélangé règles de fonctionnement (contenu de balise, classe&#160;CSS
à ajouter/enlever) et données (date courante, parité des secondes, événement de
mise à jour <literal>setInterval()</literal>).</simpara>
</section>
<section xml:id="vers_une_approche_jquery_composite">
<title>Vers une approche jQuery composite</title>
<simpara>Nous allons maintenant reprendre les concepts appris précédemment et conserver
le même outil, à savoir <emphasis>jQuery</emphasis>.
Certains outils encouragent de bons motifs de conception et donnent la sensation
de résoudre des problèmes.
Apprendre ces motifs et à capitaliser sur les outils que nous connaissons déjà
peuvent nous emmener tout aussi&#160;loin.</simpara>
<formalpara>
<title>modules/jquery-app.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;body&gt;
  &lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;

  &lt;time datetime=""&gt;---&lt;/time&gt;

  &lt;script src="jquery-app-browserify.js"&gt;&lt;/script&gt;
&lt;/body&gt;</programlisting>
</para>
</formalpara>
<simpara>Le changement majeur réside dans la réorganisation du code applicatif&#160;:</simpara>
<formalpara>
<title>modules/jquery-app.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import $ from 'jquery';
import timerFn from './timer.js';                   <co xml:id="CO286-1"/>

const displaySeconds = (tickData, dateElement) =&gt; { <co xml:id="CO286-2"/>
  const {className, now} = tickData;

  $(dateElement)                                    <co xml:id="CO286-3"/>
    .attr('class', className)
    .attr('datetime', now.toISOString())
    .text(now.toLocaleTimeString());
};

$(document).ready(() =&gt; {
  const dateElements = $('time').get();             <co xml:id="CO286-4"/>
  const onTick = tickData =&gt; {                      <co xml:id="CO286-5"/>
    dateElements.forEach(el =&gt; displaySeconds(tickData, el));
  };

  timerFn({ interval: 1000, onTick });              <co xml:id="CO286-6"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO286-4">
<para>Nous sélectionnons les éléments de la page à actualiser chaque seconde.</para>
</callout>
<callout arearefs="CO286-5">
<para>Nous définissons quoi faire avec les données transmises chaque seconde.</para>
</callout>
<callout arearefs="CO286-6">
<para>Nous démarrons un minuteur.</para>
</callout>
<callout arearefs="CO286-1">
<para>Le minuteur est une fonction externe, dont le comportement n&#8217;est pas régi par <emphasis>jQuery</emphasis> ou une autre bibliothèque.</para>
</callout>
<callout arearefs="CO286-2">
<para>Cette fonction est responsable de l&#8217;affichage de données dans un élément&#160;HTML.</para>
</callout>
<callout arearefs="CO286-3">
<para>Cette fois-ci, nous nous contentons de seulement mettre à jour attributs et contenus&#160;– la logique métier a été déplacée dans le module <literal>timer.js</literal>.</para>
</callout>
</calloutlist>
<simpara>Le code a été divisé en deux sections distinctes&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>celle qui décrit la réaction à une donnée&#160;;</simpara>
</listitem>
<listitem>
<simpara>celle qui intègre le minuteur avec les éléments du DOM.</simpara>
</listitem>
</itemizedlist>
<simpara>Nous n&#8217;avons pas réellement besoin de savoir comment fonctionne le minuteur à
ce niveau&#160;– nous devons pouvoir compter sur les données qu&#8217;il nous fournit.</simpara>
<formalpara>
<title>modules/timer.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const tick = () =&gt; {              <co xml:id="CO287-1"/>
  const now = new Date;

  return {                        <co xml:id="CO287-2"/>
    now,
    className: now.getSeconds() % 2 ? 'impair': 'pair'
  }
};

module.exports = function timer ({ onTick, interval }) {<co xml:id="CO287-3"/>
  setInterval(() =&gt; onTick(tick()), interval);          <co xml:id="CO287-4"/>

  return tick();                  <co xml:id="CO287-5"/>
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO287-1">
<para>Cette fonction (privée) est chargée de décrire le temps présent sous forme d&#8217;une structure de données.</para>
</callout>
<callout arearefs="CO287-2">
<para>Cette structure de données pourra retourner de nouvelles clés/valeurs sans remettre en cause le fonctionnement du code y ayant recours.</para>
</callout>
<callout arearefs="CO287-3">
<para>Le paramètre <literal>onTick</literal> est une fonction passée en argument qui sera appelée à chaque nouvel intervalle de temps.</para>
</callout>
<callout arearefs="CO287-4">
<para>La responsabilité de <literal>timer</literal> est de communiquer une nouvelle structure de données à un intervalle de temps donné.</para>
</callout>
<callout arearefs="CO287-5">
<para>On retourne immédiatement une structure de données par commodité et de manière synchrone.</para>
</callout>
</calloutlist>
<simpara>Pour un résultat identique, nous avons désormais séparé notre code en trois
domaines distincts&#160;: le minuteur, son intégration, sa représentation sous forme HTML.
Cerise sur le gâteau, cette distinction se constate visuellement,
au premier coup&#160;d&#8217;œil.</simpara>
<simpara>Tout n&#8217;est pas parfait, car nous sommes encore liés à la structure du
document&#160;HTML.</simpara>
</section>
<section xml:id="partager_le_code_métier_avecnode">
<title>Partager le code métier avec&#160;Node</title>
<simpara>Cette séparation de principes (<emphasis>separation of concerns</emphasis>) va au-delà du plaisir
de l&#8217;esthète.
Nous venons sans le savoir de créer du <emphasis role="strong">code ECMAScript universel</emphasis>.</simpara>
<simpara>Pourquoi universel&#160;?
Parce que nous pouvons tout aussi bien l&#8217;inclure et l&#8217;exécuter dans Node que
dans un navigateur&#160;:</simpara>
<formalpara>
<title>modules/node-timer.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const timerFn = require('./timer.js');

timerFn({ interval: 1000, onTick: console.log });</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exécution du script <literal>node-timer.js</literal> afficherait quelque chose comme ce
qui suit dans votre terminal&#160;:</simpara>
<screen>$ node examples/modules/node-timer.js
{ now: 2017-02-17T11:07:29.752Z, className: 'impair' }
{ now: 2017-02-17T11:07:30.762Z, className: 'pair' }
{ now: 2017-02-17T11:07:31.768Z, className: 'impair' }
{ now: 2017-02-17T11:07:32.770Z, className: 'pair' }
{ now: 2017-02-17T11:07:33.775Z, className: 'impair' }
{ now: 2017-02-17T11:07:34.779Z, className: 'pair' }
<keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo></screen>
<simpara>Chaque seconde, la fonction <literal>console.log</literal> est appelée et affiche la structure
de données de notre minuteur dans la sortie standard du terminal.</simpara>
<simpara>Nous pourrions dès à présent utiliser le minuteur dans d&#8217;autres applications,
côté client, côté serveur et, pourquoi pas, un jour le publier sur le
registre&#160;<literal>npm</literal>&#160;?</simpara>
</section>
<section xml:id="séparation_du_fond_et_de_la_forme_données_rendu_et_interactions">
<title>Séparation du fond et de la forme : données, rendu et interactions</title>
<simpara>Les praticien·ne·s de l&#8217;intégration web nous le dirons souvent&#160;: il faut
<emphasis role="strong">séparer le fond de la forme</emphasis>.
Il en est de même dans notre code&#160;– et pas que pour le développement <emphasis>front-end</emphasis>.</simpara>
<simpara>Un code maintenable n&#8217;a pas besoin d&#8217;être complexe.
Il nécessite surtout de bien isoler ses périmètres d&#8217;intervention.</simpara>
<simpara>Les exemples précédents nous ont permis de déceler trois périmètres phares&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>données&#160;: des structures prédictibles, obtenues ou modifiées&#160;;</simpara>
</listitem>
<listitem>
<simpara>rendu&#160;: la représentation des données en contexte, que ce soit une page HTML,
un terminal ou un fichier&#160;CSV&#160;;</simpara>
</listitem>
<listitem>
<simpara>interactions&#160;: des événements déclenchés par les utilisateurs, par des
facteurs externes ou des règles métier&#160;– ils affectent les données et leur
représentation.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="react">
<title>Rapprocher données, rendu et interactions avec&#160;React</title>
<simpara><emphasis>React</emphasis> a atteint un pic de popularité certain en&#160;2015 et&#160;2016,
pas seulement parce que c&#8217;est un outil bien conçu, mais justement parce
qu&#8217;il encourage cette pratique de la représentation des données.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> API&#160;React</title>
<simpara>Les exemples suivants se basent sur la bibliothèque <emphasis>React</emphasis> (<phrase role="URL"><link xl:href="https://reactjs.org">reactjs.org</link></phrase>).
Sa documentation offre de bons exemples pour se familiariser avec son utilisation.</simpara>
</tip>
<simpara>Notre code HTML n&#8217;est qu&#8217;un résultat exposant des surfaces d&#8217;interaction.
Il se structure en composants.
Un composant est responsable de deux choses&#160;: la représentation de données et
la réaction à des événements.</simpara>
<simpara>Cela se traduira par un changement de taille&#160;: l&#8217;exemple que nous avons fait
évoluer ne fait plus mention de balise <literal>&lt;time&gt;</literal> mais expose une balise dédiée à
contenir notre composant minuteur&#160;:</simpara>
<formalpara>
<title>modules/react-app.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;body&gt;
  &lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;

  &lt;div id="app"&gt;&lt;/div&gt;

  &lt;script src="react-app-browserify.js"&gt;&lt;/script&gt;
&lt;/body&gt;</programlisting>
</para>
</formalpara>
<simpara>Notre code applicatif est réduit à son plus strict minimum&#160;:</simpara>
<formalpara>
<title>modules/react-app.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import { createElement } from 'react';
import ReactDOM from 'react-dom';
import DateInterval from './date-interval.jsx';

ReactDOM.render(                                  <co xml:id="CO288-1"/>
  createElement(DateInterval, {interval: 1000}),  <co xml:id="CO288-2"/>
  document.querySelector('#app')                  <co xml:id="CO288-3"/>
);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO288-1">
<para>Méthode responsable du rendu HTML de notre composant <literal>TimeInterval</literal> dans l&#8217;élément <literal>&lt;div id="app"&gt;</literal>.</para>
</callout>
<callout arearefs="CO288-2">
<para>Création de notre composant minuteur avec un intervalle de mise à jour de 1&#160;000 millisecondes.</para>
</callout>
<callout arearefs="CO288-3">
<para>Indication que le rendu du composant sera effectué dans l&#8217;élément <literal>&lt;div id="app"&gt;</literal>.</para>
</callout>
</calloutlist>
<simpara>Cela ressemble fortement au contenu de nos précédentes invocations de
<literal>$(document).ready()</literal> mais sans avoir à se soucier du fonctionnement interne du minuteur.</simpara>
<simpara>La représentation et le fonctionnement du minuteur sont désormais regroupés
dans un seul composant.</simpara>
<formalpara>
<title>modules/date-interval.jsx</title>
<para>
<programlisting language="jsx" linenumbering="unnumbered">import React, { Component } from 'react';
import timerFn from './timer.js';

export default class DateInterval extends Component {    <co xml:id="CO289-1"/>
  constructor(props) {                                   <co xml:id="CO289-2"/>
    super(props);

    const {interval} = props;
    this.onTick = this.onTick.bind(this);

    this.state = {
      tickData: timerFn({ interval, onTick: this.onTick })<co xml:id="CO289-3"/>
    };
  }

  onTick (tickData) {
    this.setState({ tickData });                   <co xml:id="CO289-4"/>
  }

  render() {                                       <co xml:id="CO289-5"/>
    const {className, now} = this.state.tickData;  <co xml:id="CO289-6"/>

    return (&lt;time className={className} dateTime={now.toISOString()}&gt;
      {now.toLocaleTimeString()}
    &lt;/time&gt;);
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO289-1">
<para>Nous exportons un composant <emphasis>React</emphasis> grâce à l&#8217;opérateur <literal>extends</literal> (<link xl:href="../chapter-03/index.xml#primitive-class">chapitre&#160;3</link>).</para>
</callout>
<callout arearefs="CO289-2">
<para>Le <literal>constructor</literal> est exécuté quand le composant est rendu dans le document.</para>
</callout>
<callout arearefs="CO289-3">
<para>La propriété <literal>interval</literal> nous est fournie dans <literal>react-app.js</literal> et nous stockons la structure de donnée retournée par le minuteur tout en déclenchant son actualisation toutes les 1&#160;000 millisecondes.</para>
</callout>
<callout arearefs="CO289-4">
<para>À chaque intervalle, nous mettons à jour la valeur <literal>tickData</literal> de l&#8217;état interne du composant (<literal>this.state</literal>).</para>
</callout>
<callout arearefs="CO289-5">
<para>La méthode <literal>render()</literal> est exécutée quand le composant est inséré dans un document pour la première fois et quand l&#8217;état interne (<literal>this.state</literal>) change.</para>
</callout>
<callout arearefs="CO289-6">
<para>Nous déstructurons la valeur connue de <literal>tickData</literal> pour effectuer une opération qui nous rappelle les différents appels à <literal>.attr('class')</literal> et <literal>.text()</literal> de <emphasis>jQuery</emphasis>.</para>
</callout>
</calloutlist>
<simpara><emphasis>React</emphasis> introduit trois concepts au sein des composants&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>un cycle de vie basé sur des propriétés (<emphasis>props</emphasis>) et un état interne (<emphasis>state</emphasis>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>des propriétés immuables pour le paramétrage initial&#160;;</simpara>
</listitem>
<listitem>
<simpara>un état interne mutable pour contenir les changements et demander une
actualisation de leur représentation dans le document.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>React</emphasis> détermine les opérations à effectuer dans le document HTML en fonction
de leur lourdeur&#160;: (re)création complète de <literal>&lt;time&gt;</literal> dans le nœud
parent, simple mise à jour d&#8217;un ou plusieurs attribut(s) ou encore déplacement
du composant ailleurs dans le document HTML, etc.</simpara>
<simpara>L&#8217;intelligence d&#8217;une bibliothèque comme <emphasis>React</emphasis> est d&#8217;encourager à décrire
les données et leur rendu pour se charger des opérations d&#8217;écriture dans le DOM.
Cela conduit à créer des composants faciles à isoler, à réutiliser et à tester.</simpara>
<simpara>Cette approche nous a laissés réutiliser notre minuteur simplement en l&#8217;adaptant.
<emphasis>React</emphasis> nous permet de diriger l&#8217;affichage du document plutôt que d&#8217;en dépendre.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Outil</phrase> React Developer Tools</title>
<simpara>Une extension pour les navigateurs Chrome et Firefox détaille l&#8217;arborescence
des composants montés dans le document HTML ainsi qu&#8217;une vue de leurs propriétés
respectives&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://chrome.google.com/webstore/detail/fmkadmapgofadopljbjfkapdkoienihi">chrome.google.com/webstore/detail/fmkadmapgofadopljbjfkapdkoienihi</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://addons.mozilla.org/firefox/addon/react-devtools/">addons.mozilla.org/firefox/addon/react-devtools/</link></phrase></simpara>
</listitem>
</itemizedlist>
<figure>
<title>React Developer Tools</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/react-devtools.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>react devtools</phrase></textobject>
</mediaobject>
</figure>
</tip>
</section>
</section>
<section xml:id="io">
<title>Des requêtes Ajax vers du temps&#160;réel</title>
<simpara>Les technologies web offrent un panel de fonctionnalités créatives et adaptables.
L&#8217;explosion du <emphasis>Web 2.0</emphasis> a coïncidé avec la redécouverte de <literal>XMLHttpRequest</literal>,
une API initialement créée par Microsoft pour transférer des données entre
client et serveur, de manière non&#160;bloquante.
Cette fonctionnalité a permis de basculer vers un monde de pages dynamiques et
rapides à charger.
Des applications web comme Google&#160;Maps, Gmail ou la recherche instantanée de
Google ont parachevé la popularisation de cette technique.</simpara>
<simpara>Toutefois, son API est peu intuitive et est unidirectionnelle, dirigée
du client vers le serveur.
Le terme <literal>XMLHttpRequest</literal> est parfois nommé <literal>Ajax</literal> ou <literal>xhr</literal>.</simpara>
<simpara>Un même exemple côté client sera développé et successivement adapté aux
technologies <literal>fetch()</literal>, <emphasis>EventSource</emphasis> puis <emphasis>WebSocket</emphasis>.
Il nous permettra d&#8217;en faire émerger les principes, leurs cas d&#8217;usage ainsi
que leur possible intégration avec&#160;Node.</simpara>
<simpara>L&#8217;implémentation côté serveur est basée sur un serveur
<link xl:href="../chapter-07/index.xml#express">Express.js</link> dont l&#8217;usage est expliqué au
<link xl:href="../chapter-07/index.xml">chapitre&#160;7</link>.</simpara>
<figure>
<title>Résultat attendu dans les exemples des sections suivantes</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/io-example.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>io example</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Node, mais pas&#160;que</title>
<simpara><literal>fetch()</literal>, <emphasis>EventSource</emphasis> et <emphasis>WebSocket</emphasis> reposent sur le protocole HTTP/1 et ses extensions.
Il est important de comprendre que leur contrepartie <quote>côté serveur</quote> existe aussi
dans d&#8217;autres langages et environnements comme Ruby, Python et PHP.</simpara>
<simpara>Il se trouve que la nature asynchrone même de Node rend cette intégration
relativement aisée et triviale, aussi et en grande partie grâce à l&#8217;écosystème&#160;<literal>npm</literal>.</simpara>
</tip>
<section xml:id="io-fetch">
<title>Échange ponctuel de données avec <literal>fetch()</literal></title>
<simpara><literal>fetch()</literal> offre une interface très simple pour appeler une ressource HTTP.
Le résultat est retourné sous forme de promesse
(<link xl:href="../chapter-03/index.xml#promise">chapitre&#160;3</link>).
Cette fonction sert aussi bien à obtenir des ressources avec des requêtes de
type&#160;<literal>GET</literal> et <literal>HEAD</literal> qu&#8217;à en créer et modifier avec des requêtes de type <literal>POST</literal>,
<literal>PUT</literal>, <literal>DELETE</literal> et <literal>PATCH</literal>.</simpara>
<simpara>L&#8217;exemple associé est accessible sur <phrase role="URL"><link xl:href="http://localhost:4000/examples/io/fetch.html">localhost:4000/examples/io/fetch.html</link></phrase>.
Nous pouvons vérifier la compatibilité navigateur de <literal>fetch()</literal> sur
<phrase role="URL"><link xl:href="http://caniuse.com#feat=fetch">caniuse.com#feat=fetch</link></phrase>.</simpara>
<simpara>Le déroulé d&#8217;exécution d&#8217;un appel à <literal>fetch()</literal> est le suivant&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Construction de la requête (URL ou objet <literal>Request</literal>, options).</simpara>
</listitem>
<listitem>
<simpara>Réception des en-têtes de la réponse (objet <literal>Response</literal>).</simpara>
</listitem>
<listitem>
<simpara>Décodage de la réponse.</simpara>
</listitem>
</orderedlist>
<simpara>Plusieurs décodeurs de réponse sont fournis nativement&#160;: texte
(<literal>response.text()</literal>), JSON (<literal>response.json()</literal>), ArrayBuffer
(<literal>response.arrayBuffer()</literal>), Blob (<literal>response.blob()</literal>) et FormData
(<literal>response.formData()</literal>).</simpara>
<formalpara>
<title>io/fetch-client.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const userList = document.querySelector('#user-list');

setInterval(() =&gt; {
  fetch('/new-users')                             <co xml:id="CO290-1"/>
    .then(response =&gt; response.text())            <co xml:id="CO290-2"/>
    .then(data =&gt; {                               <co xml:id="CO290-3"/>
      const now = new Date().toLocaleTimeString();
      const li = document.createElement('li');

      li.textContent = `${now} : ${data}`;
      userList.prepend(li);
    })
}, 2000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO290-1">
<para>Exécution de la requête HTTP <emphasis>GET</emphasis> vers <literal>/new-users</literal> depuis le navigateur courant.</para>
</callout>
<callout arearefs="CO290-2">
<para>Décodage progressif de la réponse.</para>
</callout>
<callout arearefs="CO290-3">
<para>Une fois le décodage terminé, le résultat de la requête HTTP est mis à disposition&#160;– ici, sous forme de chaîne de caractères.</para>
</callout>
</calloutlist>
<figure>
<title>Traces réseau d&#8217;appels successifs à <literal>fetch()</literal> ; chacun résultant en une nouvelle requête&#160;HTTP</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/fetch-frames.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>fetch frames</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;implémentation d&#8217;une ressource HTTP côté serveur s&#8217;effectue simplement
en retournant une réponse lors d&#8217;une requête.</simpara>
<formalpara>
<title>io/fetch-server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const chance = require('chance').Chance();

module.exports = (app) =&gt; {
  app.get('/new-users', (req, res) =&gt; {
    res.send(chance.name());
  });
};</programlisting>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Guide</phrase> Collection d&#8217;exemples</title>
<simpara>Le site communautaire MDN met à disposition une dizaine d&#8217;exemples
pour illustrer différents cas d&#8217;utilisation de <literal>fetch()</literal>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/mdn/fetch-examples">github.com/mdn/fetch-examples</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>En résumé, <literal>fetch()</literal> est idéal pour des demandes ponctuelles de données,
du client vers le serveur.
Le module&#160;<literal>npm</literal> <literal>node-fetch</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/node-fetch">npmjs.com/node-fetch</link></phrase>) est une
implémentation de <literal>fetch()</literal> pour Node, tandis que <literal>whatwg-fetch</literal>
(<phrase role="URL"><link xl:href="https://npmjs.com/whatwg-fetch">npmjs.com/whatwg-fetch</link></phrase>) s&#8217;occupe uniquement de <emphasis>polyfiller</emphasis> les
navigateurs.</simpara>
</section>
<section xml:id="io-eventsource">
<title>Approche unidirectionnelle avec EventSource</title>
<simpara><emphasis>EventSource</emphasis> est un mécanisme moins connu que <literal>fetch()</literal> ou <emphasis>WebSocket</emphasis> mais qui
tire ses origines de la technologie <emphasis>Comet</emphasis>.
On peut l&#8217;assimiler à une inversion de <literal>fetch()</literal>&#160;: le client appelle une ressource
serveur, maintient une connexion de longue durée et attend un ou plusieurs
message(s) dudit serveur.</simpara>
<simpara>Chaque connexion est ouverte en faisant appel à la construction d&#8217;un objet
<literal>EventSource</literal>, qui émet alors plusieurs types d&#8217;événements en fonction des actions&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>open</literal>&#160;: lorsque le client s&#8217;est connecté au serveur&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>message</literal>&#160;: lorsque le serveur émet des données à destination du client&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>close</literal>&#160;: lorsque la connexion est fermée par le serveur&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>error</literal>&#160;: lorsque la connexion est accidentellement interrompue.</simpara>
</listitem>
</itemizedlist>
<simpara>Ce modèle de connexion permet tout aussi bien d&#8217;avoir un canal de données
unique avec chaque utilisateur ou encore d&#8217;émettre les mêmes données en temps
réel à destination de tous les usagers.</simpara>
<simpara>L’exemple associé est accessible sur <phrase role="URL"><link xl:href="http://localhost:4000/examples/io/eventsource.html">localhost:4000/examples/io/eventsource.html</link></phrase>.
Nous pouvons vérifier la compatibilité navigateur de <emphasis>EventSource</emphasis> sur
<phrase role="URL"><link xl:href="http://caniuse.com#feat=eventsource">caniuse.com#feat=eventsource</link></phrase>.</simpara>
<formalpara>
<title>io/eventsource-client.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const connection = new EventSource('/new-users');     <co xml:id="CO291-1"/>
const userList = document.querySelector('#user-list');

connection.addEventListener('message', ({data}) =&gt; {  <co xml:id="CO291-2"/>
  const now = new Date().toLocaleTimeString();
  const li = document.createElement('li');

  li.textContent = `${now} : ${data}`;
  userList.prepend(li);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO291-1">
<para>Nous ouvrons une nouvelle connexion <emphasis>EventSource</emphasis> de longue durée depuis
le navigateur courant.</para>
</callout>
<callout arearefs="CO291-2">
<para>Fonction appelée à chaque fois que le serveur transmet un message au client.</para>
</callout>
</calloutlist>
<figure>
<title>Plusieurs messages peuvent être transmis par le biais d&#8217;une seule connexion HTTP avec <emphasis>EventSource</emphasis></title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/eventsource-frames.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>eventsource frames</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;implémentation d'<emphasis>EventSource</emphasis> demande un peu d&#8217;efforts côté serveur, mais ne
nécessite pas de framework particulier.
La complexité réside dans le maintien d&#8217;une transmission de données dédiée à
chaque client ainsi qu&#8217;à la libération de la connexion lorsque le client se déconnecte.</simpara>
<formalpara>
<title>io/eventsource-server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const WebSocket = require('faye-websocket');
const {EventSource} = WebSocket;

const chance = require('chance').Chance();

module.exports = (app) =&gt; {
  app.get('/new-users', (req, res, next) =&gt; {
    if (!EventSource.isEventSource(req)) {      <co xml:id="CO292-1"/>
      return next();
    }

    let es = new EventSource(req, res);         <co xml:id="CO292-2"/>
    const loop = setInterval(() =&gt; {
      es.send(chance.name());                   <co xml:id="CO292-3"/>
    }, 2000);

    es.on('close', () =&gt; {
      clearInterval(loop);
      es = null;
      next();
    });
  });
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO292-1">
<para>Une connexion <emphasis>EventSource</emphasis> s&#8217;effectue (presque) comme une requête HTTP classique&#160;– il convient de vérifier qu&#8217;elle s&#8217;annonce en tant que&#160;telle.</para>
</callout>
<callout arearefs="CO292-2">
<para>Création d&#8217;un canal unique entre le client et le serveur.</para>
</callout>
<callout arearefs="CO292-3">
<para>Chaque appel à <literal>es.send</literal> enverra un nouveau message au client.</para>
</callout>
</calloutlist>
<simpara>Le serveur est responsable de la gestion des connexions demandées par les
différents clients.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> EventSource</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur EventSource.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Server-sent_events">developer.mozilla.org/docs/fr/Server-sent_events</link>
</simpara>
</note>
<simpara>En résumé, <emphasis>EventSource</emphasis> est idéal pour maintenir une connexion avec le serveur
et souscrire à des mises à jour en continu.
Chaque connexion <emphasis>EventSource</emphasis> devrait concerner qu&#8217;un seul et même type d&#8217;événement.</simpara>
</section>
<section xml:id="io-websocket">
<title>Échanges en temps&#160;réel avec WebSocket</title>
<simpara><emphasis>WebSocket</emphasis> est une technologie web favorisant les échanges bidirectionnels
entre client et serveur.</simpara>
<simpara>À l&#8217;inverse du protocole HTTP/1, tout message envoyé par le client ou par le
serveur n&#8217;appelle pas à une réponse de la part du receveur.
Cet élément et le maintien d&#8217;une connexion permanente expliquent la
rapidité du protocole en comparaison avec le modèle requête/réponse.</simpara>
<simpara>L’exemple associé est accessible sur <phrase role="URL"><link xl:href="http://localhost:4000/examples/io/websocket.html">localhost:4000/examples/io/websocket.html</link></phrase>.
Nous pouvons vérifier la compatibilité navigateur de <emphasis>WebSocket</emphasis> sur
<phrase role="URL"><link xl:href="http://caniuse.com#feat=websocket">caniuse.com#feat=websocket</link></phrase>.</simpara>
<formalpara>
<title>io/websocket-client.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let ws = new WebSocket('ws://localhost:4000/users');  <co xml:id="CO293-1"/>
const userList = document.querySelector('#user-list');
let interval;

ws.addEventListener('open', () =&gt; {
  interval = setInterval(() =&gt; {
    ws.send(JSON.stringify({ action: 'getName' }));   <co xml:id="CO293-2"/>
  }, 2000);
});

ws.addEventListener('message', ({data}) =&gt; {          <co xml:id="CO293-3"/>
  const li = document.createElement('li');
  const now = new Date().toLocaleTimeString();

  li.textContent = `${now} : ${data}`;
  userList.prepend(li);
});

ws.addEventListener('close', () =&gt; {
  ws = null;
  clearInterval(interval);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO293-1">
<para>Nous ouvrons une connexion <emphasis>WebSocket</emphasis> depuis le navigateur courant.</para>
</callout>
<callout arearefs="CO293-2">
<para>Émission d&#8217;un message à destination du serveur.</para>
</callout>
<callout arearefs="CO293-3">
<para>Réaction à un message émis par le serveur.</para>
</callout>
</calloutlist>
<figure>
<title>Trame de messages envoyés par le client (sur fond vert) et par le serveur</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/websocket-frames.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>websocket frames</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;implémentation côté serveur est légèrement plus compliquée qu&#8217;avec
<emphasis>EventSource</emphasis> pour la simple et bonne raison que <emphasis>Websocket</emphasis> est une surcouche
du protocole&#160;<literal>ws</literal>.
HTTP n&#8217;est utilisé que comme canal de communication pour établir un lien avec
le serveur&#160;<literal>ws</literal>.
HTTP sert de tunnel tandis que le dialogue entre client et serveur s&#8217;effectue
dans un dialecte compréhensible uniquement de clients <emphasis>WebSocket</emphasis>.</simpara>
<simpara>Il est nécessaire d&#8217;utiliser un module&#160;<literal>npm</literal> <emphasis>WebSocket</emphasis> comme <emphasis>faye</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/faye-websocket">npmjs.com/faye-websocket</link></phrase>) ou <emphasis>socket.io</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/socket.io">npmjs.com/socket.io</link></phrase>) à moins de vouloir réimplémenter le protocole
soi-même.
Le motif de conception est similaire à celui d'<emphasis>EventSource</emphasis>, à la différence près
qu&#8217;il faut aussi écouter les messages transmis par le client.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Remarque</phrase> HTTP et le statut 101 Switching Protocols</title>
<simpara>Voici ce qui se passe lorsqu&#8217;un client <emphasis>WebSocket</emphasis> se connecte sur <literal>ws://example.com</literal>&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Requête HTTP <literal><link xl:href="http://example.com">example.com</link></literal> standard contenant les en-têtes <literal>Upgrade: websocket</literal> et <literal>Connection: Upgrade</literal>.</simpara>
</listitem>
<listitem>
<simpara>Le serveur HTTP répond avec un statut <literal>101 Switching Protocols</literal>.</simpara>
</listitem>
<listitem>
<simpara>Le serveur <emphasis>WebSocket</emphasis> prend le relais dans le dialogue client/serveur.</simpara>
</listitem>
<listitem>
<simpara>Client et serveur communiquent désormais via le protocole <literal>ws</literal> au sein de la connexion HTTP initiale.</simpara>
</listitem>
</orderedlist>
</tip>
<simpara>Par extension et de par la nature même du protocole <literal>ws</literal>, il serait tout à
fait possible que <emphasis>et</emphasis> clients <emphasis>et</emphasis> serveur soient des agents Node.
Autrement dit, un client <emphasis>WebSocket</emphasis> ne doit pas nécessairement être un navigateur.</simpara>
<formalpara>
<title>io/websocket-server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const WebSocket = require('faye-websocket');
const chance = require('chance').Chance();

module.exports = (server) =&gt; {
  server.on('upgrade', (req, socket, body, next) =&gt; {  <co xml:id="CO294-1"/>
    if (!WebSocket.isWebSocket(req)) {           <co xml:id="CO294-2"/>
      return next();
    }

    let ws = new WebSocket(req, socket, body);   <co xml:id="CO294-3"/>

    ws.on('message', event =&gt; {                  <co xml:id="CO294-4"/>
      const data = JSON.parse(event.data);

      if (data.action === 'getName') {
        ws.send(chance.name());                  <co xml:id="CO294-5"/>
      }
    });

    ws.on('close', () =&gt; {
      ws = null;
    });
  });
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO294-1">
<para>Le serveur HTTP vient de répondre avec un statut <literal>101 Switching Protocols</literal> et délègue désormais la responsabilité du dialogue client/serveur.</para>
</callout>
<callout arearefs="CO294-2">
<para>Nous vérifions que le changement de protocole concerne le protocole <literal>ws</literal>.</para>
</callout>
<callout arearefs="CO294-3">
<para>La connexion réseau (<literal>socket</literal>) est transmise au serveur <emphasis>WebSocket</emphasis> pour amorcer le dialogue client/serveur avec le protocole <literal>ws</literal>.</para>
</callout>
<callout arearefs="CO294-4">
<para>Réaction à la réception d&#8217;un message client.</para>
</callout>
<callout arearefs="CO294-5">
<para>Émission d&#8217;un message à destination d&#8217;un client.</para>
</callout>
</calloutlist>
<simpara>Là aussi, le serveur est responsable de la gestion des connexions demandées par
les différents clients.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> WebSockets</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur WebSockets.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/WebSockets">developer.mozilla.org/docs/fr/WebSockets</link>
</simpara>
</note>
<simpara>En résumé, <emphasis>WebSocket</emphasis> est idéal pour maintenir une connexion en temps&#160;réel et
pour relayer plusieurs messages à l&#8217;initiative du serveur et de tout client
connecté&#160;– qu&#8217;il s&#8217;agisse d&#8217;un navigateur ou d&#8217;un agent Node.
Chaque connexion <emphasis>WebSocket</emphasis> peut encapsuler plusieurs types de messages.</simpara>
</section>
</section>
<section xml:id="développer_au_quotidien">
<title>Développer au quotidien</title>
<simpara>Nous avons beaucoup parlé de nouvelles techniques et de modularisation.
Cela peut sembler rebutant, notamment par l&#8217;introduction d&#8217;outils auxquels
nous ne sommes pas encore familiers.</simpara>
<simpara>L&#8217;écosystème Node fournit énormément d&#8217;outils qui devraient nous faire
gagner du temps, en nous aidant à organiser notre travail ou à exécuter des actions
lorsqu&#8217;un fichier est modifié, mais aussi en actualisant automatiquement
notre application web au fil du développement
(fini les appuis répétés sur la touche&#160;<keycap>F5</keycap>) ou encore en
optimisant nos fichiers graphiques.</simpara>
<section xml:id="watchify">
<title>Reconstruire en continu avec <literal>watchify</literal></title>
<simpara>L&#8217;utilisation de <link linkend="browserify">browserify</link> nous apporte du confort avec la
possibilité d&#8217;inclure des modules&#160;<literal>npm</literal> dans les navigateurs.
En revanche, cela nous demande de générer des artefacts&#160;– des <emphasis>bundles</emphasis>&#160;– à
chaque modification pour consolider ces changements.</simpara>
<simpara>C&#8217;est à ce moment qu&#8217;intervient le module <emphasis>watchify</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/watchify">npmjs.com/watchify</link></phrase>).
Il fonctionne exactement comme <emphasis>browserify</emphasis>, mais au lieu de compiler une seule
fois, il compile dès qu&#8217;un changement est détecté&#160;– où que ce soit dans l&#8217;arbre
de dépendances du point d&#8217;entrée (paramètre&#160;<literal>-e</literal>, <literal>--entrypoint</literal>).</simpara>
<simpara>La commande suivante compilerait le fichier <literal>examples/modules/react-app.js</literal>
une seule fois&#160;:</simpara>
<screen>$ ./node_modules/.bin/browserify -t babelify \
  -e examples/modules/react-app.js \
  -o examples/modules/react-app-browserify.js</screen>
<simpara>Il suffit de remplacer <literal>browserify</literal> par <literal>watchify</literal>&#160;– le programme garde la main
et indique chaque nouvelle compilation sur une nouvelle ligne.</simpara>
<screen>$ ./node_modules/.bin/watchify -dv -t babelify \
  -e examples/modules/react-app.js \
  -o examples/modules/react-app-browserify.js
1840601 bytes written to react-app-browserify.js (2.58 seconds) at 4:44:28 PM
352482 bytes written to react-app-browserify.js (0.10 seconds) at 4:45:09 PM
1840605 bytes written to react-app-browserify.js (0.25 seconds) at 4:45:15 PM</screen>
<simpara><emphasis>watchify</emphasis> utilise un mécanisme dit de <emphasis role="strong">compilation incrémentale</emphasis>&#160;: il ne
recompile pas tout, mais uniquement les différences depuis le dernier changement.
C&#8217;est beaucoup plus rapide et tout aussi efficace.</simpara>
<simpara>Trois arguments sont utiles à <emphasis>watchify</emphasis>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>-v</literal>&#160;(<literal>--verbose</literal>)&#160;: force la création du fichier compilé au lancement de la commande.</simpara>
</listitem>
<listitem>
<simpara><literal>-o</literal>&#160;(<literal>--outfile</literal>)&#160;: spécifie le chemin d&#8217;enregistrement du fichier compilé&#160;– il est impossible d&#8217;utiliser la <link xl:href="../chapter-04/index.xml#stdio">sortie standard</link> (<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>).</simpara>
</listitem>
<listitem>
<simpara><literal>-d</literal>&#160;(<literal>--debug</literal>)&#160;: (lire <quote><link linkend="browserify-sourcemaps">Les source&#160;maps</link></quote> dans ce même chapitre).</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="livereload">
<title>Changements en temps&#160;réel dans le navigateur</title>
<simpara>Modifier un fichier. Changer de fenêtre. Recharger. Changer de fenêtre. Re-modifier
un fichier. Changer de fenêtre. Recharger. Là c&#8217;est bon.</simpara>
<simpara>La quantité d&#8217;outils à disposition et leurs différentes opinions sur notre manière
de travailler nous obligent à prendre des postures de travail qui ne vont
pas nécessairement dans le sens de la productivité.</simpara>
<simpara>L&#8217;intégration de Node avec le système d&#8217;exploitation va nous aider à déclencher
des actions lorsque des fichiers sont modifiés.
Ces modifications sont parfois de notre fait, directement ou par le biais d&#8217;un
autre logiciel (un optimiseur d&#8217;images ou la <link linkend="node-sass">compilation d&#8217;un fichier Sass</link> par exemple).</simpara>
<simpara>Nous allons explorer deux stratégies d&#8217;actualisation&#160;: le rafraîchissement
automatique du navigateur et le remplacement de modules à chaud
(<emphasis>Hot Module Replacement</emphasis>, HMR).</simpara>
<simpara><emphasis>browser-sync</emphasis> est un outil formidable de développement pour
rafraîchir automatiquement une page web si son contenu ou une des ressources
associées change.
Il offre également la possibilité de propager les changements sur plusieurs
fenêtres et terminaux&#160;– y compris les clics, défilements et toute interaction
avec des formulaires.</simpara>
<simpara><emphasis>browser-sync</emphasis> maintient la position du curseur de défilement lors d&#8217;un rechargement de contenu.
L&#8217;outil se lance soit de manière autonome, soit en <emphasis>proxy</emphasis> entre l&#8217;utilisateur
et tout autre serveur web.
Il ne nécessite pas non plus de plug-in ou d&#8217;extension navigateur pour fonctionner,
ce qui le rend idéal pour du prototypage, de la recherche utilisateur ou du
développement local.</simpara>
<formalpara>
<title>Lancement d&#8217;un serveur web autonome avec synchronisation sur le port&#160;4000</title>
<para>
<screen>$ ./node_modules/.bin/browser-sync start --server --port 4000 .</screen>
</para>
</formalpara>
<simpara>L&#8217;exemple suivant illustre l&#8217;intégration de <emphasis>browser-sync</emphasis> avec le serveur
web exposant les exemples de ce chapitre (voir le détail dans le fichier <literal>server.js</literal>)&#160;:</simpara>
<formalpara>
<title>livereload/server-sync.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const browserSync = require('browser-sync');

module.exports = (server) =&gt; {             <co xml:id="CO295-1"/>
  return port =&gt; {                         <co xml:id="CO295-2"/>
    const PUBLIC_PORT = 4000;              <co xml:id="CO295-3"/>
    const bs = browserSync.create();

    server.listen(port);                   <co xml:id="CO295-4"/>

    bs.init({                              <co xml:id="CO295-5"/>
      files: ['./examples'],
      port: PUBLIC_PORT,
      open: false,
      logPrefix: 'nodebook',
      proxy: {
        target: `http://localhost:${port}`,<co xml:id="CO295-6"/>
        ws: true,
      }
    });
  };
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO295-1">
<para>On passe un serveur&#160;HTTP en argument (obtenu via <literal>http.createServer()</literal> par exemple).</para>
</callout>
<callout arearefs="CO295-2">
<para>Ce port sera affecté au serveur web mais ne sera pas voué à être public.</para>
</callout>
<callout arearefs="CO295-3">
<para>Ce port, lui, sera public.</para>
</callout>
<callout arearefs="CO295-4">
<para>Démarrage du serveur web sur le port privé.</para>
</callout>
<callout arearefs="CO295-5">
<para>Initialisation de <emphasis>browser-sync</emphasis>.</para>
</callout>
<callout arearefs="CO295-6">
<para>Interfaçage avec le serveur web créé au point&#160;4.</para>
</callout>
</calloutlist>
<simpara>La synchronisation peut être activée avec tous les exemples du chapitre en
suffixant la commande <literal>npm start</literal>&#160;:</simpara>
<screen>$ cd $(nodebook dir chapter-09)
$ npm start -- --with-sync</screen>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <emphasis>browser-sync</emphasis></title>
<simpara><emphasis>browser-sync</emphasis> (<phrase role="URL"><link xl:href="https://browsersync.io">browsersync.io</link></phrase>) est richement documenté et
illustré, y&#160;compris ses intégrations avec les outils Gulp et Grunt.</simpara>
</tip>
<simpara><emphasis>browser-sync</emphasis> a beau maintenir la position du défilement, il n&#8217;en reste pas
moins que chaque changement remet à zéro l&#8217;espace mémoire de la page.
C&#8217;est là qu&#8217;entre en jeu le remplacement des modules à chaud.</simpara>
<simpara>Le <emphasis role="strong">remplacement des modules à chaud</emphasis> (<emphasis>Hot Module Replacement</emphasis> ou HMR) est
une technique basée sur le remplacement de fonctions ou d&#8217;objets tout en assurant
le maintien de leurs variables ou états internes.
Cette technique a notamment été popularisée par la combinaison de la bibliothèque
<emphasis>React</emphasis> et de l&#8217;outil d&#8217;assemblage <emphasis>Webpack</emphasis>.
Il est toutefois possible de procéder à du remplacement à chaud sans <emphasis>React</emphasis>
et sans <emphasis>Webpack</emphasis>.</simpara>
<simpara>Quatre actions sont effectuées&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Un serveur de remplacement à chaud est démarré localement.</simpara>
</listitem>
<listitem>
<simpara>L&#8217;outil d&#8217;assemblage (<emphasis>browserify</emphasis>, <emphasis>Webpack</emphasis>, etc.) insère du code client
pour établir un lien entre la page web et le serveur de remplacement à chaud.</simpara>
</listitem>
<listitem>
<simpara>L&#8217;outil d&#8217;assemblage déclare les fichiers modifiés, transmis par le serveur
de remplacement à chaud vers le navigateur.</simpara>
</listitem>
<listitem>
<simpara>Le code client remplace les modules et maintient leur état interne.</simpara>
</listitem>
</itemizedlist>
<simpara>Le plug-in <emphasis>Browserify</emphasis> nommé <emphasis>livereactload</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/livereactload">npmjs.com/livereactload</link></phrase>)
est très certainement le plus facile à mettre en place pour remplacer des
modules <emphasis>React</emphasis> à la volée.
Il nécessite une ligne de configuration côté <emphasis>browserify</emphasis> mais aucun
changement de code côté client.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> livereactload</title>
<simpara>Des aides à l&#8217;installation du module <emphasis>livereactload</emphasis> sont disponibles dans
son fichier README.</simpara>
</tip>
<simpara>Le remplacement à chaud n&#8217;est possible que lorsque nous sommes dans un état
de reconstruction en continu, par exemple avec <link linkend="watchify">watchify</link>.</simpara>
<simpara>Nous pouvons constater les effets du remplacement à chaud avec un des exemples
de ce chapitre, accessible sur <phrase role="URL"><link xl:href="http://localhost:4000/examples/livereload/react-app-hmr.html">localhost:4000/examples/livereload/react-app-hmr.html</link></phrase>.
La commande <literal>npm run watch</literal> de ce chapitre démarre un serveur web et reconstruit
en continu le fichier <literal>./examples/livereload/react-app-hmr.js</literal>&#160;:</simpara>
<screen>$ cd $(nodebook dir chapter-09)
$ npm run watch</screen>
<simpara>Qui n&#8217;est autre qu&#8217;un équivalent de&#160;:</simpara>
<screen>$ ./node_modules/.bin/watchify -dv \
  -t babelify \
  -p livereactload \
  -e ./examples/livereload/react-app-hmr.js \
  -o ./examples/livereload/react-app-hmr-browserify.js</screen>
<simpara>Dans cet exemple, le <emphasis>transform</emphasis>&#160;(<literal>-t</literal>) modifie le code source à la volée&#160;–
ici, pour adapter le code écrit dans une syntaxe compréhensible par la majorité
des navigateurs grâce à l&#8217;outil <link linkend="transpilation">Babel</link>.</simpara>
<simpara>Le plug-in &#160;(<literal>-p</literal>) ne transforme pas le code mais le fonctionnement de
<emphasis>watchify</emphasis> pour y ajouter des fonctionnalités&#160;– ici, refléter les
changements du fichier source vers le navigateur en temps réel.</simpara>
<simpara>Il faudra ensuite modifier l&#8217;un des deux fichiers suivants&#160;– en décommentant les lignes concernées par exemple&#160;– pour constater les changements dans notre navigateur.</simpara>
<formalpara>
<title>livereload/react-app-hmr.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import { createElement } from 'react';
import ReactDOM from 'react-dom';
import ButtonCount from './button-count.jsx';

ReactDOM.render(
  createElement('div', {}, [
    createElement(ButtonCount),
    createElement(ButtonCount),
    // createElement(ButtonCount),
  ]),
  document.querySelector('#app')
);</programlisting>
</para>
</formalpara>
<simpara>Chaque instance du composant <literal>livereload/button-count.jsx</literal> gère un état interne
indépendant des autres instances de même type.
Nous aurions perdu cet état interne en cas d&#8217;utilisation de <emphasis>browser-sync</emphasis>, sans
remplacement à chaud&#160;:</simpara>
<formalpara>
<title>livereload/button-count.jsx</title>
<para>
<programlisting language="jsx" linenumbering="unnumbered">import React, { Component } from 'react';

export default class ButtonCount extends Component {
  constructor(props) {
    super(props);

    this.handleClick = this.handleClick.bind(this);

    this.state = {
      clickCount: 0                                           <co xml:id="CO296-1"/>
    };
  }

  handleClick () {
    this.setState({ clickCount: this.state.clickCount + 1 }); <co xml:id="CO296-2"/>
  }

  render() {
    let style = {};
    // style = {
    //   fontFamily: 'monospace',
    //   fontWeight: 'bold',
    //   textTransform:' uppercase',
    // };

    return (&lt;button style={style} onClick={this.handleClick}&gt;
      Clics : {this.state.clickCount}
    &lt;/button&gt;);
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO296-1">
<para>Initialisation du compteur de clics propre à chaque instance de <literal>ButtonCount</literal>.</para>
</callout>
<callout arearefs="CO296-2">
<para>Incrémentation du compteur de clics en réaction à un clic sur le composant <literal>ButtonCount</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> ud et browserify-hmr</title>
<simpara>Deux modules vont nous aider&#160;: <emphasis>ud</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/ud">npmjs.com/ud</link></phrase>)
et <emphasis>browserify-hmr</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/browserify-hmr">npmjs.com/browserify-hmr</link></phrase>), respectivement pour
déclarer des modules remplaçables et pour démarrer un serveur de remplacement
à chaud minimaliste.</simpara>
</tip>
</section>
<section xml:id="node-sass">
<title>Modulariser ses feuilles de styles avec&#160;Sass</title>
<simpara>La modularité et l&#8217;écriture d&#8217;un code isolé facilitent sa réutilisation et
préviennent les effets de bord.
Dans le cas des feuilles de styles CSS, cela peut éviter de faire
déborder la cascade&#160;– si l&#8217;on peut&#160;dire.</simpara>
<simpara>Avec le langage Sass (<phrase role="URL"><link xl:href="http://sass-lang.com">sass-lang.com</link></phrase>), nous pourrions songer à
générer des blocs de code selon des listes (idéal pour des thèmes de couleurs,
des rubriques produits, etc.), à concevoir des composants comme des fonctions
ou à bénéficier de fonctions de calcul de couleurs ou d&#8217;unités de mesure.</simpara>
<simpara>Le langage Sass est originaire du monde Ruby, mais il a été depuis rendu
accessible nativement à l&#8217;écosystème Node par le biais de <emphasis>node-sass</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/node-sass">npmjs.com/node-sass</link></phrase>)– et, par extension,
par la bibliothèque&#160;C <emphasis>libsass</emphasis>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Lecture</phrase> CSS maintenables avec Sass et Compass</title>
<simpara>Je recommande la lecture de l&#8217;ouvrage de référence
<emphasis>CSS&#160;maintenables avec Sass et Compass</emphasis>,
écrit par Kaelig&#160;Deloumeau-Prigent aux éditions Eyrolles.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://editions-eyrolles.com/Livre/9782212136401">editions-eyrolles.com/Livre/9782212136401</link></phrase></simpara>
</listitem>
</itemizedlist>
<simpara>Il décrit très bien les tenants et aboutissants de Sass, ainsi que de bonnes
méthodes d&#8217;organisation du code et de maintenabilité au sein d&#8217;une équipe de
travail.</simpara>
</tip>
<simpara><emphasis>node-sass</emphasis> offre un outil en ligne de commande pour compiler un fichier Sass,
plusieurs fichiers Sass ou encore une arborescence de répertoires contenant des
fichiers Sass vers des fichiers CSS compréhensibles par les navigateurs.</simpara>
<formalpara>
<title>ui/buttons.scss</title>
<para>
<programlisting language="sass" linenumbering="unnumbered">$sizes: (                             <co xml:id="CO297-1"/>
  small: .8,
  regular: 1,
  large: 1.2
);

.btn {
  @each $size, $factor in $sizes {    <co xml:id="CO297-2"/>
    &amp;.btn--#{$size} {                 <co xml:id="CO297-3"/>
      font-size: $factor * 1em;       <co xml:id="CO297-4"/>
    }
  }

  &amp;.btn--icon {                       <co xml:id="CO297-5"/>
    svg {
      height: 16px;
      width: 16px;
      margin-right: .5em;
    }
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO297-1">
<para>Définition d&#8217;une <literal>Map</literal> nommée <literal>$sizes</literal> (ensemble clé/valeur) décrivant des tailles et leur facteur multiplicateur.</para>
</callout>
<callout arearefs="CO297-2">
<para>Itération et extraction des clés/valeurs de <literal>$sizes</literal>.</para>
</callout>
<callout arearefs="CO297-3">
<para>Interpolation d&#8217;une variable pour composer un sélecteur CSS (<literal>.btn&#8212;&#8203;small</literal>, <literal>.btn&#8212;&#8203;regular</literal> etc.).</para>
</callout>
<callout arearefs="CO297-4">
<para>Calcul de la taille de la police de caractères (<literal>.8em</literal>, <literal>1em</literal>, etc.).</para>
</callout>
<callout arearefs="CO297-5">
<para>Composition d&#8217;un sélecteur de classe à partir du sélecteur courant (<literal>.btn.btn&#8212;&#8203;icon</literal>).</para>
</callout>
</calloutlist>
<simpara>La compilation des fichiers s&#8217;effectue très simplement&#160;:</simpara>
<screen>$ ./node_modules/.bin/node-sass -o ./examples ./examples/buttons.scss</screen>
<simpara>Elle produit le fichier CSS <literal>button.css</literal>, lisible par tout navigateur&#160;:</simpara>
<formalpara>
<title>ui/buttons.css</title>
<para>
<programlisting language="css" linenumbering="unnumbered">.btn.btn--small {
  font-size: 0.8em; }

.btn.btn--regular {
  font-size: 1em; }

.btn.btn--large {
  font-size: 1.2em; }

.btn.btn--icon svg {
  height: 16px;
  width: 16px;
  margin-right: .5em; }</programlisting>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Astuce</phrase> Oublions les vendor prefix</title>
<simpara>Les navigateurs évoluent plus vite que le cycle de vie de nos projets.
Certaines propriétés CSS sont abritées derrière des préfixes (<literal>-moz</literal>, <literal>-webkit</literal>,
etc.) avant d&#8217;être standardisées.</simpara>
<simpara>Les modules <emphasis>autoprefixer</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/autoprefixer">npmjs.com/autoprefixer</link></phrase>) et
<emphasis>postcss</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/postcss">npmjs.com/postcss</link></phrase>) nous facilitent la tâche en préfixant
et réécrivant automatiquement les attributs en fonction de nos exigences de
compatibilité avec les navigateurs.</simpara>
</tip>
</section>
<section xml:id="ui-bundling">
<title>Lier composants visuels et feuilles de&#160;styles</title>
<simpara>Souvenons-nous de la section expliquant le
<link linkend="react">rapprochement entre données, rendu et interactions avec React</link>.
Finalement, nous avons presque tout rapproché, exception faite de la présentation
avec Sass ou CSS.</simpara>
<simpara>En suivant la logique de notre approche modulaire, nous pourrions imaginer
un <emphasis>transform browserify</emphasis> pour compiler et/ou extraire notre code Sass ou
CSS depuis nos modules CommonJS ou ECMAScript.</simpara>
<simpara>C&#8217;est exactement la proposition du module <emphasis>sassify</emphasis>.
Il intègre <emphasis>node-sass</emphasis> en tant que <emphasis>transform browserify</emphasis> et transforme le
code à la volée durant la phase de compilation.
Il se charge lui-même d&#8217;ajouter les styles dans le document HTML ou expose le
code CSS compilé via la fonction <literal>require()</literal>.</simpara>
<simpara>Une saine stratégie serait de charger des CSS de base dans une feuille de styles
en tête de <literal>&lt;head&gt;</literal> puis de laisser les composants graphiques injecter leurs
feuilles CSS respectives après coup.</simpara>
<simpara>L&#8217;exemple suivant expose deux composants <emphasis>React</emphasis>, regroupés dans une thématique
de composants de boutons HTML.
Une feuille de styles est importée à même le module afin de gérer au même niveau
présentation, rendu et interactions&#160;:</simpara>
<formalpara>
<title>ui/Buttons.jsx</title>
<para>
<programlisting language="jsx" linenumbering="unnumbered">import React from 'react';
import './buttons.scss';          <co xml:id="CO298-1"/>

const Icon = (props) =&gt; (&lt;svg aria-hidden="true"&gt;
  &lt;use xlinkHref={'symbols.svg#' + props.id} /&gt;
&lt;/svg&gt;);

export const BaseButton = (props) =&gt; (
  &lt;button className={'btn btn--' + props.variant}&gt;{props.children}&lt;/button&gt;
);

export const IconButton = (props) =&gt; (
  &lt;button className="btn btn--icon"&gt;
    &lt;Icon id={props.icon} /&gt;
    {props.children}
  &lt;/button&gt;
);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO298-1">
<para>Import d&#8217;un fichier Sass qui sera par la suite compilé en CSS par le <emphasis>transform sassify</emphasis>.</para>
</callout>
</calloutlist>
<simpara>Sans surprise, le module <emphasis>sassify</emphasis> se charge comme la majorité des
<emphasis>transforms browserify</emphasis> comme vu dans la section
<quote><link linkend="browserify">Importer des modules&#160;<literal>npm</literal> pour le Web</link></quote> dans ce même chapitre&#160;:</simpara>
<screen>$ ./node_modules/.bin/browserify \
  -t sassify \
  -t babelify \
  -e ./examples/Buttons.jsx \
  -o ./examples/Button-browserify.js</screen>
<simpara>La commande suivante injectera automatiquement les feuilles de style compilées
dans le document HTML lors de son exécution dans un navigateur&#160;:</simpara>
<screen>$ ./node_modules/.bin/browserify \
  -t [ sassify --auto-inject ] \
  -t babelify \
  -e ./examples/Buttons.jsx \
  -o ./examples/Button-browserify.js</screen>
</section>
<section xml:id="optimiser_ses_ressources_graphiques">
<title>Optimiser ses ressources graphiques</title>
<simpara>Node est un outil de choix lorsque l&#8217;on souhaite s&#8217;atteler au développement
<emphasis>front-end</emphasis> et ce n&#8217;est pas sans raison.
Outre l&#8217;outillage lié à la réécriture du code, il regorge de modules&#160;<literal>npm</literal>
réduisant les tâches manuelles répétitives et possiblement sujettes à erreur.</simpara>
<simpara>Nous retrouvons l&#8217;optimisation des ressources graphiques parmi cet ensemble de
tâches rébarbatives.
Quand j&#8217;écris ressources graphiques, j&#8217;entends par là le redimensionnement ou
la création de vignettes d&#8217;images, l&#8217;optimisation de leur poids, la fusion de
fichiers&#160;SVG sous forme de symboles, la création de piles de
polices de caractères et même l&#8217;encodage audio/vidéo&#160;– via des logiciels
spécialisés comme <emphasis>FFmpeg</emphasis> ou <emphasis>LAME</emphasis>.</simpara>
<simpara>L&#8217;outil en ligne de commande <emphasis>imagemin-cli</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/imagemin-cli">npmjs.com/imagemin-cli</link></phrase>)
est le module de référence pour optimiser les fichiers graphiques.
Il est basé sur la bibliothèque <emphasis>imagemin</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/imagemin">npmjs.com/imagemin</link></phrase>) et
se charge de réduire le poids de nos images JPEG, PNG mais aussi GIF (animés
et statiques) ainsi que le format vectoriel&#160;SVG.</simpara>
<screen>$ ./node_modules/.bin/imagemin images/* --out-dir images
8 images minified</screen>
<tip>
<title><phrase role="RemarquePreTitre">Glossaire</phrase> Compression destructive et non&#160;destructive</title>
<simpara>Il existe deux types de compression&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>destructive&#160;: poids réduit au maximum, possibles artefacts visuels, destruction
potentielle de couleurs dans le cas d&#8217;images complexes&#160;;</simpara>
</listitem>
<listitem>
<simpara>sans perte&#160;: poids réduit, les couleurs supprimées ne sont pas perceptibles
à l&#8217;œil&#160;nu.</simpara>
</listitem>
</itemizedlist>
<simpara>Il vaut mieux privilégier la <emphasis>compression sans perte</emphasis> pour éviter les artefacts
visuels et respecter la création d&#8217;origine.</simpara>
</tip>
<simpara>Le redimensionnement d&#8217;images est une autre de ces tâches courantes et récurrentes
qui tombe rapidement aux oubliettes de par sa gourmandise en temps.
On voudra par exemple redimensionner des photos depuis des fichiers originaux,
générer des vignettes ou encore différentes tailles d&#8217;image adaptées
aux différentes dispositions d&#8217;un site web <emphasis>responsive</emphasis>.</simpara>
<simpara><emphasis>sharp-cli</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/sharp-cli">npmjs.com/sharp-cli</link></phrase>) répond exactement à ce cahier
des charges.
Ce module en ligne de commande est basé sur <emphasis>sharp</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/sharp">npmjs.com/sharp</link></phrase>),
une bibliothèque Node de modification d&#8217;images écrite en ECMAScript et <emphasis>C&#43;&#43;</emphasis>.
<emphasis>sharp</emphasis> nous aidera entre autres à redimensionner, découper, retourner, recentrer,
assembler et appliquer des effets graphiques de manière prédictible.</simpara>
<screen>$ ./node_modules/.bin/sharp resize 500 \
  --min \
  -i images/*.png \
  --output ./images/thumbs</screen>
<simpara>La commande précédente illustre une opération de redimensionnement d&#8217;images&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>d&#8217;une dimension de 500 pixels de largeur&#160;;</simpara>
</listitem>
<listitem>
<simpara>minimum, pour respecter les proportions initiales&#160;– sans cet attribut les images seraient des carrés
de 500 pixels de large et de haut&#160;;</simpara>
</listitem>
<listitem>
<simpara>ciblant toutes les images PNG du répertoire <literal>images</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>puis exportées dans le répertoire <literal>images/thumbs</literal>.</simpara>
</listitem>
</itemizedlist>
<screen>$ ./node_modules/.bin/sharp grayscale \
  -i images/*.png \
  --output ./images/square</screen>
<simpara>À l&#8217;inverse, cette commande illustre la conversion en noir et blanc
d&#8217;images ainsi que leur export dans un répertoire différent.</simpara>
<simpara>L&#8217;interface en ligne de commande de <emphasis>sharp-cli</emphasis> ne permet pas de créer
des opérations composites (redimensionner et convertir en niveaux de gris par exemple).
Il faudra recourir à l&#8217;API Node de <emphasis>sharp</emphasis> et chaîner les opérations en
s&#8217;aidant des exemples documentés sur <phrase role="URL"><link xl:href="http://sharp.dimens.io">sharp.dimens.io</link></phrase>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> gm</title>
<simpara><emphasis>gm</emphasis>&#160;(<phrase role="URL"><link xl:href="https://npmjs.com/gm">npmjs.com/gm</link></phrase>) est le module classique de
redimensionnement dans l&#8217;écosystème Node.
Il s&#8217;interface avec les programmes <emphasis>GraphicsMagick</emphasis> et <emphasis>ImageMagick</emphasis>&#160;–
et nécessite donc leur présence sur le système d&#8217;exploitation.</simpara>
<simpara>Cela rend l&#8217;utilisation de <emphasis>gm</emphasis> légèrement moins triviale que celle de <emphasis>sharp</emphasis>
mais la quantité de ressources et la qualité du module en font une bonne
alternative à considérer.</simpara>
</tip>
<simpara>L&#8217;utilisation d&#8217;un <link xl:href="../chapter-05/index.xml#npm-scripts">script&#160;<literal>npm</literal></link>
(<link xl:href="../chapter-05/index.xml">chapitre&#160;5</link>) est idéale pour décrire les
différentes actions d&#8217;optimisation.
Les scripts sont alors à invoquer manuellement, sur un crochet Git
(<emphasis>git&#160;hook</emphasis>) ou automatiquement lors du déploiement avec un
<link xl:href="../chapter-06/index.xml#deploy.ci">service d&#8217;intégration continue</link>, par
exemple.</simpara>
</section>
</section>
<section xml:id="testing">
<title>Tester son code</title>
<simpara>C&#8217;est bien connu&#160;: <quote>lorsqu&#8217;on produit du code de qualité, écrire des tests est amplement superflu et ne sert qu&#8217;à nous ralentir</quote>.</simpara>
<simpara>La réalité est tout autre et suit un paradigme très simple&#160;:
<emphasis role="strong">plus il y a de lignes de code, plus il y a de risques de commettre des erreurs</emphasis>.
Cela vaut aussi bien pour du HTML que du CSS ou encore de l&#8217;ECMAScript.</simpara>
<simpara>Cette dernière section nous aidera à comprendre quoi et comment tester
pour diminuer le coût de maintenance de nos applications.</simpara>
<section xml:id="testing-101">
<title>Que tester ?</title>
<simpara>L&#8217;idée d&#8217;écrire des tests pour améliorer la qualité de son code est attrayante,
mais quand on ne sait pas quoi tester et ni à qui demander pour se lancer,
il est évident qu&#8217;on ne va pas s&#8217;y mettre pour s&#8217;assurer que 1+1 valent bien 2.</simpara>
<simpara>Je pense à ces trois règles lorsque je souhaite écrire des tests&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Qu&#8217;est-ce qui est public/exporté&#160;?</simpara>
</listitem>
<listitem>
<simpara>Qu&#8217;est-ce qui crée des branches dans mon code&#160;?</simpara>
</listitem>
<listitem>
<simpara>Qu&#8217;est-ce qui vient du monde extérieur&#160;?</simpara>
</listitem>
</itemizedlist>
<simpara>La syntaxe de modules ECMAScript est idéale pour visualiser les segments
de code qui sont exportés par nos différents fichiers.
Élément marquant&#160;: ce code est simple et devrait arriver à compter le nombre
de mots mais nous n&#8217;avons aucune idée s&#8217;il fera correctement le travail sans
l&#8217;exécuter dans une application.</simpara>
<formalpara>
<title>test-export.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const isString = (thing) =&gt; typeof thing === 'string';

const isWord = (word) =&gt; {
  return isString(word) &amp;&amp; /^[\w\s.,\-?!;+]{2,}$/.test(word);
};

export default function countWords (sentence) { <co xml:id="CO299-1"/>
  return sentence.split(' ').filter(isWord).length;
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO299-1">
<para>La fonction <literal>countWords</literal> est le seul élément exporté par notre module et devrait donc être le seul sujet de nos&#160;tests.</para>
</callout>
</calloutlist>
<simpara>Une branche est une portion de code qui s&#8217;exécute de manière ponctuelle.
Ces sections de code s&#8217;activent ou non selon l&#8217;état d&#8217;une structure de données.
Il faut prévoir au moins autant de tests que de branches pour valider les
attentes.</simpara>
<formalpara>
<title>test-branches.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">export default function isOdd (number) {
  if (!Number.isFinite(number)) {                     <co xml:id="CO300-1"/>
    throw new Error('number devrait être un nombre');
  }

  if (number % 2) { <co xml:id="CO300-2"/>
    return true;
  }
  else {            <co xml:id="CO300-3"/>
    return false;
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO300-1">
<para>Première branche activée dans deux cas de figure.</para>
</callout>
<callout arearefs="CO300-2">
<para>Seconde branche.</para>
</callout>
<callout arearefs="CO300-3">
<para>Troisième branche.</para>
</callout>
</calloutlist>
<simpara>Enfin, l&#8217;accès à toute donnée externe est susceptible de mal fonctionner
sans que nous puissions maîtriser l&#8217;origine des problèmes.
En revanche, l&#8217;écriture de tests nous aidera à accepter ce cas de figure et
à le signaler à nos applications.</simpara>
<formalpara>
<title>test-outside-world.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">export default function getLinkElementContent (linkElement) {
  const {href} = linkElement;           <co xml:id="CO301-1"/>

  return fetch(href)                    <co xml:id="CO301-2"/>
    .then(response =&gt; response.json())  <co xml:id="CO301-3"/>
    .then(pkg =&gt; pkg.dependencies);
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO301-1">
<para><literal>linkElement</literal> peut ne pas être un lien hypertexte (<literal>document.querySelector</literal> retourne&#160;<literal>null</literal>).</para>
</callout>
<callout arearefs="CO301-2">
<para>Ici, tout peut arriver&#160;: <literal>href</literal> n&#8217;est pas une URL valide (balise <literal>href</literal> vide), serveur indisponible, etc.</para>
</callout>
<callout arearefs="CO301-3">
<para>Et là, le fichier JSON peut être mal formé ou la réponse est exprimée dans un autre format que&#160;JSON.</para>
</callout>
</calloutlist>
<simpara>Nous savons désormais à peu près tout ce qu&#8217;il faut suspecter pour renforcer
nos applications en écrivant quelques tests.</simpara>
</section>
<section xml:id="soutiller_pour_écrire_des_assertions">
<title>S&#8217;outiller pour écrire des assertions</title>
<simpara>Avant de nous lancer directement dans la conception et l&#8217;écriture des tests,
penchons-nous sur la structure de l&#8217;outillage.</simpara>
<variablelist>
<varlistentry>
<term>Assertion</term>
<listitem>
<simpara>C&#8217;est la vérification d&#8217;une vérité, d&#8217;une attente, du résultat d&#8217;une opération.
Une assertion couvre une branche de&#160;code.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Test</term>
<listitem>
<simpara>C&#8217;est un regroupement d&#8217;assertions couvrant toutes les branches des
fonctionnalités publiques de notre&#160;code.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Suite de tests</term>
<listitem>
<simpara>C&#8217;est un ensemble de tests couvrant un aspect logique d&#8217;un code applicatif.
Une application peut comporter plusieurs suites selon sa complexité&#160;:
tests <emphasis role="strong">unitaires</emphasis> (interface de code),
tests <emphasis role="strong">fonctionnels</emphasis> (scénarios d&#8217;utilisation d&#8217;une application),
tests d'<emphasis role="strong">intégration</emphasis> (dépendance vis à vis d&#8217;autres applications et services).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Exécuteur de tests</term>
<listitem>
<simpara>C&#8217;est le logiciel responsable de créer l&#8217;environnement d&#8217;exécution d&#8217;une suite de tests.
Il exprime une opinion sur la structuration des tests ainsi que sur des
automatismes à fournir pour accélérer l&#8217;écriture des&#160;tests.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>L&#8217;outillage varie selon chacun de ces niveaux.
Certains outils offrent une écriture d&#8217;assertion plus fluide, d&#8217;autres proposent une écriture plus spécifiquement adaptée.</simpara>
<simpara>Les sections suivantes sont complémentaires.
J&#8217;ai favorisé des approches itératives et modulaires pour faciliter l&#8217;ajout ou le retrait de tout outil de notre outillage&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>la bibliothèque <emphasis>chai</emphasis> pour les assertions&#160;;</simpara>
</listitem>
<listitem>
<simpara>la bibliothèque <emphasis>mocha</emphasis> pour les tests&#160;;</simpara>
</listitem>
<listitem>
<simpara>la bibliothèque <emphasis>mocha</emphasis> pour la suite de tests exécutable par&#160;Node&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;exécuteur de tests nommé  <emphasis>karma</emphasis> pour faire fonctionner la suite de tests
dans les navigateurs.</simpara>
</listitem>
</itemizedlist>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> chai, mocha et karma</title>
<simpara>Ces trois bibliothèques disposent d&#8217;une documentation en ligne expliquant leurs
options respectives, ainsi que des exemples d&#8217;utilisation.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>chai</emphasis>&#160;: <phrase role="URL"><link xl:href="http://chaijs.com/api/bdd/">chaijs.com/api/bdd/</link></phrase>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis>mocha</emphasis>&#160;: <phrase role="URL"><link xl:href="https://mochajs.org">mochajs.org</link></phrase>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis>karma</emphasis>&#160;: <phrase role="URL"><link xl:href="https://karma-runner.github.io">karma-runner.github.io</link></phrase>.</simpara>
</listitem>
</itemizedlist>
</tip>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>Exemple d&#8217;assertion avec la bibliothèque&#160;chai</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import {expect} from 'chai';

expect(2+2).to.equal(4);</programlisting>
</para>
</formalpara>
<formalpara>
<title>Exemple de test avec la bibliothèque mocha</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">describe('functionName', () =&gt; {
  it('should succeed with parameter cheese', () =&gt; {
    // ...
  });

  it('should throw an error with parameter meat', () =&gt; {
    // ...
  });
});</programlisting>
</para>
</formalpara>
<formalpara>
<title>Exemple d&#8217;exécution de suites de tests avec mocha et karma</title>
<para>
<screen>$ mocha tests/**/*.js
$ karma start</screen>
</para>
</formalpara>
<simpara>L&#8217;exécuteur de tests <emphasis>karma</emphasis> se configure par le biais d&#8217;un fichier <literal>karma.conf.js</literal>.
Nous en trouverons un à la racine du répertoire des ressources du
<link xl:href="../chapter-04/index.xml">chapitre&#160;4</link>.</simpara>
</section>
<section xml:id="tester_ses_composants_react_sans_navigateur">
<title>Tester ses composants React sans navigateur</title>
<simpara>Un des points forts de <link linkend="react">React</link> évoqués dans ce chapitre est la
description de son rendu à même le composant.
Nous bénéficions ainsi du résultat final (son HTML par exemple) ainsi que d&#8217;un
arbre représentant une structure de sous-éléments et de propriétés.</simpara>
<simpara>Nous disposons de deux stratégies pour tester les différents comportements d&#8217;un
composant <emphasis>React</emphasis>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>tester le rendu en comparant des chaînes de caractères&#160;;</simpara>
</listitem>
<listitem>
<simpara>tester l&#8217;état en validant la présence d&#8217;attributs ou le déclenchement de
certaines méthodes du composant.</simpara>
</listitem>
</itemizedlist>
<simpara>La bibliothèque <emphasis>Enzyme</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/enzyme">npmjs.com/enzyme</link></phrase>) s&#8217;occupe très bien des
deux, en plus de s&#8217;intégrer avec n&#8217;importe quelle bibliothèque de tests.
Dans tous les cas, elle nous permettra de monter nos composants, soit de manière
isolée, soit dans un véritable arbre DOM, soit en rendu&#160;HTML.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Enzyme</title>
<simpara>L&#8217;équipe d&#8217;Airbnb offre une documentation exhaustive sur <phrase role="URL"><link xl:href="http://airbnb.io/enzyme/">airbnb.io/enzyme/</link></phrase>.
J&#8217;ai beaucoup apprécié les exemples complets d&#8217;intégration avec
<emphasis>mocha</emphasis>, <emphasis>webpack</emphasis> et&#160;<emphasis>tape</emphasis>.</simpara>
</tip>
<simpara>Nous allons nous baser sur le composant créé dans la section
<quote><link linkend="react">Rapprocher données, rendu et interactions avec React</link></quote> pour s&#8217;assurer
de son comportement avant même de l&#8217;inclure dans notre application.</simpara>
<formalpara>
<title>tests/date-interval.js (configuration)</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import { createElement } from 'react';
import { expect } from 'chai';
import { shallow } from 'enzyme';
import DateInterval from '../modules/date-interval.jsx';<co xml:id="CO302-1"/>

describe('&lt;DateInterval /&gt;', () =&gt; {
  // ... (tests)
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO302-1">
<para>Import du module <literal>DateInterval</literal>.</para>
</callout>
</calloutlist>
<simpara>Notre premier test consiste à vérifier que notre composant React génère
bien une balise <literal>&lt;time&gt;</literal> en sortie.</simpara>
<formalpara>
<title>tests/date-interval.js (tests)</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">// (configuration)
describe('&lt;DateInterval /&gt;', () =&gt; {
  const element = createElement(DateInterval);

  it('affiche un élément &lt;time&gt;', () =&gt; {               <co xml:id="CO303-1"/>
    const component = shallow(element);                 <co xml:id="CO303-2"/>

    expect(component.find('time')).to.have.length(1);   <co xml:id="CO303-3"/>
  });
  // ...
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO303-1">
<para>Création d&#8217;un test destiné à vérifier la nature de la balise HTML à générer.</para>
</callout>
<callout arearefs="CO303-2">
<para>Création du composant isolé (<emphasis>shallow</emphasis>)&#160;– aucun élément DOM ne sera créé ni inséré dans le document.</para>
</callout>
<callout arearefs="CO303-3">
<para>On écrit une assertion garantissant que l&#8217;on retourne un élément <literal>&lt;time&gt;</literal>.</para>
</callout>
</calloutlist>
<simpara>Le deuxième aspect à tester concerne les données du composant, et leur effet
sur la valeur de classe de l&#8217;élément HTML généré en sortie.</simpara>
<formalpara>
<title>tests/date-interval.js (tests, suite)</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">// (configuration)
describe('&lt;DateInterval /&gt;', () =&gt; {
  const element = createElement(DateInterval);
  // ...
  it('la propriété tickDate influence la classe HTML', () =&gt; {
    const OK_CLASS = ['pair', 'impair'];
    const component = shallow(element);                 <co xml:id="CO304-1"/>
    const {tickData} = component.state();               <co xml:id="CO304-2"/>

    const time = tickData.now.getTime();
    expect(time).to.be.closeTo(Date.now(), 3);          <co xml:id="CO304-3"/>
    expect(tickData.className).to.be.oneOf(OK_CLASS);   <co xml:id="CO304-4"/>
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO304-1">
<para>Création d&#8217;un second composant isolé dont l&#8217;état est indépendant du premier.</para>
</callout>
<callout arearefs="CO304-2">
<para>Récupération de l&#8217;état (<emphasis>state</emphasis>) du composant.</para>
</callout>
<callout arearefs="CO304-3">
<para>Assertion vérifiant que la date utilisée par le composant est proche de la date courante (à quelques millisecondes&#160;près).</para>
</callout>
<callout arearefs="CO304-4">
<para>Assertion vérifiant qu&#8217;une propriété de l&#8217;état ne peut être qu&#8217;une des deux valeurs parmi <literal>pair</literal> et <literal>impair</literal>.</para>
</callout>
</calloutlist>
<simpara>En complément, la bibliothèque <emphasis>chai-enzyme</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/chai-enzyme">npmjs.com/chai-enzyme</link></phrase>)
étend le vocabulaire de <emphasis>chai</emphasis> pour ajouter des assertions de composants.
C&#8217;est une question de goût plus qu&#8217;une nécessité.<?asciidoc-br?>
L&#8217;exemple suivant reprend le composant créé dans la section
<quote><link linkend="livereload">Changements en temps&#160;réel dans le navigateur</link></quote> et illustre une
assertion suite à un clic sur le bouton&#160;:</simpara>
<formalpara>
<title>tests/button-count.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import React from 'react';
import chai, { expect } from 'chai';
import chaiEnzyme from 'chai-enzyme';
import { shallow } from 'enzyme';
import ButtonCount from '../livereload/button-count.jsx';

chai.use(chaiEnzyme());

describe('&lt;ButtonCount /&gt;', () =&gt; {
  it('should increment state on click', () =&gt; {       <co xml:id="CO305-1"/>
    const component = shallow(&lt;ButtonCount /&gt;);
    component.simulate('click');                      <co xml:id="CO305-2"/>

    expect(component).to.have.state('clickCount', 1); <co xml:id="CO305-3"/>
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO305-1">
<para>Le libellé du test décrit le résultat attendu dans les assertions.</para>
</callout>
<callout arearefs="CO305-2">
<para>Simulation du clic sur le composant.</para>
</callout>
<callout arearefs="CO305-3">
<para>L&#8217;état interne a bien été changé et correspond à la valeur attendue.</para>
</callout>
</calloutlist>
<simpara>Le fichier <literal>package.json</literal> des ressources de ce chapitre
contient une tâche exécutant les tests exécutables dans un environnement Node uniquement.
Elle se lance de la manière suivante&#160;:</simpara>
<screen>$ npm run test:node</screen>
<figure>
<title>Extrait de la sortie de la commande npm&#160;run&#160;test:node</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/mocha-react.png" contentwidth="80%"/>
</imageobject>
<textobject><phrase>mocha react</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> jest</title>
<simpara><emphasis>jest</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/jest">npmjs.com/jest</link></phrase>) est un exécuteur de tests moderne et
rapide particulièrement adapté au test de composants côté serveur.
Au moment d&#8217;écrire cet ouvrage, il n&#8217;était pas encore possible de l&#8217;exécuter
dans un navigateur.</simpara>
</tip>
<simpara>Il est intéressant de retenir que les tests navigateurs ne sont pas indispensables
pour s&#8217;assurer du bon fonctionnement de nos composants.
Des bibliothèques comme <emphasis>React</emphasis> sont déjà solidement testées.
Cela nous laisse l&#8217;opportunité de nous concentrer uniquement sur notre logique métier.</simpara>
<simpara>Les tests navigateurs sont en revanche utiles pour tester la compatibilité
navigateurs, que ce soit au niveau de la syntaxe ECMAScript ou du rendu&#160;CSS.</simpara>
</section>
<section xml:id="tester_code_et_composants_dans_les_navigateurs">
<title>Tester code et composants dans les navigateurs</title>
<simpara>C&#8217;est bien beau de tester uniquement l&#8217;interface de composants <emphasis>React</emphasis>
(ou autre technologie) mais comment faire lorsqu&#8217;on a besoin de tester avec un
vrai DOM ou dans plusieurs navigateurs&#160;?</simpara>
<simpara>Il est nécessaire d&#8217;effectuer des tests dans des navigateurs pour&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>s&#8217;assurer de la compatibilité de notre code avec les variations d&#8217;implémentation de navigateurs&#160;;</simpara>
</listitem>
<listitem>
<simpara>valider notre choix de <emphasis>polyfills</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>tester fidèlement contre des API de navigateurs ou du DOM (comme <emphasis>Web&#160;Audio</emphasis> ou
<emphasis>Service&#160;Workers</emphasis>).</simpara>
</listitem>
</itemizedlist>
<simpara>Autrement dit, nous avons besoin d&#8217;un exécuteur de tests qui les fasse fonctionner
dans l&#8217;environnement d&#8217;un navigateur.
Idéalement, nous voulons que cet exécuteur de tests n&#8217;influe pas sur l&#8217;outillage
employé pour écrire nos tests et donc nous permette d&#8217;utiliser <emphasis>mocha</emphasis> et <emphasis>chai</emphasis>
comme dans la section précédente.</simpara>
<simpara><emphasis>karma</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/karma">npmjs.com/karma</link></phrase>) est l&#8217;outil phare de l&#8217;écosystème
Node dédié aux tests dans les navigateurs.
Il a été créé en&#160;2012 pour faciliter l&#8217;exécution des suites de tests de la
bibliothèque <emphasis>Angular</emphasis> et s&#8217;exécute en ligne de commandes.</simpara>
<simpara>Les fonctionnalités de <emphasis>karma</emphasis> s&#8217;étendent à l&#8217;aide de modules&#160;<literal>npm</literal>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>intégrations avec des suites de tests&#160;;</simpara>
</listitem>
<listitem>
<simpara>lanceurs de navigateurs&#160;;</simpara>
</listitem>
<listitem>
<simpara>préprocesseurs pour transformer des fichiers, les servir et/ou les inclure
dans l&#8217;environnement de tests.</simpara>
</listitem>
</itemizedlist>
<simpara>Le pilotage de <emphasis>karma</emphasis> se fait via un fichier de configuration <literal>karma.conf.js</literal>.
Il est possible de surcharger ultérieurement cette configuration avec des
arguments de la ligne de commandes.</simpara>
<formalpara>
<title>Initialisation automatique d&#8217;un fichier de configuration <literal>karma.conf.js</literal></title>
<para>
<screen>$ ./node_modules/.bin/karma init</screen>
</para>
</formalpara>
<simpara><emphasis>karma</emphasis> fonctionne avec des navigateurs installés sur notre machine de
développement tout comme avec des services distants comme <emphasis>SauceLabs</emphasis> ou
<emphasis>BrowserStack</emphasis> (voir <quote><link linkend="ci">Intégration continue et compatibilité navigateurs</link></quote>).
Les navigateurs doivent déjà être disponibles sur la machine de test (Firefox
et Chrome par exemple) et nous devons en parallèle installer les lanceurs
(<literal>karma-firefox-launcher</literal> et <literal>karma-chrome-launcher</literal> respectivement).</simpara>
<simpara>Les navigateurs lancés par défaut lors des tests sont listés dans l&#8217;option <literal>browsers</literal>&#160;:</simpara>
<formalpara>
<title>karma.conf.js#L49</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">autoWatch: true,</programlisting>
</para>
</formalpara>
<simpara><emphasis>karma</emphasis> se charge d&#8217;inclure les fichiers ECMAScript ou de servir des fichiers
statiques en fonction de motifs de chemins.
Ces fichiers peuvent être locaux (de préférence) ou distants et même de
types différents comme JSON ou&#160;HTML.</simpara>
<formalpara>
<title>karma.conf.js#L7-17</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">files: [
  //'https://cdn.polyfill.io/v2/polyfill.min.js',  <co xml:id="CO306-1"/>
  'examples/tests-browser/**/*.js',                <co xml:id="CO306-2"/>
  'examples/tests/**/*.js',
  'examples/tests-browser/**/*.html',              <co xml:id="CO306-3"/>
  {
    pattern: 'package.json',                       <co xml:id="CO306-4"/>
    served: true,
    included: false                                <co xml:id="CO306-5"/>
  }
],</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO306-1">
<para>Il suffirait de décommenter cette ligne pour inclure les <link linkend="polyfills"><emphasis>polyfills</emphasis> de navigateurs</link> sans toucher à notre&#160;code.</para>
</callout>
<callout arearefs="CO306-2">
<para>Inclusion des fichiers de tests&#160;– ils sont appelés dans des balises HTML <literal>&lt;script&gt;</literal>.</para>
</callout>
<callout arearefs="CO306-3">
<para>Inclusion de fichiers HTML&#160;– ils sont accessibles via&#160;HTTP.</para>
</callout>
<callout arearefs="CO306-4">
<para>Mise à disposition du fichier <literal>package.json</literal>&#160;– accessible via HTTP à l&#8217;adresse <literal>/base/package.json</literal>.</para>
</callout>
<callout arearefs="CO306-5">
<para>Indique que ce fichier ne doit pas être inclus dans une balise HTML <literal>&lt;script&gt;</literal>.</para>
</callout>
</calloutlist>
<simpara>Des intégrations doivent être déclarées pour augmenter les fonctionnalités de
base de <emphasis>karma</emphasis>.
Ces dernières se résument à charger des fichiers ECMAScript
dans une balise <literal>&lt;script&gt;</literal>.</simpara>
<simpara>L&#8217;extrait de configuration suivant illustre le chargement des plug-ins pour
<emphasis>Browserify</emphasis> (modules <emphasis>CommonJS</emphasis> et transpilation), <emphasis>mocha</emphasis> (suites de tests)
et <emphasis>fixture</emphasis> (données représentant des cas d&#8217;utilisation)&#160;– respectivement
les modules <literal>npm</literal> <literal>karma-browserify</literal>, <literal>karma-mocha</literal> et <literal>karma-fixture</literal>&#160;:</simpara>
<formalpara>
<title>karma.conf.js#L5</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">frameworks: ['browserify', 'mocha', 'fixture'],</programlisting>
</para>
</formalpara>
<simpara>Une fois encore, des motifs de chemins sont utilisés pour indiquer aux plug-ins
leur responsabilité de prise en charge.</simpara>
<formalpara>
<title>karma.conf.js#L21-25</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">preprocessors: {
  'examples/tests/**/*.js': ['browserify'],         <co xml:id="CO307-1"/>
  'examples/tests-browser/**/*.js': ['browserify'],
  'examples/tests-browser/**/*.html': ['html2js'],  <co xml:id="CO307-2"/>
},</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO307-1">
<para>Ces fichiers seront transpilés par <emphasis>browserify</emphasis> avant d&#8217;être chargés dans les tests de navigateurs.</para>
</callout>
<callout arearefs="CO307-2">
<para>Ces fichiers seront pris en charge par le préprocesseur nommé <emphasis>html2js</emphasis>, utilisé par <literal>karma-fixture</literal> pour transformer du HTML en arbre&#160;DOM.</para>
</callout>
</calloutlist>
<simpara>Nous avons vu un exemple de code reposant sur un élément du DOM dans la section
<quote><link linkend="testing-101">Que tester&#160;?</link></quote>.
Nous allons nous intéresser à une manière possible de tester la fonction
exportée <literal>getLinkElementContent()</literal> en se basant sur un véritable appel HTTP et
un véritable élément du DOM, créé à partir du fichier de <emphasis>fixture</emphasis> suivant&#160;:</simpara>
<formalpara>
<title>tests-browser/fixtures/link-package.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;a href="/base/package.json"&gt;Test&lt;/a&gt;</programlisting>
</para>
</formalpara>
<simpara>Ce fichier de fixture est chargé dans le DOM par le plug-in <literal>karma-fixture</literal>
pour prouver que l&#8217;on peut récupérer les dépendances exposées par le fichier
<literal>package.json</literal> des ressources de ce chapitre&#160;:</simpara>
<formalpara>
<title>tests-browser/test-outside-world.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import { expect } from 'chai';
import getLinkElementContent from '../test-outside-world.js';

describe('getLinkElementContent', () =&gt; {
  before(() =&gt; {
    fixture.setBase('examples/tests-browser/fixtures'); <co xml:id="CO308-1"/>
  });

  it('fetches dependencies from remote package.json', () =&gt; {
    const [link] = fixture.load('link-package.html');   <co xml:id="CO308-2"/>

    return getLinkElementContent(link).then(deps =&gt; {   <co xml:id="CO308-3"/>
      expect(deps).to.contain.all.keys(                 <co xml:id="CO308-4"/>
        '@babel/core', 'react', 'enzyme'
      );
    });
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO308-1">
<para><literal>before()</literal> indique à <emphasis>mocha</emphasis> d&#8217;exécuter ce bloc de code avant tout&#160;test.</para>
</callout>
<callout arearefs="CO308-2">
<para>Appel du plug-in de fixture pour obtenir l&#8217;élément du DOM nécessaire à la fonction <literal>getLinkElementContent()</literal>.</para>
</callout>
<callout arearefs="CO308-3">
<para>Appel réel de la fonction <literal>getLinkElementContent()</literal>, résolu comme une <link xl:href="../chapter-03/index.xml#promise">promesse</link> et dont nous testons le résultat à la ligne suivante.</para>
</callout>
<callout arearefs="CO308-4">
<para>Assertion vérifiant que le résultat contient bien les clés de dépendances&#160;<literal>npm</literal> attendues&#160;– nous avons bien récupéré le bon fichier et le bon contenu&#160;!</para>
</callout>
</calloutlist>
<simpara>L&#8217;invocation de <emphasis>karma</emphasis> se fait en invoquant <literal>./node_modules/.bin/karma start</literal>.
Par mesure de simplicité, cette commande a été abstraite en tant que
<link xl:href="../chapter-05/index.xml#npm-scripts">script&#160;<literal>npm</literal></link>&#160;:</simpara>
<formalpara>
<title>Exécution ponctuelle de karma</title>
<para>
<screen>$ npm run test:browser</screen>
</para>
</formalpara>
<simpara>Les tests peuvent être relancés en continu&#160;– dès qu&#8217;un fichier change&#160;– en
désactivant l&#8217;exécution unique (<emphasis>single run</emphasis>).
C&#8217;est idéal lorsque les tests sont écrits en parallèle de l&#8217;implémentation du
code ou que des ajustements fréquents ont lieu en phase de développement&#160;:</simpara>
<formalpara>
<title>Exécution continue de karma</title>
<para>
<screen>$ npm run test:browser -- --no-single-run</screen>
</para>
</formalpara>
<simpara>Comme tout processus de longue durée, il s&#8217;interrompt à l&#8217;aide de la combinaison
de touches <keycombo><keycap>CTRL</keycap><keycap>C</keycap></keycombo>.</simpara>
<simpara>Nous en savons désormais suffisamment pour tester dans les conditions des
navigateurs avec du code modulaire et réutilisable.
La question qui se pose désormais est la suivante&#160;:
<emphasis role="strong">comment faire pour tester plusieurs versions d&#8217;un même navigateur</emphasis>, pour
tester sur un système d&#8217;exploitation que l&#8217;on n&#8217;a pas ou encore plusieurs
terminaux mobiles de type <emphasis>smartphone</emphasis> ou tablette&#160;?</simpara>
</section>
<section xml:id="ci">
<title>Intégration continue et compatibilité navigateurs</title>
<simpara>Deux cas de figure se présentent en complément de la section précédente&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>la difficulté d&#8217;accès à certaines combinaisons navigateur + système d&#8217;exploitation&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;envie d&#8217;automatiser les tests de navigateurs.</simpara>
</listitem>
</itemizedlist>
<simpara>Sous Windows, il sera difficile de tester la version macOS de Safari.
Inversement, sous macOS, il sera difficile de tester
Internet&#160;Explorer ou Edge.
Que dire d&#8217;anciennes versions de navigateurs Android, dont la rapidité de
développement et donc la compatibilité sont bien en-deçà des versions de Chrome
pour ordinateur ou mobile&#160;?</simpara>
<simpara>L&#8217;écosystème de modules&#160;<literal>npm</literal> liés à <emphasis>karma</emphasis> s&#8217;est déjà penché sur la question.
C&#8217;est le cas notamment du produit <emphasis>BrowserStack</emphasis> qui offre une intégration pour
déléguer l&#8217;exécution des tests sur leur plate-forme commerciale.
Il s&#8217;agit du module <literal>karma-browserstack-launcher</literal>
(<phrase role="URL"><link xl:href="https://npmjs.com/karma-browserstack-launcher">npmjs.com/karma-browserstack-launcher</link></phrase>).</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> BrowserStack</title>
<simpara>La documentation de <emphasis>BrowserStack</emphasis> (<phrase role="URL"><link xl:href="https://www.browserstack.com/automate/node">www.browserstack.com/automate/node</link></phrase>)
décrit les différents systèmes d&#8217;exploitation à disposition ainsi que les
navigateurs compatibles, pour PC, Mac, iOS et Android.</simpara>
<simpara>L&#8217;intégration avec Node est également documentée au cas où vous souhaiteriez
effectuer des tests sans passer par <emphasis>karma</emphasis>.</simpara>
</tip>
<simpara><emphasis>BrowserStack</emphasis> n&#8217;est pas un navigateur en soi, mais offre un accès à une multitude
de navigateurs.
Il faut donc créer de nouvelles configurations dans la propriété <literal>customLaunchers</literal>.
L&#8217;extrait de configuration suivant illustre la création d&#8217;un navigateur Safari
pour iPhone&#160;4S sous iOS&#160;5.1.</simpara>
<formalpara>
<title>karma.conf.js#L51-58</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">browsers: ['Chrome'],

customLaunchers: {
  iphone4: {
    base: 'BrowserStack',
    device: 'iPhone 4S',
    os: 'ios',
    os_version: '5.1'</programlisting>
</para>
</formalpara>
<simpara>L&#8217;utilisation de <emphasis>BrowserStack</emphasis> nécessite un compte et l&#8217;obtention d&#8217;une clé
d&#8217;API afin d&#8217;utiliser leur service.
Notre nom d&#8217;utilisateur et la clé d&#8217;API doivent être renseignés en tant que
variables d&#8217;environnement pour établir une connexion au service et démarrer
notre bon vieil iPhone&#160;4&#160;:</simpara>
<screen>$ export BROWSER_STACK_USERNAME=...
$ export BROWSER_STACK_ACCESS_KEY=...
$ npm run test:browser -- --browsers iphone4</screen>
<simpara><emphasis>BrowserStack</emphasis> est configurable plus finement selon nos besoins.
Le réglage suivant s&#8217;assure de faire transiter les données HTTP
(scripts, HTML) via la connexion sécurisée entre notre ordinateur et
<emphasis>BrowserStack</emphasis>.
C&#8217;est un réglage utile en cas de proxy exigeant ou de
réglages de connexion à Internet bien spécifiques.</simpara>
<formalpara>
<title>karma.conf.js#L41-43</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">browserStack: {
  forcelocal: true,
},</programlisting>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> Sauce&#160;Labs</title>
<simpara><emphasis>Sauce&#160;Labs</emphasis> (<phrase role="URL"><link xl:href="https://saucelabs.com">saucelabs.com</link></phrase>) est un concurrent de <emphasis>BrowserStack</emphasis>.
Il offre des fonctionnalités similaires et il est gratuit pour les projets open source.</simpara>
</tip>
<simpara>Indépendamment de <emphasis>BrowserStack</emphasis>, l&#8217;intégration continue est un mécanisme
permettant l&#8217;exécution automatique des tests, de manière reproductible et
dans un environnement systématiquement propre&#160;– sans trace d&#8217;exécution d&#8217;un
précédent&#160;test.</simpara>
<simpara>Cela a deux avantages indéniables&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>exécuter les tests pour tout changement de code, peu importe qui en est l&#8217;auteur&#160;;</simpara>
</listitem>
<listitem>
<simpara>s&#8217;assurer de l&#8217;exécution systématique des tests&#160;;</simpara>
</listitem>
<listitem>
<simpara>mettre en commun la logique d&#8217;exécution de tests.</simpara>
</listitem>
</itemizedlist>
<simpara>On évite ainsi les <emphasis>oublis</emphasis> tout en enlevant le coût de mise en place de
l&#8217;infrastructure de tests chez des personnes contribuant de manière occasionnelle.
Cerise sur le gâteau, on prévient en partie les régressions&#160;– changements qui
cassent le fonctionnement attendu d&#8217;une fonctionnalité.</simpara>
<simpara>Le service Travis&#160;CI (<phrase role="URL"><link xl:href="https://travis-ci.com">travis-ci.com</link></phrase>) est un service
d&#8217;intégration continue (<emphasis>Continuous Integration</emphasis>, <emphasis>CI</emphasis>) parmi d&#8217;autres, mais
qui a été rendu populaire pour son intégration avec GitHub.
Il est gratuit pour les projets open source.</simpara>
<simpara>Un service d&#8217;intégration continue est configuré pour définir ce qui est
exécuté avant, pendant et après les tests.
Il a donc l&#8217;avantage de faciliter l&#8217;automatisation des tests de navigateurs
à même la machine virtuelle (<emphasis>Virtual Machine</emphasis>, <emphasis>VM</emphasis>) de test ou bien
vers des plates-formes comme <emphasis>BrowserStack</emphasis>.
Son mécanisme de variables d&#8217;environnement cryptées nous évitera de donner
accès à notre compte au premier&#160;venu.</simpara>
<simpara>Un fichier de configuration minimal au format YAML est nécessaire.
Des services comme GitHub facilitent la connexion avec Travis&#160;CI et
déclenchent automatiquement l&#8217;exécution des tests à chaque <emphasis>commit</emphasis>
ou <emphasis>pull&#160;request</emphasis>.</simpara>
<formalpara>
<title>.travis.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">language: node_js             <co xml:id="CO309-1"/>
node_js: v10                  <co xml:id="CO309-2"/>

addons:
  firefox: latest             <co xml:id="CO309-3"/>

env:
- MOZ_HEADLESS=1                                      <co xml:id="CO309-4"/>
- BROWSER_STACK_USERNAME="$BROWSER_STACK_USERNAME"    <co xml:id="CO309-5"/>
- BROWSER_STACK_ACCESS_KEY="$BROWSER_STACK_ACCESS_KEY"

script: npm run test:browser -- --browsers Firefox</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO309-1">
<para>Configuration de la&#160;VM pour utiliser&#160;Node.</para>
</callout>
<callout arearefs="CO309-2">
<para>Configuration de la&#160;VM pour utiliser la version la plus récente de Node&#160;v10.</para>
</callout>
<callout arearefs="CO309-3">
<para>Installation de la dernière version stable de Firefox.</para>
</callout>
<callout arearefs="CO309-4">
<para>La variable d&#8217;environnement <literal>MOZ_HEADLESS</literal> indique à Firefox de démarrer sans afficher d&#8217;interface graphique à l&#8217;écran.</para>
</callout>
<callout arearefs="CO309-5">
<para>J&#8217;ai paramétré la clé d&#8217;accès à <emphasis>BrowserStack</emphasis> dans les réglages de <link linkend="travis-ci">Travis&#160;CI</link> (voir encadré).</para>
</callout>
</calloutlist>
<tip xml:id="travis-ci">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Travis&#160;CI</title>
<simpara>Des services comme Travis&#160;CI sont puissants et amplement configurable
pour de nombreux besoins&#160;– dont Node (<phrase role="URL"><link xl:href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/">docs.travis-ci.com/user/languages/javascript-with-nodejs/</link></phrase>)&#160;–
et y&#160;compris pour se connecter à des bases de données PostgreSQL ou MariaDB.</simpara>
<figure>
<title>Écran de paramétrage des variables d&#8217;environnement secrètes sur Travis&#160;CI</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/travis-ci-encrypted-env.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>travis ci encrypted env</phrase></textobject>
</mediaobject>
</figure>
</tip>
</section>
</section>
<section xml:id="conclusion_9">
<title>Conclusion</title>
<simpara>Nous sommes désormais en mesure d'<emphasis role="strong">exécuter des tests unitaires</emphasis> impliquant
des <emphasis role="strong">navigateurs web</emphasis> sur notre machine, sur des <emphasis role="strong">services distants</emphasis> mais
également de manière automatique avec des services d'<emphasis role="strong">intégration continue</emphasis>
comme Travis&#160;CI.</simpara>
<simpara>Le recours aux modules&#160;<literal>npm</literal> combinés aux modules ECMAScript facilite
<emphasis role="strong">la conception et la maintenance de code testable et réutilisable</emphasis>.</simpara>
<simpara>Ces pratiques de modularisation&#160;– jusqu&#8217;au rendu intermédiaire de <emphasis>React</emphasis>
– incitent à la <emphasis role="strong">rigueur qui a un effet positif</emphasis> sur la qualité de notre
code et renforce notre confiance à le déployer en production.</simpara>
</section>
</chapter>
<appendix xml:id="sélection_de_modulesnpm">
<title>Sélection de modules&#160;npm</title>
<simpara>Cette annexe est une sélection de modules&#160;<literal>npm</literal> (<phrase role="URL"><link xl:href="https://npmjs.com">npmjs.com</link></phrase>)
à laquelle vous référer pour démarrer rapidement, mais aussi pour découvrir
des usages et des domaines d&#8217;application insoupçonnés.</simpara>
<simpara>J&#8217;ai bâti cette liste à partir de mon expérience personnelle et sur la confiance
que je porte aux personnes à l&#8217;origine de ces modules.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node&#160;v10</emphasis>
et <emphasis role="strong">npm&#160;v6</emphasis>.
Ce sont les versions stables recommandées en&#160;2019.</simpara>
</note>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal></title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install appendix-a
$ cd $(nodebook dir appendix-a)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les instructions d&#8217;installation pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<section xml:id="boîte_à_outils_du_quotidien">
<title>Boîte à outils du quotidien</title>
<simpara>Ces modules répondent à des besoins quotidiens, pour travailler plus rapidement
sur des structures ECMAScript.</simpara>
<section xml:id="lodash">
<title>lodash</title>
<simpara><emphasis>lodash</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/lodash">npmjs.com/lodash</link></phrase>) est une collection de plusieurs
dizaines de fonctions pour travailler plus facilement avec des chaînes de caractères,
des tableaux, des fonctions et des objets.</simpara>
<simpara>Vous pourrez ainsi filtrer, sélectionner, fusionner, vérifier et composer
de nouvelles variables, aussi bien pour Node que dans les navigateurs.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>lodash.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const { intersection, first } = require('lodash');
const DC = ['Batman', 'Brainiac', 'Thor'];
const Marvel = ['Spiderman', 'Thor'];

const result = first(intersection(DC, Marvel));
console.log(result);  <co xml:id="CO310-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO310-1">
<para>Affiche <literal>Thor</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="he">
<title>he</title>
<simpara><emphasis>he</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/he">npmjs.com/he</link></phrase>) est un utilitaire pour encoder et décoder
des entités HTML dans des chaînes de caractères.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>he.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {encode} = require('he');
const html = '&lt;h1&gt;Blog Post&lt;/h1&gt;';

console.log(html);                   <co xml:id="CO311-1"/>
console.log(encode(html));           <co xml:id="CO311-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO311-1">
<para>Affiche <literal>&lt;h1&gt;Blog Post&lt;/h1&gt;</literal>.</para>
</callout>
<callout arearefs="CO311-2">
<para>Affiche <literal>&amp;#x3C;h1&amp;#x3E;Blog Post&amp;#x3C;/h1&amp;#x3E;</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="chance">
<title>chance</title>
<simpara><emphasis>chance</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/chance">npmjs.com/chance</link></phrase>) crée des données de manière aléatoire.
Le module retourne aussi des prénoms fictifs, mais aussi des numéros de téléphone,
des nombres, des paragraphes, des dates d&#8217;anniversaire, des identifiants Android
ou Apple, etc.</simpara>
<simpara>Il s&#8217;utilise surtout pour générer des données factices à des fins de tests,
en attendant les vraies données.</simpara>
</section>
<section xml:id="date_fns">
<title>date-fns</title>
<simpara><emphasis>date-fns</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/date-fns">npmjs.com/date-fns</link></phrase>) est une collection de fonctions
pour travailler avec des dates, plus facilement qu&#8217;avec l&#8217;objet natif&#160;<literal>Date</literal>.</simpara>
<simpara>Vous pouvez formater, ajouter ou retirer des jours, vérifier si deux périodes
de temps se chevauchent ou si deux dates font partie d&#8217;une même semaine calendaire.</simpara>
</section>
<section xml:id="tcomb">
<title>tcomb</title>
<simpara><emphasis>tcomb</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/tcomb">npmjs.com/tcomb</link></phrase>) renforce la création de structures
typées et non mutables.
Cela réduit les effets de bord de nos applications lorsque les
données n&#8217;ont pas la structure attendue.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>tcomb.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const t = require('tcomb');

const GPS = t.struct({                                <co xml:id="CO312-1"/>
  lat: t.Number,
  lon: t.Number,
}, {strict: true});

const Bordeaux = GPS({ lat: 44.8638, lon: -0.6561 });
const Crest = GPS({ lat: 44.7311, long: 4.9861 });    <co xml:id="CO312-2"/>
const Toulouse = GPS({ lat: 43.6008, lon: 'r0s3' });  <co xml:id="CO312-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO312-1">
<para>Définition d&#8217;une structure stricte qui a pour propriétés <literal>lat</literal> et <literal>lon</literal>, pour <emphasis>latitude</emphasis> et <emphasis>longitude</emphasis>.</para>
</callout>
<callout arearefs="CO312-2">
<para>Cet appel va lancer une exception car la propriété <literal>long</literal> est inconnue.</para>
</callout>
<callout arearefs="CO312-3">
<para>Cet appel va lancer une exception car la propriété <literal>lon</literal> doit être un nombre.</para>
</callout>
</calloutlist>
</section>
<section xml:id="eventemitter3">
<title>eventemitter3</title>
<simpara><emphasis>eventemitter3</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/eventemitter3">npmjs.com/eventemitter3</link></phrase>) sert à gérer
des événements de manière uniforme dans un script Node et dans les navigateurs.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>eventemitter3.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const EventEmitter = require('eventemitter3');
const emitter = new EventEmitter();

emitter.on('ping', data =&gt; console.log('on: %s', data));
emitter.once('ping', data =&gt; console.log('once: %s', data));

console.log(emitter.listeners('ping')); <co xml:id="CO313-1"/>

emitter.emit('ping', ['ping', 'ping']); <co xml:id="CO313-2"/>
emitter.emit('ping', ['pong']);         <co xml:id="CO313-3"/>

emitter.removeListener('ping');
emitter.emit('ping', ['pong']);         <co xml:id="CO313-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO313-1">
<para>Affiche <literal>[ [Function], [Function] ]</literal>.</para>
</callout>
<callout arearefs="CO313-2">
<para>Affiche <literal>on: ping,ping</literal> puis <literal>once: ping,ping</literal>.</para>
</callout>
<callout arearefs="CO313-3">
<para>Affiche <literal>on: ping,ping</literal>.</para>
</callout>
<callout arearefs="CO313-4">
<para>N&#8217;affiche rien, l&#8217;événement étant désormais déconnecté.</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="dev">
<title>Pendant le développement</title>
<section xml:id="debug">
<title>debug</title>
<simpara><emphasis>debug</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/debug">npmjs.com/debug</link></phrase>) rend optionnel l&#8217;affichage de
messages de débogage.
Les messages s&#8217;affichent en présence d&#8217;une variable d&#8217;environnement.
Nous pouvons ainsi lancer un processus et retracer un cheminement complexe de
données.</simpara>
<simpara>Par défaut, les messages ne s&#8217;affichent pas&#160;:</simpara>
<screen>$ node examples/debug.js</screen>
<simpara>Les messages du débogueur <literal>app</literal> s&#8217;affichent désormais&#160;:</simpara>
<screen>$ <emphasis role="marked">DEBUG=app</emphasis> node examples/debug.js
  app fromages [ 'livarot', 'chaource' ] +0ms</screen>
<simpara>Nous pouvons en afficher plusieurs en même temps, en usant du caractère&#160;<literal>*</literal>
ou en séparant les noms de débogueurs avec des virgules&#160;:</simpara>
<screen>$ DEBUG=app<emphasis role="marked">*</emphasis> node examples/debug.js
  app fromages [ 'livarot', 'chaource' ] +0ms
  app:timer now 1531304027271 +0ms</screen>
<formalpara>
<title>debug.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const debug = require('debug');
const log = debug('app');                     <co xml:id="CO314-1"/>
const logInterval = debug('app:timer');       <co xml:id="CO314-2"/>

log('fromages %o', ['livarot', 'chaource']);  <co xml:id="CO314-3"/>

setTimeout(() =&gt; {
  logInterval('now %d', Date.now());          <co xml:id="CO314-4"/>
}, 1000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO314-1">
<para>Création du débogueur <literal>app</literal>.</para>
</callout>
<callout arearefs="CO314-2">
<para>Création du débogueur <literal>app:timer</literal>.</para>
</callout>
<callout arearefs="CO314-3">
<para>La fonction de débogage s&#8217;utilise de la même manière que <literal>console.log</literal>.</para>
</callout>
<callout arearefs="CO314-4">
<para>Cette fonction fait appel au débogueur <literal>app:timer</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="nodemon">
<title>nodemon</title>
<simpara><emphasis>nodemon</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/nodemon">npmjs.com/nodemon</link></phrase>) relance le processus actif
dès qu&#8217;un fichier ECMAScript ou JSON est modifié.
C&#8217;est un module exécutable particulièrement utile lorsque nous voulons prendre
en compte les changements dans une application qui tourne en continu.
C&#8217;est le cas des applications web, entre autres.</simpara>
<note>
<simpara>Pour en savoir plus, rendez-vous à la section
<quote><link xl:href="../chapter-07/index.xml#dev">Pendant le développement&#160;: relancer le serveur automatiquement</link></quote>
du <link xl:href="../chapter-07/index.xml">chapitre&#160;7</link>.</simpara>
</note>
</section>
<section xml:id="npm_run_all">
<title>npm-run-all</title>
<simpara><emphasis>npm-run-all</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/npm-run-all">npmjs.com/npm-run-all</link></phrase>) est mon outil favori
pour composer avec les scripts&#160;<literal>npm</literal>.
Il a l&#8217;avantage d&#8217;être adaptable, de régler finement ce qui
doit être exécuté en parallèle ou séquentiellement.
Le module transfère les arguments aux sous-scripts.</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "...": "...",
  "scripts": {
    "build": "npm-run-all -p 'build:*' -s start",
    "build:css": "sass ...",
    "build:js": "browserify ...",
    "start": "node server.js"
  }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="husky">
<title>husky</title>
<simpara><emphasis>husky</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/husky">npmjs.com/husky</link></phrase>) intègre Git aux
<link xl:href="../chapter-05/index.xml#scripts">scripts&#160;<literal>npm</literal></link>.
Autrement dit, vous pouvez déclencher des scripts lors d&#8217;événements Git,
lors d&#8217;un <literal>push</literal>, avant un <literal>commit</literal> ou après avoir rapatrié des changements.</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "...": "...",
  "scripts": {
    "precommit": "lint-staged",
    "post-merge": "npm install"
  }
}</programlisting>
</para>
</formalpara>
<simpara>La liste complète des <emphasis>hooks</emphasis> Git se trouve dans la documentation
officielle&#160;: <phrase role="URL"><link xl:href="https://git-scm.com/docs/githooks">git-scm.com/docs/githooks</link></phrase>.</simpara>
</section>
<section xml:id="onchange">
<title>onchange</title>
<simpara><emphasis>onchange</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/onchange">npmjs.com/onchange</link></phrase>) observe une liste de fichiers
en continu et déclenche une commande dès que l&#8217;un d&#8217;entre eux est modifié.
C&#8217;est particulièrement utile pour reconstruire automatiquement des fichiers
de configuration ou des fichiers <emphasis>front-end</emphasis> pendant le développement.</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "...": "...",
  "scripts": {
    "build:css": "sass ...",
    "dev": "npm-run-script -p 'watch:*' start",
    "watch:css": "onchange '**/*.scss' -- npm run build:css",
    "start": "node server.js"
  }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="tiny_lr">
<title>tiny-lr</title>
<simpara><emphasis>tiny-lr</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/tiny-lr">npmjs.com/tiny-lr</link></phrase>) est une implémentation minimale
du protocole <emphasis>livereload</emphasis> (<phrase role="URL"><link xl:href="http://livereload.com">livereload.com</link></phrase>).
Il s&#8217;intègre à un serveur HTTP ou à une application <emphasis>Express</emphasis> pour relayer
la liste des fichiers modifiés côté client.</simpara>
<simpara>Le script ou l&#8217;extension navigateur client remplace les anciens fichiers
par les nouveaux pour refléter les changements sans recharger la&#160;page.</simpara>
</section>
<section xml:id="livereactload">
<title>livereactload</title>
<simpara><emphasis>livereactload</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/livereactload">npmjs.com/livereactload</link></phrase>) recherche les composants
<link linkend="react"><emphasis>React</emphasis></link> à chaud, c&#8217;est-à-dire sans rafraîchir la page ni perdre l&#8217;état des données.
C&#8217;est un module indispensable pour développer des applications <emphasis>front-end</emphasis> réactives.</simpara>
<note>
<simpara>Rendez-vous dans la section <quote><link xl:href="../chapter-09/index.xml#livereload">Changements en temps&#160;réel dans le navigateur</link></quote>
du <link xl:href="../chapter-09/index.xml">chapitre&#160;9</link> pour en savoir plus sur son
installation et son intégration.</simpara>
</note>
</section>
</section>
<section xml:id="protéger_nos_applications">
<title>Protéger nos applications</title>
<simpara>Le code que nous écrivons se protège dès la conception et dans le temps.
Certains modules filtrent les tentatives d&#8217;exploitation de nos
applications, tandis que d&#8217;autres vérifient si le code déployé est toujours&#160;sûr.</simpara>
<section xml:id="sanitize_filename">
<title>sanitize-filename</title>
<simpara><emphasis>sanitize-filename</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/sanitize-filename">npmjs.com/sanitize-filename</link></phrase>) nettoie
une variable de tout caractère ambigu ou qui ne serait pas attendu.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>sanitize-filename.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const sanitize = require('sanitize-filename');

console.log(sanitize('aucun-problème.txt'));  <co xml:id="CO315-1"/>
console.log(sanitize('../../.ssh/id_rsa'));   <co xml:id="CO315-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO315-1">
<para>Affiche <literal>aucun-problème.txt</literal>.</para>
</callout>
<callout arearefs="CO315-2">
<para>Affiche <literal>.....sshid_rsa</literal>&#160;– les caractères&#160;<literal>/</literal> sont nettoyés car il permettrait de créer des chemins compromettants pour l&#8217;application ou le système d&#8217;exploitation.</para>
</callout>
</calloutlist>
</section>
<section xml:id="helmet">
<title>helmet</title>
<simpara><emphasis>helmet</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/helmet">npmjs.com/helmet</link></phrase>) est un module à intégrer systématiquement
dans toute application <emphasis>Express</emphasis>.
Il ajoute des en-têtes HTTP <emphasis>Content-Security Policy</emphasis>, <emphasis>Strict Transport Policy</emphasis>
et d&#8217;autres qui empêchent le détournement d&#8217;informations.</simpara>
<simpara>Chacune de ses protections se configure aussi au cas par cas.
Elles s&#8217;intègrent manuellement dans d&#8217;autres types d&#8217;applications web,
y&#160;compris un serveur HTTP natif à&#160;Node.</simpara>
</section>
<section xml:id="dompurify">
<title>dompurify</title>
<simpara><emphasis>dompurify</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/dompurify">npmjs.com/dompurify</link></phrase>) nettoie un contenu HTML
pour le rendre affichable en toute sécurité.
Il nettoie des scripts indésirés, des balises mal formées qui casseraient l&#8217;affichage,
ou encore des <emphasis>iframes</emphasis> qui injecteraient des contenus tiers sans notre consentement.</simpara>
</section>
<section xml:id="filenamify">
<title>filenamify</title>
<simpara><emphasis>filenamify</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/filenamify">npmjs.com/filenamify</link></phrase>) nettoie une valeur
pour retirer tout caractère invalide dans un nom de fichier.
C&#8217;est pratique pour laisser la possibilité à un utilisateur de choisir
un nom de fichier sans pour autant mettre en danger le système ou l&#8217;application.</simpara>
</section>
<section xml:id="retire_js">
<title>retire.js</title>
<simpara><emphasis>retire.js</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/retire">npmjs.com/retire</link></phrase>) sert à scanner soi-même des
vulnérabilités connues dans des fichiers JavaScript.
Il est complémentaire de la commande <link xl:href="../chapter-05/index.xml#audit"><literal>npm audit</literal></link>
car il inspecte des dépendances qui ne sont pas forcément sur&#160;<literal>npm</literal>.</simpara>
</section>
<section xml:id="snyk">
<title>snyk</title>
<simpara><emphasis>snyk</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/snyk">npmjs.com/snyk</link></phrase>) est à la fois un service en ligne
et un module pour vérifier la présence de failles de sécurité connues
dans les dépendances de nos projets.</simpara>
</section>
</section>
<section xml:id="vérifier_la_syntaxe_de_notrecode">
<title>Vérifier la syntaxe de notre&#160;code</title>
<simpara>La vérification syntaxique est un mécanisme s&#8217;assurant que votre code respecte
la grammaire du langage associé.
Elle révèle aussi des anomalies fondamentales (balise mal fermée,
expression inconnue, etc.) et renforce des pratiques de programmation commune
au groupe de développement.</simpara>
<simpara>Vérifier la syntaxe de notre code est une excellente première étape avant
d&#8217;introduire des tests unitaires ou fonctionnels.</simpara>
<section xml:id="htmlhint">
<title>htmlhint</title>
<simpara><emphasis>htmlhint</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/htmlhint">npmjs.com/htmlhint</link></phrase>) vérifie la structure de
nos documents HTML.
Il rapporte les doublons d&#8217;attributs&#160;<literal>id</literal>, la présence de balises
mal formées, l&#8217;absence de balise fermante ou encore l&#8217;existence de chaînes de
caractères non imprimables dans des attributs critiques, entre autres.</simpara>
<simpara>Prenons en exemple le document suivant&#160;:</simpara>
<formalpara>
<title>sample.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" href="sample.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;button id="btn" class="btn btn-primary"&gt;OK&lt;/button&gt;

  &lt;button id="btn" class="btn"&gt;KO&lt;/button&gt;

  &lt;BUTTON class='btn__primary--curent btn--active'&gt;&lt;/BUTTON&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<simpara>Une lecture distraite pourrait nous faire passer à côté d&#8217;erreurs et
d&#8217;incohérences de programmation.
Les erreurs de ce genre passent d&#8217;autant plus inaperçues que la base de code
devient volumineuse et change fréquemment.</simpara>
<simpara>L&#8217;exécution de <emphasis>htmlhint</emphasis> avec ses règles par défaut remontera les alertes
suivantes&#160;:</simpara>
<screen>$ ../node_modules/.bin/htmlhint sample.html
sample.html:
line 1, col 1: Doctype must be first.
line 8, col 10: Id redefinition of [ btn ].
line 10, col 3: Tagname [ BUTTON ] must be lower case.
...
line 10, col 52: Tagname [ BUTTON ] must be lower case.</screen>
</section>
<section xml:id="eslint">
<title>eslint</title>
<simpara><emphasis>eslint</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/eslint">npmjs.com/eslint</link></phrase>) est l&#8217;outil de vérification
syntaxique pour ECMAScript par excellence.
Il est souple, rapide à mettre en œuvre et s&#8217;adapte à des contextes complexes.
J&#8217;aime son mécanisme de configuration de règles&#160;: utilisation systématique du
<link xl:href="../chapter-03/index.xml#strict">mode strict</link>, nombre maximum de paramètres
de fonctions, objets non déclarés, variables inconnues, etc.</simpara>
<simpara><emphasis>eslint</emphasis> expose également des fonctions pour créer vos propres règles métier.</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "...": "...",
  "eslintConfig": {
    "env": {
      "node": true,
      "es6": true
    },
    "extends": [
      "eslint:recommended"
    ],
    "rules": {
      "strict": ["error", "global"],
      "quotes": ["error", "single"],
      "no-undef": "error",
      "curly": "error",
      "eqeqeq": "error"
    }
  }
}</programlisting>
</para>
</formalpara>
<simpara>Le niveau de sévérité de chaque règle est représenté par un identifiant&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>none</literal>&#160;: règle désactivée&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>warn</literal>&#160;: affiche un avertissement&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>error</literal>&#160;: affiche une erreur (le processus se terminera avec un code d&#8217;erreur).</simpara>
</listitem>
</itemizedlist>
<simpara>Certaines règles demandent ou acceptent des arguments supplémentaires.
Elles sont toutes documentées sur le site web du projet&#160;:
<phrase role="URL"><link xl:href="http://eslint.org/docs/rules/">eslint.org/docs/rules/</link></phrase>.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Règles personnalisées</title>
<simpara>Un exemple réutilisable de règles personnalisées se trouve sur le dépôt
GitHub de Airbnb&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/airbnb/javascript">github.com/airbnb/javascript</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="csslint">
<title>csslint</title>
<simpara><emphasis>csslint</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/csslint">npmjs.com/csslint</link></phrase>) est un outil de vérification
syntaxique de feuilles de style CSS.
Il a été créé par deux anciens ingénieurs de Yahoo! dont les anciens travaux
dans le domaine de la performance ont influencé
l&#8217;architecture et le choix des règles par défaut.</simpara>
<simpara><emphasis>csslint</emphasis> fournit les mécanismes de vérification adéquats pour alerter de
possibles effets de bord de <emphasis>box&#160;model</emphasis>, de déclaration incompatible de
<literal>@font-face</literal>, de <emphasis>vendor prefix</emphasis> dépréciés ou encore de combinaisons de
propriétés connues pour casser l&#8217;affichage dans certains navigateurs.</simpara>
<simpara>Prenons par exemple le fichier CSS suivant&#160;:</simpara>
<formalpara>
<title>sample.css</title>
<para>
<programlisting language="css" linenumbering="unnumbered">.btn {
  background: white;
  color: black;
  border: 0px solid black;
  height: 20px;
  padding: 10px;
}
.btn__primary {
  background-color: blue;
  color: white;
  font-size: 1.3em;
  transition: font-weight 0.2s ease;
}
.btn__primary--current {
  color: gray;
}
.btn__primary--current.btn--active {
  font-weight: 700;
}</programlisting>
</para>
</formalpara>
<simpara><emphasis>csslint</emphasis> lancera trois alertes en lisant le fichier <literal>sample.css</literal>,
même si celui-ci est syntaxiquement parfaitement valide&#160;:</simpara>
<screen>$ ../node_modules/.bin/csslint sample.css

csslint: There are 3 problems in sample.css.

sample.css
1: warning at line 4, col 11
Values of 0 shouldn't have units specified.
  border: 0px solid black;

sample.css
2: warning at line 4, col 3
Using height with border can sometimes make
  elements larger than you expect.
  border: 0px solid black;
...</screen>
</section>
<section xml:id="doiuse">
<title>doiuse</title>
<simpara><emphasis>doiuse</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/doiuse">npmjs.com/doiuse</link></phrase>) est un utilitaire qui repose
sur la base de données du site communautaire <phrase role="URL"><link xl:href="https://caniuse.com">caniuse.com</link></phrase>.
Il nous alerte des possibles incompatibilités de syntaxe en fonction de la liste
de navigateurs à gérer.
Cette liste concerne aussi bien des versions spécifiques (Internet Explorer&#160;8)
que des parts de marché (tous les navigateurs avec plus de 5&#160;% de parts de marché).</simpara>
<simpara>L&#8217;exemple suivant illustre les alertes relevées par <emphasis>doiuse</emphasis> dans le cas
d&#8217;une recherche de compatibilité avec Internet Explorer&#160;6 et Internet
Explorer&#160;7&#160;:</simpara>
<screen>$ ../node_modules/.bin/doiuse -b 'ie &lt; 8' sample.css
sample.css:1:1: CSS 2.1 selectors not supported by: IE (6)
sample.css:8:1: CSS 2.1 selectors not supported by: IE (6)
sample.css:12:1: CSS3 Transitions not supported by: IE (6,7)
sample.css:14:1: CSS 2.1 selectors not supported by: IE (6)</screen>
</section>
</section>
<section xml:id="optimize">
<title>Optimiser notre&#160;code</title>
<simpara>Commentaires, indentations ou encore noms de variables&#160;: tout cela occupe de
la place&#160;– autant d&#8217;octets transférés sur le réseau avant d&#8217;être exécutés
par un client web.
Les outils d&#8217;optimisation offrent l&#8217;opportunité aux développeurs et développeuses
d&#8217;écrire du code sans compromettre sa lisibilité et sa maintenabilité.</simpara>
<simpara>Les minifieurs et optimiseurs mettent en œuvre différentes techniques pour
réduire le poids de notre&#160;code&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>suppression des commentaires et caractères non significatifs&#160;;</simpara>
</listitem>
<listitem>
<simpara>renommage de variables&#160;;</simpara>
</listitem>
<listitem>
<simpara>factorisation d&#8217;occurrences multiples similaires&#160;;</simpara>
</listitem>
<listitem>
<simpara>suppression des instructions relatives au débogage/développement&#160;;</simpara>
</listitem>
<listitem>
<simpara>suppression du code inutilisé&#160;;</simpara>
</listitem>
<listitem>
<simpara>écriture automatique de code pour prendre en charge des environnements anciens ou futurs.</simpara>
</listitem>
</itemizedlist>
<section xml:id="uglify_es">
<title>uglify-es</title>
<simpara><emphasis>UglifyJS</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/uglify-es">npmjs.com/uglify-es</link></phrase>) est un des premiers
compresseurs à utiliser une représentation syntaxique en arbre
(<emphasis>Abstract Syntax Tree</emphasis>&#160;– <emphasis>AST</emphasis>) en lieu et place des classiques
optimisations avec expressions régulières.</simpara>
<simpara>Cette méthode élargit les perspectives de la compression via de
la réécriture de&#160;code&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>hoisting</emphasis> des variables (remontée de leur déclaration en début de portée)&#160;;</simpara>
</listitem>
<listitem>
<simpara>combinaison des déclarations de variables&#160;;</simpara>
</listitem>
<listitem>
<simpara>factorisation des valeurs de variables&#160;;</simpara>
</listitem>
<listitem>
<simpara>réécriture partielle d&#8217;expressions&#160;;</simpara>
</listitem>
<listitem>
<simpara>injection en ligne du contenu de variables.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>UglifyJS</emphasis> s&#8217;utilise en ligne de commande ou comme un module&#160;Node.</simpara>
</section>
<section xml:id="postcss">
<title>postcss</title>
<simpara><emphasis>PostCSS</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/postcss">npmjs.com/postcss</link></phrase>) est une optimiseur CSS modulaire.
Cet outil est construit autour d&#8217;un parseur CSS, d&#8217;un arbre syntaxique
et d&#8217;un compilateur de texte.
C&#8217;est la même recette qui a participé au succès et à la richesse fonctionnelle
d&#8217;outils comme <link linkend="uglify-js2">UglifyJS</link> et <link linkend="eslint">ESLint</link>.</simpara>
<simpara>Avec une ou plusieurs extension(s), vous basculez d&#8217;un optimiseur de code
vers la possibilité de créer votre propre préprocesseur, comme&#160;Sass&#160;!</simpara>
</section>
<section xml:id="autoprefixer">
<title>autoprefixer</title>
<simpara><emphasis>autoprefixer</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/autoprefixer">npmjs.com/autoprefixer</link></phrase>) est <emphasis>le</emphasis> module qui
vous épargnera l&#8217;écriture de centaines de lignes CSS.
Il ajoute automatiquement les préfixes navigateurs aux bons endroits&#160;:
<literal>-webkit</literal>, <literal>-moz</literal>, etc.</simpara>
<simpara><emphasis>autoprefixer</emphasis> s&#8217;utilise comme extension au module <link linkend="postcss"><emphasis>PostCSS</emphasis></link>,
en ligne de commande ou comme module&#160;Node.</simpara>
<screen>$ ../node_modules/.bin/postcss sample.css \
    --use autoprefixer  | grep transition
          transition: font-weight 0.2s ease;</screen>
<simpara>Le choix de compatibilité avec les navigateurs repose sur la variable
d&#8217;environnement <literal>BROWSERSLIST</literal>, gérée par le module <emphasis>browserslist</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/browserslist">npmjs.com/browserslist</link></phrase>)&#160;:</simpara>
<screen>$ export BROWSERSLIST='firefox &gt; 8'
$ ../node_modules/.bin/postcss sample.css \
    --use autoprefixer | grep transition
     -moz-transition: font-weight 0.2s ease;
          transition: font-weight 0.2s ease;</screen>
</section>
<section xml:id="uncss">
<title>uncss</title>
<simpara><emphasis>uncss</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/uncss">npmjs.com/uncss</link></phrase>) est le pendant inverse d'<emphasis>autoprefixer</emphasis>
puisqu&#8217;il se charge de supprimer le code CSS inutilisé.
Il s&#8217;utilise de manière autonome ou comme module <link linkend="postcss">PostCSS</link>.</simpara>
<simpara>Le module charge une ou plusieurs page(s) web, calcule la différence entre
les règles utilisées et celles qui ne le sont pas.
Vous êtes libre de mentionner une liste blanche de règles à ne jamais supprimer.</simpara>
</section>
<section xml:id="csswring">
<title>csswring</title>
<simpara><emphasis>csswring</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/csswring">npmjs.com/csswring</link></phrase>) est un minifieur de code CSS
qui s&#8217;interface lui aussi avec <link linkend="postcss">PostCSS</link>.
Vous lui donnez du code, il en ressort une version avec le minimum de caractères
possible.</simpara>
</section>
<section xml:id="google_closure_compiler_js">
<title>google-closure-compiler-js</title>
<simpara><emphasis>Google Closure Compiler</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/google-closure-compiler-js">npmjs.com/google-closure-compiler-js</link></phrase>)
est un compilateur ECMAScript plus poussé qu'<emphasis>UglifyJS</emphasis> mais qui impose un
style d&#8217;écriture plus strict, voire plus contraignant.
Ses optimisations sont en général bien plus poussées et permettent d&#8217;atteindre
des niveaux de finesse difficiles à obtenir autrement.</simpara>
</section>
<section xml:id="csso">
<title>csso</title>
<simpara><emphasis>csso</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/csso">npmjs.com/csso</link></phrase>) est une alternative à <link linkend="csswring">csswring</link>,
écrite par l&#8217;équipe derrière la méthodologie BEM (<phrase role="URL"><link xl:href="https://en.bem.info">en.bem.info</link></phrase>).</simpara>
<simpara><emphasis>csso</emphasis> ira jusqu&#8217;à réécrire les codes couleurs, les <literal>margin</literal> et <literal>padding</literal> et
factorisera les sélecteurs similaires.</simpara>
</section>
<section xml:id="svgo">
<title>svgo</title>
<simpara><emphasis>svgo</emphasis> (<phrase role="URL"><link xl:href="https://www.npmjs.com/svgo">www.npmjs.com/svgo</link></phrase>) s&#8217;attaque au nettoyage des fichiers
graphiques vectoriels au format SVG.
Il simplifie les chemins et supprime les attributs et déclarations superflues.</simpara>
<simpara>Vous pouvez l&#8217;essayer en ligne sur <phrase role="URL"><link xl:href="https://jakearchibald.github.io/svgomg/">jakearchibald.github.io/svgomg/</link></phrase>
ou l&#8217;intégrer comme extension à <link linkend="postcss">PostCSS</link>.</simpara>
</section>
<section xml:id="wawoff2">
<title>wawoff2</title>
<simpara><emphasis>wawoff2</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/wawoff2">npmjs.com/wawoff2</link></phrase>) optimise des polices de caractères
pour le Web.
Le module convertit des polices au format TTF vers le format WOFF2&#160;– à préférer
car plus léger et donc rapide à charger.</simpara>
</section>
</section>
<section xml:id="transpiling">
<title>Passer d&#8217;un langage à un autre</title>
<simpara>Les préprocesseurs sont des outils de productivité pour CSS.
Ils transforment un langage plus avancé dans quelque chose qui est compris
par un navigateur&#160;web.</simpara>
<simpara>La même chose s&#8217;applique avec la compilation ou la transpilation pour ECMAScript,
pour utiliser dès maintenant une version du futur.</simpara>
<section xml:id="less">
<title>less</title>
<simpara><emphasis>less</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/less">npmjs.com/less</link></phrase>) est un préprocesseur CSS.
Il gère des variables, des <emphasis>mixins</emphasis>, des calculs de couleurs et des fonctions
qui encouragent une écriture modulaire, plus logique et plus succincte.</simpara>
<formalpara>
<title>stylesheet.less</title>
<para>
<screen>@warning-color: red;
@base-font-size: 18px;

.btn {
  border: 1px solid black;
  border-radius: @base-font-size / 6;
  font-size: @base-font-size;

  &amp;--large {
    font-size: @base-font-size * 1.5;
  }

  &amp;--warning {
    border-color: fadeout(@warning-color, 10%);
    color: @warning-color;
  }
}</screen>
</para>
</formalpara>
<simpara>L&#8217;exécutable <literal>lessc</literal> compile le fichier <emphasis>less</emphasis>:</simpara>
<screen>$ ../node_modules/.bin/lessc stylesheet.less</screen>
</section>
<section xml:id="sass">
<title>sass</title>
<simpara><emphasis>sass</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/node-sass">npmjs.com/node-sass</link></phrase>) est un autre préprocesseur CSS.
Il est issu du monde Ruby et est désormais tout aussi puissant dans Node
grâce à <emphasis>LibSass</emphasis>, un module rapide et portable écrit en&#160;C&#43;&#43;.</simpara>
</section>
<section xml:id="browserify_2">
<title>browserify</title>
<simpara><emphasis>browserify</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/browserify">npmjs.com/browserify</link></phrase>) transforme des modules et du
code initialement écrit pour Node vers du code exécutable dans un navigateur&#160;web.</simpara>
<simpara>Un puissant mécanisme de transformations étend ses capacités au coup par&#160;coup.</simpara>
<note>
<simpara>Nous en parlons plus en détail dans la section
<quote><link xl:href="../chapter-09/index.xml#browserify">Importer des modules&#160;<literal>npm</literal> pour le Web</link></quote>
au <link xl:href="../chapter-09/index.xml">chapitre&#160;9</link>.</simpara>
</note>
</section>
<section xml:id="babel">
<title>babel</title>
<simpara><emphasis>babel</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/babel">npmjs.com/babel</link></phrase>) est un outil qui permet de passer
d&#8217;une version d&#8217;ECMAScript à une autre, fonctionnalité par fonctionnalité.
C&#8217;est un outil indispensable pour écrire un code moderne et le faire
fonctionner dans des navigateurs anciens.</simpara>
</section>
<section xml:id="typescript">
<title>typescript</title>
<simpara><emphasis>TypeScript</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/typescript">npmjs.com/typescript</link></phrase>) est un langage de programmation
typé.
Toute structure utilisée est décrite avec un schéma que TypeScript valide.
Nous sommes prévenu·e·s des erreurs avant même d&#8217;avoir exécuté notre code
car l&#8217;outillage sait si on manipule des données qui existent.</simpara>
<simpara>Au final, le code est transformé en ECMAScript et exécuté en tant que tel.
Le code est tellement propre que nous pouvons arrêter d&#8217;utiliser TypeScript
du jour au lendemain et travailler sur le code qu&#8217;il aura généré sans aucun problème.</simpara>
</section>
</section>
<section xml:id="fs">
<title>Gérer des fichiers</title>
<simpara>Ces bibliothèques nous aident à écrire moins de lignes de code
pour des besoins quotidiens de manipulation de fichiers.</simpara>
<section xml:id="mkdirp">
<title>mkdirp</title>
<simpara><emphasis>mkdirp</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/mkdirp">npmjs.com/mkdirp</link></phrase>) est identique à la
commande Unix <literal>mkdir -p</literal>, c&#8217;est-à-dire que les répertoires seront créés récursivement
s&#8217;ils n&#8217;existent pas au préalable.</simpara>
<simpara>Si nous utilisions le module Node&#160;<literal>fs</literal>, nous devrions créer l&#8217;arborescence de
répertoires par nous-même, niveau par niveau.</simpara>
</section>
<section xml:id="rimraf">
<title>rimraf</title>
<simpara><emphasis>rimraf</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/rimraf">npmjs.com/rimraf</link></phrase>) est le pendant opposé de <emphasis>mkdirp</emphasis>.
Il supprime une arborescence de manière récursive.
C&#8217;est l&#8217;équivalent de la commande Unix&#160;<literal>rm -rf</literal>.</simpara>
<simpara>Si nous utilisions le module Node&#160;<literal>fs</literal>, nous devrions supprimer d&#8217;abord
les fichiers puis les répertoires, un par&#160;un.</simpara>
</section>
<section xml:id="glob">
<title>glob</title>
<simpara><emphasis>glob</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/glob">npmjs.com/glob</link></phrase>) est un utilitaire pour obtenir
une liste de fichiers en utilisant des motifs.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>glob.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {promisify} = require('util');
const glob = promisify(require('glob'));

glob('*.js').then(console.log);     <co xml:id="CO316-1"/>
glob('re*.js').then(console.log);   <co xml:id="CO316-2"/>
glob('sample.*').then(console.log); <co xml:id="CO316-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO316-1">
<para>Affiche une liste de fichiers dont l&#8217;extension est&#160;<literal>.js</literal>.</para>
</callout>
<callout arearefs="CO316-2">
<para>Affiche une liste de fichiers qui commencent par&#160;<literal>re</literal> et dont l&#8217;extension est&#160;<literal>.js</literal>.</para>
</callout>
<callout arearefs="CO316-3">
<para>Affiche une liste de fichiers qui s&#8217;appellent <literal>sample</literal>, peu importe leur extension.</para>
</callout>
</calloutlist>
</section>
<section xml:id="fs_extra">
<title>fs-extra</title>
<simpara><emphasis>fs-extra</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/fs-extra">npmjs.com/fs-extra</link></phrase>) est une collection
de fonctions pour gérer les opérations de fichiers.
Le module inclut <emphasis>rimraf</emphasis> et <emphasis>mkdirp</emphasis> en plus d&#8217;autres fonctions récursives,
pour copier, déplacer ou supprimer des fichiers.</simpara>
</section>
<section xml:id="graceful_fs">
<title>graceful-fs</title>
<simpara><emphasis>graceful-fs</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/graceful-fs">npmjs.com/graceful-fs</link></phrase>) est identique
au module Node&#160;<literal>fs</literal>.</simpara>
<simpara>La différence se situe sous le capot&#160;: le module gère les défaillances
du système et tente d&#8217;accéder à nouveau aux ressources demandées
si les erreurs sont liées à des problèmes de performance.</simpara>
<simpara>C&#8217;est un module à utiliser si notre application dépend fortement de la disponibilité
du système de fichiers et si celui-ci est fortement sollicité.</simpara>
</section>
<section xml:id="chokidar">
<title>chokidar</title>
<simpara><emphasis>chokidar</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/chokidar">npmjs.com/chokidar</link></phrase>) crée des observateurs du
système de fichiers.
Il gère les différences des systèmes d&#8217;exploitation et nous permet d&#8217;écrire
un seul et même code.</simpara>
<simpara>C&#8217;est la bibliothèque vers laquelle se tourner lorsque nous avons besoin
de déclencher des actions quand des fichiers sont modifiés.</simpara>
</section>
</section>
<section xml:id="databases">
<title>Stocker dans des bases de données</title>
<simpara>Node sait communiquer avec tout type de bases de données grâce à l&#8217;écosystème&#160;<literal>npm</literal>.
Préférez les modules faisant état de pilote natif/binaire&#160;–
le transfert de données n&#8217;en sera que plus rapide.</simpara>
<section xml:id="db_migrate">
<title>db-migrate</title>
<simpara><emphasis>db-migrate</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/db-migrate">npmjs.com/db-migrate</link></phrase>) est un outil de gestion
de migrations pour MySQL, SQLite, MongoDB et PostgreSQL.
À l&#8217;aide de scripts de migration, il rend reproductibles des changements
de structure dans une base de données&#160;– ajout ou suppression de champ, de table
ou d&#8217;index.</simpara>
</section>
<section xml:id="knex">
<title>knex</title>
<simpara><emphasis>knex</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/knex">npmjs.com/knex</link></phrase>) propose d&#8217;interagir et d&#8217;interroger
des bases de données SQL comme PostgreSQL, MariaDB, MySQL et SQLite.</simpara>
<simpara>Les requêtes s&#8217;écrivent en SQL pur ou en utilisant une API dite <quote>fluide</quote>,
pour ne pas écrire le SQL à la&#160;main.</simpara>
<formalpara>
<title>knex.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {join} = require('path');

const db = require('knex')({
  client: 'sqlite3',                            <co xml:id="CO317-1"/>
  connection: {
    filename: join(__dirname, 'sample.sqlite')  <co xml:id="CO317-2"/>
  }
});

Promise.all([
  db('books').where('title', 'like', '%Node%'), <co xml:id="CO317-3"/>
  db('books').count('title as count').first(),  <co xml:id="CO317-4"/>
])
.then(([rows, count]) =&gt; {
  console.log(rows);                            <co xml:id="CO317-5"/>
  console.log(count);                           <co xml:id="CO317-6"/>
  db.destroy();
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO317-1">
<para>Indique que nous allons nous connecter à une base de données de type SQLite.</para>
</callout>
<callout arearefs="CO317-2">
<para>Spécifie l&#8217;emplacement de la base de données.</para>
</callout>
<callout arearefs="CO317-3">
<para>Effectue une recherche floue sur les lignes dont le titre contient le mot&#160;<literal>'Node'</literal>.</para>
</callout>
<callout arearefs="CO317-4">
<para>Compte le nombre de lignes et retourne le premier (et seul) résultat de la requête.</para>
</callout>
<callout arearefs="CO317-5">
<para>Affiche <literal>[ { id: 1, title: 'Node.js ', created_at: '2018-07-11 10:34:33' } ]</literal>.</para>
</callout>
<callout arearefs="CO317-6">
<para>Affiche <literal>{ count: 3 }</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="bookshelf">
<title>bookshelf</title>
<simpara><emphasis>bookshelf</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/bookshelf">npmjs.com/bookshelf</link></phrase>) est une surcouche à <link linkend="knex"><emphasis>Knex</emphasis></link>,
écrite par les mêmes personnes.
Elle modélise les données sous forme d&#8217;objets et de schémas (ORM) pour
automatiser des actions et ajouter plus d'<quote>intelligence</quote> à notre modèle de données.</simpara>
</section>
<section xml:id="sequelize">
<title>sequelize</title>
<simpara><emphasis>sequelize</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/sequelize">npmjs.com/sequelize</link></phrase>) est une alternative
à <link linkend="knex"><emphasis>Knex</emphasis></link> et à <link linkend="bookshelf"><emphasis>Bookshelf</emphasis></link>.
Elle gère des schémas de données de manière optionnelle, mais aussi les migrations.
Ces dernières permettent de scripter les changements de structure d&#8217;une base
de données, de les tester en local avant de les jouer en production.</simpara>
</section>
<section xml:id="mongoose">
<title>mongoose</title>
<simpara><emphasis>mongoose</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/mongoose">npmjs.com/mongoose</link></phrase>) sert à composer des modèles
de données pour la base de données MongoDB&#160;– dite NoSQL.
Elle définit des comportements annexes comme des mixins
ou des <emphasis>accesseurs</emphasis> dynamiques.</simpara>
</section>
<section xml:id="levelup">
<title>levelup</title>
<simpara><emphasis>LevelDB</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/levelup">npmjs.com/levelup</link></phrase>) est un système de bases de
données clé/valeur extrêmement modulaire.
Le stockage se fait sur disque par défaut, mais il peut évoluer vers du stockage
en mémoire (module <literal>memdown</literal>) ou même dans un navigateur web (avec IndexedDB).</simpara>
<formalpara>
<title>levelup.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const levelup = require('levelup');
const memdown = require('memdown');
const encode = require('encoding-down');

const db = levelup(encode(memdown(),          <co xml:id="CO318-1"/>
  { valueEncoding: 'json' }
));

Promise.all([
  db.put('node', {title: 'Node.js'}),
  db.put('css', {title: 'CSS maintenables'}),
  db.put('opensky', {title: 'Open Sky'}),
])
.then(() =&gt; db.get('node'))                   <co xml:id="CO318-2"/>
.then(result =&gt; {
  console.log(result);                        <co xml:id="CO318-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO318-1">
<para>Crée la connexion à la base de données en mémoire.</para>
</callout>
<callout arearefs="CO318-2">
<para>Recherche un enregistrement après l&#8217;avoir enregistré en mémoire.</para>
</callout>
<callout arearefs="CO318-3">
<para>Affiche <literal>{ title: 'Node.js' }</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="redis">
<title>redis</title>
<simpara><emphasis>redis</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/redis">npmjs.com/redis</link></phrase>) est un gestionnaire de bases de données
clés/valeurs distribuées et performantes.</simpara>
<formalpara>
<title>redis.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const client = require('redis').createClient();
const hset = require('util').promisify(client.hset);

Promise.all([
  hset('book:node', 'title', 'Node.js'),
  hset('book:css', 'title', 'CSS maintenables'),
  hset('book:opensky', 'title', 'Open Sky')
])
.then(() =&gt; {
  console.log('Enregistrements créés.');
  client.end();
});</programlisting>
</para>
</formalpara>
<simpara><emphasis>hiredis</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/hiredis">npmjs.com/hiredis</link></phrase>) est un pilote C&#43;&#43; qui
augmente les performances de connexion à une base de données&#160;<emphasis>redis</emphasis>.</simpara>
</section>
<section xml:id="elasticsearch">
<title>elasticsearch</title>
<simpara><emphasis>elasticsearch</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/elasticsearch">npmjs.com/elasticsearch</link></phrase>) est un client pour
simplifier la connexion à une base de données Elasticsearch.
Une base de ce type est particulièrement adaptée à l&#8217;indexation des données,
pour des recherches performantes et complexes.</simpara>
</section>
</section>
<section xml:id="cli">
<title>Ligne de commande</title>
<simpara>Ces modules complètent le panorama déjà très varié présenté
dans le <link linkend="../chapter-08/index.adoc">chapitre&#160;8</link>.</simpara>
<section xml:id="yargs_parser">
<title>yargs-parser</title>
<simpara><emphasis>yargs-parser</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/yargs-parser">npmjs.com/yargs-parser</link></phrase>) est le module
d&#8217;interprétation des arguments utilisé par le module <emphasis>yargs</emphasis>.
C&#8217;est une alternative plus puissante et plus complexe que <emphasis>minimist</emphasis>.</simpara>
</section>
<section xml:id="args_2">
<title>args</title>
<simpara><emphasis>args</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/args">npmjs.com/args</link></phrase>) est un module minimaliste
pour interpréter les arguments, les structurer et afficher une aide
claire à nos utilisateurs et utilisatrices.</simpara>
<simpara>Cerise sur le gâteau&#160;: le module suggère un choix de commande en cas
d&#8217;erreur de frappe.</simpara>
</section>
<section xml:id="caporal">
<title>caporal</title>
<simpara><emphasis>caporal</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/caporal">npmjs.com/caporal</link></phrase>) est un framework complet
pour bâtir des applications en ligne de commandes.
Il gère les classiques arguments et options ainsi que les sous-commandes,
les types de valeurs et l&#8217;autocomplétion.</simpara>
</section>
<section xml:id="promptly">
<title>promptly</title>
<simpara><emphasis>promptly</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/promptly">npmjs.com/promptly</link></phrase>) est un utilitaire pour
poser des questions, valider et travailler avec les réponses obtenues.
Il est minimaliste et a un faible nombre de dépendances.</simpara>
</section>
<section xml:id="supports_color">
<title>supports-color</title>
<simpara><emphasis>supports-color</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/supports-color">npmjs.com/supports-color</link></phrase>) vérifie
si le contexte d&#8217;exécution du programme en ligne de commande
supporte les couleurs.</simpara>
<simpara>Cela nous évite d&#8217;envoyer des codes ANSI, qui, seraient affichés
au lieu d&#8217;être interprétés comme des couleurs.</simpara>
</section>
</section>
<section xml:id="webapp">
<title>Applications&#160;web</title>
<simpara>Ces modules complètent le panorama déjà très varié présenté
dans le <link linkend="../chapter-07/index.adoc">chapitre&#160;7</link>.</simpara>
<section xml:id="fastify">
<title>fastify</title>
<simpara><emphasis>fastify</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/fastify">npmjs.com/fastify</link></phrase>) est un framework
inspiré de <emphasis>Express</emphasis>.
Il se focalise sur la simplicité de l&#8217;expérience de développement et sur
de hautes performances.
Il sait valider les données sortantes à l&#8217;aide de schémas.</simpara>
<simpara>Pour aller au-delà des données, il se combine avec le module <emphasis>point-of-view</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/point-of-view">npmjs.com/point-of-view</link></phrase>).
Vous avez ainsi accès à l&#8217;utilisation de <link linkend="templating">modules de templating</link>.</simpara>
</section>
<section xml:id="passport">
<title>passport</title>
<simpara><emphasis>passport</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/passport">npmjs.com/passport</link></phrase>) est une bibliothèque modulaire
d&#8217;authentification pour <emphasis>Express</emphasis>.
Elle se branche à différents mécanismes pour vérifier les utilisateurs&#160;:
utilisateur et mot de passe, compte GitHub, Twitter, OAuth, etc.</simpara>
<simpara>Les sessions d&#8217;utilisateurs se gèrent à côté&#160;– pour mémoriser
qui est connecté ou non, et avec quel identifiant sécurisé et unique.</simpara>
<simpara>Référez-vous à sa documentation pour des exemples détaillés d&#8217;utilisation.</simpara>
</section>
<section xml:id="restify">
<title>restify</title>
<simpara><emphasis>restify</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/restify">npmjs.com/restify</link></phrase>) est un framework web
spécialisé dans la création d&#8217;API&#160;HTTP.</simpara>
<simpara>Il gère les versions de routes et expose un client permettant de consommer
des données sur d&#8217;autres API&#160;REST&#160;– proxy.</simpara>
<formalpara>
<title>restify.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const restify = require('restify');
const {NotFoundError} = require('restify-errors');
const server = restify.createServer();
const countries = require('i18n-iso-countries');

const responseV1 = (request, response, next) =&gt; {
  const codes = countries.getNames('en');

  if (codes[request.params.code] === undefined) {
    return next(new NotFoundError('Country not found'));
  }

  response.send(200, codes[request.params.code]);

  next();
};

server.get({ path: '/:code', version: '1.0.0' }, responseV1);
server.listen(8080, () =&gt; {
  console.log('Serveur accessible sur %s', server.url);
});</programlisting>
</para>
</formalpara>
</section>
<section xml:id="faye">
<title>faye</title>
<simpara><emphasis>faye</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/faye">npmjs.com/faye</link></phrase>) est un serveur WebSocket pour communiquer
en temps réel entre un client et un serveur.
Il sait débrayer vers Ajax ou JSON-P pour les navigateurs anciens qui
ne comprennent pas WebSocket.</simpara>
<formalpara>
<title>faye.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const http = require('http');
const faye = require('faye');

const ws = new faye.NodeAdapter({
  mount: '/realtime', timeout: 10
});

const server = http.createServer((req, res) =&gt; {
  res.writeHead(200, { 'Content-Tyoe': 'text/plain' });
  res.end('Contenu non temps réel');
});

ws.attach(server);
server.listen(3000);</programlisting>
</para>
</formalpara>
<simpara>Cet exemple de serveur minimaliste expose un point d&#8217;entrée auquel on peut accéder
via le client <emphasis>Faye</emphasis>, dans un navigateur ou via un autre script&#160;Node.</simpara>
<simpara>Tout message émit par un client sera relayé auprès des autres clients
connectés.</simpara>
</section>
<section xml:id="swagger_client">
<title>swagger-client</title>
<simpara><emphasis>swagger-client</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/swagger-client">npmjs.com/swagger-client</link></phrase>) sert à valider
des requêtes et des réponses HTTP en fonction de schémas qui répondent
à la spécification OpenAPI.</simpara>
<simpara>Cette spécification permet entre autres de gérer automatiquement les routes
de notre application pour nous concentrer sur le code qui génère les données de sortie.</simpara>
</section>
</section>
<section xml:id="templating">
<title>Modules front-end et templating</title>
<simpara>Les bibliothèques de templating proposent d&#8217;associer
une structure de données à une logique de présentation.
Pour la plupart, elles fonctionnent aussi bien sous Node que dans les navigateurs,
ce qui est une excellente nouvelle pour partager des comportements d&#8217;affichage
entre les deux environnements.</simpara>
<simpara>Tous les modules que nous allons voir généreront cette sortie&#160;HTML&#160;:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Template demo&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;ul&gt;
    &lt;li&gt;CSS maintenables&lt;/li&gt;
    &lt;li&gt;Node.js&lt;/li&gt;
    &lt;li&gt;Open Sky&lt;/li&gt;
  &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
<section xml:id="nunjucks">
<title>nunjucks</title>
<simpara><emphasis>nunjucks</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/nunjucks">npmjs.com/nunjucks</link></phrase>) est un portage de <emphasis>Jinja</emphasis>,
bibliothèque bien connue par les adeptes de Python.
Sa syntaxe inclut des fonctionnalités comme les filtres, les blocs ou
l&#8217;héritage de gabarit.</simpara>
<formalpara>
<title>template.html</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;{{ title | default('Template demo') | capitalize }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{% set items = ['Node.js', 'CSS maintenables', 'Open Sky'] -%}
&lt;ul&gt;
{% for item in items|sort -%}
  &lt;li&gt;{{ item }}&lt;/li&gt;
{% endfor -%}
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="handlebars">
<title>handlebars</title>
<simpara><emphasis>handlebars</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/handlebars">npmjs.com/handlebars</link></phrase>) et son prédécesseur <emphasis>mustache</emphasis>
sont les vétérans du templating Node.
Leur parti pris est de proposer le minimum de logique afin que celle-ci
reste au plus près des données.</simpara>
<simpara><emphasis>handlebars</emphasis> sait aussi précompiler les gabarits sous forme de fonctions ECMAScript.</simpara>
<formalpara>
<title>template.hbs</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;{{#if title}}{{title}}{{else}}Template demo{{/if}}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;ul&gt;
  {{#each items}}
  &lt;li&gt;{{.}}&lt;/li&gt;
  {{/each}}
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="pug">
<title>pug</title>
<simpara><emphasis>pug</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/pug">npmjs.com/pug</link></phrase>) opte pour un parti minimaliste qui
repose entièrement sur l&#8217;indentation.
Son mécanisme de blocs facilite la réutilisation d&#8217;éléments de présentation.</simpara>
<formalpara>
<title>template.pug</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">doctype html
html
  head
    title= title || 'Template demo'
  body
    ul
      each item in ['Node.js', 'CSS maintenables', 'Open Sky']
        li= item</programlisting>
</para>
</formalpara>
</section>
<section xml:id="ejs">
<title>ejs</title>
<simpara><emphasis>ejs</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/ejs">npmjs.com/ejs</link></phrase>) part du principe qu&#8217;il n&#8217;y a pas besoin
d&#8217;un langage de templating autre qu&#8217;ECMAScript.
Donc c&#8217;est tout simplement ce qui vous sera proposé, impliquant de ce fait
une faible courbe d&#8217;apprentissage.</simpara>
<formalpara>
<title>template.ejs</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;%= typeof title === 'string' ? title : 'Template demo' %&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;ul&gt;
  &lt;% ['Node.js', 'CSS maintenables', 'Open Sky'].forEach((item) =&gt; { -%&gt;
  &lt;li&gt;&lt;%= item %&gt;&lt;/li&gt;
  &lt;% }); -%&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="react_2">
<title>react</title>
<simpara><emphasis>React</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/react">npmjs.com/react</link></phrase>) est une bibliothèque de présentation
dite <quote>réactive</quote> et orientée composants.
Elle génère un arbre visuel à partir de données passées en entrée.
Cet arbre est ensuite transformé en HTML, en interface iOS ou Android, entre autres.</simpara>
<formalpara>
<title>template.jsx</title>
<para>
<programlisting language="jsx" linenumbering="unnumbered">'use strict';

const React = require('react');

const BookList = ({books=[]}) =&gt; {
  return (&lt;ul&gt;
    {books.map((bookName, i) =&gt; (
      &lt;li key={i}&gt;{bookName}&lt;/li&gt;
    ))}
  &lt;/ul&gt;);
}

module.exports = ({title, books}) =&gt; {
  return (
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;{title || 'Template demo'}&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;BookList books={books} /&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  );
};</programlisting>
</para>
</formalpara>
</section>
<section xml:id="storybook">
<title>storybook</title>
<simpara><emphasis>storybook</emphasis> (<phrase role="URL"><link xl:href="https://github.com/storybooks/storybook">github.com/storybooks/storybook</link></phrase>) complète <link linkend="react">React</link>
et d&#8217;autres frameworks de <emphasis>templating</emphasis> en créant un catalogue de composants
auto-documentés.
Les composants sont affichés en même temps que le code nécessaire pour les utiliser
dans une autre application.</simpara>
</section>
</section>
<section xml:id="testing">
<title>Tester notre code</title>
<simpara>Le module <literal>assert</literal> intégré à Node suffit pour démarrer.
Il existe cependant tout un outillage pour tester notre code à destination de
Node (tests unitaires) ou des navigateurs (tests fonctionnels) ainsi que pour
écrire des assertions plus facilement.</simpara>
<section xml:id="tape">
<title>tape</title>
<simpara><emphasis>tape</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/tape">npmjs.com/tape</link></phrase>) est une bibliothèque
d&#8217;exécution de tests minimaliste qui se base sur le
<emphasis>Test Anything Protocol</emphasis> (<emphasis>TAP</emphasis>, <phrase role="URL"><link xl:href="https://testanything.org">testanything.org</link></phrase>).
Elle embarque aussi le minimum vital pour écrire des assertions.</simpara>
<formalpara>
<title>tape.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const test = require('tape');

test('Date test', (t) =&gt; {                             <co xml:id="CO319-1"/>
  t.plan(1);

  t.ok(Date.now() &gt; new Date('2013-03-24').getTime()); <co xml:id="CO319-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO319-1">
<para>Création d&#8217;un test.</para>
</callout>
<callout arearefs="CO319-2">
<para>Écriture d&#8217;une assertion.</para>
</callout>
</calloutlist>
</section>
<section xml:id="chai">
<title>chai</title>
<simpara><emphasis>chai</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/chai">npmjs.com/chai</link></phrase>) est une bibliothèque poussée d&#8217;assertions.
Son mécanisme chaîne permet de quasiment écrire des phrases pour exprimer
l&#8217;intention des choses à vérifier.</simpara>
<formalpara>
<title>chai.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {expect} = require('chai');

expect([1, 2]).to.be.an('array');             <co xml:id="CO320-1"/>
expect([1, 2]).to.deep.equal([1, 2]);         <co xml:id="CO320-2"/>
expect({}).to.be.an('object').and.to.be.empty;<co xml:id="CO320-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO320-1">
<para>Vérification du type d&#8217;une variable.</para>
</callout>
<callout arearefs="CO320-2">
<para>Vérification stricte de valeur d&#8217;une variable.</para>
</callout>
<callout arearefs="CO320-3">
<para>Double vérification&#160;– il s&#8217;agit bien d&#8217;objet et il est vide, sans clé/valeur.</para>
</callout>
</calloutlist>
</section>
<section xml:id="sinon">
<title>sinon</title>
<simpara><emphasis>sinon</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/sinon">npmjs.com/sinon</link></phrase>) est un compagnon idéal pour
intercepter le fonctionnement interne de variables et d&#8217;objets.
Le module propose de créer des écouteurs (<emphasis>spys</emphasis>) et des bouchons
(<emphasis>stubs</emphasis>, <emphasis>mocks</emphasis>).</simpara>
<simpara>En d&#8217;autres termes, vous prenez la main sur des portions de votre propre
code pendant la durée des tests.
Ces techniques servent pour simuler des erreurs et différentes situations
tout en observant le comportement réel de notre&#160;code.</simpara>
<formalpara>
<title>sinon.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const test = require('tape');
const sinon = require('sinon');

test('Date', (t) =&gt; {
  const d = Date;
  const dateTime = new Date('1983-03-24').getTime();
  const stub = sinon.stub(d, 'now');    <co xml:id="CO321-1"/>
  stub.returns(9999999999999);          <co xml:id="CO321-2"/>

  d.now();
  t.equal(stub.calledOnce, true);       <co xml:id="CO321-3"/>
  t.ok(stub.returnValues[0] &gt; dateTime);
  t.end();
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO321-1">
<para>Création d&#8217;un bouchon pour la méthode <literal>now()</literal> d&#8217;un objet&#160;<literal>Date</literal>.</para>
</callout>
<callout arearefs="CO321-2">
<para>Surcharge de la valeur retournée par la méthode <literal>d.now()</literal>.</para>
</callout>
<callout arearefs="CO321-3">
<para>Nous constatons le nombre de fois où la méthode <literal>d.now()</literal> a été appelée.</para>
</callout>
</calloutlist>
<simpara>Le module <emphasis>sinon-chai</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/sinon-chai">npmjs.com/sinon-chai</link></phrase>)
intègre <emphasis>sinon</emphasis> avec le mécanisme d&#8217;assertions de&#160;<link linkend="chai"><emphasis>chai</emphasis></link>.</simpara>
</section>
<section xml:id="nyc">
<title>nyc</title>
<simpara><emphasis>nyc</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/nyc">npmjs.com/nyc</link></phrase>) génère une couverture de code.
Il inspecte le code exécuté pendant les tests et en déduit les portions
qui n&#8217;ont pas été visitées et, donc, qui n&#8217;ont pas été testées.
C&#8217;est un indicateur utile pour attester de la fiabilité d&#8217;une base de code
– plus la couverture est importante, plus il y a de chances que les cas à la marge
aient été vérifiés.</simpara>
<figure>
<title>Couverture de code visualisée dans un terminal</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/nyc-cli.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>nyc cli</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis>nyc</emphasis> se greffe sur n&#8217;importe quelle bibliothèque d&#8217;exécution de tests.
Sous le capot, c&#8217;est le module <emphasis>istanbul</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/istanbul">npmjs.com/istanbul</link></phrase>)
qui est utilisé pour effectuer les calculs de couverture de&#160;code.</simpara>
<figure>
<title>Couverture de code visualisée dans un navigateur&#160;web</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/nyc-web.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>nyc web</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="karma">
<title>karma</title>
<simpara><emphasis>karma</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/karma">npmjs.com/karma</link></phrase>) pilote l&#8217;exécution de tests
depuis un ou plusieur(s) navigateurs web.
Ces derniers (Chrome, Safari, Firefox, etc.) se pilotent sur notre ordinateur,
depuis une machine virtuelle (VirtualBox) ou même par le biais d&#8217;un service
en ligne (<emphasis>SauceLabs</emphasis>, <emphasis>BrowserStack</emphasis>, etc.).</simpara>
<figure>
<title>Exemple d&#8217;exécution de tests en continu avec&#160;Karma</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/karma.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>karma</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="supertest">
<title>supertest</title>
<simpara><emphasis>supertest</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/supertest">npmjs.com/supertest</link></phrase>) sert à tester une interface HTTP.
Le module envoie des requêtes et nos assertions vérifient qu&#8217;elles retournent
bien ce qui est attendu&#160;– code HTTP, structure de réponse etc.</simpara>
<simpara>Je trouve ce module pratique pour tester des choses qui seraient difficiles
à couvrir uniquement avec des tests unitaires.</simpara>
</section>
</section>
<section xml:id="internet-of-things">
<title>Objets connectés</title>
<simpara>Node a bénéficié de l&#8217;engouement autour des objets connectés grâce à sa nature
asynchrone et à sa légèreté.
C&#8217;est une plate-forme de choix pour dialoguer ou embarquer dans des
nano-ordinateurs, réfrigérateurs et autres ampoules connectées.</simpara>
<section xml:id="nitrogen">
<title>nitrogen</title>
<simpara><emphasis>nitrogen</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/nitrogen">npmjs.com/nitrogen</link></phrase>) gère les interactions entre
différents périphériques, sur un même réseau local et à travers Internet.</simpara>
<simpara>La bibliothèque se base sur un mécanisme déclaratif de fonctionnalités et de
terminaux ainsi que la publication de messages.</simpara>
</section>
<section xml:id="serialport">
<title>serialport</title>
<simpara><emphasis>serialport</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/serialport">npmjs.com/serialport</link></phrase>) est la bibliothèque de base
pour communiquer avec le <emphasis>port série</emphasis> d&#8217;un appareil.
Un câble USB suffit ensuite pour envoyer nos instructions à cet appareil.</simpara>
</section>
<section xml:id="firmata">
<title>firmata</title>
<simpara><emphasis>firmata</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/firmata">npmjs.com/firmata</link></phrase>) est un <emphasis>firmware</emphasis>, un protocole
de communication, ainsi qu&#8217;une bibliothèque de communication pour microcontrôleur
Arduino.</simpara>
<simpara>Le module Node apprend ainsi à communiquer avec un Arduino préalablement
flashé avec Firmata.
Cela nous permet notamment d&#8217;écrire des applications en JavaScript au lieu
d&#8217;utiliser&#160;du&#160;C.</simpara>
</section>
<section xml:id="johnny_five">
<title>johnny-five</title>
<simpara><emphasis>johnny-five</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/johnny-five">npmjs.com/johnny-five</link></phrase>) est une bibliothèque
haut&#160;niveau pour Arduino, Raspberry&#160;Pi et tout autre microcontrôleur.
Elle simplifie les interactions avec des moteurs, des servo-contrôleurs,
des capteurs etc.</simpara>
</section>
<section xml:id="node_red">
<title>node-red</title>
<simpara><emphasis>node-red</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/node-red">npmjs.com/node-red</link></phrase>) est une interface visuelle
pour programmer des flux de données entre objets connectés.
Le projet émane d&#8217;employé·e·s&#160;d&#8217;IBM.</simpara>
<simpara>L&#8217;exécutable démarre un serveur web dont l&#8217;interface nous sert à relier
des sources de données, des réactions à des événements avec des objets prêts à
recevoir les instructions.</simpara>
</section>
</section>
<section xml:id="accessibilité">
<title>Accessibilité</title>
<simpara>L&#8217;écosystème&#160;<literal>npm</literal> a participé à un essor d&#8217;outillage lié à l&#8217;accessibilité
d&#8217;applications web.
Auparavant, les outils étaient difficilement automatisables.</simpara>
<section xml:id="a11y">
<title>a11y</title>
<simpara><emphasis>a11y</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/a11y">npmjs.com/a11y</link></phrase>) est un automate d&#8217;inspection de pages web.
Il détecte des problèmes de contrastes, de calques qui masquent du contenu
ou d&#8217;éléments qui ne seraient pas navigables au clavier, entre autres.</simpara>
<simpara>C&#8217;est un excellent outil pour améliorer la qualité d&#8217;une application tout en
l&#8217;ouvrant à un public trop souvent mis de&#160;côté.</simpara>
<screen>$ npx a11y https://oncletom.io
  ✖ Controls and media elements should have labels

  #search &gt; .form-control


✔ This element does not support ARIA roles
✔ Elements with ARIA roles must be in the correct scope
✔ This element has an invalid ARIA attribute
✔ ARIA state and property values must be valid</screen>
</section>
<section xml:id="a11y_css">
<title>a11y.css</title>
<simpara><emphasis>a11y.css</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/a11y.css">npmjs.com/a11y.css</link></phrase>) est une feuille de styles CSS
à injecter dans une page web pour rendre visible des incohérences.
Parmi ces dernières, nous retrouvons des boutons sans intitulé, l&#8217;absence
de langue du document ou encore l&#8217;absence de bouton de validation de formulaire
ou de texte alternatif d&#8217;images.</simpara>
</section>
<section xml:id="lighthouse">
<title>lighthouse</title>
<simpara><emphasis>lighthouse</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/lighthouse">npmjs.com/lighthouse</link></phrase>) est l&#8217;outil d&#8217;analyse de
performances, de référencement (SEO) et d&#8217;accessibilité embarqué dans
le navigateur web Google&#160;Chrome.</simpara>
<simpara>Ce module&#160;<literal>npm</literal> le rend utilisable depuis un terminal et écrit le rapport
dans un fichier&#160;HTML.</simpara>
</section>
<section xml:id="storybook_addon_a11y">
<title>storybook-addon-a11y</title>
<simpara><emphasis>storybook-addon-a11y</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/storybook-addon-a11y">npmjs.com/storybook-addon-a11y</link></phrase>)
est une extension au module <link linkend="storybook"><emphasis>storybook</emphasis></link>.
Le module signale les problèmes d&#8217;accessibilité au niveau de chaque composant.
Le suivi est ainsi fait en continu, au plus proche des composants distribués
et utilisés dans les applications.</simpara>
</section>
</section>
<section xml:id="travailler_avec_des_images_des_sons_et_des_vidéos">
<title>Travailler avec des images, des sons et des vidéos</title>
<section xml:id="sharp">
<title>sharp</title>
<simpara><emphasis>sharp</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/sharp">npmjs.com/sharp</link></phrase>) est un module de redimensionnement
et de transformation d&#8217;images JPG, PNG et WebP écrit en JavaScript et&#160;C&#43;&#43;.
Il ne nécessite pas de programme externe et est compatible avec une approche
en flux.</simpara>
</section>
</section>
</appendix>
</book>